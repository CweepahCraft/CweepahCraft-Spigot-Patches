From 494f6ffb196cc9297b0531cfd2f49237cc7e18bd Mon Sep 17 00:00:00 2001
From: Jacob Martin <jjm_223@hotmail.com>
Date: Tue, 22 Aug 2017 15:40:26 -0500
Subject: [PATCH 01/21] Prepare for our NMS patches

---
 applyPatches.sh                                    |    6 +-
 makePatches.sh                                     |   11 +-
 nms-patches/Advancement.patch                      |   10 -
 nms-patches/AdvancementDataPlayer.patch            |   50 -
 nms-patches/AdvancementRewards.patch               |   52 -
 nms-patches/Advancements.patch                     |   11 -
 nms-patches/Block.patch                            |   67 -
 nms-patches/BlockButtonAbstract.patch              |  110 --
 nms-patches/BlockCactus.patch                      |   33 -
 nms-patches/BlockCake.patch                        |   22 -
 nms-patches/BlockCauldron.patch                    |  175 --
 nms-patches/BlockChorusFlower.patch                |   92 --
 nms-patches/BlockCocoa.patch                       |   35 -
 nms-patches/BlockCommand.patch                     |   27 -
 nms-patches/BlockConcretePowder.patch              |   22 -
 nms-patches/BlockCrops.patch                       |   35 -
 nms-patches/BlockDaylightDetector.patch            |   10 -
 nms-patches/BlockDiodeAbstract.patch               |   30 -
 nms-patches/BlockDispenser.patch                   |   18 -
 nms-patches/BlockDoor.patch                        |   37 -
 nms-patches/BlockDragonEgg.patch                   |   30 -
 nms-patches/BlockDropper.patch                     |   41 -
 nms-patches/BlockEnderPortal.patch                 |   22 -
 nms-patches/BlockFire.patch                        |  156 --
 nms-patches/BlockFlowing.patch                     |   66 -
 nms-patches/BlockFluids.patch                      |   27 -
 nms-patches/BlockGrass.patch                       |   77 -
 nms-patches/BlockIce.patch                         |   14 -
 nms-patches/BlockJukeBox.patch                     |   14 -
 nms-patches/BlockLeaves.patch                      |   26 -
 nms-patches/BlockLever.patch                       |   32 -
 nms-patches/BlockMagma.patch                       |   12 -
 nms-patches/BlockMinecartDetector.patch            |   29 -
 nms-patches/BlockMobSpawner.patch                  |   22 -
 nms-patches/BlockMonsterEggs.patch                 |   20 -
 nms-patches/BlockMushroom.patch                    |   55 -
 nms-patches/BlockMycel.patch                       |   58 -
 nms-patches/BlockNetherWart.patch                  |   12 -
 nms-patches/BlockOre.patch                         |   45 -
 nms-patches/BlockPiston.patch                      |   98 --
 nms-patches/BlockPlant.patch                       |   14 -
 nms-patches/BlockPortal.patch                      |  144 --
 nms-patches/BlockPoweredRail.patch                 |   25 -
 nms-patches/BlockPressurePlateAbstract.patch       |   31 -
 nms-patches/BlockPressurePlateBinary.patch         |   38 -
 nms-patches/BlockPressurePlateWeighted.patch       |   43 -
 nms-patches/BlockPumpkin.patch                     |   81 -
 nms-patches/BlockRedstoneLamp.patch                |   47 -
 nms-patches/BlockRedstoneOre.patch                 |  103 --
 nms-patches/BlockRedstoneTorch.patch               |   62 -
 nms-patches/BlockRedstoneWire.patch                |   27 -
 nms-patches/BlockReed.patch                        |   16 -
 nms-patches/BlockSapling.patch                     |  126 --
 nms-patches/BlockShulkerBox.patch                  |   55 -
 nms-patches/BlockSkull.patch                       |  123 --
 nms-patches/BlockSnow.patch                        |   14 -
 nms-patches/BlockSnowBlock.patch                   |   14 -
 nms-patches/BlockSoil.patch                        |   58 -
 nms-patches/BlockStationary.patch                  |   40 -
 nms-patches/BlockStem.patch                        |   41 -
 nms-patches/BlockTNT.patch                         |   14 -
 nms-patches/BlockTallPlant.patch                   |   14 -
 nms-patches/BlockTrapdoor.patch                    |   30 -
 nms-patches/BlockTripwire.patch                    |   52 -
 nms-patches/BlockTripwireHook.patch                |   29 -
 nms-patches/BlockVine.patch                        |   71 -
 nms-patches/BlockWaterLily.patch                   |   11 -
 nms-patches/ChatBaseComponent.patch                |   11 -
 nms-patches/ChatModifier.patch                     |   45 -
 nms-patches/Chunk.patch                            |  206 ---
 nms-patches/ChunkProviderGenerate.patch            |   14 -
 nms-patches/ChunkProviderServer.patch              |  182 ---
 nms-patches/ChunkRegionLoader.patch                |  249 ---
 nms-patches/ChunkSection.patch                     |   36 -
 nms-patches/CommandBlockListenerAbstract.patch     |  209 ---
 nms-patches/CommandDebug.patch                     |   32 -
 nms-patches/CommandExecute.patch                   |   58 -
 nms-patches/CommandGamemode.patch                  |   34 -
 nms-patches/CommandGamerule.patch                  |   23 -
 nms-patches/CommandSpreadPlayers.patch             |   51 -
 nms-patches/CommandTeleport.patch                  |   23 -
 nms-patches/CommandTp.patch                        |   45 -
 nms-patches/Container.patch                        |  136 --
 nms-patches/ContainerAnvil.patch                   |  115 --
 nms-patches/ContainerBeacon.patch                  |   47 -
 nms-patches/ContainerBrewingStand.patch            |   53 -
 nms-patches/ContainerChest.patch                   |   60 -
 nms-patches/ContainerDispenser.patch               |   53 -
 nms-patches/ContainerEnchantTable.patch            |  206 ---
 nms-patches/ContainerFurnace.patch                 |   50 -
 nms-patches/ContainerHopper.patch                  |   44 -
 nms-patches/ContainerHorse.patch                   |   34 -
 nms-patches/ContainerMerchant.patch                |   37 -
 nms-patches/ContainerPlayer.patch                  |   70 -
 nms-patches/ContainerShulkerBox.patch              |   34 -
 nms-patches/ContainerWorkbench.patch               |   60 -
 nms-patches/CraftingManager.patch                  |   57 -
 nms-patches/CrashReport.patch                      |   10 -
 nms-patches/CustomFunction.patch                   |   19 -
 nms-patches/CustomFunctionData.patch               |   45 -
 nms-patches/DamageSource.patch                     |   21 -
 nms-patches/DataInspectorBlockEntity.patch         |   12 -
 nms-patches/DataPaletteBlock.patch                 |   25 -
 nms-patches/DataWatcher.patch                      |   20 -
 nms-patches/DedicatedServer.patch                  |  268 ----
 nms-patches/DispenseBehaviorItem.patch             |   76 -
 nms-patches/DispenseBehaviorProjectile.patch       |   54 -
 nms-patches/DispenserRegistry.patch                |  540 -------
 nms-patches/DragonControllerManager.patch          |   41 -
 nms-patches/Enchantment.patch                      |   23 -
 nms-patches/EnchantmentFrostWalker.patch           |   25 -
 nms-patches/EnchantmentThorns.patch                |   11 -
 nms-patches/Entity.patch                           |  721 ---------
 nms-patches/EntityAgeable.patch                    |   43 -
 nms-patches/EntityAnimal.patch                     |   36 -
 nms-patches/EntityAreaEffectCloud.patch            |   62 -
 nms-patches/EntityArmorStand.patch                 |  124 --
 nms-patches/EntityArrow.patch                      |   88 -
 nms-patches/EntityBoat.patch                       |  154 --
 nms-patches/EntityChicken.patch                    |   24 -
 nms-patches/EntityCow.patch                        |   40 -
 nms-patches/EntityCreature.patch                   |   29 -
 nms-patches/EntityCreeper.patch                    |   82 -
 nms-patches/EntityDamageSourceIndirect.patch       |   13 -
 nms-patches/EntityEgg.patch                        |   62 -
 nms-patches/EntityEnderCrystal.patch               |   52 -
 nms-patches/EntityEnderDragon.patch                |  114 --
 nms-patches/EntityEnderPearl.patch                 |   65 -
 nms-patches/EntityEnderman.patch                   |   66 -
 nms-patches/EntityEvokerFangs.patch                |   12 -
 nms-patches/EntityExperienceOrb.patch              |   82 -
 nms-patches/EntityFallingBlock.patch               |   54 -
 nms-patches/EntityFireball.patch                   |   72 -
 nms-patches/EntityFireworks.patch                  |   45 -
 nms-patches/EntityFishingHook.patch                |  117 --
 nms-patches/EntityGhast.patch                      |   12 -
 nms-patches/EntityHanging.patch                    |  175 --
 nms-patches/EntityHorseAbstract.patch              |  110 --
 nms-patches/EntityHorseChestedAbstract.patch       |   19 -
 nms-patches/EntityHuman.patch                      |  405 -----
 nms-patches/EntityInsentient.patch                 |  198 ---
 nms-patches/EntityIronGolem.patch                  |   11 -
 nms-patches/EntityItem.patch                       |  118 --
 nms-patches/EntityItemFrame.patch                  |   14 -
 nms-patches/EntityLargeFireball.patch              |   49 -
 nms-patches/EntityLeash.patch                      |   56 -
 nms-patches/EntityLightning.patch                  |   93 --
 nms-patches/EntityLiving.patch                     |  651 --------
 nms-patches/EntityLlamaSpit.patch                  |   19 -
 nms-patches/EntityMinecartAbstract.patch           |  227 ---
 nms-patches/EntityMinecartCommandBlock.patch       |   12 -
 nms-patches/EntityMinecartContainer.patch          |   79 -
 nms-patches/EntityMonster.patch                    |   26 -
 nms-patches/EntityMushroomCow.patch                |   25 -
 nms-patches/EntityOcelot.patch                     |   40 -
 nms-patches/EntityPainting.patch                   |   10 -
 nms-patches/EntityParrot.patch                     |  103 --
 nms-patches/EntityPig.patch                        |   50 -
 nms-patches/EntityPlayer.patch                     |  776 ---------
 nms-patches/EntityPotion.patch                     |  109 --
 nms-patches/EntityProjectile.patch                 |   31 -
 nms-patches/EntityRabbit.patch                     |   41 -
 nms-patches/EntitySheep.patch                      |   73 -
 nms-patches/EntityShulker.patch                    |   42 -
 nms-patches/EntityShulkerBullet.patch              |   40 -
 nms-patches/EntitySilverfish.patch                 |   26 -
 nms-patches/EntitySkeleton.patch                   |   19 -
 nms-patches/EntitySkeletonAbstract.patch           |   54 -
 nms-patches/EntitySkeletonWither.patch             |   19 -
 nms-patches/EntitySlice.patch                      |   29 -
 nms-patches/EntitySlime.patch                      |   40 -
 nms-patches/EntitySmallFireball.patch              |   61 -
 nms-patches/EntitySnowman.patch                    |   47 -
 nms-patches/EntitySpider.patch                     |   11 -
 nms-patches/EntityTNTPrimed.patch                  |   54 -
 nms-patches/EntityThrownExpBottle.patch            |   22 -
 nms-patches/EntityTippedArrow.patch                |   28 -
 nms-patches/EntityTracker.patch                    |   17 -
 nms-patches/EntityTrackerEntry.patch               |  179 ---
 nms-patches/EntityVex.patch                        |   19 -
 nms-patches/EntityVillager.patch                   |   64 -
 nms-patches/EntityWither.patch                     |   78 -
 nms-patches/EntityWitherSkull.patch                |   41 -
 nms-patches/EntityWolf.patch                       |   83 -
 nms-patches/EntityZombie.patch                     |   94 --
 nms-patches/EntityZombieVillager.patch             |   31 -
 nms-patches/ExpirableListEntry.patch               |   42 -
 nms-patches/Explosion.patch                        |  154 --
 nms-patches/FoodMetaData.patch                     |   74 -
 nms-patches/HandshakeListener.patch                |   70 -
 nms-patches/IDataManager.patch                     |    9 -
 nms-patches/IInventory.patch                       |   33 -
 nms-patches/IRecipe.patch                          |   11 -
 nms-patches/InventoryCraftResult.patch             |   57 -
 nms-patches/InventoryCrafting.patch                |   71 -
 nms-patches/InventoryEnderChest.patch              |   31 -
 nms-patches/InventoryHorseChest.patch              |   14 -
 nms-patches/InventoryLargeChest.patch              |   74 -
 nms-patches/InventoryMerchant.patch                |   66 -
 nms-patches/InventorySubcontainer.patch            |   64 -
 nms-patches/ItemArmor.patch                        |   47 -
 nms-patches/ItemBlock.patch                        |   11 -
 nms-patches/ItemBoat.patch                         |   25 -
 nms-patches/ItemBow.patch                          |   49 -
 nms-patches/ItemBucket.patch                       |  110 --
 nms-patches/ItemChorusFruit.patch                  |   35 -
 nms-patches/ItemDye.patch                          |   28 -
 nms-patches/ItemEnderPearl.patch                   |   35 -
 nms-patches/ItemFireball.patch                     |   17 -
 nms-patches/ItemFishingRod.patch                   |   37 -
 nms-patches/ItemFlintAndSteel.patch                |   15 -
 nms-patches/ItemHanging.patch                      |   32 -
 nms-patches/ItemLeash.patch                        |   35 -
 nms-patches/ItemMinecart.patch                     |   69 -
 nms-patches/ItemMonsterEgg.patch                   |   30 -
 nms-patches/ItemRecord.patch                       |   10 -
 nms-patches/ItemRedstone.patch                     |   11 -
 nms-patches/ItemReed.patch                         |   11 -
 nms-patches/ItemSkull.patch                        |   18 -
 nms-patches/ItemSnowball.patch                     |   33 -
 nms-patches/ItemStack.patch                        |  318 ----
 nms-patches/ItemWaterLily.patch                    |   18 -
 nms-patches/ItemWorldMap.patch                     |  111 --
 nms-patches/JsonList.patch                         |   47 -
 nms-patches/LoginListener.patch                    |  137 --
 nms-patches/MerchantRecipe.patch                   |   29 -
 nms-patches/MethodProfiler.patch                   |   72 -
 nms-patches/MinecraftServer.patch                  |  716 ---------
 nms-patches/MobEffectList.patch                    |   85 -
 nms-patches/MobSpawnerAbstract.patch               |   19 -
 nms-patches/NameReferencingFileConverter.patch     |   99 --
 nms-patches/NetworkManager.patch                   |   29 -
 nms-patches/PacketDataSerializer.patch             |   50 -
 nms-patches/PacketPlayInCloseWindow.patch          |   15 -
 nms-patches/PacketPlayOutWorldBorder.patch         |   15 -
 nms-patches/PacketStatusListener.patch             |  117 --
 nms-patches/PathfinderGoalBreakDoor.patch          |   15 -
 nms-patches/PathfinderGoalBreed.patch              |   49 -
 nms-patches/PathfinderGoalDefendVillage.patch      |   11 -
 nms-patches/PathfinderGoalEatTile.patch            |   34 -
 nms-patches/PathfinderGoalFollowOwner.patch        |   34 -
 nms-patches/PathfinderGoalHorseTrap.patch          |   37 -
 nms-patches/PathfinderGoalHurtByTarget.patch       |   19 -
 nms-patches/PathfinderGoalMakeLove.patch           |   23 -
 .../PathfinderGoalNearestAttackableTarget.patch    |   56 -
 ...nderGoalNearestAttackableTargetInsentient.patch |   11 -
 nms-patches/PathfinderGoalOwnerHurtByTarget.patch  |   11 -
 nms-patches/PathfinderGoalOwnerHurtTarget.patch    |   11 -
 nms-patches/PathfinderGoalPanic.patch              |   15 -
 nms-patches/PathfinderGoalSit.patch                |   11 -
 nms-patches/PathfinderGoalTame.patch               |   12 -
 nms-patches/PathfinderGoalTarget.patch             |   28 -
 .../PathfinderGoalTargetNearestPlayer.patch        |   11 -
 nms-patches/PathfinderGoalTempt.patch              |   43 -
 nms-patches/PathfinderGoalVillagerFarm.patch       |   48 -
 nms-patches/PlayerChunk.patch                      |  107 --
 nms-patches/PlayerChunkMap.patch                   |  152 --
 nms-patches/PlayerConnection.patch                 | 1693 --------------------
 nms-patches/PlayerInteractManager.patch            |  377 -----
 nms-patches/PlayerInventory.patch                  |  113 --
 nms-patches/PlayerList.patch                       | 1025 ------------
 nms-patches/PortalTravelAgent.patch                |  288 ----
 nms-patches/PropertyManager.patch                  |   93 --
 nms-patches/RecipeArmorDye.patch                   |   18 -
 nms-patches/RecipeBookClone.patch                  |   16 -
 nms-patches/RecipeFireworks.patch                  |   20 -
 nms-patches/RecipeMapClone.patch                   |   17 -
 nms-patches/RecipeRepair.patch                     |   38 -
 nms-patches/RecipeShulkerBox.patch                 |   20 -
 nms-patches/RecipeTippedArrow.patch                |   22 -
 nms-patches/RecipesBanner.patch                    |   37 -
 nms-patches/RecipesFurnace.patch                   |   80 -
 nms-patches/RecipiesShield.patch                   |   20 -
 nms-patches/RegionFileCache.patch                  |   34 -
 nms-patches/RemoteControlCommandListener.patch     |   15 -
 nms-patches/ScoreboardServer.patch                 |  126 --
 nms-patches/SecondaryWorldServer.patch             |   38 -
 nms-patches/ShapedRecipes.patch                    |   92 --
 nms-patches/ShapelessRecipes.patch                 |   49 -
 nms-patches/SlotFurnaceResult.patch                |   32 -
 nms-patches/SpawnerCreature.patch                  |  111 --
 nms-patches/StatisticManager.patch                 |   15 -
 nms-patches/TileEntity.patch                       |   25 -
 nms-patches/TileEntityBanner.patch                 |   26 -
 nms-patches/TileEntityBeacon.patch                 |  144 --
 nms-patches/TileEntityBrewingStand.patch           |  116 --
 nms-patches/TileEntityChest.patch                  |  110 --
 nms-patches/TileEntityCommand.patch                |   12 -
 nms-patches/TileEntityContainer.patch              |   15 -
 nms-patches/TileEntityDispenser.patch              |   55 -
 nms-patches/TileEntityEndGateway.patch             |   42 -
 nms-patches/TileEntityFurnace.patch                |  180 ---
 nms-patches/TileEntityHopper.patch                 |  154 --
 nms-patches/TileEntityNote.patch                   |   16 -
 nms-patches/TileEntityShulkerBox.patch             |   54 -
 nms-patches/TileEntitySign.patch                   |   70 -
 nms-patches/UserCache.patch                        |   25 -
 nms-patches/Village.patch                          |   11 -
 nms-patches/VillageSiege.patch                     |   11 -
 nms-patches/World.patch                            |  652 --------
 nms-patches/WorldBorder.patch                      |   18 -
 nms-patches/WorldData.patch                        |   82 -
 nms-patches/WorldGenGroundBush.patch               |   15 -
 nms-patches/WorldGenMegaTreeAbstract.patch         |   11 -
 nms-patches/WorldGenRegistration.patch             |   11 -
 nms-patches/WorldGenVillagePieces.patch            |   45 -
 nms-patches/WorldManager.patch                     |   48 -
 nms-patches/WorldMap.patch                         |  123 --
 nms-patches/WorldNBTStorage.patch                  |  112 --
 nms-patches/WorldProviderHell.patch                |   16 -
 nms-patches/WorldServer.patch                      |  691 --------
 311 files changed, 13 insertions(+), 24592 deletions(-)
 delete mode 100644 nms-patches/Advancement.patch
 delete mode 100644 nms-patches/AdvancementDataPlayer.patch
 delete mode 100644 nms-patches/AdvancementRewards.patch
 delete mode 100644 nms-patches/Advancements.patch
 delete mode 100644 nms-patches/Block.patch
 delete mode 100644 nms-patches/BlockButtonAbstract.patch
 delete mode 100644 nms-patches/BlockCactus.patch
 delete mode 100644 nms-patches/BlockCake.patch
 delete mode 100644 nms-patches/BlockCauldron.patch
 delete mode 100644 nms-patches/BlockChorusFlower.patch
 delete mode 100644 nms-patches/BlockCocoa.patch
 delete mode 100644 nms-patches/BlockCommand.patch
 delete mode 100644 nms-patches/BlockConcretePowder.patch
 delete mode 100644 nms-patches/BlockCrops.patch
 delete mode 100644 nms-patches/BlockDaylightDetector.patch
 delete mode 100644 nms-patches/BlockDiodeAbstract.patch
 delete mode 100644 nms-patches/BlockDispenser.patch
 delete mode 100644 nms-patches/BlockDoor.patch
 delete mode 100644 nms-patches/BlockDragonEgg.patch
 delete mode 100644 nms-patches/BlockDropper.patch
 delete mode 100644 nms-patches/BlockEnderPortal.patch
 delete mode 100644 nms-patches/BlockFire.patch
 delete mode 100644 nms-patches/BlockFlowing.patch
 delete mode 100644 nms-patches/BlockFluids.patch
 delete mode 100644 nms-patches/BlockGrass.patch
 delete mode 100644 nms-patches/BlockIce.patch
 delete mode 100644 nms-patches/BlockJukeBox.patch
 delete mode 100644 nms-patches/BlockLeaves.patch
 delete mode 100644 nms-patches/BlockLever.patch
 delete mode 100644 nms-patches/BlockMagma.patch
 delete mode 100644 nms-patches/BlockMinecartDetector.patch
 delete mode 100644 nms-patches/BlockMobSpawner.patch
 delete mode 100644 nms-patches/BlockMonsterEggs.patch
 delete mode 100644 nms-patches/BlockMushroom.patch
 delete mode 100644 nms-patches/BlockMycel.patch
 delete mode 100644 nms-patches/BlockNetherWart.patch
 delete mode 100644 nms-patches/BlockOre.patch
 delete mode 100644 nms-patches/BlockPiston.patch
 delete mode 100644 nms-patches/BlockPlant.patch
 delete mode 100644 nms-patches/BlockPortal.patch
 delete mode 100644 nms-patches/BlockPoweredRail.patch
 delete mode 100644 nms-patches/BlockPressurePlateAbstract.patch
 delete mode 100644 nms-patches/BlockPressurePlateBinary.patch
 delete mode 100644 nms-patches/BlockPressurePlateWeighted.patch
 delete mode 100644 nms-patches/BlockPumpkin.patch
 delete mode 100644 nms-patches/BlockRedstoneLamp.patch
 delete mode 100644 nms-patches/BlockRedstoneOre.patch
 delete mode 100644 nms-patches/BlockRedstoneTorch.patch
 delete mode 100644 nms-patches/BlockRedstoneWire.patch
 delete mode 100644 nms-patches/BlockReed.patch
 delete mode 100644 nms-patches/BlockSapling.patch
 delete mode 100644 nms-patches/BlockShulkerBox.patch
 delete mode 100644 nms-patches/BlockSkull.patch
 delete mode 100644 nms-patches/BlockSnow.patch
 delete mode 100644 nms-patches/BlockSnowBlock.patch
 delete mode 100644 nms-patches/BlockSoil.patch
 delete mode 100644 nms-patches/BlockStationary.patch
 delete mode 100644 nms-patches/BlockStem.patch
 delete mode 100644 nms-patches/BlockTNT.patch
 delete mode 100644 nms-patches/BlockTallPlant.patch
 delete mode 100644 nms-patches/BlockTrapdoor.patch
 delete mode 100644 nms-patches/BlockTripwire.patch
 delete mode 100644 nms-patches/BlockTripwireHook.patch
 delete mode 100644 nms-patches/BlockVine.patch
 delete mode 100644 nms-patches/BlockWaterLily.patch
 delete mode 100644 nms-patches/ChatBaseComponent.patch
 delete mode 100644 nms-patches/ChatModifier.patch
 delete mode 100644 nms-patches/Chunk.patch
 delete mode 100644 nms-patches/ChunkProviderGenerate.patch
 delete mode 100644 nms-patches/ChunkProviderServer.patch
 delete mode 100644 nms-patches/ChunkRegionLoader.patch
 delete mode 100644 nms-patches/ChunkSection.patch
 delete mode 100644 nms-patches/CommandBlockListenerAbstract.patch
 delete mode 100644 nms-patches/CommandDebug.patch
 delete mode 100644 nms-patches/CommandExecute.patch
 delete mode 100644 nms-patches/CommandGamemode.patch
 delete mode 100644 nms-patches/CommandGamerule.patch
 delete mode 100644 nms-patches/CommandSpreadPlayers.patch
 delete mode 100644 nms-patches/CommandTeleport.patch
 delete mode 100644 nms-patches/CommandTp.patch
 delete mode 100644 nms-patches/Container.patch
 delete mode 100644 nms-patches/ContainerAnvil.patch
 delete mode 100644 nms-patches/ContainerBeacon.patch
 delete mode 100644 nms-patches/ContainerBrewingStand.patch
 delete mode 100644 nms-patches/ContainerChest.patch
 delete mode 100644 nms-patches/ContainerDispenser.patch
 delete mode 100644 nms-patches/ContainerEnchantTable.patch
 delete mode 100644 nms-patches/ContainerFurnace.patch
 delete mode 100644 nms-patches/ContainerHopper.patch
 delete mode 100644 nms-patches/ContainerHorse.patch
 delete mode 100644 nms-patches/ContainerMerchant.patch
 delete mode 100644 nms-patches/ContainerPlayer.patch
 delete mode 100644 nms-patches/ContainerShulkerBox.patch
 delete mode 100644 nms-patches/ContainerWorkbench.patch
 delete mode 100644 nms-patches/CraftingManager.patch
 delete mode 100644 nms-patches/CrashReport.patch
 delete mode 100644 nms-patches/CustomFunction.patch
 delete mode 100644 nms-patches/CustomFunctionData.patch
 delete mode 100644 nms-patches/DamageSource.patch
 delete mode 100644 nms-patches/DataInspectorBlockEntity.patch
 delete mode 100644 nms-patches/DataPaletteBlock.patch
 delete mode 100644 nms-patches/DataWatcher.patch
 delete mode 100644 nms-patches/DedicatedServer.patch
 delete mode 100644 nms-patches/DispenseBehaviorItem.patch
 delete mode 100644 nms-patches/DispenseBehaviorProjectile.patch
 delete mode 100644 nms-patches/DispenserRegistry.patch
 delete mode 100644 nms-patches/DragonControllerManager.patch
 delete mode 100644 nms-patches/Enchantment.patch
 delete mode 100644 nms-patches/EnchantmentFrostWalker.patch
 delete mode 100644 nms-patches/EnchantmentThorns.patch
 delete mode 100644 nms-patches/Entity.patch
 delete mode 100644 nms-patches/EntityAgeable.patch
 delete mode 100644 nms-patches/EntityAnimal.patch
 delete mode 100644 nms-patches/EntityAreaEffectCloud.patch
 delete mode 100644 nms-patches/EntityArmorStand.patch
 delete mode 100644 nms-patches/EntityArrow.patch
 delete mode 100644 nms-patches/EntityBoat.patch
 delete mode 100644 nms-patches/EntityChicken.patch
 delete mode 100644 nms-patches/EntityCow.patch
 delete mode 100644 nms-patches/EntityCreature.patch
 delete mode 100644 nms-patches/EntityCreeper.patch
 delete mode 100644 nms-patches/EntityDamageSourceIndirect.patch
 delete mode 100644 nms-patches/EntityEgg.patch
 delete mode 100644 nms-patches/EntityEnderCrystal.patch
 delete mode 100644 nms-patches/EntityEnderDragon.patch
 delete mode 100644 nms-patches/EntityEnderPearl.patch
 delete mode 100644 nms-patches/EntityEnderman.patch
 delete mode 100644 nms-patches/EntityEvokerFangs.patch
 delete mode 100644 nms-patches/EntityExperienceOrb.patch
 delete mode 100644 nms-patches/EntityFallingBlock.patch
 delete mode 100644 nms-patches/EntityFireball.patch
 delete mode 100644 nms-patches/EntityFireworks.patch
 delete mode 100644 nms-patches/EntityFishingHook.patch
 delete mode 100644 nms-patches/EntityGhast.patch
 delete mode 100644 nms-patches/EntityHanging.patch
 delete mode 100644 nms-patches/EntityHorseAbstract.patch
 delete mode 100644 nms-patches/EntityHorseChestedAbstract.patch
 delete mode 100644 nms-patches/EntityHuman.patch
 delete mode 100644 nms-patches/EntityInsentient.patch
 delete mode 100644 nms-patches/EntityIronGolem.patch
 delete mode 100644 nms-patches/EntityItem.patch
 delete mode 100644 nms-patches/EntityItemFrame.patch
 delete mode 100644 nms-patches/EntityLargeFireball.patch
 delete mode 100644 nms-patches/EntityLeash.patch
 delete mode 100644 nms-patches/EntityLightning.patch
 delete mode 100644 nms-patches/EntityLiving.patch
 delete mode 100644 nms-patches/EntityLlamaSpit.patch
 delete mode 100644 nms-patches/EntityMinecartAbstract.patch
 delete mode 100644 nms-patches/EntityMinecartCommandBlock.patch
 delete mode 100644 nms-patches/EntityMinecartContainer.patch
 delete mode 100644 nms-patches/EntityMonster.patch
 delete mode 100644 nms-patches/EntityMushroomCow.patch
 delete mode 100644 nms-patches/EntityOcelot.patch
 delete mode 100644 nms-patches/EntityPainting.patch
 delete mode 100644 nms-patches/EntityParrot.patch
 delete mode 100644 nms-patches/EntityPig.patch
 delete mode 100644 nms-patches/EntityPlayer.patch
 delete mode 100644 nms-patches/EntityPotion.patch
 delete mode 100644 nms-patches/EntityProjectile.patch
 delete mode 100644 nms-patches/EntityRabbit.patch
 delete mode 100644 nms-patches/EntitySheep.patch
 delete mode 100644 nms-patches/EntityShulker.patch
 delete mode 100644 nms-patches/EntityShulkerBullet.patch
 delete mode 100644 nms-patches/EntitySilverfish.patch
 delete mode 100644 nms-patches/EntitySkeleton.patch
 delete mode 100644 nms-patches/EntitySkeletonAbstract.patch
 delete mode 100644 nms-patches/EntitySkeletonWither.patch
 delete mode 100644 nms-patches/EntitySlice.patch
 delete mode 100644 nms-patches/EntitySlime.patch
 delete mode 100644 nms-patches/EntitySmallFireball.patch
 delete mode 100644 nms-patches/EntitySnowman.patch
 delete mode 100644 nms-patches/EntitySpider.patch
 delete mode 100644 nms-patches/EntityTNTPrimed.patch
 delete mode 100644 nms-patches/EntityThrownExpBottle.patch
 delete mode 100644 nms-patches/EntityTippedArrow.patch
 delete mode 100644 nms-patches/EntityTracker.patch
 delete mode 100644 nms-patches/EntityTrackerEntry.patch
 delete mode 100644 nms-patches/EntityVex.patch
 delete mode 100644 nms-patches/EntityVillager.patch
 delete mode 100644 nms-patches/EntityWither.patch
 delete mode 100644 nms-patches/EntityWitherSkull.patch
 delete mode 100644 nms-patches/EntityWolf.patch
 delete mode 100644 nms-patches/EntityZombie.patch
 delete mode 100644 nms-patches/EntityZombieVillager.patch
 delete mode 100644 nms-patches/ExpirableListEntry.patch
 delete mode 100644 nms-patches/Explosion.patch
 delete mode 100644 nms-patches/FoodMetaData.patch
 delete mode 100644 nms-patches/HandshakeListener.patch
 delete mode 100644 nms-patches/IDataManager.patch
 delete mode 100644 nms-patches/IInventory.patch
 delete mode 100644 nms-patches/IRecipe.patch
 delete mode 100644 nms-patches/InventoryCraftResult.patch
 delete mode 100644 nms-patches/InventoryCrafting.patch
 delete mode 100644 nms-patches/InventoryEnderChest.patch
 delete mode 100644 nms-patches/InventoryHorseChest.patch
 delete mode 100644 nms-patches/InventoryLargeChest.patch
 delete mode 100644 nms-patches/InventoryMerchant.patch
 delete mode 100644 nms-patches/InventorySubcontainer.patch
 delete mode 100644 nms-patches/ItemArmor.patch
 delete mode 100644 nms-patches/ItemBlock.patch
 delete mode 100644 nms-patches/ItemBoat.patch
 delete mode 100644 nms-patches/ItemBow.patch
 delete mode 100644 nms-patches/ItemBucket.patch
 delete mode 100644 nms-patches/ItemChorusFruit.patch
 delete mode 100644 nms-patches/ItemDye.patch
 delete mode 100644 nms-patches/ItemEnderPearl.patch
 delete mode 100644 nms-patches/ItemFireball.patch
 delete mode 100644 nms-patches/ItemFishingRod.patch
 delete mode 100644 nms-patches/ItemFlintAndSteel.patch
 delete mode 100644 nms-patches/ItemHanging.patch
 delete mode 100644 nms-patches/ItemLeash.patch
 delete mode 100644 nms-patches/ItemMinecart.patch
 delete mode 100644 nms-patches/ItemMonsterEgg.patch
 delete mode 100644 nms-patches/ItemRecord.patch
 delete mode 100644 nms-patches/ItemRedstone.patch
 delete mode 100644 nms-patches/ItemReed.patch
 delete mode 100644 nms-patches/ItemSkull.patch
 delete mode 100644 nms-patches/ItemSnowball.patch
 delete mode 100644 nms-patches/ItemStack.patch
 delete mode 100644 nms-patches/ItemWaterLily.patch
 delete mode 100644 nms-patches/ItemWorldMap.patch
 delete mode 100644 nms-patches/JsonList.patch
 delete mode 100644 nms-patches/LoginListener.patch
 delete mode 100644 nms-patches/MerchantRecipe.patch
 delete mode 100644 nms-patches/MethodProfiler.patch
 delete mode 100644 nms-patches/MinecraftServer.patch
 delete mode 100644 nms-patches/MobEffectList.patch
 delete mode 100644 nms-patches/MobSpawnerAbstract.patch
 delete mode 100644 nms-patches/NameReferencingFileConverter.patch
 delete mode 100644 nms-patches/NetworkManager.patch
 delete mode 100644 nms-patches/PacketDataSerializer.patch
 delete mode 100644 nms-patches/PacketPlayInCloseWindow.patch
 delete mode 100644 nms-patches/PacketPlayOutWorldBorder.patch
 delete mode 100644 nms-patches/PacketStatusListener.patch
 delete mode 100644 nms-patches/PathfinderGoalBreakDoor.patch
 delete mode 100644 nms-patches/PathfinderGoalBreed.patch
 delete mode 100644 nms-patches/PathfinderGoalDefendVillage.patch
 delete mode 100644 nms-patches/PathfinderGoalEatTile.patch
 delete mode 100644 nms-patches/PathfinderGoalFollowOwner.patch
 delete mode 100644 nms-patches/PathfinderGoalHorseTrap.patch
 delete mode 100644 nms-patches/PathfinderGoalHurtByTarget.patch
 delete mode 100644 nms-patches/PathfinderGoalMakeLove.patch
 delete mode 100644 nms-patches/PathfinderGoalNearestAttackableTarget.patch
 delete mode 100644 nms-patches/PathfinderGoalNearestAttackableTargetInsentient.patch
 delete mode 100644 nms-patches/PathfinderGoalOwnerHurtByTarget.patch
 delete mode 100644 nms-patches/PathfinderGoalOwnerHurtTarget.patch
 delete mode 100644 nms-patches/PathfinderGoalPanic.patch
 delete mode 100644 nms-patches/PathfinderGoalSit.patch
 delete mode 100644 nms-patches/PathfinderGoalTame.patch
 delete mode 100644 nms-patches/PathfinderGoalTarget.patch
 delete mode 100644 nms-patches/PathfinderGoalTargetNearestPlayer.patch
 delete mode 100644 nms-patches/PathfinderGoalTempt.patch
 delete mode 100644 nms-patches/PathfinderGoalVillagerFarm.patch
 delete mode 100644 nms-patches/PlayerChunk.patch
 delete mode 100644 nms-patches/PlayerChunkMap.patch
 delete mode 100644 nms-patches/PlayerConnection.patch
 delete mode 100644 nms-patches/PlayerInteractManager.patch
 delete mode 100644 nms-patches/PlayerInventory.patch
 delete mode 100644 nms-patches/PlayerList.patch
 delete mode 100644 nms-patches/PortalTravelAgent.patch
 delete mode 100644 nms-patches/PropertyManager.patch
 delete mode 100644 nms-patches/RecipeArmorDye.patch
 delete mode 100644 nms-patches/RecipeBookClone.patch
 delete mode 100644 nms-patches/RecipeFireworks.patch
 delete mode 100644 nms-patches/RecipeMapClone.patch
 delete mode 100644 nms-patches/RecipeRepair.patch
 delete mode 100644 nms-patches/RecipeShulkerBox.patch
 delete mode 100644 nms-patches/RecipeTippedArrow.patch
 delete mode 100644 nms-patches/RecipesBanner.patch
 delete mode 100644 nms-patches/RecipesFurnace.patch
 delete mode 100644 nms-patches/RecipiesShield.patch
 delete mode 100644 nms-patches/RegionFileCache.patch
 delete mode 100644 nms-patches/RemoteControlCommandListener.patch
 delete mode 100644 nms-patches/ScoreboardServer.patch
 delete mode 100644 nms-patches/SecondaryWorldServer.patch
 delete mode 100644 nms-patches/ShapedRecipes.patch
 delete mode 100644 nms-patches/ShapelessRecipes.patch
 delete mode 100644 nms-patches/SlotFurnaceResult.patch
 delete mode 100644 nms-patches/SpawnerCreature.patch
 delete mode 100644 nms-patches/StatisticManager.patch
 delete mode 100644 nms-patches/TileEntity.patch
 delete mode 100644 nms-patches/TileEntityBanner.patch
 delete mode 100644 nms-patches/TileEntityBeacon.patch
 delete mode 100644 nms-patches/TileEntityBrewingStand.patch
 delete mode 100644 nms-patches/TileEntityChest.patch
 delete mode 100644 nms-patches/TileEntityCommand.patch
 delete mode 100644 nms-patches/TileEntityContainer.patch
 delete mode 100644 nms-patches/TileEntityDispenser.patch
 delete mode 100644 nms-patches/TileEntityEndGateway.patch
 delete mode 100644 nms-patches/TileEntityFurnace.patch
 delete mode 100644 nms-patches/TileEntityHopper.patch
 delete mode 100644 nms-patches/TileEntityNote.patch
 delete mode 100644 nms-patches/TileEntityShulkerBox.patch
 delete mode 100644 nms-patches/TileEntitySign.patch
 delete mode 100644 nms-patches/UserCache.patch
 delete mode 100644 nms-patches/Village.patch
 delete mode 100644 nms-patches/VillageSiege.patch
 delete mode 100644 nms-patches/World.patch
 delete mode 100644 nms-patches/WorldBorder.patch
 delete mode 100644 nms-patches/WorldData.patch
 delete mode 100644 nms-patches/WorldGenGroundBush.patch
 delete mode 100644 nms-patches/WorldGenMegaTreeAbstract.patch
 delete mode 100644 nms-patches/WorldGenRegistration.patch
 delete mode 100644 nms-patches/WorldGenVillagePieces.patch
 delete mode 100644 nms-patches/WorldManager.patch
 delete mode 100644 nms-patches/WorldMap.patch
 delete mode 100644 nms-patches/WorldNBTStorage.patch
 delete mode 100644 nms-patches/WorldProviderHell.patch
 delete mode 100644 nms-patches/WorldServer.patch

diff --git a/applyPatches.sh b/applyPatches.sh
index 0240113..516739d 100755
--- a/applyPatches.sh
+++ b/applyPatches.sh
@@ -8,9 +8,7 @@ fi
 
 nms=$1/net/minecraft/server
 cb=src/main/java/net/minecraft/server
-#clean up and rebuild
-rm -rf $cb
-mkdir -p $cb
+
 for file in $(/bin/ls nms-patches)
 do
     patchFile="nms-patches/$file"
@@ -19,6 +17,8 @@ do
     echo "Patching $file < $patchFile"
     sed -i 's/\r//' "$nms/$file" > /dev/null
 
+    rm "$cb/$file"
+
     cp "$nms/$file" "$cb/$file"
     patch -d src/main/java/ "net/minecraft/server/$file" < "$patchFile"
 done
diff --git a/makePatches.sh b/makePatches.sh
index 3400e7e..00be047 100755
--- a/makePatches.sh
+++ b/makePatches.sh
@@ -5,10 +5,19 @@ then
     echo "Please run this script again with the clean decompile sources as an argument. In most cases this will be ../work/decompile-XXXX"
     exit
 fi
+
+if [ -z "$2" ]
+then
+    echo "You need to specify the project file(s) you want to generate a patch for."
+    exit
+fi
+
 cb=src/main/java/net/minecraft/server
 nms="$1/net/minecraft/server"
 
-for file in $(/bin/ls $cb)
+shift
+
+for file in $@
 do
     echo "Diffing $file"
     sed -i 's/\r//' "$nms/$file"
diff --git a/nms-patches/Advancement.patch b/nms-patches/Advancement.patch
deleted file mode 100644
index ba026b6..0000000
--- a/nms-patches/Advancement.patch
+++ /dev/null
@@ -1,10 +0,0 @@
---- a/net/minecraft/server/Advancement.java
-+++ b/net/minecraft/server/Advancement.java
-@@ -24,6 +24,7 @@
-     private final String[][] f;
-     private final Set<Advancement> g = Sets.newLinkedHashSet();
-     private final IChatBaseComponent h;
-+    public final org.bukkit.advancement.Advancement bukkit = new org.bukkit.craftbukkit.advancement.CraftAdvancement(this); // CraftBukkit
- 
-     public Advancement(MinecraftKey minecraftkey, @Nullable Advancement advancement, @Nullable AdvancementDisplay advancementdisplay, AdvancementRewards advancementrewards, Map<String, Criterion> map, String[][] astring) {
-         this.d = minecraftkey;
diff --git a/nms-patches/AdvancementDataPlayer.patch b/nms-patches/AdvancementDataPlayer.patch
deleted file mode 100644
index 947510a..0000000
--- a/nms-patches/AdvancementDataPlayer.patch
+++ /dev/null
@@ -1,50 +0,0 @@
---- a/net/minecraft/server/AdvancementDataPlayer.java
-+++ b/net/minecraft/server/AdvancementDataPlayer.java
-@@ -31,7 +31,7 @@
- 
-     private static final Logger a = LogManager.getLogger();
-     private static final Gson b = (new GsonBuilder()).registerTypeAdapter(AdvancementProgress.class, new AdvancementProgress.a()).registerTypeAdapter(MinecraftKey.class, new MinecraftKey.a()).setPrettyPrinting().create();
--    private static final TypeToken<Map<MinecraftKey, AdvancementProgress>> c = new TypeToken() {
-+    private static final TypeToken<Map<MinecraftKey, AdvancementProgress>> c = new TypeToken<Map<MinecraftKey, AdvancementProgress>>() { // CraftBukkit - decompile error
-     };
-     private final MinecraftServer d;
-     private final File e;
-@@ -93,7 +93,7 @@
-         Iterator iterator = this.data.entrySet().iterator();
- 
-         while (iterator.hasNext()) {
--            Entry entry = (Entry) iterator.next();
-+            Entry<Advancement, AdvancementProgress> entry = (Entry) iterator.next(); // CraftBukkit - decompile error
- 
-             if (((AdvancementProgress) entry.getValue()).isDone()) {
-                 arraylist.add(entry.getKey());
-@@ -129,7 +129,7 @@
-         if (this.e.isFile()) {
-             try {
-                 String s = Files.toString(this.e, StandardCharsets.UTF_8);
--                Map map = (Map) ChatDeserializer.a(AdvancementDataPlayer.b, s, AdvancementDataPlayer.c.getType());
-+                Map<MinecraftKey, AdvancementProgress> map = (Map) ChatDeserializer.a(AdvancementDataPlayer.b, s, AdvancementDataPlayer.c.getType()); // CraftBukkit
- 
-                 if (map == null) {
-                     throw new JsonParseException("Found null for advancements");
-@@ -143,7 +143,11 @@
-                     Advancement advancement = this.d.getAdvancementData().a((MinecraftKey) entry.getKey());
- 
-                     if (advancement == null) {
--                        AdvancementDataPlayer.a.warn("Ignored advancement \'" + entry.getKey() + "\' in progress file " + this.e + " - it doesn\'t exist anymore?");
-+                        // CraftBukkit start
-+                        if (((MinecraftKey) entry.getKey()).b().equals("minecraft")) {
-+                            AdvancementDataPlayer.a.warn("Ignored advancement \'" + entry.getKey() + "\' in progress file " + this.e + " - it doesn\'t exist anymore?");
-+                        }
-+                        // CraftBukkit end
-                     } else {
-                         this.a(advancement, (AdvancementProgress) entry.getValue());
-                     }
-@@ -195,6 +199,7 @@
-             this.i.add(advancement);
-             flag = true;
-             if (!flag1 && advancementprogress.isDone()) {
-+                this.player.world.getServer().getPluginManager().callEvent(new org.bukkit.event.player.PlayerAdvancementDoneEvent(this.player.getBukkitEntity(), advancement.bukkit)); // CraftBukkit
-                 advancement.d().a(this.player);
-                 if (advancement.c() != null && advancement.c().i() && this.player.world.getGameRules().getBoolean("announceAdvancements")) {
-                     this.d.getPlayerList().sendMessage(new ChatMessage("chat.type.advancement." + advancement.c().e().a(), new Object[] { this.player.getScoreboardDisplayName(), advancement.j()}));
diff --git a/nms-patches/AdvancementRewards.patch b/nms-patches/AdvancementRewards.patch
deleted file mode 100644
index 8f0ea2c..0000000
--- a/nms-patches/AdvancementRewards.patch
+++ /dev/null
@@ -1,52 +0,0 @@
---- a/net/minecraft/server/AdvancementRewards.java
-+++ b/net/minecraft/server/AdvancementRewards.java
-@@ -66,7 +66,24 @@
-         CustomFunction customfunction = this.e.a(minecraftserver.aL());
- 
-         if (customfunction != null) {
--            ICommandListener icommandlistener = new ICommandListener() {
-+            // CraftBukkit start
-+            ICommandListener icommandlistener = new AdvancementCommandListener(entityplayer, minecraftserver);
-+
-+            minecraftserver.aL().a(customfunction, icommandlistener);
-+        }
-+
-+    }
-+
-+            public static class AdvancementCommandListener implements ICommandListener {
-+
-+                private final EntityPlayer entityplayer;
-+                private final MinecraftServer minecraftserver;
-+
-+                public AdvancementCommandListener(EntityPlayer entityplayer, MinecraftServer minecraftserver) {
-+                    this.entityplayer = entityplayer;
-+                    this.minecraftserver = minecraftserver;
-+                }
-+
-                 public String getName() {
-                     return entityplayer.getName();
-                 }
-@@ -108,12 +125,8 @@
-                 public MinecraftServer C_() {
-                     return entityplayer.C_();
-                 }
--            };
--
--            minecraftserver.aL().a(customfunction, icommandlistener);
--        }
--
--    }
-+            }
-+    // CraftBukkit end
- 
-     public String toString() {
-         return "AdvancementRewards{experience=" + this.b + ", loot=" + Arrays.toString(this.c) + ", recipes=" + Arrays.toString(this.d) + ", function=" + this.e + '}';
-@@ -156,7 +169,7 @@
-             return new AdvancementRewards(i, aminecraftkey, aminecraftkey1, customfunction_a);
-         }
- 
--        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
-+        public AdvancementRewards deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - decompile error
-             return this.a(jsonelement, type, jsondeserializationcontext);
-         }
-     }
diff --git a/nms-patches/Advancements.patch b/nms-patches/Advancements.patch
deleted file mode 100644
index c6fb5b4..0000000
--- a/nms-patches/Advancements.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/Advancements.java
-+++ b/net/minecraft/server/Advancements.java
-@@ -71,7 +71,7 @@
-             }
-         }
- 
--        Advancements.a.info("Loaded " + this.advancements.size() + " advancements");
-+        // Advancements.a.info("Loaded " + this.b.size() + " advancements"); // CraftBukkit - moved to AdvancementDataWorld#reload
-     }
- 
-     public void a() {
diff --git a/nms-patches/Block.patch b/nms-patches/Block.patch
deleted file mode 100644
index 8060e69..0000000
--- a/nms-patches/Block.patch
+++ /dev/null
@@ -1,67 +0,0 @@
---- a/net/minecraft/server/Block.java
-+++ b/net/minecraft/server/Block.java
-@@ -37,7 +37,7 @@
-     private String name;
- 
-     public static int getId(Block block) {
--        return Block.REGISTRY.a((Object) block);
-+        return Block.REGISTRY.a(block); // CraftBukkit - decompile error
-     }
- 
-     public static int getCombinedId(IBlockData iblockdata) {
-@@ -343,7 +343,8 @@
-             int j = this.getDropCount(i, world.random);
- 
-             for (int k = 0; k < j; ++k) {
--                if (world.random.nextFloat() <= f) {
-+                // CraftBukkit - <= to < to allow for plugins to completely disable block drops from explosions
-+                if (world.random.nextFloat() < f) {
-                     Item item = this.getDropType(iblockdata, world.random, i);
- 
-                     if (item != Items.a) {
-@@ -364,7 +365,13 @@
-             EntityItem entityitem = new EntityItem(world, (double) blockposition.getX() + d0, (double) blockposition.getY() + d1, (double) blockposition.getZ() + d2, itemstack);
- 
-             entityitem.q();
--            world.addEntity(entityitem);
-+            // CraftBukkit start
-+            if (world.captureDrops != null) {
-+                world.captureDrops.add(entityitem);
-+            } else {
-+                world.addEntity(entityitem);
-+            }
-+            // CraftBukkit end
-         }
-     }
- 
-@@ -931,7 +938,7 @@
- 
-             if (hashset.contains(block16)) {
-                 for (int i = 0; i < 15; ++i) {
--                    int j = Block.REGISTRY.a((Object) block16) << 4 | i;
-+                    int j = Block.REGISTRY.a(block16) << 4 | i; // CraftBukkit - decompile error
- 
-                     Block.REGISTRY_ID.a(block16.fromLegacyData(i), j);
-                 }
-@@ -940,7 +947,7 @@
- 
-                 while (unmodifiableiterator.hasNext()) {
-                     IBlockData iblockdata = (IBlockData) unmodifiableiterator.next();
--                    int k = Block.REGISTRY.a((Object) block16) << 4 | block16.toLegacyData(iblockdata);
-+                    int k = Block.REGISTRY.a(block16) << 4 | block16.toLegacyData(iblockdata); // CraftBukkit - decompile error
- 
-                     Block.REGISTRY_ID.a(iblockdata, k);
-                 }
-@@ -949,6 +956,12 @@
- 
-     }
- 
-+    // CraftBukkit start
-+    public int getExpDrop(World world, IBlockData data, int enchantmentLevel) {
-+        return 0;
-+    }
-+    // CraftBukkit end
-+
-     private static void a(int i, MinecraftKey minecraftkey, Block block) {
-         Block.REGISTRY.a(i, minecraftkey, block);
-     }
diff --git a/nms-patches/BlockButtonAbstract.patch b/nms-patches/BlockButtonAbstract.patch
deleted file mode 100644
index bf32c8f..0000000
--- a/nms-patches/BlockButtonAbstract.patch
+++ /dev/null
@@ -1,110 +0,0 @@
---- a/net/minecraft/server/BlockButtonAbstract.java
-+++ b/net/minecraft/server/BlockButtonAbstract.java
-@@ -4,6 +4,11 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.event.block.BlockRedstoneEvent;
-+import org.bukkit.event.entity.EntityInteractEvent;
-+// CraftBukkit end
-+
- public abstract class BlockButtonAbstract extends BlockDirectional {
- 
-     public static final BlockStateBoolean POWERED = BlockStateBoolean.of("powered");
-@@ -126,6 +131,19 @@
-         if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
-             return true;
-         } else {
-+            // CraftBukkit start
-+            boolean powered = ((Boolean) iblockdata.get(POWERED));
-+            org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            int old = (powered) ? 15 : 0;
-+            int current = (!powered) ? 15 : 0;
-+
-+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
-+            world.getServer().getPluginManager().callEvent(eventRedstone);
-+
-+            if ((eventRedstone.getNewCurrent() > 0) != (!powered)) {
-+                return true;
-+            }
-+            // CraftBukkit end
-             world.setTypeAndData(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(true)), 3);
-             world.b(blockposition, blockposition);
-             this.a(entityhuman, world, blockposition);
-@@ -167,6 +185,16 @@
-                 if (this.I) {
-                     this.d(iblockdata, world, blockposition);
-                 } else {
-+                    // CraftBukkit start
-+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+                    BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
-+                    world.getServer().getPluginManager().callEvent(eventRedstone);
-+
-+                    if (eventRedstone.getNewCurrent() > 0) {
-+                        return;
-+                    }
-+                    // CraftBukkit end
-                     world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(false)));
-                     this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
-                     this.b(world, blockposition);
-@@ -192,7 +220,41 @@
-         boolean flag = !list.isEmpty();
-         boolean flag1 = ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue();
- 
-+        // CraftBukkit start - Call interact event when arrows turn on wooden buttons
-+        if (flag1 != flag && flag) {
-+            org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            boolean allowed = false;
-+
-+            // If all of the events are cancelled block the button press, else allow
-+            for (Object object : list) {
-+                if (object != null) {
-+                    EntityInteractEvent event = new EntityInteractEvent(((Entity) object).getBukkitEntity(), block);
-+                    world.getServer().getPluginManager().callEvent(event);
-+
-+                    if (!event.isCancelled()) {
-+                        allowed = true;
-+                        break;
-+                    }
-+                }
-+            }
-+
-+            if (!allowed) {
-+                return;
-+            }
-+        }
-+        // CraftBukkit end
-+
-         if (flag && !flag1) {
-+            // CraftBukkit start
-+            org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 0, 15);
-+            world.getServer().getPluginManager().callEvent(eventRedstone);
-+
-+            if (eventRedstone.getNewCurrent() <= 0) {
-+                return;
-+            }
-+            // CraftBukkit end
-             world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(true)));
-             this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
-             world.b(blockposition, blockposition);
-@@ -200,6 +262,16 @@
-         }
- 
-         if (!flag && flag1) {
-+            // CraftBukkit start
-+            org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
-+            world.getServer().getPluginManager().callEvent(eventRedstone);
-+
-+            if (eventRedstone.getNewCurrent() > 0) {
-+                return;
-+            }
-+            // CraftBukkit end
-             world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(false)));
-             this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
-             world.b(blockposition, blockposition);
diff --git a/nms-patches/BlockCactus.patch b/nms-patches/BlockCactus.patch
deleted file mode 100644
index 282dcd8..0000000
--- a/nms-patches/BlockCactus.patch
+++ /dev/null
@@ -1,33 +0,0 @@
---- a/net/minecraft/server/BlockCactus.java
-+++ b/net/minecraft/server/BlockCactus.java
-@@ -3,6 +3,8 @@
- import java.util.Iterator;
- import java.util.Random;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class BlockCactus extends Block {
- 
-     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 15);
-@@ -30,9 +32,10 @@
-                 int j = ((Integer) iblockdata.get(BlockCactus.AGE)).intValue();
- 
-                 if (j == 15) {
--                    world.setTypeUpdate(blockposition1, this.getBlockData());
-+                    // world.setTypeUpdate(blockposition1, this.getBlockData()); // CraftBukkit
-                     IBlockData iblockdata1 = iblockdata.set(BlockCactus.AGE, Integer.valueOf(0));
- 
-+                    CraftEventFactory.handleBlockGrowEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), this, 0); // CraftBukkit
-                     world.setTypeAndData(blockposition, iblockdata1, 4);
-                     iblockdata1.doPhysics(world, blockposition1, this, blockposition);
-                 } else {
-@@ -87,7 +90,9 @@
-     }
- 
-     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-+        CraftEventFactory.blockDamage = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()); // CraftBukkit
-         entity.damageEntity(DamageSource.CACTUS, 1.0F);
-+        CraftEventFactory.blockDamage = null; // CraftBukkit
-     }
- 
-     public IBlockData fromLegacyData(int i) {
diff --git a/nms-patches/BlockCake.patch b/nms-patches/BlockCake.patch
deleted file mode 100644
index 80b0801..0000000
--- a/nms-patches/BlockCake.patch
+++ /dev/null
@@ -1,22 +0,0 @@
---- a/net/minecraft/server/BlockCake.java
-+++ b/net/minecraft/server/BlockCake.java
-@@ -40,7 +40,18 @@
-             return false;
-         } else {
-             entityhuman.b(StatisticList.H);
--            entityhuman.getFoodData().eat(2, 0.1F);
-+            // CraftBukkit start
-+            // entityhuman.getFoodData().eat(2, 0.1F);
-+            int oldFoodLevel = entityhuman.getFoodData().foodLevel;
-+
-+            org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(entityhuman, 2 + oldFoodLevel);
-+
-+            if (!event.isCancelled()) {
-+                entityhuman.getFoodData().eat(event.getFoodLevel() - oldFoodLevel, 0.1F);
-+            }
-+
-+            ((EntityPlayer) entityhuman).getBukkitEntity().sendHealthUpdate();
-+            // CraftBukkit end
-             int i = ((Integer) iblockdata.get(BlockCake.BITES)).intValue();
- 
-             if (i < 6) {
diff --git a/nms-patches/BlockCauldron.patch b/nms-patches/BlockCauldron.patch
deleted file mode 100644
index 4fe2b4b..0000000
--- a/nms-patches/BlockCauldron.patch
+++ /dev/null
@@ -1,175 +0,0 @@
---- a/net/minecraft/server/BlockCauldron.java
-+++ b/net/minecraft/server/BlockCauldron.java
-@@ -3,6 +3,7 @@
- import java.util.List;
- import java.util.Random;
- import javax.annotation.Nullable;
-+import org.bukkit.event.block.CauldronLevelChangeEvent; // CraftBukkit
- 
- public class BlockCauldron extends Block {
- 
-@@ -43,8 +44,13 @@
-         float f = (float) blockposition.getY() + (6.0F + (float) (3 * i)) / 16.0F;
- 
-         if (!world.isClientSide && entity.isBurning() && i > 0 && entity.getBoundingBox().b <= (double) f) {
-+            // CraftBukkit start
-+            if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entity, CauldronLevelChangeEvent.ChangeReason.EXTINGUISH)) {
-+                return;
-+            }
-             entity.extinguish();
--            this.a(world, blockposition, iblockdata, i - 1);
-+            // this.a(world, blockposition, iblockdata, i - 1);
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -60,18 +66,27 @@
- 
-             if (item == Items.WATER_BUCKET) {
-                 if (i < 3 && !world.isClientSide) {
-+                    // CraftBukkit start
-+                    if (!this.changeLevel(world, blockposition, iblockdata, 3, entityhuman, CauldronLevelChangeEvent.ChangeReason.BUCKET_EMPTY)) {
-+                        return true;
-+                    }
-                     if (!entityhuman.abilities.canInstantlyBuild) {
-                         entityhuman.a(enumhand, new ItemStack(Items.BUCKET));
-                     }
- 
-                     entityhuman.b(StatisticList.I);
--                    this.a(world, blockposition, iblockdata, 3);
-+                    // this.a(world, blockposition, iblockdata, 3);
-+                    // CraftBukkit end
-                     world.a((EntityHuman) null, blockposition, SoundEffects.Q, SoundCategory.BLOCKS, 1.0F, 1.0F);
-                 }
- 
-                 return true;
-             } else if (item == Items.BUCKET) {
-                 if (i == 3 && !world.isClientSide) {
-+                    // CraftBukkit start
-+                    if (!this.changeLevel(world, blockposition, iblockdata, 0, entityhuman, CauldronLevelChangeEvent.ChangeReason.BUCKET_FILL)) {
-+                        return true;
-+                    }
-                     if (!entityhuman.abilities.canInstantlyBuild) {
-                         itemstack.subtract(1);
-                         if (itemstack.isEmpty()) {
-@@ -82,7 +97,8 @@
-                     }
- 
-                     entityhuman.b(StatisticList.J);
--                    this.a(world, blockposition, iblockdata, 0);
-+                    // this.a(world, blockposition, iblockdata, 0);
-+                    // CraftBukkit end
-                     world.a((EntityHuman) null, blockposition, SoundEffects.S, SoundCategory.BLOCKS, 1.0F, 1.0F);
-                 }
- 
-@@ -92,6 +108,10 @@
- 
-                 if (item == Items.GLASS_BOTTLE) {
-                     if (i > 0 && !world.isClientSide) {
-+                        // CraftBukkit start
-+                        if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_FILL)) {
-+                            return true;
-+                        }
-                         if (!entityhuman.abilities.canInstantlyBuild) {
-                             itemstack1 = PotionUtil.a(new ItemStack(Items.POTION), Potions.b);
-                             entityhuman.b(StatisticList.J);
-@@ -106,12 +126,17 @@
-                         }
- 
-                         world.a((EntityHuman) null, blockposition, SoundEffects.N, SoundCategory.BLOCKS, 1.0F, 1.0F);
--                        this.a(world, blockposition, iblockdata, i - 1);
-+                        // this.a(world, blockposition, iblockdata, i - 1);
-+                        // CraftBukkit end
-                     }
- 
-                     return true;
-                 } else if (item == Items.POTION && PotionUtil.d(itemstack) == Potions.b) {
-                     if (i < 3 && !world.isClientSide) {
-+                        // CraftBukkit start
-+                        if (!this.changeLevel(world, blockposition, iblockdata, i + 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
-+                            return true;
-+                        }
-                         if (!entityhuman.abilities.canInstantlyBuild) {
-                             itemstack1 = new ItemStack(Items.GLASS_BOTTLE);
-                             entityhuman.b(StatisticList.J);
-@@ -122,7 +147,8 @@
-                         }
- 
-                         world.a((EntityHuman) null, blockposition, SoundEffects.M, SoundCategory.BLOCKS, 1.0F, 1.0F);
--                        this.a(world, blockposition, iblockdata, i + 1);
-+                        // this.a(world, blockposition, iblockdata, i + 1);
-+                        // CraftBukkit end
-                     }
- 
-                     return true;
-@@ -131,8 +157,13 @@
-                         ItemArmor itemarmor = (ItemArmor) item;
- 
-                         if (itemarmor.d() == ItemArmor.EnumArmorMaterial.LEATHER && itemarmor.e_(itemstack) && !world.isClientSide) {
-+                            // CraftBukkit start
-+                            if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.ARMOR_WASH)) {
-+                                return true;
-+                            }
-                             itemarmor.d(itemstack);
--                            this.a(world, blockposition, iblockdata, i - 1);
-+                            // this.a(world, blockposition, iblockdata, i - 1);
-+                            // CraftBukkit end
-                             entityhuman.b(StatisticList.K);
-                             return true;
-                         }
-@@ -140,13 +171,18 @@
- 
-                     if (i > 0 && item instanceof ItemBanner) {
-                         if (TileEntityBanner.b(itemstack) > 0 && !world.isClientSide) {
-+                            // CraftBukkit start
-+                            if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BANNER_WASH)) {
-+                                return true;
-+                            }
-                             itemstack1 = itemstack.cloneItemStack();
-                             itemstack1.setCount(1);
-                             TileEntityBanner.c(itemstack1);
-                             entityhuman.b(StatisticList.L);
-                             if (!entityhuman.abilities.canInstantlyBuild) {
-                                 itemstack.subtract(1);
--                                this.a(world, blockposition, iblockdata, i - 1);
-+                                // this.a(world, blockposition, iblockdata, i - 1);
-+                                // CraftBukkit end
-                             }
- 
-                             if (itemstack.isEmpty()) {
-@@ -167,9 +203,25 @@
-         }
-     }
- 
-+    // CraftBukkit start
-     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, int i) {
--        world.setTypeAndData(blockposition, iblockdata.set(BlockCauldron.LEVEL, Integer.valueOf(MathHelper.clamp(i, 0, 3))), 2);
-+        this.changeLevel(world, blockposition, iblockdata, i, null, CauldronLevelChangeEvent.ChangeReason.UNKNOWN);
-+    }
-+
-+    private boolean changeLevel(World world, BlockPosition blockposition, IBlockData iblockdata, int i, Entity entity, CauldronLevelChangeEvent.ChangeReason reason) {
-+        int newLevel = Integer.valueOf(MathHelper.clamp(i, 0, 3));
-+        CauldronLevelChangeEvent event = new CauldronLevelChangeEvent(
-+                world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()),
-+                (entity == null) ? null : entity.getBukkitEntity(), reason, iblockdata.get(BlockCauldron.LEVEL), newLevel
-+        );
-+        world.getServer().getPluginManager().callEvent(event);
-+        if (event.isCancelled()) {
-+            return false;
-+        }
-+        world.setTypeAndData(blockposition, iblockdata.set(BlockCauldron.LEVEL, newLevel), 2);
-         world.updateAdjacentComparators(blockposition, this);
-+        return true;
-+        // CraftBukkit end
-     }
- 
-     public void h(World world, BlockPosition blockposition) {
-@@ -180,7 +232,7 @@
-                 IBlockData iblockdata = world.getType(blockposition);
- 
-                 if (((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue() < 3) {
--                    world.setTypeAndData(blockposition, iblockdata.a((IBlockState) BlockCauldron.LEVEL), 2);
-+                    this.a(world, blockposition, iblockdata.a((IBlockState) BlockCauldron.LEVEL), 2); // CraftBukkit
-                 }
- 
-             }
diff --git a/nms-patches/BlockChorusFlower.patch b/nms-patches/BlockChorusFlower.patch
deleted file mode 100644
index e5482d5..0000000
--- a/nms-patches/BlockChorusFlower.patch
+++ /dev/null
@@ -1,92 +0,0 @@
---- a/net/minecraft/server/BlockChorusFlower.java
-+++ b/net/minecraft/server/BlockChorusFlower.java
-@@ -4,6 +4,8 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class BlockChorusFlower extends Block {
- 
-     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 5);
-@@ -68,8 +70,20 @@
-                     }
- 
-                     if (flag && a(world, blockposition1, (EnumDirection) null) && world.isEmpty(blockposition.up(2))) {
--                        world.setTypeAndData(blockposition, Blocks.CHORUS_PLANT.getBlockData(), 2);
--                        this.a(world, blockposition1, i);
-+                        // world.setTypeAndData(blockposition, Blocks.CHORUS_PLANT.getBlockData(), 2);
-+                        // this.a(world, blockposition1, i);
-+                        // CraftBukkit start - add event
-+                        BlockPosition target = blockposition1;
-+                        if (CraftEventFactory.handleBlockSpreadEvent(
-+                                world.getWorld().getBlockAt(target.getX(), target.getY(), target.getZ()),
-+                                world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()),
-+                                this,
-+                                toLegacyData(this.getBlockData().set(BlockChorusFlower.AGE, Integer.valueOf(i)))
-+                        )) {
-+                            world.setTypeAndData(blockposition, Blocks.CHORUS_PLANT.getBlockData(), 2);
-+                            world.triggerEffect(1033, blockposition, 0);
-+                        }
-+                        // CraftBukkit end
-                     } else if (i < 4) {
-                         j = random.nextInt(4);
-                         boolean flag2 = false;
-@@ -83,18 +97,53 @@
-                             BlockPosition blockposition2 = blockposition.shift(enumdirection);
- 
-                             if (world.isEmpty(blockposition2) && world.isEmpty(blockposition2.down()) && a(world, blockposition2, enumdirection.opposite())) {
--                                this.a(world, blockposition2, i + 1);
--                                flag2 = true;
-+                                // CraftBukkit start - add event
-+                                // this.a(world, blockposition2, i + 1);
-+                                BlockPosition target = blockposition2;
-+                                if (CraftEventFactory.handleBlockSpreadEvent(
-+                                        world.getWorld().getBlockAt(target.getX(), target.getY(), target.getZ()),
-+                                        world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()),
-+                                        this,
-+                                        toLegacyData(this.getBlockData().set(BlockChorusFlower.AGE, Integer.valueOf(i + 1)))
-+                                )) {
-+                                    world.triggerEffect(1033, blockposition, 0);
-+                                    flag2 = true;
-+                                }
-+                                // CraftBukkit end
-                             }
-                         }
- 
-                         if (flag2) {
-                             world.setTypeAndData(blockposition, Blocks.CHORUS_PLANT.getBlockData(), 2);
-                         } else {
--                            this.c(world, blockposition);
-+                            // CraftBukkit - add event
-+                            if (CraftEventFactory.handleBlockGrowEvent(
-+                                    world,
-+                                    blockposition.getX(),
-+                                    blockposition.getY(),
-+                                    blockposition.getZ(),
-+                                    this,
-+                                    toLegacyData(iblockdata.set(BlockChorusFlower.AGE, Integer.valueOf(5)))
-+                            )) {
-+                                world.triggerEffect(1034, blockposition, 0);
-+                            }
-+                            // this.c(world, blockposition);
-+                            // CraftBukkit end
-                         }
-                     } else if (i == 4) {
--                        this.c(world, blockposition);
-+                        // CraftBukkit - add event
-+                        if (CraftEventFactory.handleBlockGrowEvent(
-+                                world,
-+                                blockposition.getX(),
-+                                blockposition.getY(),
-+                                blockposition.getZ(),
-+                                this,
-+                                toLegacyData(iblockdata.set(BlockChorusFlower.AGE, Integer.valueOf(5)))
-+                        )) {
-+                            world.triggerEffect(1034, blockposition, 0);
-+                        }
-+                        // this.c(world, blockposition);
-+                        // CraftBukkit end
-                     }
- 
-                 }
diff --git a/nms-patches/BlockCocoa.patch b/nms-patches/BlockCocoa.patch
deleted file mode 100644
index 470a26f..0000000
--- a/nms-patches/BlockCocoa.patch
+++ /dev/null
@@ -1,35 +0,0 @@
---- a/net/minecraft/server/BlockCocoa.java
-+++ b/net/minecraft/server/BlockCocoa.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePlantElement {
- 
-     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 2);
-@@ -23,7 +25,10 @@
-             int i = ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue();
- 
-             if (i < 2) {
--                world.setTypeAndData(blockposition, iblockdata.set(BlockCocoa.AGE, Integer.valueOf(i + 1)), 2);
-+                // CraftBukkit start
-+                IBlockData data = iblockdata.set(AGE, Integer.valueOf(i + 1));
-+                CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -124,7 +129,10 @@
-     }
- 
-     public void b(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
--        world.setTypeAndData(blockposition, iblockdata.set(BlockCocoa.AGE, Integer.valueOf(((Integer) iblockdata.get(BlockCocoa.AGE)).intValue() + 1)), 2);
-+        // CraftBukkit start
-+        IBlockData data = iblockdata.set(AGE, Integer.valueOf(((Integer) iblockdata.get(AGE)).intValue() + 1));
-+        CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
-+        // CraftBukkit end
-     }
- 
-     public IBlockData fromLegacyData(int i) {
diff --git a/nms-patches/BlockCommand.patch b/nms-patches/BlockCommand.patch
deleted file mode 100644
index 12a88a4..0000000
--- a/nms-patches/BlockCommand.patch
+++ /dev/null
@@ -1,27 +0,0 @@
---- a/net/minecraft/server/BlockCommand.java
-+++ b/net/minecraft/server/BlockCommand.java
-@@ -4,6 +4,8 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
-+
- public class BlockCommand extends BlockTileEntity {
- 
-     private static final Logger c = LogManager.getLogger();
-@@ -30,6 +32,15 @@
-                 TileEntityCommand tileentitycommand = (TileEntityCommand) tileentity;
-                 boolean flag = world.isBlockIndirectlyPowered(blockposition);
-                 boolean flag1 = tileentitycommand.f();
-+                // CraftBukkit start
-+                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                int old = flag1 ? 15 : 0;
-+                int current = flag ? 15 : 0;
-+
-+                BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, old, current);
-+                world.getServer().getPluginManager().callEvent(eventRedstone);
-+                flag = eventRedstone.getNewCurrent() > 0;
-+                // CraftBukkit end
- 
-                 tileentitycommand.a(flag);
-                 if (!flag1 && !tileentitycommand.h() && tileentitycommand.l() != TileEntityCommand.Type.SEQUENCE) {
diff --git a/nms-patches/BlockConcretePowder.patch b/nms-patches/BlockConcretePowder.patch
deleted file mode 100644
index dd2708f..0000000
--- a/nms-patches/BlockConcretePowder.patch
+++ /dev/null
@@ -1,22 +0,0 @@
---- a/net/minecraft/server/BlockConcretePowder.java
-+++ b/net/minecraft/server/BlockConcretePowder.java
-@@ -11,8 +11,8 @@
-     }
- 
-     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, IBlockData iblockdata1) {
--        if (iblockdata1.getMaterial().isLiquid()) {
--            world.setTypeAndData(blockposition, Blocks.dR.getBlockData().set(BlockCloth.COLOR, iblockdata.get(BlockConcretePowder.a)), 3);
-+        if (iblockdata1.getMaterial().isLiquid() && world.getType(blockposition).getBlock() != Blocks.dR) { // CraftBukkit - don't double concrete
-+            org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition, Blocks.dR.getBlockData().set(BlockCloth.COLOR, iblockdata.get(BlockConcretePowder.a)), null); // CraftBukkit
-         }
- 
-     }
-@@ -36,7 +36,7 @@
-         }
- 
-         if (flag) {
--            world.setTypeAndData(blockposition, Blocks.dR.getBlockData().set(BlockCloth.COLOR, iblockdata.get(BlockConcretePowder.a)), 3);
-+            org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition, Blocks.dR.getBlockData().set(BlockCloth.COLOR, iblockdata.get(BlockConcretePowder.a)), null); // CraftBukkit
-         }
- 
-         return flag;
diff --git a/nms-patches/BlockCrops.patch b/nms-patches/BlockCrops.patch
deleted file mode 100644
index 385751d..0000000
--- a/nms-patches/BlockCrops.patch
+++ /dev/null
@@ -1,35 +0,0 @@
---- a/net/minecraft/server/BlockCrops.java
-+++ b/net/minecraft/server/BlockCrops.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement {
- 
-     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 7);
-@@ -53,7 +55,10 @@
-                 float f = a((Block) this, world, blockposition);
- 
-                 if (random.nextInt((int) (25.0F / f) + 1) == 0) {
--                    world.setTypeAndData(blockposition, this.setAge(i + 1), 2);
-+                    // CraftBukkit start
-+                    IBlockData data = this.setAge(i + 1);
-+                    CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
-+                    // CraftBukkit end
-                 }
-             }
-         }
-@@ -68,7 +73,10 @@
-             i = j;
-         }
- 
--        world.setTypeAndData(blockposition, this.setAge(i), 2);
-+        // CraftBukkit start
-+        IBlockData data = this.setAge(i);
-+        CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
-+        // CraftBukkit end
-     }
- 
-     protected int b(World world) {
diff --git a/nms-patches/BlockDaylightDetector.patch b/nms-patches/BlockDaylightDetector.patch
deleted file mode 100644
index a9525a8..0000000
--- a/nms-patches/BlockDaylightDetector.patch
+++ /dev/null
@@ -1,10 +0,0 @@
---- a/net/minecraft/server/BlockDaylightDetector.java
-+++ b/net/minecraft/server/BlockDaylightDetector.java
-@@ -45,6 +45,7 @@
- 
-             i = MathHelper.clamp(i, 0, 15);
-             if (((Integer) iblockdata.get(BlockDaylightDetector.POWER)).intValue() != i) {
-+                i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), ((Integer) iblockdata.get(POWER)), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
-                 world.setTypeAndData(blockposition, iblockdata.set(BlockDaylightDetector.POWER, Integer.valueOf(i)), 3);
-             }
- 
diff --git a/nms-patches/BlockDiodeAbstract.patch b/nms-patches/BlockDiodeAbstract.patch
deleted file mode 100644
index f7f4522..0000000
--- a/nms-patches/BlockDiodeAbstract.patch
+++ /dev/null
@@ -1,30 +0,0 @@
---- a/net/minecraft/server/BlockDiodeAbstract.java
-+++ b/net/minecraft/server/BlockDiodeAbstract.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
- 
-     protected static final AxisAlignedBB c = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.125D, 1.0D);
-@@ -35,8 +37,18 @@
-             boolean flag = this.e(world, blockposition, iblockdata);
- 
-             if (this.d && !flag) {
-+                // CraftBukkit start
-+                if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 15, 0).getNewCurrent() != 0) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 world.setTypeAndData(blockposition, this.z(iblockdata), 2);
-             } else if (!this.d) {
-+                // CraftBukkit start
-+                if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 0, 15).getNewCurrent() != 15) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 world.setTypeAndData(blockposition, this.y(iblockdata), 2);
-                 if (!flag) {
-                     world.a(blockposition, this.y(iblockdata).getBlock(), this.E(iblockdata), -1);
diff --git a/nms-patches/BlockDispenser.patch b/nms-patches/BlockDispenser.patch
deleted file mode 100644
index a46b1ee..0000000
--- a/nms-patches/BlockDispenser.patch
+++ /dev/null
@@ -1,18 +0,0 @@
---- a/net/minecraft/server/BlockDispenser.java
-+++ b/net/minecraft/server/BlockDispenser.java
-@@ -8,6 +8,7 @@
-     public static final BlockStateBoolean TRIGGERED = BlockStateBoolean.of("triggered");
-     public static final RegistryDefault<Item, IDispenseBehavior> REGISTRY = new RegistryDefault(new DispenseBehaviorItem());
-     protected Random d = new Random();
-+    public static boolean eventFired = false; // CraftBukkit
- 
-     protected BlockDispenser() {
-         super(Material.STONE);
-@@ -82,6 +83,7 @@
-                 IDispenseBehavior idispensebehavior = this.a(itemstack);
- 
-                 if (idispensebehavior != IDispenseBehavior.NONE) {
-+                    eventFired = false; // CraftBukkit - reset event status
-                     tileentitydispenser.setItem(i, idispensebehavior.a(sourceblock, itemstack));
-                 }
- 
diff --git a/nms-patches/BlockDoor.patch b/nms-patches/BlockDoor.patch
deleted file mode 100644
index 063d2ea..0000000
--- a/nms-patches/BlockDoor.patch
+++ /dev/null
@@ -1,37 +0,0 @@
---- a/net/minecraft/server/BlockDoor.java
-+++ b/net/minecraft/server/BlockDoor.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
-+
- public class BlockDoor extends Block {
- 
-     public static final BlockStateDirection FACING = BlockFacingHorizontal.FACING;
-@@ -137,9 +139,23 @@
-                     this.b(world, blockposition, iblockdata, 0);
-                 }
-             } else {
--                boolean flag1 = world.isBlockIndirectlyPowered(blockposition) || world.isBlockIndirectlyPowered(blockposition3);
- 
--                if (block != this && (flag1 || block.getBlockData().m()) && flag1 != ((Boolean) iblockdata2.get(BlockDoor.POWERED)).booleanValue()) {
-+                // CraftBukkit start
-+                org.bukkit.World bworld = world.getWorld();
-+                org.bukkit.block.Block bukkitBlock = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                org.bukkit.block.Block blockTop = bworld.getBlockAt(blockposition3.getX(), blockposition3.getY(), blockposition3.getZ());
-+
-+                int power = bukkitBlock.getBlockPower();
-+                int powerTop = blockTop.getBlockPower();
-+                if (powerTop > power) power = powerTop;
-+                int oldPower = (Boolean) iblockdata2.get(BlockDoor.POWERED) ? 15 : 0;
-+
-+                if (oldPower == 0 ^ power == 0) {
-+                    BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, oldPower, power);
-+                    world.getServer().getPluginManager().callEvent(eventRedstone);
-+
-+                    boolean flag1 = eventRedstone.getNewCurrent() > 0;
-+                    // CraftBukkit end
-                     world.setTypeAndData(blockposition3, iblockdata2.set(BlockDoor.POWERED, Boolean.valueOf(flag1)), 2);
-                     if (flag1 != ((Boolean) iblockdata.get(BlockDoor.OPEN)).booleanValue()) {
-                         world.setTypeAndData(blockposition, iblockdata.set(BlockDoor.OPEN, Boolean.valueOf(flag1)), 2);
diff --git a/nms-patches/BlockDragonEgg.patch b/nms-patches/BlockDragonEgg.patch
deleted file mode 100644
index af397c6..0000000
--- a/nms-patches/BlockDragonEgg.patch
+++ /dev/null
@@ -1,30 +0,0 @@
---- a/net/minecraft/server/BlockDragonEgg.java
-+++ b/net/minecraft/server/BlockDragonEgg.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.event.block.BlockFromToEvent; // CraftBukkit
-+
- public class BlockDragonEgg extends Block {
- 
-     protected static final AxisAlignedBB a = new AxisAlignedBB(0.0625D, 0.0D, 0.0625D, 0.9375D, 1.0D, 0.9375D);
-@@ -66,6 +68,18 @@
-                 BlockPosition blockposition1 = blockposition.a(world.random.nextInt(16) - world.random.nextInt(16), world.random.nextInt(8) - world.random.nextInt(8), world.random.nextInt(16) - world.random.nextInt(16));
- 
-                 if (world.getType(blockposition1).getBlock().material == Material.AIR) {
-+                    // CraftBukkit start
-+                    org.bukkit.block.Block from = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                    org.bukkit.block.Block to = world.getWorld().getBlockAt(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
-+                    BlockFromToEvent event = new BlockFromToEvent(from, to);
-+                    org.bukkit.Bukkit.getPluginManager().callEvent(event);
-+
-+                    if (event.isCancelled()) {
-+                        return;
-+                    }
-+
-+                    blockposition1 = new BlockPosition(event.getToBlock().getX(), event.getToBlock().getY(), event.getToBlock().getZ());
-+                    // CraftBukkit end
-                     if (world.isClientSide) {
-                         for (int j = 0; j < 128; ++j) {
-                             double d0 = world.random.nextDouble();
diff --git a/nms-patches/BlockDropper.patch b/nms-patches/BlockDropper.patch
deleted file mode 100644
index 07c21cb..0000000
--- a/nms-patches/BlockDropper.patch
+++ /dev/null
@@ -1,41 +0,0 @@
---- a/net/minecraft/server/BlockDropper.java
-+++ b/net/minecraft/server/BlockDropper.java
-@@ -1,5 +1,10 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.inventory.InventoryMoveItemEvent;
-+// CraftBukkit end
-+
- public class BlockDropper extends BlockDispenser {
- 
-     private final IDispenseBehavior e = new DispenseBehaviorItem();
-@@ -35,8 +40,25 @@
-                     if (iinventory == null) {
-                         itemstack1 = this.e.a(sourceblock, itemstack);
-                     } else {
--                        itemstack1 = TileEntityHopper.addItem(tileentitydispenser, iinventory, itemstack.cloneItemStack().cloneAndSubtract(1), enumdirection.opposite());
--                        if (itemstack1.isEmpty()) {
-+                        // CraftBukkit start - Fire event when pushing items into other inventories
-+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(itemstack.cloneItemStack().cloneAndSubtract(1));
-+
-+                        org.bukkit.inventory.Inventory destinationInventory;
-+                        // Have to special case large chests as they work oddly
-+                        if (iinventory instanceof InventoryLargeChest) {
-+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
-+                        } else {
-+                            destinationInventory = iinventory.getOwner().getInventory();
-+                        }
-+
-+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(tileentitydispenser.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
-+                        world.getServer().getPluginManager().callEvent(event);
-+                        if (event.isCancelled()) {
-+                            return;
-+                        }
-+                        itemstack1 = TileEntityHopper.addItem(tileentitydispenser, iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumdirection.opposite());
-+                        if (event.getItem().equals(oitemstack) && itemstack1.isEmpty()) {
-+                            // CraftBukkit end
-                             itemstack1 = itemstack.cloneItemStack();
-                             itemstack1.subtract(1);
-                         } else {
diff --git a/nms-patches/BlockEnderPortal.patch b/nms-patches/BlockEnderPortal.patch
deleted file mode 100644
index 478cb6a..0000000
--- a/nms-patches/BlockEnderPortal.patch
+++ /dev/null
@@ -1,22 +0,0 @@
---- a/net/minecraft/server/BlockEnderPortal.java
-+++ b/net/minecraft/server/BlockEnderPortal.java
-@@ -4,6 +4,8 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.event.entity.EntityPortalEnterEvent; // CraftBukkit
-+
- public class BlockEnderPortal extends BlockTileEntity {
- 
-     protected static final AxisAlignedBB a = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.75D, 1.0D);
-@@ -37,6 +39,10 @@
- 
-     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-         if (!entity.isPassenger() && !entity.isVehicle() && entity.bf() && !world.isClientSide && entity.getBoundingBox().c(iblockdata.e(world, blockposition).a(blockposition))) {
-+            // CraftBukkit start - Entity in portal
-+            EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity.getBukkitEntity(), new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+            world.getServer().getPluginManager().callEvent(event);
-+            // CraftBukkit end
-             entity.b(1);
-         }
- 
diff --git a/nms-patches/BlockFire.patch b/nms-patches/BlockFire.patch
deleted file mode 100644
index f5ce1cd..0000000
--- a/nms-patches/BlockFire.patch
+++ /dev/null
@@ -1,156 +0,0 @@
---- a/net/minecraft/server/BlockFire.java
-+++ b/net/minecraft/server/BlockFire.java
-@@ -5,6 +5,12 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.block.BlockBurnEvent;
-+import org.bukkit.event.block.BlockSpreadEvent;
-+// CraftBukkit end
-+
- public class BlockFire extends Block {
- 
-     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 15);
-@@ -95,7 +101,7 @@
-     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-         if (world.getGameRules().getBoolean("doFireTick")) {
-             if (!this.canPlace(world, blockposition)) {
--                world.setAir(blockposition);
-+                fireExtinguished(world, blockposition); // CraftBukkit - invalid place location
-             }
- 
-             Block block = world.getType(blockposition.down()).getBlock();
-@@ -108,7 +114,7 @@
-             int i = ((Integer) iblockdata.get(BlockFire.AGE)).intValue();
- 
-             if (!flag && world.isRaining() && this.b(world, blockposition) && random.nextFloat() < 0.2F + (float) i * 0.03F) {
--                world.setAir(blockposition);
-+                fireExtinguished(world, blockposition); // CraftBukkit - extinguished by rain
-             } else {
-                 if (i < 15) {
-                     iblockdata = iblockdata.set(BlockFire.AGE, Integer.valueOf(i + random.nextInt(3) / 2));
-@@ -119,14 +125,14 @@
-                 if (!flag) {
-                     if (!this.c(world, blockposition)) {
-                         if (!world.getType(blockposition.down()).q() || i > 3) {
--                            world.setAir(blockposition);
-+                            fireExtinguished(world, blockposition); // CraftBukkit
-                         }
- 
-                         return;
-                     }
- 
-                     if (!this.c((IBlockAccess) world, blockposition.down()) && i == 15 && random.nextInt(4) == 0) {
--                        world.setAir(blockposition);
-+                        fireExtinguished(world, blockposition); // CraftBukkit
-                         return;
-                     }
-                 }
-@@ -138,12 +144,14 @@
-                     b0 = -50;
-                 }
- 
--                this.a(world, blockposition.east(), 300 + b0, random, i);
--                this.a(world, blockposition.west(), 300 + b0, random, i);
--                this.a(world, blockposition.down(), 250 + b0, random, i);
--                this.a(world, blockposition.up(), 250 + b0, random, i);
--                this.a(world, blockposition.north(), 300 + b0, random, i);
--                this.a(world, blockposition.south(), 300 + b0, random, i);
-+                // CraftBukkit start - add source blockposition to burn calls
-+                this.a(world, blockposition.east(), 300 + b0, random, i, blockposition);
-+                this.a(world, blockposition.west(), 300 + b0, random, i, blockposition);
-+                this.a(world, blockposition.down(), 250 + b0, random, i, blockposition);
-+                this.a(world, blockposition.up(), 250 + b0, random, i, blockposition);
-+                this.a(world, blockposition.north(), 300 + b0, random, i, blockposition);
-+                this.a(world, blockposition.south(), 300 + b0, random, i, blockposition);
-+                // CraftBukkit end
- 
-                 for (int j = -1; j <= 1; ++j) {
-                     for (int k = -1; k <= 1; ++k) {
-@@ -172,7 +180,26 @@
-                                             l1 = 15;
-                                         }
- 
--                                        world.setTypeAndData(blockposition1, iblockdata.set(BlockFire.AGE, Integer.valueOf(l1)), 3);
-+                                        // CraftBukkit start - Call to stop spread of fire
-+                                        if (world.getType(blockposition1) != Blocks.FIRE) {
-+                                            if (CraftEventFactory.callBlockIgniteEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
-+                                                continue;
-+                                            }
-+
-+                                            org.bukkit.Server server = world.getServer();
-+                                            org.bukkit.World bworld = world.getWorld();
-+                                            org.bukkit.block.BlockState blockState = bworld.getBlockAt(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ()).getState();
-+                                            blockState.setTypeId(Block.getId(this));
-+                                            blockState.setData(new org.bukkit.material.MaterialData(Block.getId(this), (byte) l1));
-+
-+                                            BlockSpreadEvent spreadEvent = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), blockState);
-+                                            server.getPluginManager().callEvent(spreadEvent);
-+
-+                                            if (!spreadEvent.isCancelled()) {
-+                                                blockState.update(true);
-+                                            }
-+                                        }
-+                                        // CraftBukkit end
-                                     }
-                                 }
-                             }
-@@ -204,12 +231,24 @@
-         return integer == null ? 0 : integer.intValue();
-     }
- 
--    private void a(World world, BlockPosition blockposition, int i, Random random, int j) {
-+    private void a(World world, BlockPosition blockposition, int i, Random random, int j, BlockPosition sourceposition) { // CraftBukkit add sourceposition
-         int k = this.e(world.getType(blockposition).getBlock());
- 
-         if (random.nextInt(i) < k) {
-             IBlockData iblockdata = world.getType(blockposition);
- 
-+            // CraftBukkit start
-+            org.bukkit.block.Block theBlock = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            org.bukkit.block.Block sourceBlock = world.getWorld().getBlockAt(sourceposition.getX(), sourceposition.getY(), sourceposition.getZ());
-+
-+            BlockBurnEvent event = new BlockBurnEvent(theBlock, sourceBlock);
-+            world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-+
-             if (random.nextInt(j + 10) < 5 && !world.isRainingAt(blockposition)) {
-                 int l = j + random.nextInt(5) / 4;
- 
-@@ -276,7 +315,7 @@
- 
-     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-         if (!world.getType(blockposition.down()).q() && !this.c(world, blockposition)) {
--            world.setAir(blockposition);
-+            fireExtinguished(world, blockposition); // CraftBukkit - fuel block gone
-         }
- 
-     }
-@@ -284,7 +323,7 @@
-     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-         if (world.worldProvider.getDimensionManager().getDimensionID() > 0 || !Blocks.PORTAL.b(world, blockposition)) {
-             if (!world.getType(blockposition.down()).q() && !this.c(world, blockposition)) {
--                world.setAir(blockposition);
-+                fireExtinguished(world, blockposition); // CraftBukkit - fuel block broke
-             } else {
-                 world.a(blockposition, (Block) this, this.a(world) + world.random.nextInt(10));
-             }
-@@ -310,4 +349,12 @@
-     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
-         return EnumBlockFaceShape.UNDEFINED;
-     }
-+
-+    // CraftBukkit start
-+    private void fireExtinguished(World world, BlockPosition position) {
-+        if (!CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), Blocks.AIR).isCancelled()) {
-+            world.setAir(position);
-+        }
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/BlockFlowing.patch b/nms-patches/BlockFlowing.patch
deleted file mode 100644
index 5590669..0000000
--- a/nms-patches/BlockFlowing.patch
+++ /dev/null
@@ -1,66 +0,0 @@
---- a/net/minecraft/server/BlockFlowing.java
-+++ b/net/minecraft/server/BlockFlowing.java
-@@ -5,6 +5,11 @@
- import java.util.Random;
- import java.util.Set;
- 
-+// CraftBukkit start
-+import org.bukkit.block.BlockFace;
-+import org.bukkit.event.block.BlockFromToEvent;
-+// CraftBukkit end
-+
- public class BlockFlowing extends BlockFluids {
- 
-     int a;
-@@ -85,12 +90,25 @@
-             this.f(world, blockposition, iblockdata);
-         }
- 
-+        org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()); // CraftBukkit
-         IBlockData iblockdata2 = world.getType(blockposition.down());
- 
-         if (this.h(world, blockposition.down(), iblockdata2)) {
-+            // CraftBukkit start
-+            BlockFromToEvent event = new BlockFromToEvent(source, BlockFace.DOWN);
-+            world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-+
-             if (this.material == Material.LAVA && world.getType(blockposition.down()).getMaterial() == Material.WATER) {
--                world.setTypeUpdate(blockposition.down(), Blocks.STONE.getBlockData());
--                this.fizz(world, blockposition.down());
-+                // CraftBukkit start
-+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition.down(), Blocks.STONE.getBlockData(), null)) {
-+                    this.fizz(world, blockposition.down());
-+                }
-+                // CraftBukkit end
-                 return;
-             }
- 
-@@ -116,14 +134,21 @@
-             while (iterator1.hasNext()) {
-                 EnumDirection enumdirection1 = (EnumDirection) iterator1.next();
- 
--                this.flow(world, blockposition.shift(enumdirection1), world.getType(blockposition.shift(enumdirection1)), k);
-+                // CraftBukkit start
-+                BlockFromToEvent event = new BlockFromToEvent(source, org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumdirection1));
-+                world.getServer().getPluginManager().callEvent(event);
-+
-+                if (!event.isCancelled()) {
-+                    this.flow(world, blockposition.shift(enumdirection1), world.getType(blockposition.shift(enumdirection1)), k);
-+                }
-+                // CraftBukkit end
-             }
-         }
- 
-     }
- 
-     private void flow(World world, BlockPosition blockposition, IBlockData iblockdata, int i) {
--        if (this.h(world, blockposition, iblockdata)) {
-+        if (world.isLoaded(blockposition) && this.h(world, blockposition, iblockdata)) { // CraftBukkit - add isLoaded check
-             if (iblockdata.getMaterial() != Material.AIR) {
-                 if (this.material == Material.LAVA) {
-                     this.fizz(world, blockposition);
diff --git a/nms-patches/BlockFluids.patch b/nms-patches/BlockFluids.patch
deleted file mode 100644
index cccec39..0000000
--- a/nms-patches/BlockFluids.patch
+++ /dev/null
@@ -1,27 +0,0 @@
---- a/net/minecraft/server/BlockFluids.java
-+++ b/net/minecraft/server/BlockFluids.java
-@@ -175,14 +175,20 @@
-                 Integer integer = (Integer) iblockdata.get(BlockFluids.LEVEL);
- 
-                 if (integer.intValue() == 0) {
--                    world.setTypeUpdate(blockposition, Blocks.OBSIDIAN.getBlockData());
--                    this.fizz(world, blockposition);
-+                    // CraftBukkit start
-+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition, Blocks.OBSIDIAN.getBlockData(), null)) {
-+                        this.fizz(world, blockposition);
-+                    }
-+                    // CraftBukkit end
-                     return true;
-                 }
- 
-                 if (integer.intValue() <= 4) {
--                    world.setTypeUpdate(blockposition, Blocks.COBBLESTONE.getBlockData());
--                    this.fizz(world, blockposition);
-+                    // CraftBukkit start
-+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition, Blocks.COBBLESTONE.getBlockData(), null)) {
-+                        this.fizz(world, blockposition);
-+                    }
-+                    // CraftBukkit end
-                     return true;
-                 }
-             }
diff --git a/nms-patches/BlockGrass.patch b/nms-patches/BlockGrass.patch
deleted file mode 100644
index 040f26a..0000000
--- a/nms-patches/BlockGrass.patch
+++ /dev/null
@@ -1,77 +0,0 @@
---- a/net/minecraft/server/BlockGrass.java
-+++ b/net/minecraft/server/BlockGrass.java
-@@ -2,6 +2,14 @@
- 
- import java.util.Random;
- 
-+// CraftBukkit start
-+import org.bukkit.block.BlockState;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-+import org.bukkit.event.block.BlockSpreadEvent;
-+import org.bukkit.event.block.BlockFadeEvent;
-+// CraftBukkit end
-+
- public class BlockGrass extends Block implements IBlockFragilePlantElement {
- 
-     public static final BlockStateBoolean SNOWY = BlockStateBoolean.of("snowy");
-@@ -22,7 +30,19 @@
-     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-         if (!world.isClientSide) {
-             if (world.getLightLevel(blockposition.up()) < 4 && world.getType(blockposition.up()).c() > 2) {
--                world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData());
-+                // CraftBukkit start
-+                // world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData());
-+                org.bukkit.World bworld = world.getWorld();
-+                BlockState blockState = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()).getState();
-+                blockState.setType(CraftMagicNumbers.getMaterial(Blocks.DIRT));
-+
-+                BlockFadeEvent event = new BlockFadeEvent(blockState.getBlock(), blockState);
-+                world.getServer().getPluginManager().callEvent(event);
-+
-+                if (!event.isCancelled()) {
-+                    blockState.update(true);
-+                }
-+                // CraftBukkit end
-             } else {
-                 if (world.getLightLevel(blockposition.up()) >= 9) {
-                     for (int i = 0; i < 4; ++i) {
-@@ -36,7 +56,19 @@
-                         IBlockData iblockdata2 = world.getType(blockposition1);
- 
-                         if (iblockdata2.getBlock() == Blocks.DIRT && iblockdata2.get(BlockDirt.VARIANT) == BlockDirt.EnumDirtVariant.DIRT && world.getLightLevel(blockposition1.up()) >= 4 && iblockdata1.c() <= 2) {
--                            world.setTypeUpdate(blockposition1, Blocks.GRASS.getBlockData());
-+                            // CraftBukkit start
-+                            // world.setTypeUpdate(blockposition1, Blocks.GRASS.getBlockData());
-+                            org.bukkit.World bworld = world.getWorld();
-+                            BlockState blockState = bworld.getBlockAt(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ()).getState();
-+                            blockState.setType(CraftMagicNumbers.getMaterial(Blocks.GRASS));
-+
-+                            BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), blockState);
-+                            world.getServer().getPluginManager().callEvent(event);
-+
-+                            if (!event.isCancelled()) {
-+                                blockState.update(true);
-+                            }
-+                            // CraftBukkit end
-                         }
-                     }
-                 }
-@@ -79,13 +111,15 @@
-                         IBlockData iblockdata1 = blockflowers.getBlockData().set(blockflowers.g(), blockflowers_enumflowervarient);
- 
-                         if (blockflowers.f(world, blockposition2, iblockdata1)) {
--                            world.setTypeAndData(blockposition2, iblockdata1, 3);
-+                            // world.setTypeAndData(blockposition2, iblockdata1, 3); // CraftBukkit
-+                            CraftEventFactory.handleBlockGrowEvent(world, blockposition2.getX(), blockposition2.getY(), blockposition2.getZ(), iblockdata1.getBlock(), iblockdata1.getBlock().toLegacyData(iblockdata1)); // CraftBukkit
-                         }
-                     } else {
-                         IBlockData iblockdata2 = Blocks.TALLGRASS.getBlockData().set(BlockLongGrass.TYPE, BlockLongGrass.EnumTallGrassType.GRASS);
- 
-                         if (Blocks.TALLGRASS.f(world, blockposition2, iblockdata2)) {
--                            world.setTypeAndData(blockposition2, iblockdata2, 3);
-+                            // world.setTypeAndData(blockposition2, iblockdata2, 3); // CraftBukkit
-+                            CraftEventFactory.handleBlockGrowEvent(world, blockposition2.getX(), blockposition2.getY(), blockposition2.getZ(), iblockdata2.getBlock(), iblockdata2.getBlock().toLegacyData(iblockdata2)); // CraftBukkit
-                         }
-                     }
-                 }
diff --git a/nms-patches/BlockIce.patch b/nms-patches/BlockIce.patch
deleted file mode 100644
index 2971d27..0000000
--- a/nms-patches/BlockIce.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/BlockIce.java
-+++ b/net/minecraft/server/BlockIce.java
-@@ -47,6 +47,11 @@
-     }
- 
-     protected void b(World world, BlockPosition blockposition) {
-+        // CraftBukkit start
-+        if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), world.worldProvider.l() ? Blocks.AIR : Blocks.WATER).isCancelled()) {
-+            return;
-+        }
-+        // CraftBukkit end
-         if (world.worldProvider.l()) {
-             world.setAir(blockposition);
-         } else {
diff --git a/nms-patches/BlockJukeBox.patch b/nms-patches/BlockJukeBox.patch
deleted file mode 100644
index 2b1a5cd..0000000
--- a/nms-patches/BlockJukeBox.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/BlockJukeBox.java
-+++ b/net/minecraft/server/BlockJukeBox.java
-@@ -141,6 +141,11 @@
-         }
- 
-         public void setRecord(ItemStack itemstack) {
-+            // CraftBukkit start - There can only be one
-+            if (!itemstack.isEmpty()) {
-+                itemstack.setCount(1);
-+            }
-+            // CraftBukkit end
-             this.record = itemstack;
-             this.update();
-         }
diff --git a/nms-patches/BlockLeaves.patch b/nms-patches/BlockLeaves.patch
deleted file mode 100644
index bb3a479..0000000
--- a/nms-patches/BlockLeaves.patch
+++ /dev/null
@@ -1,26 +0,0 @@
---- a/net/minecraft/server/BlockLeaves.java
-+++ b/net/minecraft/server/BlockLeaves.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.event.block.LeavesDecayEvent; // CraftBukkit
-+
- public abstract class BlockLeaves extends Block {
- 
-     public static final BlockStateBoolean DECAYABLE = BlockStateBoolean.of("decayable");
-@@ -132,6 +134,14 @@
-     }
- 
-     private void b(World world, BlockPosition blockposition) {
-+        // CraftBukkit start
-+        LeavesDecayEvent event = new LeavesDecayEvent(world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+        world.getServer().getPluginManager().callEvent(event);
-+
-+        if (event.isCancelled() || world.getType(blockposition).getBlock() != this) {
-+            return;
-+        }
-+        // CraftBukkit end
-         this.b(world, blockposition, world.getType(blockposition), 0);
-         world.setAir(blockposition);
-     }
diff --git a/nms-patches/BlockLever.patch b/nms-patches/BlockLever.patch
deleted file mode 100644
index db03cc1..0000000
--- a/nms-patches/BlockLever.patch
+++ /dev/null
@@ -1,32 +0,0 @@
---- a/net/minecraft/server/BlockLever.java
-+++ b/net/minecraft/server/BlockLever.java
-@@ -3,6 +3,8 @@
- import java.util.Iterator;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
-+
- public class BlockLever extends Block {
- 
-     public static final BlockStateEnum<BlockLever.EnumLeverPosition> FACING = BlockStateEnum.of("facing", BlockLever.EnumLeverPosition.class);
-@@ -129,6 +131,20 @@
-         if (world.isClientSide) {
-             return true;
-         } else {
-+            // CraftBukkit start - Interact Lever
-+            boolean powered = iblockdata.get(POWERED);
-+            org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            int old = (powered) ? 15 : 0;
-+            int current = (!powered) ? 15 : 0;
-+
-+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
-+            world.getServer().getPluginManager().callEvent(eventRedstone);
-+
-+            if ((eventRedstone.getNewCurrent() > 0) != (!powered)) {
-+                return true;
-+            }
-+            // CraftBukkit end
-+
-             iblockdata = iblockdata.a((IBlockState) BlockLever.POWERED);
-             world.setTypeAndData(blockposition, iblockdata, 3);
-             float f3 = ((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 0.6F : 0.5F;
diff --git a/nms-patches/BlockMagma.patch b/nms-patches/BlockMagma.patch
deleted file mode 100644
index 75f5fba..0000000
--- a/nms-patches/BlockMagma.patch
+++ /dev/null
@@ -1,12 +0,0 @@
---- a/net/minecraft/server/BlockMagma.java
-+++ b/net/minecraft/server/BlockMagma.java
-@@ -17,7 +17,9 @@
- 
-     public void stepOn(World world, BlockPosition blockposition, Entity entity) {
-         if (!entity.isFireProof() && entity instanceof EntityLiving && !EnchantmentManager.i((EntityLiving) entity)) {
-+            org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()); // CraftBukkit
-             entity.damageEntity(DamageSource.HOT_FLOOR, 1.0F);
-+            org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = null; // CraftBukkit
-         }
- 
-         super.stepOn(world, blockposition, entity);
diff --git a/nms-patches/BlockMinecartDetector.patch b/nms-patches/BlockMinecartDetector.patch
deleted file mode 100644
index 014c510..0000000
--- a/nms-patches/BlockMinecartDetector.patch
+++ /dev/null
@@ -1,29 +0,0 @@
---- a/net/minecraft/server/BlockMinecartDetector.java
-+++ b/net/minecraft/server/BlockMinecartDetector.java
-@@ -6,6 +6,8 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
-+
- public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
- 
-     public static final BlockStateEnum<BlockMinecartTrackAbstract.EnumTrackPosition> SHAPE = BlockStateEnum.a("shape", BlockMinecartTrackAbstract.EnumTrackPosition.class, new Predicate() {
-@@ -66,6 +68,17 @@
-             flag1 = true;
-         }
- 
-+        // CraftBukkit start
-+        if (flag != flag1) {
-+            org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, flag ? 15 : 0, flag1 ? 15 : 0);
-+            world.getServer().getPluginManager().callEvent(eventRedstone);
-+
-+            flag1 = eventRedstone.getNewCurrent() > 0;
-+        }
-+        // CraftBukkit end
-+
-         if (flag1 && !flag) {
-             world.setTypeAndData(blockposition, iblockdata.set(BlockMinecartDetector.POWERED, Boolean.valueOf(true)), 3);
-             this.b(world, blockposition, iblockdata, true);
diff --git a/nms-patches/BlockMobSpawner.patch b/nms-patches/BlockMobSpawner.patch
deleted file mode 100644
index 67c46a9..0000000
--- a/nms-patches/BlockMobSpawner.patch
+++ /dev/null
@@ -1,22 +0,0 @@
---- a/net/minecraft/server/BlockMobSpawner.java
-+++ b/net/minecraft/server/BlockMobSpawner.java
-@@ -22,9 +22,19 @@
- 
-     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-         super.dropNaturally(world, blockposition, iblockdata, f, i);
-+        /* CraftBukkit start - Delegate to getExpDrop
-         int j = 15 + world.random.nextInt(15) + world.random.nextInt(15);
- 
-         this.dropExperience(world, blockposition, j);
-+        */
-+    }
-+
-+    @Override
-+    public int getExpDrop(World world, IBlockData iblockdata, int enchantmentLevel) {
-+        int j = 15 + world.random.nextInt(15) + world.random.nextInt(15);
-+
-+        return j;
-+        // CraftBukkit end
-     }
- 
-     public boolean b(IBlockData iblockdata) {
diff --git a/nms-patches/BlockMonsterEggs.patch b/nms-patches/BlockMonsterEggs.patch
deleted file mode 100644
index ae60b27..0000000
--- a/nms-patches/BlockMonsterEggs.patch
+++ /dev/null
@@ -1,20 +0,0 @@
---- a/net/minecraft/server/BlockMonsterEggs.java
-+++ b/net/minecraft/server/BlockMonsterEggs.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason; // CraftBukkit
-+
- public class BlockMonsterEggs extends Block {
- 
-     public static final BlockStateEnum<BlockMonsterEggs.EnumMonsterEggVarient> VARIANT = BlockStateEnum.of("variant", BlockMonsterEggs.EnumMonsterEggVarient.class);
-@@ -50,7 +52,7 @@
-             EntitySilverfish entitysilverfish = new EntitySilverfish(world);
- 
-             entitysilverfish.setPositionRotation((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
--            world.addEntity(entitysilverfish);
-+            world.addEntity(entitysilverfish, SpawnReason.SILVERFISH_BLOCK); // CraftBukkit - add SpawnReason
-             entitysilverfish.doSpawnEffect();
-         }
- 
diff --git a/nms-patches/BlockMushroom.patch b/nms-patches/BlockMushroom.patch
deleted file mode 100644
index 911f296..0000000
--- a/nms-patches/BlockMushroom.patch
+++ /dev/null
@@ -1,55 +0,0 @@
---- a/net/minecraft/server/BlockMushroom.java
-+++ b/net/minecraft/server/BlockMushroom.java
-@@ -3,6 +3,12 @@
- import java.util.Iterator;
- import java.util.Random;
- 
-+// CraftBukkit start
-+import org.bukkit.TreeType;
-+import org.bukkit.block.BlockState;
-+import org.bukkit.event.block.BlockSpreadEvent;
-+// CraftBukkit end
-+
- public class BlockMushroom extends BlockPlant implements IBlockFragilePlantElement {
- 
-     protected static final AxisAlignedBB a = new AxisAlignedBB(0.30000001192092896D, 0.0D, 0.30000001192092896D, 0.699999988079071D, 0.4000000059604645D, 0.699999988079071D);
-@@ -16,6 +22,7 @@
-     }
- 
-     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-+        final int sourceX = blockposition.getX(), sourceY = blockposition.getY(), sourceZ = blockposition.getZ(); // CraftBukkit
-         if (random.nextInt(25) == 0) {
-             int i = 5;
-             boolean flag = true;
-@@ -43,7 +50,19 @@
-             }
- 
-             if (world.isEmpty(blockposition2) && this.f(world, blockposition2, this.getBlockData())) {
--                world.setTypeAndData(blockposition2, this.getBlockData(), 2);
-+                // CraftBukkit start
-+                // world.setTypeAndData(blockposition2, this.getBlockData(), 2);
-+                org.bukkit.World bworld = world.getWorld();
-+                BlockState blockState = bworld.getBlockAt(blockposition2.getX(), blockposition2.getY(), blockposition2.getZ()).getState();
-+                blockState.setType(org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(this)); // nms: this.id, 0, 2
-+
-+                BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(sourceX, sourceY, sourceZ), blockState);
-+                world.getServer().getPluginManager().callEvent(event);
-+
-+                if (!event.isCancelled()) {
-+                    blockState.update(true);
-+                }
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -72,8 +91,10 @@
-         WorldGenHugeMushroom worldgenhugemushroom = null;
- 
-         if (this == Blocks.BROWN_MUSHROOM) {
-+            BlockSapling.treeType = TreeType.BROWN_MUSHROOM; // CraftBukkit
-             worldgenhugemushroom = new WorldGenHugeMushroom(Blocks.BROWN_MUSHROOM_BLOCK);
-         } else if (this == Blocks.RED_MUSHROOM) {
-+            BlockSapling.treeType = TreeType.RED_MUSHROOM; // CraftBukkit
-             worldgenhugemushroom = new WorldGenHugeMushroom(Blocks.RED_MUSHROOM_BLOCK);
-         }
- 
diff --git a/nms-patches/BlockMycel.patch b/nms-patches/BlockMycel.patch
deleted file mode 100644
index 626b81b..0000000
--- a/nms-patches/BlockMycel.patch
+++ /dev/null
@@ -1,58 +0,0 @@
---- a/net/minecraft/server/BlockMycel.java
-+++ b/net/minecraft/server/BlockMycel.java
-@@ -2,6 +2,13 @@
- 
- import java.util.Random;
- 
-+// CraftBukkit start
-+import org.bukkit.block.BlockState;
-+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-+import org.bukkit.event.block.BlockFadeEvent;
-+import org.bukkit.event.block.BlockSpreadEvent;
-+// CraftBukkit end
-+
- public class BlockMycel extends Block {
- 
-     public static final BlockStateBoolean SNOWY = BlockStateBoolean.of("snowy");
-@@ -22,7 +29,19 @@
-     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-         if (!world.isClientSide) {
-             if (world.getLightLevel(blockposition.up()) < 4 && world.getType(blockposition.up()).c() > 2) {
--                world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData().set(BlockDirt.VARIANT, BlockDirt.EnumDirtVariant.DIRT));
-+                // CraftBukkit start
-+                // world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData().set(BlockDirt.VARIANT, BlockDirt.EnumDirtVariant.DIRT));
-+                org.bukkit.World bworld = world.getWorld();
-+                BlockState blockState = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()).getState();
-+                blockState.setType(CraftMagicNumbers.getMaterial(Blocks.DIRT));
-+
-+                BlockFadeEvent event = new BlockFadeEvent(blockState.getBlock(), blockState);
-+                world.getServer().getPluginManager().callEvent(event);
-+
-+                if (!event.isCancelled()) {
-+                    blockState.update(true);
-+                }
-+                // CraftBukkit end
-             } else {
-                 if (world.getLightLevel(blockposition.up()) >= 9) {
-                     for (int i = 0; i < 4; ++i) {
-@@ -31,7 +50,19 @@
-                         IBlockData iblockdata2 = world.getType(blockposition1.up());
- 
-                         if (iblockdata1.getBlock() == Blocks.DIRT && iblockdata1.get(BlockDirt.VARIANT) == BlockDirt.EnumDirtVariant.DIRT && world.getLightLevel(blockposition1.up()) >= 4 && iblockdata2.c() <= 2) {
--                            world.setTypeUpdate(blockposition1, this.getBlockData());
-+                            // CraftBukkit start
-+                            // world.setTypeUpdate(blockposition1, this.getBlockData());
-+                            org.bukkit.World bworld = world.getWorld();
-+                            BlockState blockState = bworld.getBlockAt(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ()).getState();
-+                            blockState.setType(CraftMagicNumbers.getMaterial(this));
-+
-+                            BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), blockState);
-+                            world.getServer().getPluginManager().callEvent(event);
-+
-+                            if (!event.isCancelled()) {
-+                                blockState.update(true);
-+                            }
-+                            // CraftBukkit end
-                         }
-                     }
-                 }
diff --git a/nms-patches/BlockNetherWart.patch b/nms-patches/BlockNetherWart.patch
deleted file mode 100644
index 1af3f81..0000000
--- a/nms-patches/BlockNetherWart.patch
+++ /dev/null
@@ -1,12 +0,0 @@
---- a/net/minecraft/server/BlockNetherWart.java
-+++ b/net/minecraft/server/BlockNetherWart.java
-@@ -31,7 +31,8 @@
- 
-         if (i < 3 && random.nextInt(10) == 0) {
-             iblockdata = iblockdata.set(BlockNetherWart.AGE, Integer.valueOf(i + 1));
--            world.setTypeAndData(blockposition, iblockdata, 2);
-+            // world.setTypeAndData(blockposition, iblockdata, 2); // CraftBukkit
-+            org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(iblockdata)); // CraftBukkit
-         }
- 
-         super.b(world, blockposition, iblockdata, random);
diff --git a/nms-patches/BlockOre.patch b/nms-patches/BlockOre.patch
deleted file mode 100644
index 236ce96..0000000
--- a/nms-patches/BlockOre.patch
+++ /dev/null
@@ -1,45 +0,0 @@
---- a/net/minecraft/server/BlockOre.java
-+++ b/net/minecraft/server/BlockOre.java
-@@ -37,6 +37,7 @@
- 
-     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-         super.dropNaturally(world, blockposition, iblockdata, f, i);
-+        /* CraftBukkit start - Delegated to getExpDrop
-         if (this.getDropType(iblockdata, world.random, i) != Item.getItemOf(this)) {
-             int j = 0;
- 
-@@ -54,9 +55,34 @@
- 
-             this.dropExperience(world, blockposition, j);
-         }
-+        // */
- 
-     }
- 
-+    @Override
-+    public int getExpDrop(World world, IBlockData iblockdata, int i) {
-+        if (this.getDropType(iblockdata, world.random, i) != Item.getItemOf(this)) {
-+            int j = 0;
-+
-+            if (this == Blocks.COAL_ORE) {
-+                j = MathHelper.nextInt(world.random, 0, 2);
-+            } else if (this == Blocks.DIAMOND_ORE) {
-+                j = MathHelper.nextInt(world.random, 3, 7);
-+            } else if (this == Blocks.EMERALD_ORE) {
-+                j = MathHelper.nextInt(world.random, 3, 7);
-+            } else if (this == Blocks.LAPIS_ORE) {
-+                j = MathHelper.nextInt(world.random, 2, 5);
-+            } else if (this == Blocks.QUARTZ_ORE) {
-+                j = MathHelper.nextInt(world.random, 2, 5);
-+            }
-+
-+            return j;
-+        }
-+
-+        return 0;
-+        // CraftBukkit end
-+    }
-+
-     public ItemStack a(World world, BlockPosition blockposition, IBlockData iblockdata) {
-         return new ItemStack(this);
-     }
diff --git a/nms-patches/BlockPiston.patch b/nms-patches/BlockPiston.patch
deleted file mode 100644
index c7e24f3..0000000
--- a/nms-patches/BlockPiston.patch
+++ /dev/null
@@ -1,98 +0,0 @@
---- a/net/minecraft/server/BlockPiston.java
-+++ b/net/minecraft/server/BlockPiston.java
-@@ -5,6 +5,18 @@
- import java.util.List;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import java.util.AbstractList;
-+import java.util.Collection;
-+import java.util.Iterator;
-+import java.util.ListIterator;
-+
-+import com.google.common.collect.ImmutableList;
-+import org.bukkit.craftbukkit.block.CraftBlock;
-+import org.bukkit.event.block.BlockPistonRetractEvent;
-+import org.bukkit.event.block.BlockPistonExtendEvent;
-+// CraftBukkit end
-+
- public class BlockPiston extends BlockDirectional {
- 
-     public static final BlockStateBoolean EXTENDED = BlockStateBoolean.of("extended");
-@@ -103,6 +115,18 @@
-                 world.playBlockAction(blockposition, this, 0, enumdirection.a());
-             }
-         } else if (!flag && ((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
-+            // CraftBukkit start
-+            if (!this.sticky) {
-+                org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, ImmutableList.<org.bukkit.block.Block>of(), CraftBlock.notchToBlockFace(enumdirection));
-+                world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    return;
-+                }
-+            }
-+            // PAIL: checkME - what happened to setTypeAndData?
-+            // CraftBukkit end
-             world.playBlockAction(blockposition, this, 1, enumdirection.a());
-         }
- 
-@@ -193,7 +217,7 @@
-                     }
-                 }
- 
--                if (!flag1 && iblockdata1.getMaterial() != Material.AIR && a(iblockdata1, world, blockposition1, enumdirection.opposite(), false, enumdirection) && (iblockdata1.o() == EnumPistonReaction.NORMAL || block == Blocks.PISTON || block == Blocks.STICKY_PISTON)) {
-+                if (!flag1 && a(iblockdata1, world, blockposition1, enumdirection.opposite(), false, enumdirection) && (iblockdata1.o() == EnumPistonReaction.NORMAL || block == Blocks.PISTON || block == Blocks.STICKY_PISTON)) { // CraftBukkit - remove 'block.getMaterial() != Material.AIR' condition
-                     this.a(world, blockposition, enumdirection, false);
-                 }
-             } else {
-@@ -277,6 +301,48 @@
-             int j = list.size() + list1.size();
-             IBlockData[] aiblockdata = new IBlockData[j];
-             EnumDirection enumdirection1 = flag ? enumdirection : enumdirection.opposite();
-+            // CraftBukkit start
-+            final org.bukkit.block.Block bblock = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+            final List<BlockPosition> moved = pistonextendschecker.getMovedBlocks();
-+            final List<BlockPosition> broken = pistonextendschecker.getBrokenBlocks();
-+
-+            List<org.bukkit.block.Block> blocks = new AbstractList<org.bukkit.block.Block>() {
-+
-+                @Override
-+                public int size() {
-+                    return moved.size() + broken.size();
-+                }
-+
-+                @Override
-+                public org.bukkit.block.Block get(int index) {
-+                    if (index >= size() || index < 0) {
-+                        throw new ArrayIndexOutOfBoundsException(index);
-+                    }
-+                    BlockPosition pos = (BlockPosition) (index < moved.size() ? moved.get(index) : broken.get(index - moved.size()));
-+                    return bblock.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
-+                }
-+            };
-+            org.bukkit.event.block.BlockPistonEvent event;
-+            if (flag) {
-+                event = new BlockPistonExtendEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumdirection1));
-+            } else {
-+                event = new BlockPistonRetractEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumdirection1));
-+            }
-+            world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                for (BlockPosition b : broken) {
-+                    world.notify(b, Blocks.AIR.getBlockData(), world.getType(b), 3);
-+                }
-+                for (BlockPosition b : moved) {
-+                    world.notify(b, Blocks.AIR.getBlockData(), world.getType(b), 3);
-+                    b = b.shift(enumdirection1);
-+                    world.notify(b, Blocks.AIR.getBlockData(), world.getType(b), 3);
-+                }
-+                return false;
-+            }
-+            // CraftBukkit end
- 
-             int k;
-             BlockPosition blockposition2;
diff --git a/nms-patches/BlockPlant.patch b/nms-patches/BlockPlant.patch
deleted file mode 100644
index c9ac5dc..0000000
--- a/nms-patches/BlockPlant.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/BlockPlant.java
-+++ b/net/minecraft/server/BlockPlant.java
-@@ -40,6 +40,11 @@
- 
-     protected void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-         if (!this.f(world, blockposition, iblockdata)) {
-+            // CraftBukkit start
-+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPhysicsEvent(world, blockposition).isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             this.b(world, blockposition, iblockdata, 0);
-             world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
-         }
diff --git a/nms-patches/BlockPortal.patch b/nms-patches/BlockPortal.patch
deleted file mode 100644
index f9ccf2a..0000000
--- a/nms-patches/BlockPortal.patch
+++ /dev/null
@@ -1,144 +0,0 @@
---- a/net/minecraft/server/BlockPortal.java
-+++ b/net/minecraft/server/BlockPortal.java
-@@ -4,6 +4,9 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.event.entity.EntityPortalEnterEvent; // CraftBukkit
-+import org.bukkit.event.world.PortalCreateEvent; // CraftBukkit
-+
- public class BlockPortal extends BlockHalfTransparent {
- 
-     public static final BlockStateEnum<EnumDirection.EnumAxis> AXIS = BlockStateEnum.of("axis", EnumDirection.EnumAxis.class, new EnumDirection.EnumAxis[] { EnumDirection.EnumAxis.X, EnumDirection.EnumAxis.Z});
-@@ -43,7 +46,8 @@
-             }
- 
-             if (i > 0 && !world.getType(blockposition1.up()).l()) {
--                Entity entity = ItemMonsterEgg.a(world, EntityTypes.getName(EntityPigZombie.class), (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 1.1D, (double) blockposition1.getZ() + 0.5D);
-+                // CraftBukkit - set spawn reason to NETHER_PORTAL
-+                Entity entity = ItemMonsterEgg.spawnCreature(world, EntityTypes.getName(EntityPigZombie.class), (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 1.1D, (double) blockposition1.getZ() + 0.5D, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NETHER_PORTAL);
- 
-                 if (entity != null) {
-                     entity.portalCooldown = entity.aM();
-@@ -70,14 +74,16 @@
-         BlockPortal.Shape blockportal_shape = new BlockPortal.Shape(world, blockposition, EnumDirection.EnumAxis.X);
- 
-         if (blockportal_shape.d() && blockportal_shape.e == 0) {
--            blockportal_shape.createPortal();
--            return true;
-+            // CraftBukkit start - return portalcreator
-+            return blockportal_shape.createPortal();
-+            // return true;
-         } else {
-             BlockPortal.Shape blockportal_shape1 = new BlockPortal.Shape(world, blockposition, EnumDirection.EnumAxis.Z);
- 
-             if (blockportal_shape1.d() && blockportal_shape1.e == 0) {
--                blockportal_shape1.createPortal();
--                return true;
-+                return blockportal_shape1.createPortal();
-+                // return true;
-+                // CraftBukkit end
-             } else {
-                 return false;
-             }
-@@ -108,6 +114,10 @@
- 
-     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-         if (!entity.isPassenger() && !entity.isVehicle() && entity.bf()) {
-+            // CraftBukkit start - Entity in portal
-+            EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity.getBukkitEntity(), new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+            world.getServer().getPluginManager().callEvent(event);
-+            // CraftBukkit end
-             entity.e(blockposition);
-         }
- 
-@@ -216,6 +226,7 @@
-         private BlockPosition position;
-         private int height;
-         private int width;
-+        java.util.Collection<org.bukkit.block.Block> blocks = new java.util.HashSet<org.bukkit.block.Block>(); // CraftBukkit - add field
- 
-         public Shape(World world, BlockPosition blockposition, EnumDirection.EnumAxis enumdirection_enumaxis) {
-             this.a = world;
-@@ -274,6 +285,10 @@
-         }
- 
-         protected int c() {
-+            // CraftBukkit start
-+            this.blocks.clear();
-+            org.bukkit.World bworld = this.a.getWorld();
-+            // CraftBukkit end
-             int i;
- 
-             label56:
-@@ -294,11 +309,21 @@
-                         block = this.a.getType(blockposition.shift(this.d)).getBlock();
-                         if (block != Blocks.OBSIDIAN) {
-                             break label56;
-+                            // CraftBukkit start - add the block to our list
-+                        } else {
-+                            BlockPosition pos = blockposition.shift(this.d);
-+                            blocks.add(bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-+                            // CraftBukkit end
-                         }
-                     } else if (i == this.width - 1) {
-                         block = this.a.getType(blockposition.shift(this.c)).getBlock();
-                         if (block != Blocks.OBSIDIAN) {
-                             break label56;
-+                            // CraftBukkit start - add the block to our list
-+                        } else {
-+                            BlockPosition pos = blockposition.shift(this.c);
-+                            blocks.add(bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-+                            // CraftBukkit end
-                         }
-                     }
-                 }
-@@ -308,6 +333,11 @@
-                 if (this.a.getType(this.position.shift(this.c, i).up(this.height)).getBlock() != Blocks.OBSIDIAN) {
-                     this.height = 0;
-                     break;
-+                    // CraftBukkit start - add the block to our list
-+                } else {
-+                    BlockPosition pos = this.position.shift(this.c, i).up(this.height);
-+                    blocks.add(bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-+                    // CraftBukkit end
-                 }
-             }
- 
-@@ -329,7 +359,27 @@
-             return this.position != null && this.width >= 2 && this.width <= 21 && this.height >= 3 && this.height <= 21;
-         }
- 
--        public void createPortal() {
-+        // CraftBukkit start - return boolean
-+        public boolean createPortal() {
-+            org.bukkit.World bworld = this.a.getWorld();
-+
-+            // Copy below for loop
-+            for (int i = 0; i < this.width; ++i) {
-+                BlockPosition blockposition = this.position.shift(this.c, i);
-+
-+                for (int j = 0; j < this.height; ++j) {
-+                    BlockPosition pos = blockposition.up(j);
-+                    blocks.add(bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-+                }
-+            }
-+
-+            PortalCreateEvent event = new PortalCreateEvent(blocks, bworld, PortalCreateEvent.CreateReason.FIRE);
-+            this.a.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                return false;
-+            }
-+            // CraftBukkit end
-             for (int i = 0; i < this.width; ++i) {
-                 BlockPosition blockposition = this.position.shift(this.c, i);
- 
-@@ -338,6 +388,7 @@
-                 }
-             }
- 
-+            return true; // CraftBukkit
-         }
-     }
- }
diff --git a/nms-patches/BlockPoweredRail.patch b/nms-patches/BlockPoweredRail.patch
deleted file mode 100644
index 973f557..0000000
--- a/nms-patches/BlockPoweredRail.patch
+++ /dev/null
@@ -1,25 +0,0 @@
---- a/net/minecraft/server/BlockPoweredRail.java
-+++ b/net/minecraft/server/BlockPoweredRail.java
-@@ -3,6 +3,8 @@
- import com.google.common.base.Predicate;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class BlockPoweredRail extends BlockMinecartTrackAbstract {
- 
-     public static final BlockStateEnum<BlockMinecartTrackAbstract.EnumTrackPosition> SHAPE = BlockStateEnum.a("shape", BlockMinecartTrackAbstract.EnumTrackPosition.class, new Predicate() {
-@@ -117,6 +119,13 @@
-         boolean flag1 = world.isBlockIndirectlyPowered(blockposition) || this.a(world, blockposition, iblockdata, true, 0) || this.a(world, blockposition, iblockdata, false, 0);
- 
-         if (flag1 != flag) {
-+            // CraftBukkit start
-+            int power = (Boolean)iblockdata.get(POWERED) ? 15 : 0;
-+            int newPower = CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), power, 15 - power).getNewCurrent();
-+            if (newPower == power) {
-+                return;
-+            }
-+            // CraftBukkit end
-             world.setTypeAndData(blockposition, iblockdata.set(BlockPoweredRail.POWERED, Boolean.valueOf(flag1)), 3);
-             world.applyPhysics(blockposition.down(), this, false);
-             if (((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE)).c()) {
diff --git a/nms-patches/BlockPressurePlateAbstract.patch b/nms-patches/BlockPressurePlateAbstract.patch
deleted file mode 100644
index 775f098..0000000
--- a/nms-patches/BlockPressurePlateAbstract.patch
+++ /dev/null
@@ -1,31 +0,0 @@
---- a/net/minecraft/server/BlockPressurePlateAbstract.java
-+++ b/net/minecraft/server/BlockPressurePlateAbstract.java
-@@ -3,6 +3,8 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
-+
- public abstract class BlockPressurePlateAbstract extends Block {
- 
-     protected static final AxisAlignedBB a = new AxisAlignedBB(0.0625D, 0.0D, 0.0625D, 0.9375D, 0.03125D, 0.9375D);
-@@ -95,6 +97,19 @@
-         boolean flag = i > 0;
-         boolean flag1 = j > 0;
- 
-+        // CraftBukkit start - Interact Pressure Plate
-+        org.bukkit.World bworld = world.getWorld();
-+        org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
-+
-+        if (flag != flag1) {
-+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), i, j);
-+            manager.callEvent(eventRedstone);
-+
-+            flag1 = eventRedstone.getNewCurrent() > 0;
-+            j = eventRedstone.getNewCurrent();
-+        }
-+        // CraftBukkit end
-+
-         if (i != j) {
-             iblockdata = this.a(iblockdata, j);
-             world.setTypeAndData(blockposition, iblockdata, 2);
diff --git a/nms-patches/BlockPressurePlateBinary.patch b/nms-patches/BlockPressurePlateBinary.patch
deleted file mode 100644
index fea5dce..0000000
--- a/nms-patches/BlockPressurePlateBinary.patch
+++ /dev/null
@@ -1,38 +0,0 @@
---- a/net/minecraft/server/BlockPressurePlateBinary.java
-+++ b/net/minecraft/server/BlockPressurePlateBinary.java
-@@ -3,6 +3,8 @@
- import java.util.Iterator;
- import java.util.List;
- 
-+import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
-+
- public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
- 
-     public static final BlockStateBoolean POWERED = BlockStateBoolean.of("powered");
-@@ -63,6 +65,26 @@
-             while (iterator.hasNext()) {
-                 Entity entity = (Entity) iterator.next();
- 
-+                // CraftBukkit start - Call interact event when turning on a pressure plate
-+                if (this.getPower(world.getType(blockposition)) == 0) {
-+                    org.bukkit.World bworld = world.getWorld();
-+                    org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
-+                    org.bukkit.event.Cancellable cancellable;
-+
-+                    if (entity instanceof EntityHuman) {
-+                        cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null, null);
-+                    } else {
-+                        cancellable = new EntityInteractEvent(entity.getBukkitEntity(), bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+                        manager.callEvent((EntityInteractEvent) cancellable);
-+                    }
-+
-+                    // We only want to block turning the plate on if all events are cancelled
-+                    if (cancellable.isCancelled()) {
-+                        continue;
-+                    }
-+                }
-+                // CraftBukkit end
-+
-                 if (!entity.isIgnoreBlockTrigger()) {
-                     return 15;
-                 }
diff --git a/nms-patches/BlockPressurePlateWeighted.patch b/nms-patches/BlockPressurePlateWeighted.patch
deleted file mode 100644
index d24fd74..0000000
--- a/nms-patches/BlockPressurePlateWeighted.patch
+++ /dev/null
@@ -1,43 +0,0 @@
---- a/net/minecraft/server/BlockPressurePlateWeighted.java
-+++ b/net/minecraft/server/BlockPressurePlateWeighted.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
-+
- public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
- 
-     public static final BlockStateInteger POWER = BlockStateInteger.of("power", 0, 15);
-@@ -16,7 +18,31 @@
-     }
- 
-     protected int e(World world, BlockPosition blockposition) {
--        int i = Math.min(world.a(Entity.class, BlockPressurePlateWeighted.c.a(blockposition)).size(), this.weight);
-+        // CraftBukkit start
-+        // int i = Math.min(world.a(Entity.class, BlockPressurePlateWeighted.c.a(blockposition)).size(), this.weight);
-+        int i = 0;
-+        java.util.Iterator iterator = world.a(Entity.class, BlockPressurePlateWeighted.c.a(blockposition)).iterator();
-+
-+        while (iterator.hasNext()) {
-+            Entity entity = (Entity) iterator.next();
-+
-+            org.bukkit.event.Cancellable cancellable;
-+
-+            if (entity instanceof EntityHuman) {
-+                cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null, null);
-+            } else {
-+                cancellable = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+                world.getServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
-+            }
-+
-+            // We only want to block turning the plate on if all events are cancelled
-+            if (!cancellable.isCancelled()) {
-+                i++;
-+            }
-+        }
-+
-+        i = Math.min(i, this.weight);
-+        // CraftBukkit end
- 
-         if (i > 0) {
-             float f = (float) Math.min(this.weight, i) / (float) this.weight;
diff --git a/nms-patches/BlockPumpkin.patch b/nms-patches/BlockPumpkin.patch
deleted file mode 100644
index 04cdad4..0000000
--- a/nms-patches/BlockPumpkin.patch
+++ /dev/null
@@ -1,81 +0,0 @@
---- a/net/minecraft/server/BlockPumpkin.java
-+++ b/net/minecraft/server/BlockPumpkin.java
-@@ -4,6 +4,12 @@
- import java.util.Iterator;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
-+import org.bukkit.event.block.BlockRedstoneEvent;
-+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-+// CraftBukkit end
-+
- public class BlockPumpkin extends BlockFacingHorizontal {
- 
-     private ShapeDetector snowGolemPart;
-@@ -43,18 +49,25 @@
-         EntityPlayer entityplayer;
-         int j;
- 
-+        BlockStateListPopulator blockList = new BlockStateListPopulator(world.getWorld()); // CraftBukkit - Use BlockStateListPopulator
-         if (shapedetector_shapedetectorcollection != null) {
-             for (i = 0; i < this.getDetectorSnowGolem().b(); ++i) {
-                 ShapeDetectorBlock shapedetectorblock = shapedetector_shapedetectorcollection.a(0, i, 0);
- 
--                world.setTypeAndData(shapedetectorblock.getPosition(), Blocks.AIR.getBlockData(), 2);
-+                // CraftBukkit start
-+                // world.setTypeAndData(shapedetectorblock.d(), Blocks.AIR.getBlockData(), 2);
-+                BlockPosition pos = shapedetectorblock.getPosition();
-+                blockList.setTypeId(pos.getX(), pos.getY(), pos.getZ(), 0);
-+                // CraftBukkit end
-             }
- 
-             EntitySnowman entitysnowman = new EntitySnowman(world);
-             BlockPosition blockposition1 = shapedetector_shapedetectorcollection.a(0, 2, 0).getPosition();
- 
-             entitysnowman.setPositionRotation((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.05D, (double) blockposition1.getZ() + 0.5D, 0.0F, 0.0F);
--            world.addEntity(entitysnowman);
-+            // CraftBukkit start
-+            if (world.addEntity(entitysnowman, SpawnReason.BUILD_SNOWMAN)) {
-+                blockList.updateList();
-             iterator = world.a(EntityPlayer.class, entitysnowman.getBoundingBox().g(5.0D)).iterator();
- 
-             while (iterator.hasNext()) {
-@@ -71,12 +84,17 @@
- 
-                 world.update(shapedetectorblock1.getPosition(), Blocks.AIR, false);
-             }
-+            } // CraftBukkit end
-         } else {
-             shapedetector_shapedetectorcollection = this.getDetectorIronGolem().a(world, blockposition);
-             if (shapedetector_shapedetectorcollection != null) {
-                 for (i = 0; i < this.getDetectorIronGolem().c(); ++i) {
-                     for (int k = 0; k < this.getDetectorIronGolem().b(); ++k) {
--                        world.setTypeAndData(shapedetector_shapedetectorcollection.a(i, k, 0).getPosition(), Blocks.AIR.getBlockData(), 2);
-+                        // CraftBukkit start
-+                        // world.setTypeAndData(shapedetector_shapedetectorcollection.a(i, k, 0).getPosition(), Blocks.AIR.getBlockData(), 2);
-+                        BlockPosition pos = shapedetector_shapedetectorcollection.a(i, k, 0).getPosition();
-+                        blockList.setTypeId(pos.getX(), pos.getY(), pos.getZ(), 0);
-+                        // CraftBukkit end
-                     }
-                 }
- 
-@@ -85,7 +103,9 @@
- 
-                 entityirongolem.setPlayerCreated(true);
-                 entityirongolem.setPositionRotation((double) blockposition2.getX() + 0.5D, (double) blockposition2.getY() + 0.05D, (double) blockposition2.getZ() + 0.5D, 0.0F, 0.0F);
--                world.addEntity(entityirongolem);
-+            // CraftBukkit start
-+            if (world.addEntity(entityirongolem, SpawnReason.BUILD_IRONGOLEM)) {
-+                blockList.updateList();
-                 iterator = world.a(EntityPlayer.class, entityirongolem.getBoundingBox().g(5.0D)).iterator();
- 
-                 while (iterator.hasNext()) {
-@@ -105,6 +125,7 @@
-                     }
-                 }
-             }
-+            } // CraftBukkit end
-         }
- 
-     }
diff --git a/nms-patches/BlockRedstoneLamp.patch b/nms-patches/BlockRedstoneLamp.patch
deleted file mode 100644
index 1aec632..0000000
--- a/nms-patches/BlockRedstoneLamp.patch
+++ /dev/null
@@ -1,47 +0,0 @@
---- a/net/minecraft/server/BlockRedstoneLamp.java
-+++ b/net/minecraft/server/BlockRedstoneLamp.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class BlockRedstoneLamp extends Block {
- 
-     private final boolean a;
-@@ -20,6 +22,11 @@
-             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
-                 world.setTypeAndData(blockposition, Blocks.REDSTONE_LAMP.getBlockData(), 2);
-             } else if (!this.a && world.isBlockIndirectlyPowered(blockposition)) {
-+                // CraftBukkit start
-+                if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 0, 15).getNewCurrent() != 15) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 world.setTypeAndData(blockposition, Blocks.LIT_REDSTONE_LAMP.getBlockData(), 2);
-             }
- 
-@@ -31,6 +38,11 @@
-             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
-                 world.a(blockposition, (Block) this, 4);
-             } else if (!this.a && world.isBlockIndirectlyPowered(blockposition)) {
-+                // CraftBukkit start
-+                if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 0, 15).getNewCurrent() != 15) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 world.setTypeAndData(blockposition, Blocks.LIT_REDSTONE_LAMP.getBlockData(), 2);
-             }
- 
-@@ -40,6 +52,11 @@
-     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-         if (!world.isClientSide) {
-             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
-+                // CraftBukkit start
-+                if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 15, 0).getNewCurrent() != 0) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 world.setTypeAndData(blockposition, Blocks.REDSTONE_LAMP.getBlockData(), 2);
-             }
- 
diff --git a/nms-patches/BlockRedstoneOre.patch b/nms-patches/BlockRedstoneOre.patch
deleted file mode 100644
index c4b08ac..0000000
--- a/nms-patches/BlockRedstoneOre.patch
+++ /dev/null
@@ -1,103 +0,0 @@
---- a/net/minecraft/server/BlockRedstoneOre.java
-+++ b/net/minecraft/server/BlockRedstoneOre.java
-@@ -2,6 +2,11 @@
- 
- import java.util.Random;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.EntityInteractEvent;
-+// CraftBukkit end
-+
- public class BlockRedstoneOre extends Block {
- 
-     private final boolean a;
-@@ -20,23 +25,45 @@
-     }
- 
-     public void attack(World world, BlockPosition blockposition, EntityHuman entityhuman) {
--        this.interact(world, blockposition);
-+        this.interact(world, blockposition, entityhuman); // CraftBukkit - add entityhuman
-         super.attack(world, blockposition, entityhuman);
-     }
- 
-     public void stepOn(World world, BlockPosition blockposition, Entity entity) {
--        this.interact(world, blockposition);
--        super.stepOn(world, blockposition, entity);
-+        // CraftBukkit start
-+        // this.interact(world, blockposition);
-+        // super.stepOn(world, blockposition, entity);
-+        if (entity instanceof EntityHuman) {
-+            org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null, null);
-+            if (!event.isCancelled()) {
-+                this.interact(world, blockposition, entity); // add entity
-+                super.stepOn(world, blockposition, entity);
-+            }
-+        } else {
-+            EntityInteractEvent event = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+            world.getServer().getPluginManager().callEvent(event);
-+            if (!event.isCancelled()) {
-+                this.interact(world, blockposition, entity); // add entity
-+                super.stepOn(world, blockposition, entity);
-+            }
-+        }
-+        // CraftBukkit end
-     }
- 
-+
-     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
--        this.interact(world, blockposition);
-+        this.interact(world, blockposition, entityhuman); // CraftBukkit - add entityhuman
-         return super.interact(world, blockposition, iblockdata, entityhuman, enumhand, enumdirection, f, f1, f2);
-     }
- 
--    private void interact(World world, BlockPosition blockposition) {
-+    private void interact(World world, BlockPosition blockposition, Entity entity) { // CraftBukkit - add Entity
-         this.playEffect(world, blockposition);
-         if (this == Blocks.REDSTONE_ORE) {
-+            // CraftBukkit start
-+            if (CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, Blocks.LIT_REDSTONE_ORE, 0).isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             world.setTypeUpdate(blockposition, Blocks.LIT_REDSTONE_ORE.getBlockData());
-         }
- 
-@@ -44,6 +71,11 @@
- 
-     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-         if (this == Blocks.LIT_REDSTONE_ORE) {
-+            // CraftBukkit start
-+            if (CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), Blocks.REDSTONE_ORE).isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             world.setTypeUpdate(blockposition, Blocks.REDSTONE_ORE.getBlockData());
-         }
- 
-@@ -63,12 +95,25 @@
- 
-     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-         super.dropNaturally(world, blockposition, iblockdata, f, i);
-+        /* CraftBukkit start - Delegated to getExpDrop
-         if (this.getDropType(iblockdata, world.random, i) != Item.getItemOf(this)) {
-             int j = 1 + world.random.nextInt(5);
- 
-             this.dropExperience(world, blockposition, j);
-         }
-+        // */
-+
-+    }
-+
-+    @Override
-+    public int getExpDrop(World world, IBlockData data, int i) {
-+        if (this.getDropType(data, world.random, i) != Item.getItemOf(this)) {
-+            int j = 1 + world.random.nextInt(5);
- 
-+            return j;
-+        }
-+        return 0;
-+        // CraftBukkit end
-     }
- 
-     private void playEffect(World world, BlockPosition blockposition) {
diff --git a/nms-patches/BlockRedstoneTorch.patch b/nms-patches/BlockRedstoneTorch.patch
deleted file mode 100644
index e35ce52..0000000
--- a/nms-patches/BlockRedstoneTorch.patch
+++ /dev/null
@@ -1,62 +0,0 @@
---- a/net/minecraft/server/BlockRedstoneTorch.java
-+++ b/net/minecraft/server/BlockRedstoneTorch.java
-@@ -6,6 +6,8 @@
- import java.util.Map;
- import java.util.Random;
- 
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
-+
- public class BlockRedstoneTorch extends BlockTorch {
- 
-     private static final Map<World, List<BlockRedstoneTorch.RedstoneUpdateInfo>> g = Maps.newHashMap();
-@@ -13,7 +15,7 @@
- 
-     private boolean a(World world, BlockPosition blockposition, boolean flag) {
-         if (!BlockRedstoneTorch.g.containsKey(world)) {
--            BlockRedstoneTorch.g.put(world, Lists.newArrayList());
-+            BlockRedstoneTorch.g.put(world, Lists.<BlockRedstoneTorch.RedstoneUpdateInfo>newArrayList()); // CraftBukkit - fix decompile error
-         }
- 
-         List list = (List) BlockRedstoneTorch.g.get(world);
-@@ -96,8 +98,25 @@
-             list.remove(0);
-         }
- 
-+        // CraftBukkit start
-+        org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
-+        org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+        int oldCurrent = this.isOn ? 15 : 0;
-+
-+        BlockRedstoneEvent event = new BlockRedstoneEvent(block, oldCurrent, oldCurrent);
-+        // CraftBukkit end
-+
-         if (this.isOn) {
-             if (flag) {
-+                // CraftBukkit start
-+                if (oldCurrent != 0) {
-+                    event.setNewCurrent(0);
-+                    manager.callEvent(event);
-+                    if (event.getNewCurrent() != 0) {
-+                        return;
-+                    }
-+                }
-+                // CraftBukkit end
-                 world.setTypeAndData(blockposition, Blocks.UNLIT_REDSTONE_TORCH.getBlockData().set(BlockRedstoneTorch.FACING, iblockdata.get(BlockRedstoneTorch.FACING)), 3);
-                 if (this.a(world, blockposition, true)) {
-                     world.a((EntityHuman) null, blockposition, SoundEffects.gm, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
-@@ -114,6 +133,15 @@
-                 }
-             }
-         } else if (!flag && !this.a(world, blockposition, false)) {
-+            // CraftBukkit start
-+            if (oldCurrent != 15) {
-+                event.setNewCurrent(15);
-+                manager.callEvent(event);
-+                if (event.getNewCurrent() != 15) {
-+                    return;
-+                }
-+            }
-+            // CraftBukkit end
-             world.setTypeAndData(blockposition, Blocks.REDSTONE_TORCH.getBlockData().set(BlockRedstoneTorch.FACING, iblockdata.get(BlockRedstoneTorch.FACING)), 3);
-         }
- 
diff --git a/nms-patches/BlockRedstoneWire.patch b/nms-patches/BlockRedstoneWire.patch
deleted file mode 100644
index 0f200a3..0000000
--- a/nms-patches/BlockRedstoneWire.patch
+++ /dev/null
@@ -1,27 +0,0 @@
---- a/net/minecraft/server/BlockRedstoneWire.java
-+++ b/net/minecraft/server/BlockRedstoneWire.java
-@@ -9,6 +9,8 @@
- import java.util.Set;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
-+
- public class BlockRedstoneWire extends Block {
- 
-     public static final BlockStateEnum<BlockRedstoneWire.EnumRedstoneWireConnection> NORTH = BlockStateEnum.of("north", BlockRedstoneWire.EnumRedstoneWireConnection.class);
-@@ -168,6 +170,15 @@
-             j = k;
-         }
- 
-+        // CraftBukkit start
-+        if (i != j) {
-+            BlockRedstoneEvent event = new BlockRedstoneEvent(world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), i, j);
-+            world.getServer().getPluginManager().callEvent(event);
-+
-+            j = event.getNewCurrent();
-+        }
-+        // CraftBukkit end
-+
-         if (i != j) {
-             iblockdata = iblockdata.set(BlockRedstoneWire.POWER, Integer.valueOf(j));
-             if (world.getType(blockposition) == iblockdata1) {
diff --git a/nms-patches/BlockReed.patch b/nms-patches/BlockReed.patch
deleted file mode 100644
index 8acc843..0000000
--- a/nms-patches/BlockReed.patch
+++ /dev/null
@@ -1,16 +0,0 @@
---- a/net/minecraft/server/BlockReed.java
-+++ b/net/minecraft/server/BlockReed.java
-@@ -32,8 +32,12 @@
-                     int j = ((Integer) iblockdata.get(BlockReed.AGE)).intValue();
- 
-                     if (j == 15) {
--                        world.setTypeUpdate(blockposition.up(), this.getBlockData());
-+                        // CraftBukkit start
-+                        // world.setTypeUpdate(blockposition.up(), this.getBlockData()); // CraftBukkit
-+                        BlockPosition upPos = blockposition.up();
-+                        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, upPos.getX(), upPos.getY(), upPos.getZ(), this, 0);
-                         world.setTypeAndData(blockposition, iblockdata.set(BlockReed.AGE, Integer.valueOf(0)), 4);
-+                        // CraftBukkit end
-                     } else {
-                         world.setTypeAndData(blockposition, iblockdata.set(BlockReed.AGE, Integer.valueOf(j + 1)), 4);
-                     }
diff --git a/nms-patches/BlockSapling.patch b/nms-patches/BlockSapling.patch
deleted file mode 100644
index c5f6c37..0000000
--- a/nms-patches/BlockSapling.patch
+++ /dev/null
@@ -1,126 +0,0 @@
---- a/net/minecraft/server/BlockSapling.java
-+++ b/net/minecraft/server/BlockSapling.java
-@@ -2,11 +2,21 @@
- 
- import java.util.Random;
- 
-+// CraftBukkit start
-+import java.util.List;
-+
-+import org.bukkit.Location;
-+import org.bukkit.TreeType;
-+import org.bukkit.block.BlockState;
-+import org.bukkit.event.world.StructureGrowEvent;
-+// CraftBukkit end
-+
- public class BlockSapling extends BlockPlant implements IBlockFragilePlantElement {
- 
-     public static final BlockStateEnum<BlockWood.EnumLogVariant> TYPE = BlockStateEnum.of("type", BlockWood.EnumLogVariant.class);
-     public static final BlockStateInteger STAGE = BlockStateInteger.of("stage", 0, 1);
-     protected static final AxisAlignedBB d = new AxisAlignedBB(0.09999999403953552D, 0.0D, 0.09999999403953552D, 0.8999999761581421D, 0.800000011920929D, 0.8999999761581421D);
-+    public static TreeType treeType; // CraftBukkit
- 
-     protected BlockSapling() {
-         this.w(this.blockStateList.getBlockData().set(BlockSapling.TYPE, BlockWood.EnumLogVariant.OAK).set(BlockSapling.STAGE, Integer.valueOf(0)));
-@@ -25,7 +35,30 @@
-         if (!world.isClientSide) {
-             super.b(world, blockposition, iblockdata, random);
-             if (world.getLightLevel(blockposition.up()) >= 9 && random.nextInt(7) == 0) {
-+                // CraftBukkit start
-+                world.captureTreeGeneration = true;
-+                // CraftBukkit end
-                 this.grow(world, blockposition, iblockdata, random);
-+                // CraftBukkit start
-+                world.captureTreeGeneration = false;
-+                if (world.capturedBlockStates.size() > 0) {
-+                    TreeType treeType = BlockSapling.treeType;
-+                    BlockSapling.treeType = null;
-+                    Location location = new Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                    List<BlockState> blocks = (List<BlockState>) world.capturedBlockStates.clone();
-+                    world.capturedBlockStates.clear();
-+                    StructureGrowEvent event = null;
-+                    if (treeType != null) {
-+                        event = new StructureGrowEvent(location, treeType, false, null, blocks);
-+                        org.bukkit.Bukkit.getPluginManager().callEvent(event);
-+                    }
-+                    if (event == null || !event.isCancelled()) {
-+                        for (BlockState blockstate : blocks) {
-+                            blockstate.update(true);
-+                        }
-+                    }
-+                }
-+                // CraftBukkit end
-             }
- 
-         }
-@@ -41,7 +74,17 @@
-     }
- 
-     public void d(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
--        Object object = random.nextInt(10) == 0 ? new WorldGenBigTree(true) : new WorldGenTrees(true);
-+        // CraftBukkit start - Turn ternary operator into if statement to set treeType
-+        // Object object = random.nextInt(10) == 0 ? new WorldGenBigTree(true) : new WorldGenTrees(true);
-+        Object object;
-+        if (random.nextInt(10) == 0) {
-+            treeType = TreeType.BIG_TREE;
-+            object = new WorldGenBigTree(true);
-+        } else {
-+            treeType = TreeType.TREE;
-+            object = new WorldGenTrees(true);
-+        }
-+        // CraftBukkit end
-         int i = 0;
-         int j = 0;
-         boolean flag = false;
-@@ -53,6 +96,7 @@
-             for (i = 0; i >= -1; --i) {
-                 for (j = 0; j >= -1; --j) {
-                     if (this.a(world, blockposition, i, j, BlockWood.EnumLogVariant.SPRUCE)) {
-+                        treeType = TreeType.MEGA_REDWOOD; // CraftBukkit
-                         object = new WorldGenMegaTree(false, random.nextBoolean());
-                         flag = true;
-                         break label66;
-@@ -63,11 +107,13 @@
-             if (!flag) {
-                 i = 0;
-                 j = 0;
-+                treeType = TreeType.REDWOOD; // CraftBukkit
-                 object = new WorldGenTaiga2(true);
-             }
-             break;
- 
-         case BIRCH:
-+            treeType = TreeType.BIRCH; // CraftBukkit
-             object = new WorldGenForest(true, false);
-             break;
- 
-@@ -79,6 +125,7 @@
-             for (i = 0; i >= -1; --i) {
-                 for (j = 0; j >= -1; --j) {
-                     if (this.a(world, blockposition, i, j, BlockWood.EnumLogVariant.JUNGLE)) {
-+                        treeType = TreeType.JUNGLE; // CraftBukkit
-                         object = new WorldGenJungleTree(true, 10, 20, iblockdata1, iblockdata2);
-                         flag = true;
-                         break label78;
-@@ -89,11 +136,13 @@
-             if (!flag) {
-                 i = 0;
-                 j = 0;
-+                treeType = TreeType.SMALL_JUNGLE; // CraftBukkit
-                 object = new WorldGenTrees(true, 4 + random.nextInt(7), iblockdata1, iblockdata2, false);
-             }
-             break;
- 
-         case ACACIA:
-+            treeType = TreeType.ACACIA; // CraftBukkit
-             object = new WorldGenAcaciaTree(true);
-             break;
- 
-@@ -102,6 +151,7 @@
-             for (i = 0; i >= -1; --i) {
-                 for (j = 0; j >= -1; --j) {
-                     if (this.a(world, blockposition, i, j, BlockWood.EnumLogVariant.DARK_OAK)) {
-+                        treeType = TreeType.DARK_OAK; // CraftBukkit
-                         object = new WorldGenForestTree(true);
-                         flag = true;
-                         break label90;
diff --git a/nms-patches/BlockShulkerBox.patch b/nms-patches/BlockShulkerBox.patch
deleted file mode 100644
index e0a5aaa..0000000
--- a/nms-patches/BlockShulkerBox.patch
+++ /dev/null
@@ -1,55 +0,0 @@
---- a/net/minecraft/server/BlockShulkerBox.java
-+++ b/net/minecraft/server/BlockShulkerBox.java
-@@ -92,7 +92,32 @@
- 
-     }
- 
--    public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {}
-+    // CraftBukkit start - override to prevent duplication when dropping
-+    public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-+        TileEntity tileentity = world.getTileEntity(blockposition);
-+
-+        if (tileentity instanceof TileEntityShulkerBox) {
-+            TileEntityShulkerBox tileentityshulkerbox = (TileEntityShulkerBox) tileentity;
-+
-+            if (!tileentityshulkerbox.r() && tileentityshulkerbox.F()) {
-+                ItemStack itemstack = new ItemStack(Item.getItemOf(this));
-+                NBTTagCompound nbttagcompound = new NBTTagCompound();
-+                NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-+
-+                nbttagcompound.set("BlockEntityTag", ((TileEntityShulkerBox) tileentity).f(nbttagcompound1));
-+                itemstack.setTag(nbttagcompound);
-+                if (tileentityshulkerbox.hasCustomName()) {
-+                    itemstack.g(tileentityshulkerbox.getName());
-+                    tileentityshulkerbox.setCustomName("");
-+                }
-+
-+                a(world, blockposition, itemstack);
-+            }
-+
-+            world.updateAdjacentComparators(blockposition, iblockdata.getBlock());
-+        }
-+    }
-+    // CraftBukkit end
- 
-     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
-         if (itemstack.hasName()) {
-@@ -108,7 +133,7 @@
-     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-         TileEntity tileentity = world.getTileEntity(blockposition);
- 
--        if (tileentity instanceof TileEntityShulkerBox) {
-+        if (false && tileentity instanceof TileEntityShulkerBox) { // CraftBukkit - moved up
-             TileEntityShulkerBox tileentityshulkerbox = (TileEntityShulkerBox) tileentity;
- 
-             if (!tileentityshulkerbox.r() && tileentityshulkerbox.F()) {
-@@ -126,8 +151,8 @@
-                 a(world, blockposition, itemstack);
-             }
- 
--            world.updateAdjacentComparators(blockposition, iblockdata.getBlock());
-         }
-+        world.updateAdjacentComparators(blockposition, iblockdata.getBlock()); // CraftBukkit - moved down
- 
-         super.remove(world, blockposition, iblockdata);
-     }
diff --git a/nms-patches/BlockSkull.patch b/nms-patches/BlockSkull.patch
deleted file mode 100644
index b2c8601..0000000
--- a/nms-patches/BlockSkull.patch
+++ /dev/null
@@ -1,123 +0,0 @@
---- a/net/minecraft/server/BlockSkull.java
-+++ b/net/minecraft/server/BlockSkull.java
-@@ -5,6 +5,11 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
-+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-+// CraftBukkit end
-+
- public class BlockSkull extends BlockTileEntity {
- 
-     public static final BlockStateDirection FACING = BlockDirectional.FACING;
-@@ -82,7 +87,29 @@
-         return new ItemStack(Items.SKULL, 1, i);
-     }
- 
--    public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {}
-+    // CraftBukkit start - Special case dropping so we can get info from the tile entity
-+    @Override
-+    public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-+        if (world.random.nextFloat() < f) {
-+            TileEntity tileentity = world.getTileEntity(blockposition);
-+
-+            if (tileentity instanceof TileEntitySkull) {
-+                TileEntitySkull tileentityskull = (TileEntitySkull) tileentity;
-+                ItemStack itemstack = this.a(world, blockposition, iblockdata);
-+
-+                if (tileentityskull.getSkullType() == 3 && tileentityskull.getGameProfile() != null) {
-+                    itemstack.setTag(new NBTTagCompound());
-+                    NBTTagCompound nbttagcompound = new NBTTagCompound();
-+
-+                    GameProfileSerializer.serialize(nbttagcompound, tileentityskull.getGameProfile());
-+                    itemstack.getTag().set("SkullOwner", nbttagcompound);
-+                }
-+
-+                a(world, blockposition, itemstack);
-+            }
-+        }
-+    }
-+    // CraftBukkit end
- 
-     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman) {
-         if (entityhuman.abilities.canInstantlyBuild) {
-@@ -95,7 +122,10 @@
- 
-     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-         if (!world.isClientSide) {
--            if (!((Boolean) iblockdata.get(BlockSkull.NODROP)).booleanValue()) {
-+            // CraftBukkit start - Drop item in code above, not here
-+            // if (!((Boolean) iblockdata.get(BlockSkull.NODROP)).booleanValue()) {
-+            if (false) {
-+                // CraftBukkit end
-                 TileEntity tileentity = world.getTileEntity(blockposition);
- 
-                 if (tileentity instanceof TileEntitySkull) {
-@@ -127,24 +157,36 @@
-     }
- 
-     public void a(World world, BlockPosition blockposition, TileEntitySkull tileentityskull) {
-+        if (world.captureBlockStates) return; // CraftBukkit
-         if (tileentityskull.getSkullType() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL && !world.isClientSide) {
-             ShapeDetector shapedetector = this.g();
-             ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = shapedetector.a(world, blockposition);
- 
-             if (shapedetector_shapedetectorcollection != null) {
-+                // CraftBukkit start - Use BlockStateListPopulator
-+                BlockStateListPopulator blockList = new BlockStateListPopulator(world.getWorld());
-                 int i;
- 
-                 for (i = 0; i < 3; ++i) {
-                     ShapeDetectorBlock shapedetectorblock = shapedetector_shapedetectorcollection.a(i, 0, 0);
- 
--                    world.setTypeAndData(shapedetectorblock.getPosition(), shapedetectorblock.a().set(BlockSkull.NODROP, Boolean.valueOf(true)), 2);
-+                    // CraftBukkit start
-+                    // world.setTypeAndData(shapedetectorblock.getPosition(), shapedetectorblock.a().set(BlockSkull.NODROP, Boolean.valueOf(true)), 2);
-+                    BlockPosition pos = shapedetectorblock.getPosition();
-+                    IBlockData data = shapedetectorblock.a().set(BlockSkull.NODROP, Boolean.valueOf(true));
-+                    blockList.setTypeAndData(pos.getX(), pos.getY(), pos.getZ(), data.getBlock(), data.getBlock().toLegacyData(data), 2);
-+                    // CraftBukkit end
-                 }
- 
-                 for (i = 0; i < shapedetector.c(); ++i) {
-                     for (int j = 0; j < shapedetector.b(); ++j) {
-                         ShapeDetectorBlock shapedetectorblock1 = shapedetector_shapedetectorcollection.a(i, j, 0);
- 
--                        world.setTypeAndData(shapedetectorblock1.getPosition(), Blocks.AIR.getBlockData(), 2);
-+                        // CraftBukkit start
-+                        // world.setTypeAndData(shapedetectorblock1.getPosition(), Blocks.AIR.getBlockData(), 2);
-+                        BlockPosition pos = shapedetectorblock1.getPosition();
-+                        blockList.setTypeAndData(pos.getX(), pos.getY(), pos.getZ(), Blocks.AIR, 0, 2);
-+                        // CraftBukkit end
-                     }
-                 }
- 
-@@ -157,14 +199,16 @@
-                 entitywither.p();
-                 Iterator iterator = world.a(EntityPlayer.class, entitywither.getBoundingBox().g(50.0D)).iterator();
- 
-+                // CraftBukkit start
-+                if (world.addEntity(entitywither, SpawnReason.BUILD_WITHER)) {
-+                    blockList.updateList();
-+
-                 while (iterator.hasNext()) {
-                     EntityPlayer entityplayer = (EntityPlayer) iterator.next();
- 
-                     CriterionTriggers.m.a(entityplayer, (Entity) entitywither);
-                 }
- 
--                world.addEntity(entitywither);
--
-                 int k;
- 
-                 for (k = 0; k < 120; ++k) {
-@@ -178,6 +222,7 @@
-                         world.update(shapedetectorblock2.getPosition(), Blocks.AIR, false);
-                     }
-                 }
-+                } // CraftBukkit end
- 
-             }
-         }
diff --git a/nms-patches/BlockSnow.patch b/nms-patches/BlockSnow.patch
deleted file mode 100644
index b69c90e..0000000
--- a/nms-patches/BlockSnow.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/BlockSnow.java
-+++ b/net/minecraft/server/BlockSnow.java
-@@ -91,6 +91,11 @@
- 
-     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-         if (world.getBrightness(EnumSkyBlock.BLOCK, blockposition) > 11) {
-+            // CraftBukkit start
-+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), Blocks.AIR).isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             this.b(world, blockposition, world.getType(blockposition), 0);
-             world.setAir(blockposition);
-         }
diff --git a/nms-patches/BlockSnowBlock.patch b/nms-patches/BlockSnowBlock.patch
deleted file mode 100644
index 5329149..0000000
--- a/nms-patches/BlockSnowBlock.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/BlockSnowBlock.java
-+++ b/net/minecraft/server/BlockSnowBlock.java
-@@ -20,6 +20,11 @@
- 
-     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-         if (world.getBrightness(EnumSkyBlock.BLOCK, blockposition) > 11) {
-+            // CraftBukkit start
-+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), Blocks.AIR).isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             this.b(world, blockposition, world.getType(blockposition), 0);
-             world.setAir(blockposition);
-         }
diff --git a/nms-patches/BlockSoil.patch b/nms-patches/BlockSoil.patch
deleted file mode 100644
index 33fdfe0..0000000
--- a/nms-patches/BlockSoil.patch
+++ /dev/null
@@ -1,58 +0,0 @@
---- a/net/minecraft/server/BlockSoil.java
-+++ b/net/minecraft/server/BlockSoil.java
-@@ -4,6 +4,11 @@
- import java.util.List;
- import java.util.Random;
- 
-+// CraftBukkit start
-+import org.bukkit.event.entity.EntityInteractEvent;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+// CraftBukkit end
-+
- public class BlockSoil extends Block {
- 
-     public static final BlockStateInteger MOISTURE = BlockStateInteger.of("moisture", 0, 7);
-@@ -35,6 +40,12 @@
-             if (i > 0) {
-                 world.setTypeAndData(blockposition, iblockdata.set(BlockSoil.MOISTURE, Integer.valueOf(i - 1)), 2);
-             } else if (!this.c(world, blockposition)) {
-+                // CraftBukkit start
-+                org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                if (CraftEventFactory.callBlockFadeEvent(block, Blocks.DIRT).isCancelled()) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 this.b(world, blockposition);
-             }
-         } else if (i < 7) {
-@@ -44,11 +55,29 @@
-     }
- 
-     public void fallOn(World world, BlockPosition blockposition, Entity entity, float f) {
-+        super.fallOn(world, blockposition, entity, f); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
-         if (!world.isClientSide && world.random.nextFloat() < f - 0.5F && entity instanceof EntityLiving && (entity instanceof EntityHuman || world.getGameRules().getBoolean("mobGriefing")) && entity.width * entity.width * entity.length > 0.512F) {
-+            // CraftBukkit start - Interact soil
-+            org.bukkit.event.Cancellable cancellable;
-+            if (entity instanceof EntityHuman) {
-+                cancellable = CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null, null);
-+            } else {
-+                cancellable = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+                world.getServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
-+            }
-+
-+            if (cancellable.isCancelled()) {
-+                return;
-+            }
-+
-+            if (CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, Blocks.DIRT, 0).isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             this.b(world, blockposition);
-         }
- 
--        super.fallOn(world, blockposition, entity, f);
-+        // super.fallOn(world, blockposition, entity, f); // CraftBukkit - moved up
-     }
- 
-     private void b(World world, BlockPosition blockposition) {
diff --git a/nms-patches/BlockStationary.patch b/nms-patches/BlockStationary.patch
deleted file mode 100644
index 02a516f..0000000
--- a/nms-patches/BlockStationary.patch
+++ /dev/null
@@ -1,40 +0,0 @@
---- a/net/minecraft/server/BlockStationary.java
-+++ b/net/minecraft/server/BlockStationary.java
-@@ -2,6 +2,8 @@
- 
- import java.util.Random;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory;  // CraftBukkit
-+
- public class BlockStationary extends BlockFluids {
- 
-     protected BlockStationary(Material material) {
-@@ -45,6 +47,13 @@
- 
-                         if (block.material == Material.AIR) {
-                             if (this.c(world, blockposition1)) {
-+                                 // CraftBukkit start - Prevent lava putting something on fire
-+                                if (world.getType(blockposition1) != Blocks.FIRE) {
-+                                    if (CraftEventFactory.callBlockIgniteEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
-+                                        continue;
-+                                    }
-+                                }
-+                                // CraftBukkit end
-                                 world.setTypeUpdate(blockposition1, Blocks.FIRE.getBlockData());
-                                 return;
-                             }
-@@ -61,6 +70,14 @@
-                         }
- 
-                         if (world.isEmpty(blockposition2.up()) && this.d(world, blockposition2)) {
-+                            // CraftBukkit start - Prevent lava putting something on fire
-+                            BlockPosition up = blockposition2.up();
-+                            if (world.getType(up) != Blocks.FIRE) {
-+                                if (CraftEventFactory.callBlockIgniteEvent(world, up.getX(), up.getY(), up.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
-+                                    continue;
-+                                }
-+                            }
-+                            // CraftBukkit end
-                             world.setTypeUpdate(blockposition2.up(), Blocks.FIRE.getBlockData());
-                         }
-                     }
diff --git a/nms-patches/BlockStem.patch b/nms-patches/BlockStem.patch
deleted file mode 100644
index df952dc..0000000
--- a/nms-patches/BlockStem.patch
+++ /dev/null
@@ -1,41 +0,0 @@
---- a/net/minecraft/server/BlockStem.java
-+++ b/net/minecraft/server/BlockStem.java
-@@ -4,6 +4,8 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
- 
-     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 7);
-@@ -54,7 +56,8 @@
- 
-                 if (i < 7) {
-                     iblockdata = iblockdata.set(BlockStem.AGE, Integer.valueOf(i + 1));
--                    world.setTypeAndData(blockposition, iblockdata, 2);
-+                    // world.setTypeAndData(blockposition, iblockdata, 2); // CraftBukkit
-+                    CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(iblockdata)); // CraftBukkit
-                 } else {
-                     Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
- 
-@@ -70,7 +73,8 @@
-                     Block block = world.getType(blockposition.down()).getBlock();
- 
-                     if (world.getType(blockposition).getBlock().material == Material.AIR && (block == Blocks.FARMLAND || block == Blocks.DIRT || block == Blocks.GRASS)) {
--                        world.setTypeUpdate(blockposition, this.blockFruit.getBlockData());
-+                        // world.setTypeUpdate(blockposition, this.blockFruit.getBlockData()); // CraftBukkit
-+                        CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.blockFruit, 0); // CraftBukkit
-                     }
-                 }
-             }
-@@ -81,7 +85,8 @@
-     public void g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-         int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue() + MathHelper.nextInt(world.random, 2, 5);
- 
--        world.setTypeAndData(blockposition, iblockdata.set(BlockStem.AGE, Integer.valueOf(Math.min(7, i))), 2);
-+        // world.setTypeAndData(blockposition, iblockdata.set(BlockStem.AGE, Integer.valueOf(Math.min(7, i))), 2);
-+        CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, Math.min(7, i)); // CraftBukkit
-     }
- 
-     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
diff --git a/nms-patches/BlockTNT.patch b/nms-patches/BlockTNT.patch
deleted file mode 100644
index ef5838b..0000000
--- a/nms-patches/BlockTNT.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/BlockTNT.java
-+++ b/net/minecraft/server/BlockTNT.java
-@@ -75,6 +75,11 @@
-             EntityArrow entityarrow = (EntityArrow) entity;
- 
-             if (entityarrow.isBurning()) {
-+                // CraftBukkit start
-+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entityarrow, blockposition, Blocks.AIR, 0).isCancelled()) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 this.a(world, blockposition, world.getType(blockposition).set(BlockTNT.EXPLODE, Boolean.valueOf(true)), entityarrow.shooter instanceof EntityLiving ? (EntityLiving) entityarrow.shooter : null);
-                 world.setAir(blockposition);
-             }
diff --git a/nms-patches/BlockTallPlant.patch b/nms-patches/BlockTallPlant.patch
deleted file mode 100644
index a1127a3..0000000
--- a/nms-patches/BlockTallPlant.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/BlockTallPlant.java
-+++ b/net/minecraft/server/BlockTallPlant.java
-@@ -48,6 +48,11 @@
- 
-     protected void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-         if (!this.f(world, blockposition, iblockdata)) {
-+            // CraftBukkit start
-+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPhysicsEvent(world, blockposition).isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             boolean flag = iblockdata.get(BlockTallPlant.HALF) == BlockTallPlant.EnumTallPlantHalf.UPPER;
-             BlockPosition blockposition1 = flag ? blockposition : blockposition.up();
-             BlockPosition blockposition2 = flag ? blockposition.down() : blockposition;
diff --git a/nms-patches/BlockTrapdoor.patch b/nms-patches/BlockTrapdoor.patch
deleted file mode 100644
index 3100709..0000000
--- a/nms-patches/BlockTrapdoor.patch
+++ /dev/null
@@ -1,30 +0,0 @@
---- a/net/minecraft/server/BlockTrapdoor.java
-+++ b/net/minecraft/server/BlockTrapdoor.java
-@@ -1,6 +1,7 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
- 
- public class BlockTrapdoor extends Block {
- 
-@@ -91,6 +92,19 @@
-             boolean flag = world.isBlockIndirectlyPowered(blockposition);
- 
-             if (flag || block.getBlockData().m()) {
-+                // CraftBukkit start
-+                org.bukkit.World bworld = world.getWorld();
-+                org.bukkit.block.Block bblock = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+                int power = bblock.getBlockPower();
-+                int oldPower = (Boolean) iblockdata.get(OPEN) ? 15 : 0;
-+
-+                if (oldPower == 0 ^ power == 0 || block.getBlockData().n()) {
-+                    BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
-+                    world.getServer().getPluginManager().callEvent(eventRedstone);
-+                    flag = eventRedstone.getNewCurrent() > 0;
-+                }
-+                // CraftBukkit end
-                 boolean flag1 = ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue();
- 
-                 if (flag1 != flag) {
diff --git a/nms-patches/BlockTripwire.patch b/nms-patches/BlockTripwire.patch
deleted file mode 100644
index 3f955f1..0000000
--- a/nms-patches/BlockTripwire.patch
+++ /dev/null
@@ -1,52 +0,0 @@
---- a/net/minecraft/server/BlockTripwire.java
-+++ b/net/minecraft/server/BlockTripwire.java
-@@ -5,6 +5,8 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
-+
- public class BlockTripwire extends Block {
- 
-     public static final BlockStateBoolean POWERED = BlockStateBoolean.of("powered");
-@@ -138,6 +140,40 @@
-             }
-         }
- 
-+        // CraftBukkit start - Call interact even when triggering connected tripwire
-+        if (flag != flag1 && flag1 && (Boolean)iblockdata.get(ATTACHED)) {
-+            org.bukkit.World bworld = world.getWorld();
-+            org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
-+            org.bukkit.block.Block block = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            boolean allowed = false;
-+
-+            // If all of the events are cancelled block the tripwire trigger, else allow
-+            for (Object object : list) {
-+                if (object != null) {
-+                    org.bukkit.event.Cancellable cancellable;
-+
-+                    if (object instanceof EntityHuman) {
-+                        cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityHuman) object, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null, null);
-+                    } else if (object instanceof Entity) {
-+                        cancellable = new EntityInteractEvent(((Entity) object).getBukkitEntity(), block);
-+                        manager.callEvent((EntityInteractEvent) cancellable);
-+                    } else {
-+                        continue;
-+                    }
-+
-+                    if (!cancellable.isCancelled()) {
-+                        allowed = true;
-+                        break;
-+                    }
-+                }
-+            }
-+
-+            if (!allowed) {
-+                return;
-+            }
-+        }
-+        // CraftBukkit end
-+
-         if (flag1 != flag) {
-             iblockdata = iblockdata.set(BlockTripwire.POWERED, Boolean.valueOf(flag1));
-             world.setTypeAndData(blockposition, iblockdata, 3);
diff --git a/nms-patches/BlockTripwireHook.patch b/nms-patches/BlockTripwireHook.patch
deleted file mode 100644
index d3cf094..0000000
--- a/nms-patches/BlockTripwireHook.patch
+++ /dev/null
@@ -1,29 +0,0 @@
---- a/net/minecraft/server/BlockTripwireHook.java
-+++ b/net/minecraft/server/BlockTripwireHook.java
-@@ -5,6 +5,8 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
-+
- public class BlockTripwireHook extends Block {
- 
-     public static final BlockStateDirection FACING = BlockFacingHorizontal.FACING;
-@@ -160,6 +162,17 @@
-             this.a(world, blockposition1, flag4, flag5, flag2, flag3);
-         }
- 
-+        // CraftBukkit start
-+        org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
-+        world.getServer().getPluginManager().callEvent(eventRedstone);
-+
-+        if (eventRedstone.getNewCurrent() > 0) {
-+            return;
-+        }
-+        // CraftBukkit end
-+
-         this.a(world, blockposition, flag4, flag5, flag2, flag3);
-         if (!flag) {
-             world.setTypeAndData(blockposition, iblockdata3.set(BlockTripwireHook.FACING, enumdirection), 3);
diff --git a/nms-patches/BlockVine.patch b/nms-patches/BlockVine.patch
deleted file mode 100644
index aa2e152..0000000
--- a/nms-patches/BlockVine.patch
+++ /dev/null
@@ -1,71 +0,0 @@
---- a/net/minecraft/server/BlockVine.java
-+++ b/net/minecraft/server/BlockVine.java
-@@ -4,6 +4,8 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class BlockVine extends Block {
- 
-     public static final BlockStateBoolean UP = BlockStateBoolean.of("up");
-@@ -177,7 +179,13 @@
-                     }
- 
-                     if (((Boolean) iblockdata1.get(BlockVine.NORTH)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.EAST)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.SOUTH)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.WEST)).booleanValue()) {
--                        world.setTypeAndData(blockposition1, iblockdata1, 2);
-+                        // CraftBukkit start - Call BlockSpreadEvent
-+                        // world.setTypeAndData(blockposition1, iblockdata1, 2);
-+                        BlockPosition target = blockposition1;
-+                        org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                        org.bukkit.block.Block block = world.getWorld().getBlockAt(target.getX(), target.getY(), target.getZ());
-+                        CraftEventFactory.handleBlockSpreadEvent(block, source, this, toLegacyData(iblockdata1));
-+                        // CraftBukkit end
-                     }
- 
-                 } else {
-@@ -198,15 +206,26 @@
-                                 BlockPosition blockposition3 = blockposition2.shift(enumdirection2);
-                                 BlockPosition blockposition4 = blockposition2.shift(enumdirection3);
- 
-+                                // CraftBukkit start - Call BlockSpreadEvent
-+                                org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(blockposition2.getX(), blockposition2.getY(), blockposition2.getZ());
-+
-                                 if (flag2 && this.a(world, blockposition3.shift(enumdirection2), enumdirection2)) {
--                                    world.setTypeAndData(blockposition2, this.getBlockData().set(getDirection(enumdirection2), Boolean.valueOf(true)), 2);
-+                                    // world.setTypeAndData(blockposition2, this.getBlockData().set(getDirection(enumdirection2), Boolean.valueOf(true)), 2);
-+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection2), Boolean.valueOf(true))));
-                                 } else if (flag3 && this.a(world, blockposition4.shift(enumdirection3), enumdirection3)) {
--                                    world.setTypeAndData(blockposition2, this.getBlockData().set(getDirection(enumdirection3), Boolean.valueOf(true)), 2);
-+                                    // world.setTypeAndData(blockposition2, this.getBlockData().set(getDirection(enumdirection3), Boolean.valueOf(true)), 2);
-+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection3), Boolean.valueOf(true))));
-                                 } else if (flag2 && world.isEmpty(blockposition3) && this.a(world, blockposition3, enumdirection)) {
--                                    world.setTypeAndData(blockposition3, this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.valueOf(true)), 2);
-+                                    // world.setTypeAndData(blockposition3, this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.valueOf(true)), 2);
-+                                    bukkitBlock = world.getWorld().getBlockAt(blockposition3.getX(), blockposition3.getY(), blockposition3.getZ());
-+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.valueOf(true))));
-                                 } else if (flag3 && world.isEmpty(blockposition4) && this.a(world, blockposition4, enumdirection)) {
--                                    world.setTypeAndData(blockposition4, this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.valueOf(true)), 2);
-+                                    // world.setTypeAndData(blockposition4, this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.valueOf(true)), 2);
-+                                    bukkitBlock = world.getWorld().getBlockAt(blockposition4.getX(), blockposition4.getY(), blockposition4.getZ());
-+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.valueOf(true))));
-                                 }
-+                                // CraftBukkit end
-                             } else if (iblockdata2.d(world, blockposition2, enumdirection) == EnumBlockFaceShape.SOLID) {
-                                 world.setTypeAndData(blockposition, iblockdata.set(getDirection(enumdirection), Boolean.valueOf(true)), 2);
-                             }
-@@ -233,7 +252,12 @@
-                                 }
- 
-                                 if (((Boolean) iblockdata3.get(BlockVine.NORTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.EAST)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.SOUTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.WEST)).booleanValue()) {
--                                    world.setTypeAndData(blockposition2, iblockdata3, 2);
-+                                    // CraftBukkit start - Call BlockSpreadEvent
-+                                    // world.setTypeAndData(blockposition2, iblockdata3, 2);
-+                                    org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                                    org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(blockposition2.getX(), blockposition2.getY(), blockposition2.getZ());
-+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(iblockdata3));
-+                                    // CraftBukkit end
-                                 }
-                             } else if (block == this) {
-                                 iblockdata3 = iblockdata2;
diff --git a/nms-patches/BlockWaterLily.patch b/nms-patches/BlockWaterLily.patch
deleted file mode 100644
index 83a6ae1..0000000
--- a/nms-patches/BlockWaterLily.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/BlockWaterLily.java
-+++ b/net/minecraft/server/BlockWaterLily.java
-@@ -20,7 +20,7 @@
- 
-     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-         super.a(world, blockposition, iblockdata, entity);
--        if (entity instanceof EntityBoat) {
-+        if (entity instanceof EntityBoat && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, Blocks.AIR, 0).isCancelled()) { // CraftBukkit
-             world.setAir(new BlockPosition(blockposition), true);
-         }
- 
diff --git a/nms-patches/ChatBaseComponent.patch b/nms-patches/ChatBaseComponent.patch
deleted file mode 100644
index bd82c4a..0000000
--- a/nms-patches/ChatBaseComponent.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/ChatBaseComponent.java
-+++ b/net/minecraft/server/ChatBaseComponent.java
-@@ -112,7 +112,7 @@
-     }
- 
-     public int hashCode() {
--        return 31 * this.b.hashCode() + this.a.hashCode();
-+        return 31 * this.getChatModifier().hashCode() + this.a.hashCode(); // CraftBukkit - fix null pointer
-     }
- 
-     public String toString() {
diff --git a/nms-patches/ChatModifier.patch b/nms-patches/ChatModifier.patch
deleted file mode 100644
index bd72bcf..0000000
--- a/nms-patches/ChatModifier.patch
+++ /dev/null
@@ -1,45 +0,0 @@
---- a/net/minecraft/server/ChatModifier.java
-+++ b/net/minecraft/server/ChatModifier.java
-@@ -263,16 +263,18 @@
-     }
- 
-     public int hashCode() {
--        int i = this.b.hashCode();
-+        // CraftBukkit start - fix npe
-+        int i = b == null ? 0 : this.b.hashCode();
- 
--        i = 31 * i + this.c.hashCode();
--        i = 31 * i + this.d.hashCode();
--        i = 31 * i + this.e.hashCode();
--        i = 31 * i + this.f.hashCode();
--        i = 31 * i + this.g.hashCode();
--        i = 31 * i + this.h.hashCode();
--        i = 31 * i + this.i.hashCode();
--        i = 31 * i + this.j.hashCode();
-+        i = 31 * i + (c == null ? 0 : this.c.hashCode());
-+        i = 31 * i + (d == null ? 0 : this.d.hashCode());
-+        i = 31 * i + (e == null ? 0 : this.e.hashCode());
-+        i = 31 * i + (f == null ? 0 : this.f.hashCode());
-+        i = 31 * i + (g == null ? 0 : this.g.hashCode());
-+        i = 31 * i + (h == null ? 0 : this.h.hashCode());
-+        i = 31 * i + (this.i == null ? 0 : this.i.hashCode());
-+        i = 31 * i + (j == null ? 0 : this.j.hashCode());
-+        // CraftBukkit end
-         return i;
-     }
- 
-@@ -441,12 +443,12 @@
-         }
- 
-         @Nullable
--        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
-+        public JsonElement serialize(ChatModifier object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - fix decompile error
-             return this.a((ChatModifier) object, type, jsonserializationcontext);
-         }
- 
-         @Nullable
--        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
-+        public ChatModifier deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - fix decompile error
-             return this.a(jsonelement, type, jsondeserializationcontext);
-         }
-     }
diff --git a/nms-patches/Chunk.patch b/nms-patches/Chunk.patch
deleted file mode 100644
index 92d24e2..0000000
--- a/nms-patches/Chunk.patch
+++ /dev/null
@@ -1,206 +0,0 @@
---- a/net/minecraft/server/Chunk.java
-+++ b/net/minecraft/server/Chunk.java
-@@ -14,6 +14,9 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+import com.google.common.collect.Lists; // CraftBukkit
-+import org.bukkit.Server; // CraftBukkit
-+
- public class Chunk {
- 
-     private static final Logger e = LogManager.getLogger();
-@@ -42,6 +45,35 @@
-     private final ConcurrentLinkedQueue<BlockPosition> y;
-     public boolean d;
- 
-+    // CraftBukkit start - Neighbor loaded cache for chunk lighting and entity ticking
-+    private int neighbors = 0x1 << 12;
-+    public long chunkKey;
-+
-+    public boolean areNeighborsLoaded(final int radius) {
-+        switch (radius) {
-+            case 2:
-+                return this.neighbors == Integer.MAX_VALUE >> 6;
-+            case 1:
-+                final int mask =
-+                        //       x        z   offset          x        z   offset          x         z   offset
-+                        (0x1 << (1 * 5 +  1 + 12)) | (0x1 << (0 * 5 +  1 + 12)) | (0x1 << (-1 * 5 +  1 + 12)) |
-+                        (0x1 << (1 * 5 +  0 + 12)) | (0x1 << (0 * 5 +  0 + 12)) | (0x1 << (-1 * 5 +  0 + 12)) |
-+                        (0x1 << (1 * 5 + -1 + 12)) | (0x1 << (0 * 5 + -1 + 12)) | (0x1 << (-1 * 5 + -1 + 12));
-+                return (this.neighbors & mask) == mask;
-+            default:
-+                throw new UnsupportedOperationException(String.valueOf(radius));
-+        }
-+    }
-+
-+    public void setNeighborLoaded(final int x, final int z) {
-+        this.neighbors |= 0x1 << (x * 5 + 12 + z);
-+    }
-+
-+    public void setNeighborUnloaded(final int x, final int z) {
-+        this.neighbors &= ~(0x1 << (x * 5 + 12 + z));
-+    }
-+    // CraftBukkit end
-+
-     public Chunk(World world, int i, int j) {
-         this.sections = new ChunkSection[16];
-         this.g = new byte[256];
-@@ -62,8 +94,15 @@
- 
-         Arrays.fill(this.h, -999);
-         Arrays.fill(this.g, (byte) -1);
-+        // CraftBukkit start
-+        this.bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
-+        this.chunkKey = ChunkCoordIntPair.a(this.locX, this.locZ);
-     }
- 
-+    public org.bukkit.Chunk bukkitChunk;
-+    public boolean mustSave;
-+    // CraftBukkit end
-+
-     public Chunk(World world, ChunkSnapshot chunksnapshot, int i, int j) {
-         this(world, i, j);
-         boolean flag = true;
-@@ -467,7 +506,8 @@
-                     }
-                 }
- 
--                if (!this.world.isClientSide && block1 != block) {
-+                // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
-+                if (!this.world.isClientSide && block1 != block  && (!this.world.captureBlockStates || block instanceof BlockTileEntity)) {
-                     block.onPlace(this.world, blockposition, iblockdata);
-                 }
- 
-@@ -604,7 +644,15 @@
- 
-     @Nullable
-     public TileEntity a(BlockPosition blockposition, Chunk.EnumTileEntityState chunk_enumtileentitystate) {
--        TileEntity tileentity = (TileEntity) this.tileEntities.get(blockposition);
-+        // CraftBukkit start
-+        TileEntity tileentity = null;
-+        if (world.captureBlockStates) {
-+            tileentity = world.capturedTileEntities.get(blockposition);
-+        }
-+        if (tileentity == null) {
-+            tileentity = (TileEntity) this.tileEntities.get(blockposition);
-+        }
-+        // CraftBukkit end
- 
-         if (tileentity == null) {
-             if (chunk_enumtileentitystate == Chunk.EnumTileEntityState.IMMEDIATE) {
-@@ -639,6 +687,13 @@
- 
-             tileentity.A();
-             this.tileEntities.put(blockposition, tileentity);
-+            // CraftBukkit start
-+        } else {
-+            System.out.println("Attempted to place a tile entity (" + tileentity + ") at " + tileentity.position.getX() + "," + tileentity.position.getY() + "," + tileentity.position.getZ()
-+                + " (" + org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(getBlockData(blockposition).getBlock()) + ") where there was no entity tile!");
-+            System.out.println("Chunk coordinates: " + (this.locX * 16) + "," + (this.locZ * 16));
-+            new Exception().printStackTrace();
-+            // CraftBukkit end
-         }
-     }
- 
-@@ -681,9 +736,21 @@
-         int i = aentityslice.length;
- 
-         for (int j = 0; j < i; ++j) {
--            EntitySlice entityslice = aentityslice[j];
-+            // CraftBukkit start
-+            List<Entity> newList = Lists.newArrayList(aentityslice[j]);
-+            java.util.Iterator<Entity> iter = newList.iterator();
-+            while (iter.hasNext()) {
-+                Entity entity = iter.next();
-+
-+                // Do not pass along players, as doing so can get them stuck outside of time.
-+                // (which for example disables inventory icon updates and prevents block breaking)
-+                if (entity instanceof EntityPlayer) {
-+                    iter.remove();
-+                }
-+            }
- 
--            this.world.c((Collection) entityslice);
-+            this.world.c(newList);
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -745,8 +812,8 @@
-             while (iterator.hasNext()) {
-                 Entity entity = (Entity) iterator.next();
- 
--                if (entity.getBoundingBox().c(axisalignedbb) && (predicate == null || predicate.apply(entity))) {
--                    list.add(entity);
-+                if (entity.getBoundingBox().c(axisalignedbb) && (predicate == null || predicate.apply((T) entity))) { // CraftBukkit - fix decompile error
-+                    list.add((T) entity); // Fix decompile error
-                 }
-             }
-         }
-@@ -773,7 +840,34 @@
-         return false;
-     }
- 
--    public void loadNearby(IChunkProvider ichunkprovider, ChunkGenerator chunkgenerator) {
-+    // CraftBukkit start
-+    public void loadNearby(IChunkProvider ichunkprovider, ChunkGenerator chunkgenerator, boolean newChunk) {
-+        Server server = world.getServer();
-+        if (server != null) {
-+            /*
-+             * If it's a new world, the first few chunks are generated inside
-+             * the World constructor. We can't reliably alter that, so we have
-+             * no way of creating a CraftWorld/CraftServer at that point.
-+             */
-+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk));
-+        }
-+
-+        // Update neighbor counts
-+        for (int x = -2; x < 3; x++) {
-+            for (int z = -2; z < 3; z++) {
-+                if (x == 0 && z == 0) {
-+                    continue;
-+                }
-+
-+                Chunk neighbor = getWorld().getChunkIfLoaded(locX + x, locZ + z);
-+                if (neighbor != null) {
-+                    neighbor.setNeighborLoaded(-x, -z);
-+                    setNeighborLoaded(x, z);
-+                }
-+            }
-+        }
-+        // CraftBukkit end
-+
-         Chunk chunk = ichunkprovider.getLoadedChunkAt(this.locX, this.locZ - 1);
-         Chunk chunk1 = ichunkprovider.getLoadedChunkAt(this.locX + 1, this.locZ);
-         Chunk chunk2 = ichunkprovider.getLoadedChunkAt(this.locX, this.locZ + 1);
-@@ -809,6 +903,29 @@
-         } else {
-             this.o();
-             chunkgenerator.recreateStructures(this.locX, this.locZ);
-+
-+            // CraftBukkit start
-+            BlockSand.instaFall = true;
-+            Random random = new Random();
-+            random.setSeed(world.getSeed());
-+            long xRand = random.nextLong() / 2L * 2L + 1L;
-+            long zRand = random.nextLong() / 2L * 2L + 1L;
-+            random.setSeed((long) locX * xRand + (long) locZ * zRand ^ world.getSeed());
-+
-+            org.bukkit.World world = this.world.getWorld();
-+            if (world != null) {
-+                this.world.populating = true;
-+                try {
-+                    for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
-+                        populator.populate(world, random, bukkitChunk);
-+                    }
-+                } finally {
-+                    this.world.populating = false;
-+                }
-+            }
-+            BlockSand.instaFall = false;
-+            this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
-+            // CraftBukkit end
-             this.markDirty();
-         }
- 
diff --git a/nms-patches/ChunkProviderGenerate.patch b/nms-patches/ChunkProviderGenerate.patch
deleted file mode 100644
index 65c2bcd..0000000
--- a/nms-patches/ChunkProviderGenerate.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/ChunkProviderGenerate.java
-+++ b/net/minecraft/server/ChunkProviderGenerate.java
-@@ -234,6 +234,11 @@
-                             f5 = 1.0F + f5 * 2.0F;
-                             f6 = 1.0F + f6 * 4.0F;
-                         }
-+                        // CraftBukkit start - fix MC-54738
-+                        if (f5 < -1.8F) {
-+                            f5 = -1.8F;
-+                        }
-+                        // CraftBukkit end
- 
-                         float f7 = this.r[l1 + 2 + (i2 + 2) * 5] / (f5 + 2.0F);
- 
diff --git a/nms-patches/ChunkProviderServer.patch b/nms-patches/ChunkProviderServer.patch
deleted file mode 100644
index acf9f26..0000000
--- a/nms-patches/ChunkProviderServer.patch
+++ /dev/null
@@ -1,182 +0,0 @@
---- a/net/minecraft/server/ChunkProviderServer.java
-+++ b/net/minecraft/server/ChunkProviderServer.java
-@@ -15,6 +15,11 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
-+import org.bukkit.event.world.ChunkUnloadEvent;
-+// CraftBukkit end
-+
- public class ChunkProviderServer implements IChunkProvider {
- 
-     private static final Logger a = LogManager.getLogger();
-@@ -70,19 +75,82 @@
-         Chunk chunk = this.getLoadedChunkAt(i, j);
- 
-         if (chunk == null) {
-+            // CraftBukkit start
-+            ChunkRegionLoader loader = null;
-+
-+            if (this.chunkLoader instanceof ChunkRegionLoader) {
-+                loader = (ChunkRegionLoader) this.chunkLoader;
-+            }
-+            if (loader != null && loader.chunkExists(i, j)) {
-+                chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
-+            }
-+        }
-+
-+        return chunk;
-+    }
-+
-+    @Nullable
-+    public Chunk originalGetOrLoadChunkAt(int i, int j) {
-+        // CraftBukkit end
-+        Chunk chunk = this.getLoadedChunkAt(i, j);
-+
-+        if (chunk == null) {
-             chunk = this.loadChunk(i, j);
-             if (chunk != null) {
-                 this.chunks.put(ChunkCoordIntPair.a(i, j), chunk);
-                 chunk.addEntities();
--                chunk.loadNearby(this, this.chunkGenerator);
-+                chunk.loadNearby(this, this.chunkGenerator, false); // CraftBukkit
-             }
-         }
- 
-         return chunk;
-     }
- 
-+    // CraftBukkit start
-+    public Chunk getChunkIfLoaded(int x, int z) {
-+        return chunks.get(ChunkCoordIntPair.a(x, z));
-+    }
-+    // CraftBukkit end
-+
-     public Chunk getChunkAt(int i, int j) {
--        Chunk chunk = this.getOrLoadChunkAt(i, j);
-+        return getChunkAt(i, j, null);
-+    }
-+
-+    public Chunk getChunkAt(int i, int j, Runnable runnable) {
-+        return getChunkAt(i, j, runnable, true);
-+    }
-+
-+    public Chunk getChunkAt(int i, int j, Runnable runnable, boolean generate) {
-+        Chunk chunk = getChunkIfLoaded(i, j);
-+        ChunkRegionLoader loader = null;
-+
-+        if (this.chunkLoader instanceof ChunkRegionLoader) {
-+            loader = (ChunkRegionLoader) this.chunkLoader;
-+
-+        }
-+        // We can only use the queue for already generated chunks
-+        if (chunk == null && loader != null && loader.chunkExists(i, j)) {
-+            if (runnable != null) {
-+                ChunkIOExecutor.queueChunkLoad(world, loader, this, i, j, runnable);
-+                return null;
-+            } else {
-+                chunk = ChunkIOExecutor.syncChunkLoad(world, loader, this, i, j);
-+            }
-+        } else if (chunk == null && generate) {
-+            chunk = originalGetChunkAt(i, j);
-+        }
-+
-+        // If we didn't load the chunk async and have a callback run it now
-+        if (runnable != null) {
-+            runnable.run();
-+        }
-+
-+        return chunk;
-+    }
-+
-+    public Chunk originalGetChunkAt(int i, int j) {
-+        Chunk chunk = this.originalGetOrLoadChunkAt(i, j);
-+        // CraftBukkit end
- 
-         if (chunk == null) {
-             long k = ChunkCoordIntPair.a(i, j);
-@@ -101,7 +169,7 @@
- 
-             this.chunks.put(k, chunk);
-             chunk.addEntities();
--            chunk.loadNearby(this, this.chunkGenerator);
-+            chunk.loadNearby(this, this.chunkGenerator, true); // CraftBukkit
-         }
- 
-         return chunk;
-@@ -147,10 +215,12 @@
- 
-     public boolean a(boolean flag) {
-         int i = 0;
--        ArrayList arraylist = Lists.newArrayList(this.chunks.values());
- 
--        for (int j = 0; j < arraylist.size(); ++j) {
--            Chunk chunk = (Chunk) arraylist.get(j);
-+        // CraftBukkit start
-+        Iterator iterator = this.chunks.values().iterator();
-+        while (iterator.hasNext()) {
-+            Chunk chunk = (Chunk) iterator.next();
-+            // CraftBukkit end
- 
-             if (flag) {
-                 this.saveChunkNOP(chunk);
-@@ -183,10 +253,12 @@
-                     Chunk chunk = (Chunk) this.chunks.get(olong);
- 
-                     if (chunk != null && chunk.d) {
--                        chunk.removeEntities();
--                        this.saveChunk(chunk);
--                        this.saveChunkNOP(chunk);
--                        this.chunks.remove(olong);
-+                        // CraftBukkit start - move unload logic to own method
-+                        if (!unloadChunk(chunk, true)) {
-+                            continue;
-+                        }
-+                        // CraftBukkit end
-+
-                         ++i;
-                     }
-                 }
-@@ -198,6 +270,40 @@
-         return false;
-     }
- 
-+    // CraftBukkit start
-+    public boolean unloadChunk(Chunk chunk, boolean save) {
-+        ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk, save);
-+        this.world.getServer().getPluginManager().callEvent(event);
-+        if (event.isCancelled()) {
-+            return false;
-+        }
-+        save = event.isSaveChunk();
-+
-+        // Update neighbor counts
-+        for (int x = -2; x < 3; x++) {
-+            for (int z = -2; z < 3; z++) {
-+                if (x == 0 && z == 0) {
-+                    continue;
-+                }
-+
-+                Chunk neighbor = this.getChunkIfLoaded(chunk.locX + x, chunk.locZ + z);
-+                if (neighbor != null) {
-+                    neighbor.setNeighborUnloaded(-x, -z);
-+                    chunk.setNeighborUnloaded(x, z);
-+                }
-+            }
-+        }
-+        // Moved from unloadChunks above
-+        chunk.removeEntities();
-+        if (save) {
-+            this.saveChunk(chunk);
-+            this.saveChunkNOP(chunk);
-+        }
-+        this.chunks.remove(chunk.chunkKey);
-+        return true;
-+    }
-+    // CraftBukkit end
-+
-     public boolean e() {
-         return !this.world.savingDisabled;
-     }
diff --git a/nms-patches/ChunkRegionLoader.patch b/nms-patches/ChunkRegionLoader.patch
deleted file mode 100644
index bf874a1..0000000
--- a/nms-patches/ChunkRegionLoader.patch
+++ /dev/null
@@ -1,249 +0,0 @@
---- a/net/minecraft/server/ChunkRegionLoader.java
-+++ b/net/minecraft/server/ChunkRegionLoader.java
-@@ -19,29 +19,47 @@
- 
-     private static final Logger a = LogManager.getLogger();
-     private final Map<ChunkCoordIntPair, NBTTagCompound> b = Maps.newConcurrentMap();
--    private final Set<ChunkCoordIntPair> c = Collections.newSetFromMap(Maps.newConcurrentMap());
-+    // CraftBukkit
-+    // private final Set<ChunkCoordIntPair> c = Collections.newSetFromMap(Maps.newConcurrentMap());
-     private final File d;
-     private final DataConverterManager e;
--    private boolean f;
-+    // private boolean f;
-+    // CraftBukkit
- 
-     public ChunkRegionLoader(File file, DataConverterManager dataconvertermanager) {
-         this.d = file;
-         this.e = dataconvertermanager;
-     }
- 
-+    // CraftBukkit start - Add async variant, provide compatibility
-     @Nullable
-     public Chunk a(World world, int i, int j) throws IOException {
-+        Object[] data = loadChunk(world, i, j);
-+        if (data != null) {
-+            Chunk chunk = (Chunk) data[0];
-+            NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
-+            loadEntities(chunk, nbttagcompound.getCompound("Level"), world);
-+            return chunk;
-+        }
-+
-+        return null;
-+    }
-+
-+    public Object[] loadChunk(World world, int i, int j) throws IOException {
-+        // CraftBukkit end
-         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
-         NBTTagCompound nbttagcompound = (NBTTagCompound) this.b.get(chunkcoordintpair);
- 
-         if (nbttagcompound == null) {
--            DataInputStream datainputstream = RegionFileCache.d(this.d, i, j);
-+            // CraftBukkit start
-+            nbttagcompound = RegionFileCache.d(this.d, i, j);
- 
--            if (datainputstream == null) {
-+            if (nbttagcompound == null) {
-                 return null;
-             }
- 
--            nbttagcompound = this.e.a((DataConverterType) DataConverterTypes.CHUNK, NBTCompressedStreamTools.a(datainputstream));
-+            nbttagcompound = this.e.a((DataConverterType) DataConverterTypes.CHUNK, nbttagcompound);
-+            // CraftBukkit end
-         }
- 
-         return this.a(world, i, j, nbttagcompound);
-@@ -55,7 +73,7 @@
-     }
- 
-     @Nullable
--    protected Chunk a(World world, int i, int j, NBTTagCompound nbttagcompound) {
-+    protected Object[] a(World world, int i, int j, NBTTagCompound nbttagcompound) { // CraftBukkit - return Chunk -> Object[]
-         if (!nbttagcompound.hasKeyOfType("Level", 10)) {
-             ChunkRegionLoader.a.error("Chunk file at {},{} is missing level data, skipping", Integer.valueOf(i), Integer.valueOf(j));
-             return null;
-@@ -72,10 +90,28 @@
-                     ChunkRegionLoader.a.error("Chunk file at {},{} is in the wrong location; relocating. (Expected {}, {}, got {}, {})", Integer.valueOf(i), Integer.valueOf(j), Integer.valueOf(i), Integer.valueOf(j), Integer.valueOf(chunk.locX), Integer.valueOf(chunk.locZ));
-                     nbttagcompound1.setInt("xPos", i);
-                     nbttagcompound1.setInt("zPos", j);
-+
-+                    // CraftBukkit start - Have to move tile entities since we don't load them at this stage
-+                    NBTTagList tileEntities = nbttagcompound.getCompound("Level").getList("TileEntities", 10);
-+                    if (tileEntities != null) {
-+                        for (int te = 0; te < tileEntities.size(); te++) {
-+                            NBTTagCompound tileEntity = (NBTTagCompound) tileEntities.get(te);
-+                            int x = tileEntity.getInt("x") - chunk.locX * 16;
-+                            int z = tileEntity.getInt("z") - chunk.locZ * 16;
-+                            tileEntity.setInt("x", i * 16 + x);
-+                            tileEntity.setInt("z", j * 16 + z);
-+                        }
-+                    }
-+                    // CraftBukkit end
-                     chunk = this.a(world, nbttagcompound1);
-                 }
- 
--                return chunk;
-+                // CraftBukkit start
-+                Object[] data = new Object[2];
-+                data[0] = chunk;
-+                data[1] = nbttagcompound;
-+                return data;
-+                // CraftBukkit end
-             }
-         }
-     }
-@@ -98,7 +134,9 @@
-     }
- 
-     protected void a(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) {
--        if (!this.c.contains(chunkcoordintpair)) {
-+        // CraftBukkit
-+        // if (!this.c.contains(chunkcoordintpair))
-+        {
-             this.b.put(chunkcoordintpair, nbttagcompound);
-         }
- 
-@@ -106,20 +144,32 @@
-     }
- 
-     public boolean a() {
--        if (this.b.isEmpty()) {
--            if (this.f) {
-+        // CraftBukkit start
-+        return this.processSaveQueueEntry(false);
-+    }
-+
-+    private synchronized boolean processSaveQueueEntry(boolean logCompletion) {
-+        Iterator<Map.Entry<ChunkCoordIntPair, NBTTagCompound>> iter = this.b.entrySet().iterator();
-+        if (!iter.hasNext()) {
-+            if (logCompletion) {
-+                // CraftBukkit end
-                 ChunkRegionLoader.a.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", this.d.getName());
-             }
- 
-             return false;
-         } else {
--            ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) this.b.keySet().iterator().next();
-+            // CraftBukkit start
-+            Map.Entry<ChunkCoordIntPair, NBTTagCompound> entry = iter.next();
-+            ChunkCoordIntPair chunkcoordintpair = entry.getKey();
-+            NBTTagCompound nbttagcompound = entry.getValue();
-+            // CraftBukkit end
- 
-             boolean flag;
- 
-             try {
--                this.c.add(chunkcoordintpair);
--                NBTTagCompound nbttagcompound = (NBTTagCompound) this.b.remove(chunkcoordintpair);
-+                // this.c.add(chunkcoordintpair);
-+                // NBTTagCompound nbttagcompound = (NBTTagCompound) this.b.remove(chunkcoordintpair);
-+                // CraftBukkit
- 
-                 if (nbttagcompound != null) {
-                     try {
-@@ -131,7 +181,7 @@
- 
-                 flag = true;
-             } finally {
--                this.c.remove(chunkcoordintpair);
-+                this.b.remove(chunkcoordintpair, nbttagcompound); // CraftBukkit
-             }
- 
-             return flag;
-@@ -139,10 +189,14 @@
-     }
- 
-     private void b(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) throws IOException {
--        DataOutputStream dataoutputstream = RegionFileCache.e(this.d, chunkcoordintpair.x, chunkcoordintpair.z);
-+        // CraftBukkit start
-+        RegionFileCache.e(this.d, chunkcoordintpair.x, chunkcoordintpair.z, nbttagcompound);
- 
-+        /*
-         NBTCompressedStreamTools.a(nbttagcompound, (DataOutput) dataoutputstream);
-         dataoutputstream.close();
-+        */
-+        // CraftBukkit end
-     }
- 
-     public void b(World world, Chunk chunk) throws IOException {}
-@@ -151,15 +205,16 @@
- 
-     public void c() {
-         try {
--            this.f = true;
-+            // this.f = true; // CraftBukkit
- 
-             while (true) {
--                if (this.a()) {
-+                if (this.processSaveQueueEntry(true)) { // CraftBukkit
-                     continue;
-                 }
-+                break; // CraftBukkit - Fix infinite loop when saving chunks
-             }
-         } finally {
--            this.f = false;
-+            // this.f = false; // CraftBukkit
-         }
- 
-     }
-@@ -334,6 +389,13 @@
-             chunk.a(nbttagcompound.getByteArray("Biomes"));
-         }
- 
-+        // CraftBukkit start - End this method here and split off entity loading to another method
-+        return chunk;
-+    }
-+
-+    public void loadEntities(Chunk chunk, NBTTagCompound nbttagcompound, World world) {
-+        // CraftBukkit end
-+
-         NBTTagList nbttaglist1 = nbttagcompound.getList("Entities", 10);
- 
-         for (int l = 0; l < nbttaglist1.size(); ++l) {
-@@ -371,7 +433,7 @@
-             }
-         }
- 
--        return chunk;
-+        // return chunk; // CraftBukkit
-     }
- 
-     @Nullable
-@@ -399,14 +461,20 @@
-     }
- 
-     @Nullable
-+    // CraftBukkit start
-     public static Entity a(NBTTagCompound nbttagcompound, World world, double d0, double d1, double d2, boolean flag) {
-+        return spawnEntity(nbttagcompound, world, d0, d1, d2, flag, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
-+    }
-+
-+    public static Entity spawnEntity(NBTTagCompound nbttagcompound, World world, double d0, double d1, double d2, boolean flag, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
-+        // CraftBukkit end
-         Entity entity = a(nbttagcompound, world);
- 
-         if (entity == null) {
-             return null;
-         } else {
-             entity.setPositionRotation(d0, d1, d2, entity.yaw, entity.pitch);
--            if (flag && !world.addEntity(entity)) {
-+            if (flag && !world.addEntity(entity, spawnReason)) { // CraftBukkit
-                 return null;
-             } else {
-                 if (nbttagcompound.hasKeyOfType("Passengers", 9)) {
-@@ -435,8 +503,14 @@
-         }
-     }
- 
-+    // CraftBukkit start
-     public static void a(Entity entity, World world) {
--        if (world.addEntity(entity) && entity.isVehicle()) {
-+        a(entity, world, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
-+    }
-+
-+    public static void a(Entity entity, World world, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
-+        if (world.addEntity(entity, reason) && entity.isVehicle()) {
-+            // CraftBukkit end
-             Iterator iterator = entity.bF().iterator();
- 
-             while (iterator.hasNext()) {
diff --git a/nms-patches/ChunkSection.patch b/nms-patches/ChunkSection.patch
deleted file mode 100644
index 7a9ab68..0000000
--- a/nms-patches/ChunkSection.patch
+++ /dev/null
@@ -1,36 +0,0 @@
---- a/net/minecraft/server/ChunkSection.java
-+++ b/net/minecraft/server/ChunkSection.java
-@@ -19,6 +19,24 @@
- 
-     }
- 
-+    // CraftBukkit start
-+    public ChunkSection(int y, boolean flag, char[] blockIds) {
-+        this.yPos = y;
-+        this.blockIds = new DataPaletteBlock();
-+        for (int i = 0; i < blockIds.length; i++) {
-+            int xx = i & 15;
-+            int yy = (i >> 8) & 15;
-+            int zz = (i >> 4) & 15;
-+            this.blockIds.setBlock(xx, yy, zz, Block.REGISTRY_ID.fromId(blockIds[i]));
-+        }
-+        this.emittedLight = new NibbleArray();
-+        if (flag) {
-+            this.skyLight = new NibbleArray();
-+        }
-+        recalcBlockCounts();
-+    }
-+    // CraftBukkit end
-+
-     public IBlockData getType(int i, int j, int k) {
-         return this.blockIds.a(i, j, k);
-     }
-@@ -46,7 +64,7 @@
-     }
- 
-     public boolean a() {
--        return this.nonEmptyBlockCount == 0;
-+        return false; // CraftBukkit - MC-80966
-     }
- 
-     public boolean shouldTick() {
diff --git a/nms-patches/CommandBlockListenerAbstract.patch b/nms-patches/CommandBlockListenerAbstract.patch
deleted file mode 100644
index c0d98de..0000000
--- a/nms-patches/CommandBlockListenerAbstract.patch
+++ /dev/null
@@ -1,209 +0,0 @@
---- a/net/minecraft/server/CommandBlockListenerAbstract.java
-+++ b/net/minecraft/server/CommandBlockListenerAbstract.java
-@@ -4,6 +4,15 @@
- import java.util.Date;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import java.util.ArrayList;
-+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
-+import com.google.common.base.Joiner;
-+import java.util.logging.Level;
-+import org.bukkit.command.CommandSender;
-+import org.bukkit.event.server.ServerCommandEvent;
-+// CraftBukkit end
-+
- public abstract class CommandBlockListenerAbstract implements ICommandListener {
- 
-     private static final SimpleDateFormat a = new SimpleDateFormat("HH:mm:ss");
-@@ -15,6 +24,7 @@
-     private String g = "";
-     private String h = "@";
-     private final CommandObjectiveExecutor i = new CommandObjectiveExecutor();
-+    protected org.bukkit.command.CommandSender sender; // CraftBukkit - add sender
- 
-     public CommandBlockListenerAbstract() {}
- 
-@@ -107,7 +117,9 @@
-                 if (minecraftserver != null && minecraftserver.M() && minecraftserver.getEnableCommandBlock()) {
-                     try {
-                         this.f = null;
--                        this.d = minecraftserver.getCommandHandler().a(this, this.g);
-+                        // CraftBukkit start - Handle command block commands using Bukkit dispatcher
-+                        this.d = executeSafely(this, sender, this.g);
-+                        // CraftBukkit end
-                     } catch (Throwable throwable) {
-                         CrashReport crashreport = CrashReport.a(throwable, "Executing command block");
-                         CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Command to be executed");
-@@ -149,6 +161,171 @@
-         }
-     }
- 
-+    public static int executeSafely(ICommandListener sender, org.bukkit.command.CommandSender bSender, String command) {
-+        try {
-+            return executeCommand(sender, bSender, command);
-+        } catch (CommandException commandexception) {
-+            // Taken from CommandHandler
-+            ChatMessage chatmessage = new ChatMessage(commandexception.getMessage(), commandexception.getArgs());
-+            chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
-+            sender.sendMessage(chatmessage);
-+        }
-+
-+        return 0;
-+    }
-+
-+    // CraftBukkit start
-+    public static int executeCommand(ICommandListener sender, org.bukkit.command.CommandSender bSender, String command) throws CommandException {
-+        org.bukkit.command.SimpleCommandMap commandMap = sender.getWorld().getServer().getCommandMap();
-+        Joiner joiner = Joiner.on(" ");
-+        if (command.startsWith("/")) {
-+            command = command.substring(1);
-+        }
-+
-+        ServerCommandEvent event = new ServerCommandEvent(bSender, command);
-+        org.bukkit.Bukkit.getPluginManager().callEvent(event);
-+        if (event.isCancelled()) {
-+            return 0;
-+        }
-+        command = event.getCommand();
-+
-+        String[] args = command.split(" ");
-+        ArrayList<String[]> commands = new ArrayList<String[]>();
-+
-+        String cmd = args[0];
-+        if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
-+        if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
-+
-+        // Block disallowed commands
-+        if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
-+                || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
-+                || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
-+            return 0;
-+        }
-+
-+        // Handle vanilla commands;
-+        org.bukkit.command.Command commandBlockCommand = commandMap.getCommand(args[0]);
-+        if (sender.getWorld().getServer().getCommandBlockOverride(args[0])) {
-+            commandBlockCommand = commandMap.getCommand("minecraft:" + args[0]);
-+        }
-+        if (commandBlockCommand instanceof VanillaCommandWrapper) {
-+            command = command.trim();
-+            if (command.startsWith("/")) {
-+                command = command.substring(1);
-+            }
-+            String as[] = command.split(" ");
-+            as = VanillaCommandWrapper.dropFirstArgument(as);
-+            if (!sender.getWorld().getServer().getPermissionOverride(sender) && !((VanillaCommandWrapper) commandBlockCommand).testPermission(bSender)) {
-+                return 0;
-+            }
-+            return ((VanillaCommandWrapper) commandBlockCommand).dispatchVanillaCommand(bSender, sender, as);
-+        }
-+
-+        // Make sure this is a valid command
-+        if (commandMap.getCommand(args[0]) == null) {
-+            return 0;
-+        }
-+
-+        commands.add(args);
-+
-+        // Find positions of command block syntax, if any        
-+        WorldServer[] prev = MinecraftServer.getServer().worldServer;
-+        MinecraftServer server = MinecraftServer.getServer();
-+        server.worldServer = new WorldServer[server.worlds.size()];
-+        server.worldServer[0] = (WorldServer) sender.getWorld();
-+        int bpos = 0;
-+        for (int pos = 1; pos < server.worldServer.length; pos++) {
-+            WorldServer world = server.worlds.get(bpos++);
-+            if (server.worldServer[0] == world) {
-+                pos--;
-+                continue;
-+            }
-+            server.worldServer[pos] = world;
-+        }
-+        try {
-+            ArrayList<String[]> newCommands = new ArrayList<String[]>();
-+            for (int i = 0; i < args.length; i++) {
-+                if (PlayerSelector.isPattern(args[i])) {
-+                    for (int j = 0; j < commands.size(); j++) {
-+                        newCommands.addAll(buildCommands(sender, commands.get(j), i));
-+                    }
-+                    ArrayList<String[]> temp = commands;
-+                    commands = newCommands;
-+                    newCommands = temp;
-+                    newCommands.clear();
-+                }
-+            }
-+        } finally {
-+            MinecraftServer.getServer().worldServer = prev;
-+        }
-+
-+        int completed = 0;
-+
-+        // Now dispatch all of the commands we ended up with
-+        for (int i = 0; i < commands.size(); i++) {
-+            try {
-+                if (commandMap.dispatch(bSender, joiner.join(java.util.Arrays.asList(commands.get(i))))) {
-+                    completed++;
-+                }
-+            } catch (Throwable exception) {
-+                if (sender.f() instanceof EntityMinecartCommandBlock) {
-+                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, String.format("MinecartCommandBlock at (%d,%d,%d) failed to handle command", sender.getChunkCoordinates().getX(), sender.getChunkCoordinates().getY(), sender.getChunkCoordinates().getZ()), exception);
-+                } else if (sender instanceof CommandBlockListenerAbstract) {
-+                    CommandBlockListenerAbstract listener = (CommandBlockListenerAbstract) sender;
-+                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().getX(), listener.getChunkCoordinates().getY(), listener.getChunkCoordinates().getZ()), exception);
-+                } else {
-+                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, String.format("Unknown CommandBlock failed to handle command"), exception);
-+                }
-+            }
-+        }
-+
-+        return completed;
-+    }
-+
-+    private static ArrayList<String[]> buildCommands(ICommandListener sender, String[] args, int pos) throws CommandException {
-+        ArrayList<String[]> commands = new ArrayList<String[]>();
-+        java.util.List<EntityPlayer> players = (java.util.List<EntityPlayer>)PlayerSelector.getPlayers(sender, args[pos], EntityPlayer.class);
-+
-+        if (players != null) {
-+            for (EntityPlayer player : players) {
-+                if (player.world != sender.getWorld()) {
-+                    continue;
-+                }
-+                String[] command = args.clone();
-+                command[pos] = player.getName();
-+                commands.add(command);
-+            }
-+        }
-+
-+        return commands;
-+    }
-+
-+    public static CommandSender unwrapSender(ICommandListener listener) {
-+        org.bukkit.command.CommandSender sender = null;
-+        while (sender == null) {
-+            if (listener instanceof DedicatedServer) {
-+                sender = ((DedicatedServer) listener).console;
-+            } else if (listener instanceof RemoteControlCommandListener) {
-+                sender = ((DedicatedServer) listener).remoteConsole;
-+            } else if (listener instanceof CommandBlockListenerAbstract) {
-+                sender = ((CommandBlockListenerAbstract) listener).sender;
-+            } else if (listener instanceof CustomFunctionData.CustomFunctionListener) {
-+                sender = ((CustomFunctionData.CustomFunctionListener) listener).sender;
-+            } else if (listener instanceof CommandListenerWrapper) {
-+                listener = ((CommandListenerWrapper) listener).base; // Search deeper
-+            } else if (VanillaCommandWrapper.lastSender != null) {
-+                sender = VanillaCommandWrapper.lastSender;
-+            } else if (listener.f() != null) {
-+                sender = listener.f().getBukkitEntity();
-+            } else {
-+                throw new RuntimeException("Unhandled executor " + listener.getClass().getSimpleName());
-+            }
-+        }
-+
-+        return sender;
-+    }
-+    // CraftBukkit end
-+
-     public String getName() {
-         return this.h;
-     }
diff --git a/nms-patches/CommandDebug.patch b/nms-patches/CommandDebug.patch
deleted file mode 100644
index 68da6b1..0000000
--- a/nms-patches/CommandDebug.patch
+++ /dev/null
@@ -1,32 +0,0 @@
---- a/net/minecraft/server/CommandDebug.java
-+++ b/net/minecraft/server/CommandDebug.java
-@@ -34,6 +34,14 @@
-     }
- 
-     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
-+        // CraftBukkit start - only allow use when enabled (so that no blank profile results occur)
-+        if (!minecraftserver.methodProfiler.ENABLED) {
-+            icommandlistener.sendMessage(new ChatComponentText("Vanilla debug profiling is disabled."));
-+            icommandlistener.sendMessage(new ChatComponentText("To enable, restart the server with `-DenableDebugMethodProfiler=true' before `-jar'."));
-+            icommandlistener.sendMessage(new ChatComponentText("Use `/timings' for plugin timings."));
-+            return;
-+        }
-+        // CraftBukkit end
-         if (astring.length < 1) {
-             throw new ExceptionUsage("commands.debug.usage", new Object[0]);
-         } else {
-@@ -142,6 +150,13 @@
-     }
- 
-     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
--        return astring.length == 1 ? a(astring, new String[] { "start", "stop"}) : Collections.emptyList();
-+        return astring.length == 1 ? a(astring, new String[] { "start", "stop"}) : Collections.<String>emptyList(); // CraftBukkit - decompile error
-+    }
-+
-+    // CraftBukkit start - fix decompile error
-+    @Override
-+    public int compareTo(ICommand o) {
-+        return a((ICommand) o);
-     }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/CommandExecute.patch b/nms-patches/CommandExecute.patch
deleted file mode 100644
index eef65e5..0000000
--- a/nms-patches/CommandExecute.patch
+++ /dev/null
@@ -1,58 +0,0 @@
---- a/net/minecraft/server/CommandExecute.java
-+++ b/net/minecraft/server/CommandExecute.java
-@@ -4,6 +4,10 @@
- import java.util.Collections;
- import java.util.List;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.command.ProxiedNativeCommandSender;
-+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
-+// CraftBukkit end
- 
- public class CommandExecute extends CommandAbstract {
- 
-@@ -59,26 +63,41 @@
-             }
- 
-             String s = a(astring, b0);
--            CommandListenerWrapper commandlistenerwrapper = CommandListenerWrapper.a(icommandlistener).a(entity, new Vec3D(d0, d1, d2)).a(minecraftserver.worldServer[0].getGameRules().getBoolean("commandBlockOutput"));
-+            CommandListenerWrapper commandlistenerwrapper = CommandListenerWrapper.a(icommandlistener).a(entity, new Vec3D(d0, d1, d2)).a(minecraftserver.worlds.get(0).getGameRules().getBoolean("commandBlockOutput")); // CraftBukkit
-             ICommandHandler icommandhandler = minecraftserver.getCommandHandler();
- 
-             try {
--                int i = icommandhandler.a(commandlistenerwrapper, s);
-+                // CraftBukkit start
-+                org.bukkit.command.CommandSender sender = CommandBlockListenerAbstract.unwrapSender(icommandlistener);
-+                int i = CommandBlockListenerAbstract.executeCommand(commandlistenerwrapper, new ProxiedNativeCommandSender(commandlistenerwrapper, sender, entity.getBukkitEntity()), s); 
-+                // CraftBukkit end
- 
-                 if (i < 1) {
-                     throw new CommandException("commands.execute.allInvocationsFailed", new Object[] { s});
-                 }
-             } catch (Throwable throwable) {
-+                // CraftBukkit start
-+                if (throwable instanceof CommandException) {
-+                    throw (CommandException) throwable;
-+                }
-+                // CraftBukkit end
-                 throw new CommandException("commands.execute.failed", new Object[] { s, entity.getName()});
-             }
-         }
-     }
- 
-     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
--        return astring.length == 1 ? a(astring, minecraftserver.getPlayers()) : (astring.length > 1 && astring.length <= 4 ? a(astring, 1, blockposition) : (astring.length > 5 && astring.length <= 8 && "detect".equals(astring[4]) ? a(astring, 5, blockposition) : (astring.length == 9 && "detect".equals(astring[4]) ? a(astring, (Collection) Block.REGISTRY.keySet()) : Collections.emptyList())));
-+        return astring.length == 1 ? a(astring, minecraftserver.getPlayers()) : (astring.length > 1 && astring.length <= 4 ? a(astring, 1, blockposition) : (astring.length > 5 && astring.length <= 8 && "detect".equals(astring[4]) ? a(astring, 5, blockposition) : (astring.length == 9 && "detect".equals(astring[4]) ? a(astring, (Collection) Block.REGISTRY.keySet()) : Collections.<String>emptyList()))); // CraftBukkit - decompile error
-     }
- 
-     public boolean isListStart(String[] astring, int i) {
-         return i == 0;
-     }
-+
-+    // CraftBukkit start - fix decompiler error
-+    @Override
-+    public int compareTo(ICommand o) {
-+        return a((ICommand) o);
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/CommandGamemode.patch b/nms-patches/CommandGamemode.patch
deleted file mode 100644
index 1c22763..0000000
--- a/nms-patches/CommandGamemode.patch
+++ /dev/null
@@ -1,34 +0,0 @@
---- a/net/minecraft/server/CommandGamemode.java
-+++ b/net/minecraft/server/CommandGamemode.java
-@@ -28,6 +28,12 @@
-             EntityPlayer entityplayer = astring.length >= 2 ? b(minecraftserver, icommandlistener, astring[1]) : a(icommandlistener);
- 
-             entityplayer.a(enumgamemode);
-+            // CraftBukkit start - handle event cancelling the change
-+            if (entityplayer.playerInteractManager.getGameMode() != enumgamemode) {
-+                icommandlistener.sendMessage(new ChatComponentText("Failed to set the gamemode of '" + entityplayer.getName() + "'"));
-+                return;
-+            }
-+            // CraftBukkit end
-             ChatMessage chatmessage = new ChatMessage("gameMode." + enumgamemode.b(), new Object[0]);
- 
-             if (icommandlistener.getWorld().getGameRules().getBoolean("sendCommandFeedback")) {
-@@ -50,10 +56,17 @@
-     }
- 
-     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
--        return astring.length == 1 ? a(astring, new String[] { "survival", "creative", "adventure", "spectator"}) : (astring.length == 2 ? a(astring, minecraftserver.getPlayers()) : Collections.emptyList());
-+        return astring.length == 1 ? a(astring, new String[] { "survival", "creative", "adventure", "spectator"}) : (astring.length == 2 ? a(astring, minecraftserver.getPlayers()) : Collections.<String>emptyList()); // CraftBukkit - decompile error
-     }
- 
-     public boolean isListStart(String[] astring, int i) {
-         return i == 1;
-     }
-+
-+    // CraftBukkit start - fix decompiler error
-+    @Override
-+    public int compareTo(ICommand o) {
-+        return a((ICommand) o);
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/CommandGamerule.patch b/nms-patches/CommandGamerule.patch
deleted file mode 100644
index 6de4181..0000000
--- a/nms-patches/CommandGamerule.patch
+++ /dev/null
@@ -1,23 +0,0 @@
---- a/net/minecraft/server/CommandGamerule.java
-+++ b/net/minecraft/server/CommandGamerule.java
-@@ -23,7 +23,7 @@
-     }
- 
-     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
--        GameRules gamerules = this.a(minecraftserver);
-+        GameRules gamerules = icommandlistener.getWorld().getGameRules(); // CraftBukkit - Use current world
-         String s = astring.length > 0 ? astring[0] : "";
-         String s1 = astring.length > 1 ? a(astring, 1) : "";
- 
-@@ -92,4 +92,11 @@
-     private GameRules a(MinecraftServer minecraftserver) {
-         return minecraftserver.getWorldServer(0).getGameRules();
-     }
-+
-+    // CraftBukkit start - fix decompile error
-+    @Override
-+    public int compareTo(ICommand o) {
-+        return a((ICommand) o);
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/CommandSpreadPlayers.patch b/nms-patches/CommandSpreadPlayers.patch
deleted file mode 100644
index 3327998..0000000
--- a/nms-patches/CommandSpreadPlayers.patch
+++ /dev/null
@@ -1,51 +0,0 @@
---- a/net/minecraft/server/CommandSpreadPlayers.java
-+++ b/net/minecraft/server/CommandSpreadPlayers.java
-@@ -240,9 +240,16 @@
-     }
- 
-     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
--        return astring.length >= 1 && astring.length <= 2 ? b(astring, 0, blockposition) : Collections.emptyList();
-+        return astring.length >= 1 && astring.length <= 2 ? b(astring, 0, blockposition) : Collections.<String>emptyList(); // CraftBukkit - decompile error
-     }
- 
-+    // CraftBukkit start - fix decompile error
-+    @Override
-+    public int compareTo(ICommand o) {
-+        return a(o);
-+    }
-+    // CraftBukkit end
-+
-     static class Location2D {
- 
-         double a;
-@@ -309,7 +316,7 @@
-                 }
- 
-                 blockposition = blockposition.down();
--            } while (world.getType(blockposition).getMaterial() == Material.AIR);
-+            } while (getType(world, blockposition).getMaterial() == Material.AIR); // CraftBukkit
- 
-             return blockposition.getY() + 1;
-         }
-@@ -325,7 +332,7 @@
-                 }
- 
-                 blockposition = blockposition.down();
--                material = world.getType(blockposition).getMaterial();
-+                material = getType(world, blockposition).getMaterial(); // CraftBukkit
-             } while (material == Material.AIR);
- 
-             return !material.isLiquid() && material != Material.FIRE;
-@@ -335,5 +342,12 @@
-             this.a = MathHelper.a(random, d0, d2);
-             this.b = MathHelper.a(random, d1, d3);
-         }
-+
-+        // CraftBukkit start - add a version of getType which force loads chunks
-+        private static IBlockData getType(World world, BlockPosition position) {
-+            ((ChunkProviderServer) world.chunkProvider).getChunkAt(position.getX() >> 4, position.getZ() >> 4);
-+            return world.getType(position);
-+        }
-+        // CraftBukkit end
-     }
- }
diff --git a/nms-patches/CommandTeleport.patch b/nms-patches/CommandTeleport.patch
deleted file mode 100644
index 003cc6c..0000000
--- a/nms-patches/CommandTeleport.patch
+++ /dev/null
@@ -1,23 +0,0 @@
---- a/net/minecraft/server/CommandTeleport.java
-+++ b/net/minecraft/server/CommandTeleport.java
-@@ -69,7 +69,7 @@
-             }
- 
-             entity.stopRiding();
--            ((EntityPlayer) entity).playerConnection.a(commandabstract_commandnumber.a(), commandabstract_commandnumber1.a(), commandabstract_commandnumber2.a(), f, f1, enumset);
-+            ((EntityPlayer) entity).playerConnection.a(commandabstract_commandnumber.a(), commandabstract_commandnumber1.a(), commandabstract_commandnumber2.a(), f, f1, enumset, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.COMMAND); // CraftBukkit
-             entity.setHeadRotation(f);
-         } else {
-             float f2 = (float) MathHelper.g(commandabstract_commandnumber3.a());
-@@ -94,4 +94,11 @@
-     public boolean isListStart(String[] astring, int i) {
-         return i == 0;
-     }
-+
-+    // CraftBukkit start - fix decompile error
-+    @Override
-+    public int compareTo(ICommand o) {
-+        return a((ICommand) o);
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/CommandTp.patch b/nms-patches/CommandTp.patch
deleted file mode 100644
index 603af70..0000000
--- a/nms-patches/CommandTp.patch
+++ /dev/null
@@ -1,45 +0,0 @@
---- a/net/minecraft/server/CommandTp.java
-+++ b/net/minecraft/server/CommandTp.java
-@@ -53,17 +53,11 @@
-             } else {
-                 Entity entity = c(minecraftserver, icommandlistener, astring[astring.length - 1]);
- 
--                if (entity.world != ((Entity) object).world) {
--                    throw new CommandException("commands.tp.notSameDimension", new Object[0]);
--                } else {
--                    ((Entity) object).stopRiding();
--                    if (object instanceof EntityPlayer) {
--                        ((EntityPlayer) object).playerConnection.a(entity.locX, entity.locY, entity.locZ, entity.yaw, entity.pitch);
--                    } else {
--                        ((Entity) object).setPositionRotation(entity.locX, entity.locY, entity.locZ, entity.yaw, entity.pitch);
--                    }
--
-+                // CraftBukkit Start
-+                // Use Bukkit teleport method in all cases. It has cross dimensional handling, events
-+                if (((Entity) object).getBukkitEntity().teleport(entity.getBukkitEntity(), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.COMMAND)) {
-                     a(icommandlistener, (ICommand) this, "commands.tp.success", new Object[] { ((Entity) object).getName(), entity.getName()});
-+                    // CraftBukkit End
-                 }
-             }
-         }
-@@ -107,7 +101,7 @@
-             }
- 
-             entity.stopRiding();
--            ((EntityPlayer) entity).playerConnection.a(commandabstract_commandnumber.b(), commandabstract_commandnumber1.b(), commandabstract_commandnumber2.b(), f, f1, enumset);
-+            ((EntityPlayer) entity).playerConnection.a(commandabstract_commandnumber.b(), commandabstract_commandnumber1.b(), commandabstract_commandnumber2.b(), f, f1, enumset, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.COMMAND); // CraftBukkit
-             entity.setHeadRotation(f);
-         } else {
-             float f2 = (float) MathHelper.g(commandabstract_commandnumber3.a());
-@@ -132,4 +126,11 @@
-     public boolean isListStart(String[] astring, int i) {
-         return i == 0;
-     }
-+
-+    // CraftBukkit start - fix decompile error
-+    @Override
-+    public int compareTo(ICommand o) {
-+        return a((ICommand) o);
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/Container.patch b/nms-patches/Container.patch
deleted file mode 100644
index 0a505a2..0000000
--- a/nms-patches/Container.patch
+++ /dev/null
@@ -1,136 +0,0 @@
---- a/net/minecraft/server/Container.java
-+++ b/net/minecraft/server/Container.java
-@@ -7,6 +7,17 @@
- import java.util.Set;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import java.util.HashMap;
-+import java.util.Map;
-+import org.bukkit.craftbukkit.inventory.CraftInventory;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.Event.Result;
-+import org.bukkit.event.inventory.InventoryDragEvent;
-+import org.bukkit.event.inventory.InventoryType;
-+import org.bukkit.inventory.InventoryView;
-+// CraftBukkit end
-+
- public abstract class Container {
- 
-     public NonNullList<ItemStack> b = NonNullList.a();
-@@ -18,6 +29,18 @@
-     protected List<ICrafting> listeners = Lists.newArrayList();
-     private final Set<EntityHuman> i = Sets.newHashSet();
- 
-+    // CraftBukkit start
-+    public boolean checkReachable = true;
-+    public abstract InventoryView getBukkitView();
-+    public void transferTo(Container other, org.bukkit.craftbukkit.entity.CraftHumanEntity player) {
-+        InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
-+        ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
-+        ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
-+        ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
-+        ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
-+    }
-+    // CraftBukkit end
-+
-     public Container() {}
- 
-     protected Slot a(Slot slot) {
-@@ -128,6 +151,7 @@
-                     l = playerinventory.getCarried().getCount();
-                     Iterator iterator = this.h.iterator();
- 
-+                    Map<Integer, ItemStack> draggedSlots = new HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
-                     while (iterator.hasNext()) {
-                         Slot slot1 = (Slot) iterator.next();
-                         ItemStack itemstack3 = playerinventory.getCarried();
-@@ -143,12 +167,48 @@
-                             }
- 
-                             l -= itemstack4.getCount() - j1;
--                            slot1.set(itemstack4);
-+                            // slot1.set(itemstack4);
-+                            draggedSlots.put(slot1.rawSlotIndex, itemstack4); // CraftBukkit - Put in map instead of setting
-                         }
-                     }
- 
--                    itemstack2.setCount(l);
--                    playerinventory.setCarried(itemstack2);
-+                    // CraftBukkit start - InventoryDragEvent
-+                    InventoryView view = getBukkitView();
-+                    org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack2);
-+                    newcursor.setAmount(l);
-+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
-+                    for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
-+                        eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
-+                    }
-+
-+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
-+                    ItemStack oldCursor = playerinventory.getCarried();
-+                    playerinventory.setCarried(CraftItemStack.asNMSCopy(newcursor));
-+
-+                    InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.dragType == 1, eventmap);
-+                    entityhuman.world.getServer().getPluginManager().callEvent(event);
-+
-+                    // Whether or not a change was made to the inventory that requires an update.
-+                    boolean needsUpdate = event.getResult() != Result.DEFAULT;
-+
-+                    if (event.getResult() != Result.DENY) {
-+                        for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
-+                            view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
-+                        }
-+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
-+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
-+                        if (playerinventory.getCarried() != null) {
-+                            playerinventory.setCarried(CraftItemStack.asNMSCopy(event.getCursor()));
-+                            needsUpdate = true;
-+                        }
-+                    } else {
-+                        playerinventory.setCarried(oldCursor);
-+                    }
-+
-+                    if (needsUpdate && entityhuman instanceof EntityPlayer) {
-+                        ((EntityPlayer) entityhuman).updateInventory(this);
-+                    }
-+                    // CraftBukkit end
-                 }
- 
-                 this.d();
-@@ -165,8 +225,11 @@
-                 if (i == -999) {
-                     if (!playerinventory.getCarried().isEmpty()) {
-                         if (j == 0) {
--                            entityhuman.drop(playerinventory.getCarried(), true);
-+                            // CraftBukkit start
-+                            ItemStack carried = playerinventory.getCarried();
-                             playerinventory.setCarried(ItemStack.a);
-+                            entityhuman.drop(carried, true);
-+                            // CraftBukkit start
-                         }
- 
-                         if (j == 1) {
-@@ -254,6 +317,15 @@
-                         }
- 
-                         slot2.f();
-+                        // CraftBukkit start - Make sure the client has the right slot contents
-+                        if (entityhuman instanceof EntityPlayer && slot2.getMaxStackSize() != 64) {
-+                            ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutSetSlot(this.windowId, slot2.rawSlotIndex, slot2.getItem()));
-+                            // Updating a crafting inventory makes the client reset the result slot, have to send it again
-+                            if (this.getBukkitView().getType() == InventoryType.WORKBENCH || this.getBukkitView().getType() == InventoryType.CRAFTING) {
-+                                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutSetSlot(this.windowId, 0, this.getSlot(0).getItem()));
-+                            }
-+                        }
-+                        // CraftBukkit end
-                     }
-                 }
-             } else if (inventoryclicktype == InventoryClickType.SWAP && j >= 0 && j < 9) {
-@@ -564,6 +636,7 @@
-                 inventorycraftresult.a(irecipe);
-                 itemstack = irecipe.craftItem(inventorycrafting);
-             }
-+            itemstack = org.bukkit.craftbukkit.event.CraftEventFactory.callPreCraftEvent(inventorycrafting, itemstack, getBukkitView(), false); // CraftBukkit
- 
-             inventorycraftresult.setItem(0, itemstack);
-             entityplayer.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.windowId, 0, itemstack));
diff --git a/nms-patches/ContainerAnvil.patch b/nms-patches/ContainerAnvil.patch
deleted file mode 100644
index 904745b..0000000
--- a/nms-patches/ContainerAnvil.patch
+++ /dev/null
@@ -1,115 +0,0 @@
---- a/net/minecraft/server/ContainerAnvil.java
-+++ b/net/minecraft/server/ContainerAnvil.java
-@@ -6,6 +6,10 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerAnvil extends Container {
- 
-     private static final Logger f = LogManager.getLogger();
-@@ -22,8 +26,14 @@
-     private int k;
-     public String renameText;
-     private final EntityHuman m;
-+    // CraftBukkit start
-+    private int lastLevelCost;
-+    private CraftInventoryView bukkitEntity;
-+    private PlayerInventory player;
-+    // CraftBukkit end
- 
-     public ContainerAnvil(PlayerInventory playerinventory, final World world, final BlockPosition blockposition, EntityHuman entityhuman) {
-+        this.player = playerinventory; // CraftBukkit
-         this.j = blockposition;
-         this.i = world;
-         this.m = entityhuman;
-@@ -110,7 +120,7 @@
-         byte b1 = 0;
- 
-         if (itemstack.isEmpty()) {
--            this.g.setItem(0, ItemStack.a);
-+            org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.a); // CraftBukkit
-             this.levelCost = 0;
-         } else {
-             ItemStack itemstack1 = itemstack.cloneItemStack();
-@@ -128,7 +138,7 @@
-                 if (itemstack1.f() && itemstack1.getItem().a(itemstack, itemstack2)) {
-                     k = Math.min(itemstack1.i(), itemstack1.k() / 4);
-                     if (k <= 0) {
--                        this.g.setItem(0, ItemStack.a);
-+                        org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.a); // CraftBukkit
-                         this.levelCost = 0;
-                         return;
-                     }
-@@ -143,7 +153,7 @@
-                     this.k = l;
-                 } else {
-                     if (!flag && (itemstack1.getItem() != itemstack2.getItem() || !itemstack1.f())) {
--                        this.g.setItem(0, ItemStack.a);
-+                        org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.a); // CraftBukkit
-                         this.levelCost = 0;
-                         return;
-                     }
-@@ -236,7 +246,7 @@
-                     }
- 
-                     if (flag2 && !flag1) {
--                        this.g.setItem(0, ItemStack.a);
-+                        org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.a); // CraftBukkit
-                         this.levelCost = 0;
-                         return;
-                     }
-@@ -283,7 +293,7 @@
-                 EnchantmentManager.a(map, itemstack1);
-             }
- 
--            this.g.setItem(0, itemstack1);
-+            org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), itemstack1); // CraftBukkit
-             this.b();
-         }
-     }
-@@ -301,6 +311,7 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.i.getType(this.j).getBlock() != Blocks.ANVIL ? false : entityhuman.d((double) this.j.getX() + 0.5D, (double) this.j.getY() + 0.5D, (double) this.j.getZ() + 0.5D) <= 64.0D;
-     }
- 
-@@ -356,4 +367,33 @@
- 
-         this.e();
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public void b() {
-+        super.b();
-+
-+        for (int i = 0; i < this.listeners.size(); ++i) {
-+            ICrafting icrafting = (ICrafting) this.listeners.get(i);
-+
-+            if (this.lastLevelCost != this.levelCost) {
-+                icrafting.setContainerData(this, 0, this.levelCost);
-+            }
-+        }
-+
-+        this.lastLevelCost = this.levelCost;
-+    }
-+
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        org.bukkit.craftbukkit.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryAnvil(
-+                new org.bukkit.Location(i.getWorld(), j.getX(), j.getY(), j.getZ()), this.h, this.g, this);
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/ContainerBeacon.patch b/nms-patches/ContainerBeacon.patch
deleted file mode 100644
index 13196bb..0000000
--- a/nms-patches/ContainerBeacon.patch
+++ /dev/null
@@ -1,47 +0,0 @@
---- a/net/minecraft/server/ContainerBeacon.java
-+++ b/net/minecraft/server/ContainerBeacon.java
-@@ -1,11 +1,18 @@
- package net.minecraft.server;
- 
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView; // CraftBukkit
-+
- public class ContainerBeacon extends Container {
- 
-     private final IInventory beacon;
-     private final ContainerBeacon.SlotBeacon f;
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+    // CraftBukkit end
- 
-     public ContainerBeacon(IInventory iinventory, IInventory iinventory1) {
-+        player = (PlayerInventory) iinventory; // CraftBukkit - TODO: check this
-         this.beacon = iinventory1;
-         this.f = new ContainerBeacon.SlotBeacon(iinventory1, 0, 136, 110);
-         this.a((Slot) this.f);
-@@ -48,6 +55,7 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.beacon.a(entityhuman);
-     }
- 
-@@ -113,4 +121,17 @@
-             return 1;
-         }
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        org.bukkit.craftbukkit.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryBeacon((TileEntityBeacon) this.beacon); // TODO - check this
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/ContainerBrewingStand.patch b/nms-patches/ContainerBrewingStand.patch
deleted file mode 100644
index 6bacb34..0000000
--- a/nms-patches/ContainerBrewingStand.patch
+++ /dev/null
@@ -1,53 +0,0 @@
---- a/net/minecraft/server/ContainerBrewingStand.java
-+++ b/net/minecraft/server/ContainerBrewingStand.java
-@@ -1,5 +1,10 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventoryBrewer;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerBrewingStand extends Container {
- 
-     private final IInventory brewingStand;
-@@ -7,7 +12,13 @@
-     private int g;
-     private int h;
- 
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+    // CraftBukkit end
-+
-     public ContainerBrewingStand(PlayerInventory playerinventory, IInventory iinventory) {
-+        player = playerinventory; // CraftBukkit
-         this.brewingStand = iinventory;
-         this.a((Slot) (new ContainerBrewingStand.SlotPotionBottle(iinventory, 0, 56, 51)));
-         this.a((Slot) (new ContainerBrewingStand.SlotPotionBottle(iinventory, 1, 79, 58)));
-@@ -54,6 +65,7 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.brewingStand.a(entityhuman);
-     }
- 
-@@ -178,4 +190,17 @@
-             return item == Items.POTION || item == Items.SPLASH_POTION || item == Items.LINGERING_POTION || item == Items.GLASS_BOTTLE;
-         }
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        CraftInventoryBrewer inventory = new CraftInventoryBrewer(this.brewingStand);
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/ContainerChest.patch b/nms-patches/ContainerChest.patch
deleted file mode 100644
index 9535a08..0000000
--- a/nms-patches/ContainerChest.patch
+++ /dev/null
@@ -1,60 +0,0 @@
---- a/net/minecraft/server/ContainerChest.java
-+++ b/net/minecraft/server/ContainerChest.java
-@@ -1,9 +1,37 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventory;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerChest extends Container {
- 
-     private final IInventory container;
-     private final int f;
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        CraftInventory inventory;
-+        if (this.container instanceof PlayerInventory) {
-+            inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryPlayer((PlayerInventory) this.container);
-+        } else if (this.container instanceof InventoryLargeChest) {
-+            inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) this.container);
-+        } else {
-+            inventory = new CraftInventory(this.container);
-+        }
-+
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- 
-     public ContainerChest(IInventory iinventory, IInventory iinventory1, EntityHuman entityhuman) {
-         this.container = iinventory1;
-@@ -11,6 +39,11 @@
-         iinventory1.startOpen(entityhuman);
-         int i = (this.f - 4) * 18;
- 
-+        // CraftBukkit start - Save player
-+        // TODO: Should we check to make sure it really is an InventoryPlayer?
-+        this.player = (PlayerInventory) iinventory;
-+        // CraftBukkit end
-+
-         int j;
-         int k;
- 
-@@ -33,6 +66,7 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.container.a(entityhuman);
-     }
- 
diff --git a/nms-patches/ContainerDispenser.patch b/nms-patches/ContainerDispenser.patch
deleted file mode 100644
index 9b8b1ad..0000000
--- a/nms-patches/ContainerDispenser.patch
+++ /dev/null
@@ -1,53 +0,0 @@
---- a/net/minecraft/server/ContainerDispenser.java
-+++ b/net/minecraft/server/ContainerDispenser.java
-@@ -1,11 +1,24 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventory;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerDispenser extends Container {
- 
-     public final IInventory items;
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+    // CraftBukkit end
- 
-     public ContainerDispenser(IInventory iinventory, IInventory iinventory1) {
-         this.items = iinventory1;
-+        // CraftBukkit start - Save player
-+        // TODO: Should we check to make sure it really is an InventoryPlayer?
-+        this.player = (PlayerInventory)iinventory;
-+        // CraftBukkit end
- 
-         int i;
-         int j;
-@@ -29,6 +42,7 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.items.a(entityhuman);
-     }
- 
-@@ -63,4 +77,17 @@
- 
-         return itemstack;
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        CraftInventory inventory = new CraftInventory(this.items);
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/ContainerEnchantTable.patch b/nms-patches/ContainerEnchantTable.patch
deleted file mode 100644
index 4fd8a19..0000000
--- a/nms-patches/ContainerEnchantTable.patch
+++ /dev/null
@@ -1,206 +0,0 @@
---- a/net/minecraft/server/ContainerEnchantTable.java
-+++ b/net/minecraft/server/ContainerEnchantTable.java
-@@ -3,6 +3,19 @@
- import java.util.List;
- import java.util.Random;
- 
-+// CraftBukkit start
-+import java.util.Collections;
-+import java.util.Map;
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryEnchanting;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.enchantments.EnchantmentOffer;
-+import org.bukkit.event.enchantment.EnchantItemEvent;
-+import org.bukkit.event.enchantment.PrepareItemEnchantEvent;
-+import org.bukkit.entity.Player;
-+// CraftBukkit end
-+
- public class ContainerEnchantTable extends Container {
- 
-     public IInventory enchantSlots = new InventorySubcontainer("Enchant", true, 2) {
-@@ -14,6 +27,13 @@
-             super.update();
-             ContainerEnchantTable.this.a((IInventory) this);
-         }
-+
-+        // CraftBukkit start
-+        @Override
-+        public Location getLocation() {
-+            return new org.bukkit.Location(world.getWorld(), position.getX(), position.getY(), position.getZ());
-+        }
-+        // CraftBukkit end
-     };
-     public World world;
-     private final BlockPosition position;
-@@ -22,6 +42,10 @@
-     public int[] costs = new int[3];
-     public int[] h = new int[] { -1, -1, -1};
-     public int[] i = new int[] { -1, -1, -1};
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private Player player;
-+    // CraftBukkit end
- 
-     public ContainerEnchantTable(PlayerInventory playerinventory, World world, BlockPosition blockposition) {
-         this.world = world;
-@@ -54,6 +78,9 @@
-             this.a(new Slot(playerinventory, i, 8 + i * 18, 142));
-         }
- 
-+        // CraftBukkit start
-+        player = (Player) playerinventory.player.getBukkitEntity();
-+        // CraftBukkit end
-     }
- 
-     protected void c(ICrafting icrafting) {
-@@ -90,7 +117,7 @@
-             ItemStack itemstack = iinventory.getItem(0);
-             int i;
- 
--            if (!itemstack.isEmpty() && itemstack.canEnchant()) {
-+            if (!itemstack.isEmpty()) { // CraftBukkit - relax condition
-                 if (!this.world.isClientSide) {
-                     i = 0;
- 
-@@ -152,6 +179,41 @@
-                         }
-                     }
- 
-+                    // CraftBukkit start
-+                    CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
-+                    org.bukkit.enchantments.EnchantmentOffer[] offers = new EnchantmentOffer[3];
-+                    for (j = 0; j < 3; ++j) {
-+                        org.bukkit.enchantments.Enchantment enchantment = (this.h[j] >= 0) ? org.bukkit.enchantments.Enchantment.getById(this.h[j]) : null;
-+                        offers[j] = (enchantment != null) ? new EnchantmentOffer(enchantment, this.i[j], this.costs[j]) : null;
-+                    }
-+
-+                    PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(player, this.getBukkitView(), this.world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), item, offers, i);
-+                    event.setCancelled(!itemstack.canEnchant());
-+                    this.world.getServer().getPluginManager().callEvent(event);
-+
-+                    if (event.isCancelled()) {
-+                        for (j = 0; j < 3; ++j) {
-+                            this.costs[j] = 0;
-+                            this.h[j] = -1;
-+                            this.i[j] = -1;
-+                        }
-+                        return;
-+                    }
-+
-+                    for (j = 0; j < 3; j++) {
-+                        EnchantmentOffer offer = event.getOffers()[j];
-+                        if (offer != null) {
-+                            this.costs[j] = offer.getCost();
-+                            this.h[j] = offer.getEnchantment().getId();
-+                            this.i[j] = offer.getEnchantmentLevel();
-+                        } else {
-+                            this.costs[j] = 0;
-+                            this.h[j] = -1;
-+                            this.i[j] = -1;
-+                        }
-+                    }
-+                    // CraftBukkit end
-+
-                     this.b();
-                 }
-             } else {
-@@ -176,25 +238,52 @@
-             if (!this.world.isClientSide) {
-                 List list = this.a(itemstack, i, this.costs[i]);
- 
--                if (!list.isEmpty()) {
--                    entityhuman.enchantDone(itemstack, j);
-+                // CraftBukkit start
-+                if (true || !list.isEmpty()) {
-+                    // entityhuman.enchantDone(itemstack, j); // Moved down
-                     boolean flag = itemstack.getItem() == Items.BOOK;
-+                    Map<org.bukkit.enchantments.Enchantment, Integer> enchants = new java.util.HashMap<org.bukkit.enchantments.Enchantment, Integer>();
-+                    for (Object obj : list) {
-+                        WeightedRandomEnchant instance = (WeightedRandomEnchant) obj;
-+                        enchants.put(org.bukkit.enchantments.Enchantment.getById(Enchantment.getId(instance.enchantment)), instance.level);
-+                    }
-+                    CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
-+
-+                    EnchantItemEvent event = new EnchantItemEvent((Player) entityhuman.getBukkitEntity(), this.getBukkitView(), this.world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), item, this.costs[i], enchants, i);
-+                    this.world.getServer().getPluginManager().callEvent(event);
-+
-+                    int level = event.getExpLevelCost();
-+                    if (event.isCancelled() || (level > entityhuman.expLevel && !entityhuman.abilities.canInstantlyBuild) || event.getEnchantsToAdd().isEmpty()) {
-+                        return false;
-+                    }
- 
-                     if (flag) {
-                         itemstack = new ItemStack(Items.ENCHANTED_BOOK);
-                         this.enchantSlots.setItem(0, itemstack);
-                     }
- 
--                    for (int k = 0; k < list.size(); ++k) {
--                        WeightedRandomEnchant weightedrandomenchant = (WeightedRandomEnchant) list.get(k);
-+                    for (Map.Entry<org.bukkit.enchantments.Enchantment, Integer> entry : event.getEnchantsToAdd().entrySet()) {
-+                        try {
-+                            if (flag) {
-+                                int enchantId = entry.getKey().getId();
-+                                if (Enchantment.c(enchantId) == null) {
-+                                    continue;
-+                                }
- 
--                        if (flag) {
--                            ItemEnchantedBook.a(itemstack, weightedrandomenchant);
--                        } else {
--                            itemstack.addEnchantment(weightedrandomenchant.enchantment, weightedrandomenchant.level);
-+                                WeightedRandomEnchant weightedrandomenchant = new WeightedRandomEnchant(Enchantment.c(enchantId), entry.getValue());
-+                                ItemEnchantedBook.a(itemstack, weightedrandomenchant);
-+                            } else {
-+                                item.addUnsafeEnchantment(entry.getKey(), entry.getValue());
-+                            }
-+                        } catch (IllegalArgumentException e) {
-+                            /* Just swallow invalid enchantments */
-                         }
-                     }
- 
-+                    entityhuman.enchantDone(itemstack, j);
-+                    // CraftBukkit end
-+
-+                    // CraftBukkit - TODO: let plugins change this
-                     if (!entityhuman.abilities.canInstantlyBuild) {
-                         itemstack1.subtract(j);
-                         if (itemstack1.isEmpty()) {
-@@ -233,12 +322,18 @@
- 
-     public void b(EntityHuman entityhuman) {
-         super.b(entityhuman);
-+        // CraftBukkit Start - If an enchantable was opened from a null location, set the world to the player's world, preventing a crash
-+        if (this.world == null) {
-+            this.world = entityhuman.getWorld();
-+        }
-+        // CraftBukkit end
-         if (!this.world.isClientSide) {
-             this.a(entityhuman, entityhuman.world, this.enchantSlots);
-         }
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.world.getType(this.position).getBlock() != Blocks.ENCHANTING_TABLE ? false : entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
-     }
- 
-@@ -291,4 +386,17 @@
- 
-         return itemstack;
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        CraftInventoryEnchanting inventory = new CraftInventoryEnchanting(this.enchantSlots);
-+        bukkitEntity = new CraftInventoryView(this.player, inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/ContainerFurnace.patch b/nms-patches/ContainerFurnace.patch
deleted file mode 100644
index e64b781..0000000
--- a/nms-patches/ContainerFurnace.patch
+++ /dev/null
@@ -1,50 +0,0 @@
---- a/net/minecraft/server/ContainerFurnace.java
-+++ b/net/minecraft/server/ContainerFurnace.java
-@@ -1,5 +1,10 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventoryFurnace;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerFurnace extends Container {
- 
-     private final IInventory furnace;
-@@ -8,11 +13,28 @@
-     private int h;
-     private int i;
- 
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        CraftInventoryFurnace inventory = new CraftInventoryFurnace((TileEntityFurnace) this.furnace);
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
-+
-     public ContainerFurnace(PlayerInventory playerinventory, IInventory iinventory) {
-         this.furnace = iinventory;
-         this.a(new Slot(iinventory, 0, 56, 17));
-         this.a((Slot) (new SlotFurnaceFuel(iinventory, 1, 56, 53)));
-         this.a((Slot) (new SlotFurnaceResult(playerinventory.player, iinventory, 2, 116, 35)));
-+        this.player = playerinventory; // CraftBukkit - save player
- 
-         int i;
- 
-@@ -63,6 +85,7 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.furnace.a(entityhuman);
-     }
- 
diff --git a/nms-patches/ContainerHopper.patch b/nms-patches/ContainerHopper.patch
deleted file mode 100644
index 54117f6..0000000
--- a/nms-patches/ContainerHopper.patch
+++ /dev/null
@@ -1,44 +0,0 @@
---- a/net/minecraft/server/ContainerHopper.java
-+++ b/net/minecraft/server/ContainerHopper.java
-@@ -1,11 +1,33 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventory;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerHopper extends Container {
- 
-     private final IInventory hopper;
- 
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        CraftInventory inventory = new CraftInventory(this.hopper);
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
-+
-     public ContainerHopper(PlayerInventory playerinventory, IInventory iinventory, EntityHuman entityhuman) {
-         this.hopper = iinventory;
-+        this.player = playerinventory; // CraftBukkit - save player
-         iinventory.startOpen(entityhuman);
-         boolean flag = true;
- 
-@@ -28,6 +50,7 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.hopper.a(entityhuman);
-     }
- 
diff --git a/nms-patches/ContainerHorse.patch b/nms-patches/ContainerHorse.patch
deleted file mode 100644
index f3c7a80..0000000
--- a/nms-patches/ContainerHorse.patch
+++ /dev/null
@@ -1,34 +0,0 @@
---- a/net/minecraft/server/ContainerHorse.java
-+++ b/net/minecraft/server/ContainerHorse.java
-@@ -1,11 +1,31 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+import org.bukkit.inventory.InventoryView;
-+// CraftBukkit end
-+
- public class ContainerHorse extends Container {
- 
-     private final IInventory a;
-     private final EntityHorseAbstract f;
- 
-+    // CraftBukkit start
-+    org.bukkit.craftbukkit.inventory.CraftInventoryView bukkitEntity;
-+    PlayerInventory player;
-+
-+    @Override
-+    public InventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        return bukkitEntity = new CraftInventoryView(player.player.getBukkitEntity(), a.getOwner().getInventory(), this);
-+    }
-+
-     public ContainerHorse(IInventory iinventory, final IInventory iinventory1, final EntityHorseAbstract entityhorseabstract, EntityHuman entityhuman) {
-+        player = (PlayerInventory) iinventory;
-+        // CraftBukkit end
-         this.a = iinventory1;
-         this.f = entityhorseabstract;
-         boolean flag = true;
diff --git a/nms-patches/ContainerMerchant.patch b/nms-patches/ContainerMerchant.patch
deleted file mode 100644
index 3610204..0000000
--- a/nms-patches/ContainerMerchant.patch
+++ /dev/null
@@ -1,37 +0,0 @@
---- a/net/minecraft/server/ContainerMerchant.java
-+++ b/net/minecraft/server/ContainerMerchant.java
-@@ -1,11 +1,26 @@
- package net.minecraft.server;
- 
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView; // CraftBukkit
-+
- public class ContainerMerchant extends Container {
- 
-     private final IMerchant merchant;
-     private final InventoryMerchant f;
-     private final World g;
- 
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity == null) {
-+            bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), new org.bukkit.craftbukkit.inventory.CraftInventoryMerchant((InventoryMerchant) f), this);
-+        }
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
-+
-     public ContainerMerchant(PlayerInventory playerinventory, IMerchant imerchant, World world) {
-         this.merchant = imerchant;
-         this.g = world;
-@@ -13,6 +28,7 @@
-         this.a(new Slot(this.f, 0, 36, 53));
-         this.a(new Slot(this.f, 1, 62, 53));
-         this.a((Slot) (new SlotMerchantResult(playerinventory.player, imerchant, this.f, 2, 120, 53)));
-+        this.player = playerinventory; // CraftBukkit - save player
- 
-         int i;
- 
diff --git a/nms-patches/ContainerPlayer.patch b/nms-patches/ContainerPlayer.patch
deleted file mode 100644
index feaa5bc..0000000
--- a/nms-patches/ContainerPlayer.patch
+++ /dev/null
@@ -1,70 +0,0 @@
---- a/net/minecraft/server/ContainerPlayer.java
-+++ b/net/minecraft/server/ContainerPlayer.java
-@@ -1,5 +1,10 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerPlayer extends Container {
- 
-     private static final EnumItemSlot[] h = new EnumItemSlot[] { EnumItemSlot.HEAD, EnumItemSlot.CHEST, EnumItemSlot.LEGS, EnumItemSlot.FEET};
-@@ -7,10 +12,20 @@
-     public InventoryCraftResult resultInventory = new InventoryCraftResult();
-     public boolean g;
-     private final EntityHuman owner;
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+    // CraftBukkit end
- 
-     public ContainerPlayer(final PlayerInventory playerinventory, boolean flag, EntityHuman entityhuman) {
-         this.g = flag;
-         this.owner = entityhuman;
-+        // CraftBukkit start
-+        this.resultInventory = new InventoryCraftResult(); // CraftBukkit - moved to before InventoryCrafting construction
-+        this.craftInventory = new InventoryCrafting(this, 2, 2, playerinventory.player); // CraftBukkit - pass player
-+        this.craftInventory.resultInventory = this.resultInventory; // CraftBukkit - let InventoryCrafting know about its result slot
-+        this.player = playerinventory; // CraftBukkit - save player
-+        // CraftBukkit end
-         this.a((Slot) (new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 154, 28)));
- 
-         int i;
-@@ -23,7 +38,7 @@
-         }
- 
-         for (i = 0; i < 4; ++i) {
--            final EnumItemSlot enumitemslot = ContainerPlayer.h[i];
-+            final EnumItemSlot enumitemslot1 = ContainerPlayer.h[i];
- 
-             this.a(new Slot(playerinventory, 36 + (3 - i), 8, 8 + i * 18) {
-                 public int getMaxStackSize() {
-@@ -31,7 +46,7 @@
-                 }
- 
-                 public boolean isAllowed(ItemStack itemstack) {
--                    return enumitemslot == EntityInsentient.d(itemstack);
-+                    return enumitemslot1 == EntityInsentient.d(itemstack); // CraftBukkit - decompile error
-                 }
- 
-                 public boolean isAllowed(EntityHuman entityhuman) {
-@@ -141,4 +156,17 @@
-     public boolean a(ItemStack itemstack, Slot slot) {
-         return slot.inventory != this.resultInventory && super.a(itemstack, slot);
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftInventory, this.resultInventory);
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/ContainerShulkerBox.patch b/nms-patches/ContainerShulkerBox.patch
deleted file mode 100644
index 494f7c4..0000000
--- a/nms-patches/ContainerShulkerBox.patch
+++ /dev/null
@@ -1,34 +0,0 @@
---- a/net/minecraft/server/ContainerShulkerBox.java
-+++ b/net/minecraft/server/ContainerShulkerBox.java
-@@ -1,11 +1,31 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventory;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerShulkerBox extends Container {
- 
-     private final IInventory a;
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity;
-+    private PlayerInventory player;
-+
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), new CraftInventory(this.a), this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- 
-     public ContainerShulkerBox(PlayerInventory playerinventory, IInventory iinventory, EntityHuman entityhuman) {
-         this.a = iinventory;
-+        this.player = playerinventory; // CraftBukkit - save player
-         iinventory.startOpen(entityhuman);
-         boolean flag = true;
-         boolean flag1 = true;
diff --git a/nms-patches/ContainerWorkbench.patch b/nms-patches/ContainerWorkbench.patch
deleted file mode 100644
index 6b1c4cb..0000000
--- a/nms-patches/ContainerWorkbench.patch
+++ /dev/null
@@ -1,60 +0,0 @@
---- a/net/minecraft/server/ContainerWorkbench.java
-+++ b/net/minecraft/server/ContainerWorkbench.java
-@@ -1,14 +1,29 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+// CraftBukkit end
-+
- public class ContainerWorkbench extends Container {
- 
--    public InventoryCrafting craftInventory = new InventoryCrafting(this, 3, 3);
--    public InventoryCraftResult resultInventory = new InventoryCraftResult();
-+    public InventoryCrafting craftInventory; // CraftBukkit - move initialization into constructor
-+    public InventoryCraftResult resultInventory; // CraftBukkit - move initialization into constructor
-     private final World g;
-     private final BlockPosition h;
-     private final EntityHuman i;
-+    // CraftBukkit start
-+    private CraftInventoryView bukkitEntity = null;
-+    private PlayerInventory player;
-+    // CraftBukkit end
- 
-     public ContainerWorkbench(PlayerInventory playerinventory, World world, BlockPosition blockposition) {
-+        // CraftBukkit start - Switched order of IInventory construction and stored player
-+        this.resultInventory = new InventoryCraftResult();
-+        this.craftInventory = new InventoryCrafting(this, 3, 3, playerinventory.player); // CraftBukkit - pass player
-+        this.craftInventory.resultInventory = this.resultInventory;
-+        this.player = playerinventory;
-+        // CraftBukkit end
-         this.g = world;
-         this.h = blockposition;
-         this.i = playerinventory.player;
-@@ -47,6 +62,7 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
-+        if (!this.checkReachable) return true; // CraftBukkit
-         return this.g.getType(this.h).getBlock() != Blocks.CRAFTING_TABLE ? false : entityhuman.d((double) this.h.getX() + 0.5D, (double) this.h.getY() + 0.5D, (double) this.h.getZ() + 0.5D) <= 64.0D;
-     }
- 
-@@ -100,4 +116,17 @@
-     public boolean a(ItemStack itemstack, Slot slot) {
-         return slot.inventory != this.resultInventory && super.a(itemstack, slot);
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public CraftInventoryView getBukkitView() {
-+        if (bukkitEntity != null) {
-+            return bukkitEntity;
-+        }
-+
-+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftInventory, this.resultInventory);
-+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
-+        return bukkitEntity;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/CraftingManager.patch b/nms-patches/CraftingManager.patch
deleted file mode 100644
index a619d68..0000000
--- a/nms-patches/CraftingManager.patch
+++ /dev/null
@@ -1,57 +0,0 @@
---- a/net/minecraft/server/CraftingManager.java
-+++ b/net/minecraft/server/CraftingManager.java
-@@ -34,6 +34,7 @@
- 
-     public static boolean init() {
-         try {
-+            CraftingManager.c = 0; // Reset recipe ID count
-             a("armordye", new RecipeArmorDye());
-             a("bookcloning", new RecipeBookClone());
-             a("mapcloning", new RecipeMapClone());
-@@ -147,6 +148,7 @@
-         if (CraftingManager.recipes.d(minecraftkey)) {
-             throw new IllegalStateException("Duplicate recipe ignored with ID " + minecraftkey);
-         } else {
-+            irecipe.setKey(minecraftkey); // CraftBukkit
-             CraftingManager.recipes.a(CraftingManager.c++, minecraftkey, irecipe);
-         }
-     }
-@@ -158,12 +160,14 @@
- 
-         do {
-             if (!iterator.hasNext()) {
-+                inventorycrafting.currentRecipe = null; // CraftBukkit - Clear recipe when no recipe is found
-                 return ItemStack.a;
-             }
- 
-             irecipe = (IRecipe) iterator.next();
-         } while (!irecipe.a(inventorycrafting, world));
- 
-+        inventorycrafting.currentRecipe = irecipe; // CraftBukkit
-         return irecipe.craftItem(inventorycrafting);
-     }
- 
-@@ -175,12 +179,14 @@
- 
-         do {
-             if (!iterator.hasNext()) {
-+                inventorycrafting.currentRecipe = null; // CraftBukkit - Clear recipe when no recipe is found
-                 return null;
-             }
- 
-             irecipe = (IRecipe) iterator.next();
-         } while (!irecipe.a(inventorycrafting, world));
- 
-+        inventorycrafting.currentRecipe = irecipe; // CraftBukkit
-         return irecipe;
-     }
- 
-@@ -210,7 +216,7 @@
-     }
- 
-     public static int a(IRecipe irecipe) {
--        return CraftingManager.recipes.a((Object) irecipe);
-+        return CraftingManager.recipes.a(irecipe); // CraftBukkit - decompile error
-     }
- 
-     @Nullable
diff --git a/nms-patches/CrashReport.patch b/nms-patches/CrashReport.patch
deleted file mode 100644
index de74312..0000000
--- a/nms-patches/CrashReport.patch
+++ /dev/null
@@ -1,10 +0,0 @@
---- a/net/minecraft/server/CrashReport.java
-+++ b/net/minecraft/server/CrashReport.java
-@@ -125,6 +125,7 @@
-                 return this.a();
-             }
-         });
-+        this.d.a("CraftBukkit Information", (CrashReportCallable) new org.bukkit.craftbukkit.CraftCrashReport()); // CraftBukkit
-     }
- 
-     public String a() {
diff --git a/nms-patches/CustomFunction.patch b/nms-patches/CustomFunction.patch
deleted file mode 100644
index a01167d..0000000
--- a/nms-patches/CustomFunction.patch
+++ /dev/null
@@ -1,19 +0,0 @@
---- a/net/minecraft/server/CustomFunction.java
-+++ b/net/minecraft/server/CustomFunction.java
-@@ -122,7 +122,15 @@
-         }
- 
-         public void a(CustomFunctionData customfunctiondata, ICommandListener icommandlistener, ArrayDeque<CustomFunctionData.a> arraydeque, int i) {
--            customfunctiondata.a().a(icommandlistener, this.a);
-+            // CraftBukkit start
-+            org.bukkit.command.CommandSender sender;
-+            if (icommandlistener instanceof CustomFunctionData.CustomFunctionListener) {
-+                sender = ((CustomFunctionData.CustomFunctionListener) icommandlistener).sender;
-+            } else {
-+                sender = CommandBlockListenerAbstract.unwrapSender(icommandlistener);
-+            }
-+            CommandBlockListenerAbstract.executeSafely(icommandlistener, sender, this.a);
-+            // CraftBukkit end
-         }
- 
-         public String toString() {
diff --git a/nms-patches/CustomFunctionData.patch b/nms-patches/CustomFunctionData.patch
deleted file mode 100644
index 821ff00..0000000
--- a/nms-patches/CustomFunctionData.patch
+++ /dev/null
@@ -1,45 +0,0 @@
---- a/net/minecraft/server/CustomFunctionData.java
-+++ b/net/minecraft/server/CustomFunctionData.java
-@@ -23,7 +23,14 @@
-     private CustomFunction f;
-     private final ArrayDeque<CustomFunctionData.a> g = new ArrayDeque();
-     private boolean h = false;
--    private final ICommandListener i = new ICommandListener() {
-+    // CraftBukkit start
-+    private final ICommandListener i = new CustomFunctionListener();
-+
-+    public class CustomFunctionListener implements ICommandListener {
-+
-+        protected org.bukkit.command.CommandSender sender = new org.bukkit.craftbukkit.command.CraftFunctionCommandSender(this);
-+        // CraftBukkit end
-+
-         public String getName() {
-             return CustomFunctionData.this.e;
-         }
-@@ -33,7 +40,7 @@
-         }
- 
-         public World getWorld() {
--            return CustomFunctionData.this.c.worldServer[0];
-+            return CustomFunctionData.this.c.worlds.get(0); // CraftBukkit
-         }
- 
-         public MinecraftServer C_() {
-@@ -57,7 +64,7 @@
-     }
- 
-     public int c() {
--        return this.c.worldServer[0].getGameRules().c("maxCommandChainLength");
-+        return this.c.worlds.get(0).getGameRules().c("maxCommandChainLength"); // CraftBukkit
-     }
- 
-     public Map<MinecraftKey, CustomFunction> d() {
-@@ -65,7 +72,7 @@
-     }
- 
-     public void e() {
--        String s = this.c.worldServer[0].getGameRules().get("gameLoopFunction");
-+        String s = this.c.worlds.get(0).getGameRules().get("gameLoopFunction"); // CraftBukkit
- 
-         if (!s.equals(this.e)) {
-             this.e = s;
diff --git a/nms-patches/DamageSource.patch b/nms-patches/DamageSource.patch
deleted file mode 100644
index ac9ca78..0000000
--- a/nms-patches/DamageSource.patch
+++ /dev/null
@@ -1,21 +0,0 @@
---- a/net/minecraft/server/DamageSource.java
-+++ b/net/minecraft/server/DamageSource.java
-@@ -34,6 +34,18 @@
-     private boolean C;
-     private boolean D;
-     public String translationIndex;
-+    // CraftBukkit start
-+    private boolean sweep;
-+
-+    public boolean isSweep() {
-+        return sweep;
-+    }
-+
-+    public DamageSource sweep() {
-+        this.sweep = true;
-+        return this;
-+    }
-+    // CraftBukkit end
- 
-     public static DamageSource mobAttack(EntityLiving entityliving) {
-         return new EntityDamageSource("mob", entityliving);
diff --git a/nms-patches/DataInspectorBlockEntity.patch b/nms-patches/DataInspectorBlockEntity.patch
deleted file mode 100644
index 0ec5d79..0000000
--- a/nms-patches/DataInspectorBlockEntity.patch
+++ /dev/null
@@ -1,12 +0,0 @@
---- a/net/minecraft/server/DataInspectorBlockEntity.java
-+++ b/net/minecraft/server/DataInspectorBlockEntity.java
-@@ -32,7 +32,8 @@
-                 boolean flag;
- 
-                 if (s1 == null) {
--                    DataInspectorBlockEntity.a.warn("Unable to resolve BlockEntity for ItemInstance: {}", s);
-+                    // CraftBukkit - Remove unnecessary warning (occurs when deserializing a Shulker Box item)
-+                    // DataInspectorBlockEntity.a.warn("Unable to resolve BlockEntity for ItemInstance: {}", s);
-                     flag = false;
-                 } else {
-                     flag = !nbttagcompound2.hasKey("id");
diff --git a/nms-patches/DataPaletteBlock.patch b/nms-patches/DataPaletteBlock.patch
deleted file mode 100644
index 676b070..0000000
--- a/nms-patches/DataPaletteBlock.patch
+++ /dev/null
@@ -1,25 +0,0 @@
---- a/net/minecraft/server/DataPaletteBlock.java
-+++ b/net/minecraft/server/DataPaletteBlock.java
-@@ -112,7 +112,21 @@
-             int i1 = nibblearray1 == null ? 0 : nibblearray1.a(j, k, l);
-             int j1 = i1 << 12 | (abyte[i] & 255) << 4 | nibblearray.a(j, k, l);
- 
--            this.setBlockIndex(i, (IBlockData) Block.REGISTRY_ID.fromId(j1));
-+            // CraftBukkit start - fix blocks with random data values (caused by plugins)
-+            IBlockData data = Block.REGISTRY_ID.fromId(j1);
-+            if (data == null) {
-+                Block block = Block.getById(j1 >> 4);
-+                if (block != null) {
-+                    try {
-+                        data = block.fromLegacyData(j1 & 0xF);
-+                    } catch (Exception ignored) {
-+                        data = block.getBlockData();
-+                    }
-+                }
-+            }
-+            this.setBlockIndex(i, data);
-+            // this.setBlockIndex(i, (IBlockData) Block.REGISTRY_ID.fromId(j1));
-+            // CraftBukkit end
-         }
- 
-     }
diff --git a/nms-patches/DataWatcher.patch b/nms-patches/DataWatcher.patch
deleted file mode 100644
index 131d78a..0000000
--- a/nms-patches/DataWatcher.patch
+++ /dev/null
@@ -1,20 +0,0 @@
---- a/net/minecraft/server/DataWatcher.java
-+++ b/net/minecraft/server/DataWatcher.java
-@@ -70,7 +70,7 @@
-         }
-     }
- 
--    public <T> void register(DataWatcherObject<T> datawatcherobject, T t0) {
-+    public <T> void register(DataWatcherObject<T> datawatcherobject, Object t0) { // CraftBukkit T -> Object
-         int i = datawatcherobject.a();
- 
-         if (i > 254) {
-@@ -84,7 +84,7 @@
-         }
-     }
- 
--    private <T> void registerObject(DataWatcherObject<T> datawatcherobject, T t0) {
-+    private <T> void registerObject(DataWatcherObject<T> datawatcherobject, Object t0) { // CraftBukkit Object
-         DataWatcher.Item datawatcher_item = new DataWatcher.Item(datawatcherobject, t0);
- 
-         this.e.writeLock().lock();
diff --git a/nms-patches/DedicatedServer.patch b/nms-patches/DedicatedServer.patch
deleted file mode 100644
index 86e8cad..0000000
--- a/nms-patches/DedicatedServer.patch
+++ /dev/null
@@ -1,268 +0,0 @@
---- a/net/minecraft/server/DedicatedServer.java
-+++ b/net/minecraft/server/DedicatedServer.java
-@@ -19,11 +19,21 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import java.io.PrintStream;
-+import org.apache.logging.log4j.Level;
-+
-+import org.bukkit.craftbukkit.LoggerOutputStream;
-+import org.bukkit.event.server.ServerCommandEvent;
-+import org.bukkit.craftbukkit.util.Waitable;
-+import org.bukkit.event.server.RemoteServerCommandEvent;
-+// CraftBukkit end
-+
- public class DedicatedServer extends MinecraftServer implements IMinecraftServer {
- 
-     private static final Logger LOGGER = LogManager.getLogger();
-     private static final Pattern l = Pattern.compile("^[a-fA-F0-9]{40}$");
--    private final List<ServerCommand> serverCommandQueue = Collections.synchronizedList(Lists.newArrayList());
-+    private final List<ServerCommand> serverCommandQueue = Collections.synchronizedList(Lists.<ServerCommand>newArrayList()); // CraftBukkit - fix decompile error
-     private RemoteStatusListener n;
-     public final RemoteControlCommandListener remoteControlCommandListener = new RemoteControlCommandListener(this);
-     private RemoteControlListener p;
-@@ -33,8 +43,10 @@
-     private EnumGamemode t;
-     private boolean u;
- 
--    public DedicatedServer(File file, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
--        super(file, Proxy.NO_PROXY, dataconvertermanager, yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache);
-+    // CraftBukkit start - Signature changed
-+    public DedicatedServer(joptsimple.OptionSet options, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
-+        super(options, Proxy.NO_PROXY, dataconvertermanager, yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache);
-+        // CraftBukkit end
-         Thread thread = new Thread("Server Infinisleeper") {
-             {
-                 this.setDaemon(true);
-@@ -53,16 +65,30 @@
-         };
-     }
- 
--    protected boolean init() throws IOException {
-+    public boolean init() throws IOException { // CraftBukkit - decompile error
-         Thread thread = new Thread("Server console handler") {
-             public void run() {
--                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
-+                // CraftBukkit start
-+                if (!org.bukkit.craftbukkit.Main.useConsole) {
-+                    return;
-+                }
-+                jline.console.ConsoleReader bufferedreader = reader;
-+                // CraftBukkit end
- 
-                 String s;
- 
-                 try {
--                    while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (s = bufferedreader.readLine()) != null) {
--                        DedicatedServer.this.issueCommand(s, DedicatedServer.this);
-+                    // CraftBukkit start - JLine disabling compatibility
-+                    while (!isStopped() && isRunning()) {
-+                        if (org.bukkit.craftbukkit.Main.useJline) {
-+                            s = bufferedreader.readLine(">", null);
-+                        } else {
-+                            s = bufferedreader.readLine();
-+                        }
-+                        if (s != null && s.trim().length() > 0) { // Trim to filter lines which are just spaces
-+                            issueCommand(s, DedicatedServer.this);
-+                        }
-+                        // CraftBukkit end
-                     }
-                 } catch (IOException ioexception) {
-                     DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
-@@ -71,6 +97,27 @@
-             }
-         };
- 
-+        // CraftBukkit start - TODO: handle command-line logging arguments
-+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
-+        global.setUseParentHandlers(false);
-+        for (java.util.logging.Handler handler : global.getHandlers()) {
-+            global.removeHandler(handler);
-+        }
-+        global.addHandler(new org.bukkit.craftbukkit.util.ForwardLogHandler());
-+
-+        final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
-+        for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
-+            if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
-+                logger.removeAppender(appender);
-+            }
-+        }
-+
-+        new Thread(new org.bukkit.craftbukkit.util.TerminalConsoleWriterThread(System.out, this.reader)).start();
-+
-+        System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
-+        System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.WARN), true));
-+        // CraftBukkit end
-+
-         thread.setDaemon(true);
-         thread.start();
-         DedicatedServer.LOGGER.info("Starting minecraft server version 1.12.1");
-@@ -79,7 +126,7 @@
-         }
- 
-         DedicatedServer.LOGGER.info("Loading properties");
--        this.propertyManager = new PropertyManager(new File("server.properties"));
-+        this.propertyManager = new PropertyManager(this.options); // CraftBukkit - CLI argument support
-         this.r = new EULA(new File("eula.txt"));
-         if (!this.r.a()) {
-             DedicatedServer.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-@@ -136,6 +183,12 @@
-                 return false;
-             }
- 
-+            // CraftBukkit start
-+            this.a((PlayerList) (new DedicatedPlayerList(this)));
-+            server.loadPlugins();
-+            server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
-+            // CraftBukkit end
-+
-             if (!this.getOnlineMode()) {
-                 DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-                 DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
-@@ -150,7 +203,7 @@
-             if (!NameReferencingFileConverter.a(this.propertyManager)) {
-                 return false;
-             } else {
--                this.a((PlayerList) (new DedicatedPlayerList(this)));
-+                this.convertable = new WorldLoaderServer(server.getWorldContainer(), this.dataConverterManager); // CraftBukkit - moved from MinecraftServer constructor
-                 long j = System.nanoTime();
- 
-                 if (this.S() == null) {
-@@ -198,7 +251,7 @@
- 
-                 DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\" or \"?\"", s3);
-                 if (this.propertyManager.a("announce-player-achievements")) {
--                    this.worldServer[0].getGameRules().set("announceAdvancements", this.propertyManager.getBoolean("announce-player-achievements", true) ? "true" : "false");
-+                    this.worlds.get(0).getGameRules().set("announceAdvancements", this.propertyManager.getBoolean("announce-player-achievements", true) ? "true" : "false"); // CraftBukkit
-                     this.propertyManager.b("announce-player-achievements");
-                     this.propertyManager.savePropertiesFile();
-                 }
-@@ -213,7 +266,18 @@
-                     DedicatedServer.LOGGER.info("Starting remote control listener");
-                     this.p = new RemoteControlListener(this);
-                     this.p.a();
-+                    this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(this.remoteControlCommandListener); // CraftBukkit
-+                }
-+
-+                // CraftBukkit start
-+                if (this.server.getBukkitSpawnRadius() > -1) {
-+                    DedicatedServer.LOGGER.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
-+                    this.propertyManager.properties.remove("spawn-protection");
-+                    this.propertyManager.getInt("spawn-protection", this.server.getBukkitSpawnRadius());
-+                    this.server.removeBukkitSpawnRadius();
-+                    this.propertyManager.savePropertiesFile();
-                 }
-+                // CraftBukkit end
- 
-                 if (this.aT() > 0L) {
-                     Thread thread1 = new Thread(new ThreadWatchdog(this));
-@@ -299,11 +363,11 @@
-         return crashreport;
-     }
- 
--    protected void B() {
-+    public void B() {
-         System.exit(0);
-     }
- 
--    protected void D() {
-+    public void D() { // CraftBukkit - fix decompile error
-         super.D();
-         this.aP();
-     }
-@@ -334,7 +398,15 @@
-         while (!this.serverCommandQueue.isEmpty()) {
-             ServerCommand servercommand = (ServerCommand) this.serverCommandQueue.remove(0);
- 
--            this.getCommandHandler().a(servercommand.source, servercommand.command);
-+            // CraftBukkit start - ServerCommand for preprocessing
-+            ServerCommandEvent event = new ServerCommandEvent(console, servercommand.command);
-+            server.getPluginManager().callEvent(event);
-+            if (event.isCancelled()) continue;
-+            servercommand = new ServerCommand(event.getCommand(), servercommand.source);
-+
-+            // this.getCommandHandler().a(servercommand.source, servercommand.command); // Called in dispatchServerCommand
-+            server.dispatchServerCommand(console, servercommand);
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -537,16 +609,70 @@
-     }
- 
-     public String getPlugins() {
--        return "";
--    }
-+        // CraftBukkit start - Whole method
-+        StringBuilder result = new StringBuilder();
-+        org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
-+
-+        result.append(server.getName());
-+        result.append(" on Bukkit ");
-+        result.append(server.getBukkitVersion());
-+
-+        if (plugins.length > 0 && server.getQueryPlugins()) {
-+            result.append(": ");
-+
-+            for (int i = 0; i < plugins.length; i++) {
-+                if (i > 0) {
-+                    result.append("; ");
-+                }
-+
-+                result.append(plugins[i].getDescription().getName());
-+                result.append(" ");
-+                result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
-+            }
-+        }
- 
--    public String executeRemoteCommand(String s) {
--        this.remoteControlCommandListener.clearMessages();
--        this.b.a(this.remoteControlCommandListener, s);
--        return this.remoteControlCommandListener.getMessages();
-+        return result.toString();
-+        // CraftBukkit end
-+    }
-+
-+    // CraftBukkit start - fire RemoteServerCommandEvent
-+    public String executeRemoteCommand(final String s) {
-+        Waitable<String> waitable = new Waitable<String>() {
-+            @Override
-+            protected String evaluate() {
-+                remoteControlCommandListener.clearMessages();
-+                // Event changes start
-+                RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, s);
-+                server.getPluginManager().callEvent(event);
-+                if (event.isCancelled()) {
-+                    return "";
-+                }
-+                // Event change end
-+                ServerCommand serverCommand = new ServerCommand(event.getCommand(), remoteControlCommandListener);
-+                server.dispatchServerCommand(remoteConsole, serverCommand);
-+                return remoteControlCommandListener.getMessages();
-+            }
-+        };
-+        processQueue.add(waitable);
-+        try {
-+            return waitable.get();
-+        } catch (java.util.concurrent.ExecutionException e) {
-+            throw new RuntimeException("Exception processing rcon command " + s, e.getCause());
-+        } catch (InterruptedException e) {
-+            Thread.currentThread().interrupt(); // Maintain interrupted state
-+            throw new RuntimeException("Interrupted processing rcon command " + s, e);
-+        }
-+        // CraftBukkit end
-     }
- 
-     public PlayerList getPlayerList() {
-         return this.aQ();
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public PropertyManager getPropertyManager() {
-+        return this.propertyManager;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/DispenseBehaviorItem.patch b/nms-patches/DispenseBehaviorItem.patch
deleted file mode 100644
index f325425..0000000
--- a/nms-patches/DispenseBehaviorItem.patch
+++ /dev/null
@@ -1,76 +0,0 @@
---- a/net/minecraft/server/DispenseBehaviorItem.java
-+++ b/net/minecraft/server/DispenseBehaviorItem.java
-@@ -1,5 +1,10 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.block.BlockDispenseEvent;
-+// CraftBukkit end
-+
- public class DispenseBehaviorItem implements IDispenseBehavior {
- 
-     public DispenseBehaviorItem() {}
-@@ -17,11 +22,18 @@
-         IPosition iposition = BlockDispenser.a(isourceblock);
-         ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
- 
--        a(isourceblock.getWorld(), itemstack1, 6, enumdirection, iposition);
-+        // CraftBukkit start
-+        if (!a(isourceblock.getWorld(), itemstack1, 6, enumdirection, isourceblock)) {
-+            itemstack.add(1);
-+        }
-+        // CraftBukkit end
-         return itemstack;
-     }
- 
--    public static void a(World world, ItemStack itemstack, int i, EnumDirection enumdirection, IPosition iposition) {
-+    // CraftBukkit start - void -> boolean return, IPosition -> ISourceBlock last argument
-+    public static boolean a(World world, ItemStack itemstack, int i, EnumDirection enumdirection, ISourceBlock isourceblock) {
-+        IPosition iposition = BlockDispenser.a(isourceblock);
-+        // CraftBukkit end
-         double d0 = iposition.getX();
-         double d1 = iposition.getY();
-         double d2 = iposition.getZ();
-@@ -41,7 +53,41 @@
-         entityitem.motX += world.random.nextGaussian() * 0.007499999832361937D * (double) i;
-         entityitem.motY += world.random.nextGaussian() * 0.007499999832361937D * (double) i;
-         entityitem.motZ += world.random.nextGaussian() * 0.007499999832361937D * (double) i;
-+
-+        // CraftBukkit start
-+        org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+        CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
-+
-+        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(entityitem.motX, entityitem.motY, entityitem.motZ));
-+        if (!BlockDispenser.eventFired) {
-+            world.getServer().getPluginManager().callEvent(event);
-+        }
-+
-+        if (event.isCancelled()) {
-+            return false;
-+        }
-+
-+        entityitem.setItemStack(CraftItemStack.asNMSCopy(event.getItem()));
-+        entityitem.motX = event.getVelocity().getX();
-+        entityitem.motY = event.getVelocity().getY();
-+        entityitem.motZ = event.getVelocity().getZ();
-+
-+        if (!event.getItem().getType().equals(craftItem.getType())) {
-+            // Chain to handler for new item
-+            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+            IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+            if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior.getClass() != DispenseBehaviorItem.class) {
-+                idispensebehavior.a(isourceblock, eventStack);
-+            } else {
-+                world.addEntity(entityitem);
-+            }
-+            return false;
-+        }
-+
-         world.addEntity(entityitem);
-+
-+        return true;
-+        // CraftBukkit end
-     }
- 
-     protected void a(ISourceBlock isourceblock) {
diff --git a/nms-patches/DispenseBehaviorProjectile.patch b/nms-patches/DispenseBehaviorProjectile.patch
deleted file mode 100644
index a7f5100..0000000
--- a/nms-patches/DispenseBehaviorProjectile.patch
+++ /dev/null
@@ -1,54 +0,0 @@
---- a/net/minecraft/server/DispenseBehaviorProjectile.java
-+++ b/net/minecraft/server/DispenseBehaviorProjectile.java
-@@ -1,5 +1,10 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.block.BlockDispenseEvent;
-+// CraftBukkit end
-+
- public abstract class DispenseBehaviorProjectile extends DispenseBehaviorItem {
- 
-     public DispenseBehaviorProjectile() {}
-@@ -10,9 +15,38 @@
-         EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
-         IProjectile iprojectile = this.a(world, iposition, itemstack);
- 
--        iprojectile.shoot((double) enumdirection.getAdjacentX(), (double) ((float) enumdirection.getAdjacentY() + 0.1F), (double) enumdirection.getAdjacentZ(), this.getPower(), this.a());
-+        // iprojectile.shoot((double) enumdirection.getAdjacentX(), (double) ((float) enumdirection.getAdjacentY() + 0.1F), (double) enumdirection.getAdjacentZ(), this.getPower(), this.a());
-+        // CraftBukkit start
-+        ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
-+        org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+        CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
-+
-+        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) enumdirection.getAdjacentX(), (double) ((float) enumdirection.getAdjacentY() + 0.1F), (double) enumdirection.getAdjacentZ()));
-+        if (!BlockDispenser.eventFired) {
-+            world.getServer().getPluginManager().callEvent(event);
-+        }
-+
-+        if (event.isCancelled()) {
-+            itemstack.add(1);
-+            return itemstack;
-+        }
-+
-+        if (!event.getItem().equals(craftItem)) {
-+            itemstack.add(1);
-+            // Chain to handler for new item
-+            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+            IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+            if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                idispensebehavior.a(isourceblock, eventStack);
-+                return itemstack;
-+            }
-+        }
-+
-+        iprojectile.shoot(event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), this.getPower(), this.a());
-+        ((Entity) iprojectile).projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) isourceblock.getTileEntity());
-+        // CraftBukkit end
-         world.addEntity((Entity) iprojectile);
--        itemstack.subtract(1);
-+        // itemstack.subtract(1); // CraftBukkit - Handled during event processing
-         return itemstack;
-     }
- 
diff --git a/nms-patches/DispenserRegistry.patch b/nms-patches/DispenserRegistry.patch
deleted file mode 100644
index bf0e83c..0000000
--- a/nms-patches/DispenserRegistry.patch
+++ /dev/null
@@ -1,540 +0,0 @@
---- a/net/minecraft/server/DispenserRegistry.java
-+++ b/net/minecraft/server/DispenserRegistry.java
-@@ -8,6 +8,15 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import java.util.List;
-+import org.bukkit.Location;
-+import org.bukkit.TreeType;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.block.BlockDispenseEvent;
-+import org.bukkit.event.world.StructureGrowEvent;
-+// CraftBukkit end
-+
- public class DispenserRegistry {
- 
-     public static final PrintStream a = System.out;
-@@ -71,7 +80,7 @@
-         BlockDispenser.REGISTRY.a(Items.SPLASH_POTION, new IDispenseBehavior() {
-             public ItemStack a(ISourceBlock isourceblock, final ItemStack itemstack) {
-                 return (new DispenseBehaviorProjectile() {
--                    protected IProjectile a(World world, IPosition iposition, ItemStack itemstack) {
-+                    protected IProjectile a(World world, IPosition iposition, ItemStack itemstack1) { // CraftBukkit - decompile issue
-                         return new EntityPotion(world, iposition.getX(), iposition.getY(), iposition.getZ(), itemstack1.cloneItemStack());
-                     }
- 
-@@ -88,7 +97,7 @@
-         BlockDispenser.REGISTRY.a(Items.LINGERING_POTION, new IDispenseBehavior() {
-             public ItemStack a(ISourceBlock isourceblock, final ItemStack itemstack) {
-                 return (new DispenseBehaviorProjectile() {
--                    protected IProjectile a(World world, IPosition iposition, ItemStack itemstack) {
-+                    protected IProjectile a(World world, IPosition iposition, ItemStack itemstack1) { // CraftBukkit - decompile issue
-                         return new EntityPotion(world, iposition.getX(), iposition.getY(), iposition.getZ(), itemstack1.cloneItemStack());
-                     }
- 
-@@ -108,14 +117,46 @@
-                 double d0 = isourceblock.getX() + (double) enumdirection.getAdjacentX();
-                 double d1 = (double) ((float) (isourceblock.getBlockPosition().getY() + enumdirection.getAdjacentY()) + 0.2F);
-                 double d2 = isourceblock.getZ() + (double) enumdirection.getAdjacentZ();
--                Entity entity = ItemMonsterEgg.a(isourceblock.getWorld(), ItemMonsterEgg.h(itemstack), d0, d1, d2);
-+                // Entity entity = ItemMonsterEgg.a(isourceblock.getWorld(), ItemMonsterEgg.h(itemstack), d0, d1, d2);
-+
-+                // CraftBukkit start
-+                World world = isourceblock.getWorld();
-+                ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
-+                org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
-+
-+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1, d2));
-+                if (!BlockDispenser.eventFired) {
-+                    world.getServer().getPluginManager().callEvent(event);
-+                }
-+
-+                if (event.isCancelled()) {
-+                    itemstack.add(1);
-+                    return itemstack;
-+                }
-+
-+                if (!event.getItem().equals(craftItem)) {
-+                    itemstack.add(1);
-+                    // Chain to handler for new item
-+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                    if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                        idispensebehavior.a(isourceblock, eventStack);
-+                        return itemstack;
-+                    }
-+                }
-+
-+                itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
-+
-+                Entity entity = ItemMonsterEgg.spawnCreature(isourceblock.getWorld(), ItemMonsterEgg.h(itemstack), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DISPENSE_EGG);
- 
-                 if (entity instanceof EntityLiving && itemstack.hasName()) {
-                     entity.setCustomName(itemstack.getName());
-                 }
- 
-                 ItemMonsterEgg.a(isourceblock.getWorld(), (EntityHuman) null, itemstack, entity);
--                itemstack.subtract(1);
-+                // itemstack.subtract(1);// Handled during event processing
-+                // CraftBukkit end
-                 return itemstack;
-             }
-         });
-@@ -125,10 +166,39 @@
-                 double d0 = isourceblock.getX() + (double) enumdirection.getAdjacentX();
-                 double d1 = (double) ((float) isourceblock.getBlockPosition().getY() + 0.2F);
-                 double d2 = isourceblock.getZ() + (double) enumdirection.getAdjacentZ();
--                EntityFireworks entityfireworks = new EntityFireworks(isourceblock.getWorld(), d0, d1, d2, itemstack);
-+                // CraftBukkit start
-+                World world = isourceblock.getWorld();
-+                ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
-+                org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
-+
-+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1, d2));
-+                if (!BlockDispenser.eventFired) {
-+                    world.getServer().getPluginManager().callEvent(event);
-+                }
-+
-+                if (event.isCancelled()) {
-+                    itemstack.add(1);
-+                    return itemstack;
-+                }
-+
-+                if (!event.getItem().equals(craftItem)) {
-+                    itemstack.add(1);
-+                    // Chain to handler for new item
-+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                    if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                        idispensebehavior.a(isourceblock, eventStack);
-+                        return itemstack;
-+                    }
-+                }
-+
-+                itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
-+                EntityFireworks entityfireworks = new EntityFireworks(isourceblock.getWorld(), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), itemstack1);
- 
-                 isourceblock.getWorld().addEntity(entityfireworks);
--                itemstack.subtract(1);
-+                // itemstack.subtract(1); // Handled during event processing
-+                // CraftBukkit end
-                 return itemstack;
-             }
- 
-@@ -149,8 +219,38 @@
-                 double d4 = random.nextGaussian() * 0.05D + (double) enumdirection.getAdjacentY();
-                 double d5 = random.nextGaussian() * 0.05D + (double) enumdirection.getAdjacentZ();
- 
--                world.addEntity(new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5));
--                itemstack.subtract(1);
-+                // CraftBukkit start
-+                ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
-+                org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
-+
-+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d3, d4, d5));
-+                if (!BlockDispenser.eventFired) {
-+                    world.getServer().getPluginManager().callEvent(event);
-+                }
-+
-+                if (event.isCancelled()) {
-+                    itemstack.add(1);
-+                    return itemstack;
-+                }
-+
-+                if (!event.getItem().equals(craftItem)) {
-+                    itemstack.add(1);
-+                    // Chain to handler for new item
-+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                    if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                        idispensebehavior.a(isourceblock, eventStack);
-+                        return itemstack;
-+                    }
-+                }
-+
-+                EntitySmallFireball fireball = new EntitySmallFireball(world, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
-+                fireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) isourceblock.getTileEntity());
-+
-+                world.addEntity(fireball);
-+                // itemstack.subtract(1); // Handled during event processing
-+                // CraftBukkit end
-                 return itemstack;
-             }
- 
-@@ -171,7 +271,53 @@
-                 ItemBucket itembucket = (ItemBucket) itemstack.getItem();
-                 BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
- 
--                return itembucket.a((EntityHuman) null, isourceblock.getWorld(), blockposition) ? new ItemStack(Items.BUCKET) : this.b.a(isourceblock, itemstack);
-+                // CraftBukkit start
-+                World world = isourceblock.getWorld();
-+                int x = blockposition.getX();
-+                int y = blockposition.getY();
-+                int z = blockposition.getZ();
-+                if (world.isEmpty(blockposition) || !world.getType(blockposition).getMaterial().isBuildable()) {
-+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                    CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
-+
-+                    BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(x, y, z));
-+                    if (!BlockDispenser.eventFired) {
-+                        world.getServer().getPluginManager().callEvent(event);
-+                    }
-+
-+                    if (event.isCancelled()) {
-+                        return itemstack;
-+                    }
-+
-+                    if (!event.getItem().equals(craftItem)) {
-+                        // Chain to handler for new item
-+                        ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                        IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                        if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                            idispensebehavior.a(isourceblock, eventStack);
-+                            return itemstack;
-+                        }
-+                    }
-+
-+                    itembucket = (ItemBucket) CraftItemStack.asNMSCopy(event.getItem()).getItem();
-+                }
-+                // CraftBukkit end
-+
-+                if (itembucket.a((EntityHuman) null, isourceblock.getWorld(), blockposition)) {
-+                    // CraftBukkit start - Handle stacked buckets
-+                    Item item = Items.BUCKET;
-+                    itemstack.subtract(1);
-+                    if (itemstack.isEmpty()) {
-+                        itemstack.setItem(Items.BUCKET);
-+                        itemstack.setCount(1);
-+                    } else if (((TileEntityDispenser) isourceblock.getTileEntity()).addItem(new ItemStack(item)) < 0) {
-+                        this.b.a(isourceblock, new ItemStack(item));
-+                    }
-+                    // CraftBukkit end
-+                    return itemstack;
-+                } else {
-+                    return this.b.a(isourceblock, itemstack);
-+                }
-             }
-         };
- 
-@@ -198,6 +344,30 @@
-                     item = Items.LAVA_BUCKET;
-                 }
- 
-+                // CraftBukkit start
-+                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
-+
-+                BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+                if (!BlockDispenser.eventFired) {
-+                    world.getServer().getPluginManager().callEvent(event);
-+                }
-+
-+                if (event.isCancelled()) {
-+                    return itemstack;
-+                }
-+
-+                if (!event.getItem().equals(craftItem)) {
-+                    // Chain to handler for new item
-+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                    if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                        idispensebehavior.a(isourceblock, eventStack);
-+                        return itemstack;
-+                    }
-+                }
-+                // CraftBukkit end
-+
-                 world.setAir(blockposition);
-                 itemstack.subtract(1);
-                 if (itemstack.isEmpty()) {
-@@ -215,14 +385,42 @@
-             protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-                 World world = isourceblock.getWorld();
- 
-+                // CraftBukkit start
-+                org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
-+
-+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
-+                if (!BlockDispenser.eventFired) {
-+                    world.getServer().getPluginManager().callEvent(event);
-+                }
-+
-+                if (event.isCancelled()) {
-+                    return itemstack;
-+                }
-+
-+                if (!event.getItem().equals(craftItem)) {
-+                    // Chain to handler for new item
-+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                    if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                        idispensebehavior.a(isourceblock, eventStack);
-+                        return itemstack;
-+                    }
-+                }
-+                // CraftBukkit end
-+
-                 this.b = true;
-                 BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
- 
-                 if (world.isEmpty(blockposition)) {
--                    world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
--                    if (itemstack.isDamaged(1, world.random, (EntityPlayer) null)) {
--                        itemstack.setCount(0);
-+                    // CraftBukkit start - Ignition by dispensing flint and steel
-+                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ()).isCancelled()) {
-+                        world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                        if (itemstack.isDamaged(1, world.random, (EntityPlayer) null)) {
-+                            itemstack.setCount(0);
-+                        }
-                     }
-+                    // CraftBukkit end
-                 } else if (world.getType(blockposition).getBlock() == Blocks.TNT) {
-                     Blocks.TNT.postBreak(world, blockposition, Blocks.TNT.getBlockData().set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
-                     world.setAir(blockposition);
-@@ -240,6 +438,32 @@
-                     World world = isourceblock.getWorld();
-                     BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
- 
-+                    // CraftBukkit start
-+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                    CraftItemStack craftItem = CraftItemStack.asNewCraftStack(itemstack.getItem());
-+
-+                    BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
-+                    if (!BlockDispenser.eventFired) {
-+                        world.getServer().getPluginManager().callEvent(event);
-+                    }
-+
-+                    if (event.isCancelled()) {
-+                        return itemstack;
-+                    }
-+
-+                    if (!event.getItem().equals(craftItem)) {
-+                        // Chain to handler for new item
-+                        ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                        IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                        if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                            idispensebehavior.a(isourceblock, eventStack);
-+                            return itemstack;
-+                        }
-+                    }
-+
-+                    world.captureTreeGeneration = true;
-+                    // CraftBukkit end
-+
-                     if (ItemDye.a(itemstack, world, blockposition)) {
-                         if (!world.isClientSide) {
-                             world.triggerEffect(2005, blockposition, 0);
-@@ -247,6 +471,26 @@
-                     } else {
-                         this.b = false;
-                     }
-+                    // CraftBukkit start
-+                    world.captureTreeGeneration = false;
-+                    if (world.capturedBlockStates.size() > 0) {
-+                        TreeType treeType = BlockSapling.treeType;
-+                        BlockSapling.treeType = null;
-+                        Location location = new Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                        List<org.bukkit.block.BlockState> blocks = (List<org.bukkit.block.BlockState>) world.capturedBlockStates.clone();
-+                        world.capturedBlockStates.clear();
-+                        StructureGrowEvent structureEvent = null;
-+                        if (treeType != null) {
-+                            structureEvent = new StructureGrowEvent(location, treeType, false, null, blocks);
-+                            org.bukkit.Bukkit.getPluginManager().callEvent(structureEvent);
-+                        }
-+                        if (structureEvent == null || !structureEvent.isCancelled()) {
-+                            for (org.bukkit.block.BlockState blockstate : blocks) {
-+                                blockstate.update(true);
-+                            }
-+                        }
-+                    }
-+                    // CraftBukkit end
- 
-                     return itemstack;
-                 } else {
-@@ -258,11 +502,40 @@
-             protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-                 World world = isourceblock.getWorld();
-                 BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
--                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, (EntityLiving) null);
-+                // EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, (EntityLiving) null);
-+
-+                // CraftBukkit start
-+                ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
-+                org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
-+
-+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D));
-+                if (!BlockDispenser.eventFired) {
-+                   world.getServer().getPluginManager().callEvent(event);
-+                }
-+
-+                if (event.isCancelled()) {
-+                    itemstack.add(1);
-+                    return itemstack;
-+                }
-+
-+                if (!event.getItem().equals(craftItem)) {
-+                    itemstack.add(1);
-+                    // Chain to handler for new item
-+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                    if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                        idispensebehavior.a(isourceblock, eventStack);
-+                        return itemstack;
-+                    }
-+                }
-+
-+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (EntityLiving) null);
-+                // CraftBukkit end
- 
-                 world.addEntity(entitytntprimed);
-                 world.a((EntityHuman) null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.hW, SoundCategory.BLOCKS, 1.0F, 1.0F);
--                itemstack.subtract(1);
-+                // itemstack.subtract(1); // CraftBukkit - handled above
-                 return itemstack;
-             }
-         });
-@@ -273,6 +546,30 @@
-                 BlockPosition blockposition = isourceblock.getBlockPosition().shift(enumdirection);
-                 BlockSkull blockskull = Blocks.SKULL;
- 
-+                // CraftBukkit start
-+                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
-+
-+                BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+                if (!BlockDispenser.eventFired) {
-+                    world.getServer().getPluginManager().callEvent(event);
-+                }
-+
-+                if (event.isCancelled()) {
-+                    return itemstack;
-+                }
-+
-+                if (!event.getItem().equals(craftItem)) {
-+                    // Chain to handler for new item
-+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                    if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                        idispensebehavior.a(isourceblock, eventStack);
-+                        return itemstack;
-+                    }
-+                }
-+                // CraftBukkit end
-+
-                 this.b = true;
-                 if (world.isEmpty(blockposition) && blockskull.b(world, blockposition, itemstack)) {
-                     if (!world.isClientSide) {
-@@ -321,6 +618,30 @@
-                 BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
-                 BlockPumpkin blockpumpkin = (BlockPumpkin) Blocks.PUMPKIN;
- 
-+                // CraftBukkit start
-+                org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
-+
-+                BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+                if (!BlockDispenser.eventFired) {
-+                    world.getServer().getPluginManager().callEvent(event);
-+                }
-+
-+                if (event.isCancelled()) {
-+                    return itemstack;
-+                }
-+
-+                if (!event.getItem().equals(craftItem)) {
-+                    // Chain to handler for new item
-+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                    if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                        idispensebehavior.a(isourceblock, eventStack);
-+                        return itemstack;
-+                    }
-+                }
-+                // CraftBukkit end
-+
-                 this.b = true;
-                 if (world.isEmpty(blockposition) && blockpumpkin.b(world, blockposition)) {
-                     if (!world.isClientSide) {
-@@ -407,6 +728,30 @@
-             EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
-             BlockPosition blockposition = isourceblock.getBlockPosition().shift(enumdirection);
- 
-+            // CraftBukkit start
-+            org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
-+
-+            BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-+            if (!BlockDispenser.eventFired) {
-+                world.getServer().getPluginManager().callEvent(event);
-+            }
-+
-+            if (event.isCancelled()) {
-+                return itemstack;
-+            }
-+
-+            if (!event.getItem().equals(craftItem)) {
-+                // Chain to handler for new item
-+                ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                    idispensebehavior.a(isourceblock, eventStack);
-+                    return itemstack;
-+                }
-+            }
-+            // CraftBukkit end
-+
-             this.b = world.a(block, blockposition, false, EnumDirection.DOWN, (Entity) null);
-             if (this.b) {
-                 EnumDirection enumdirection1 = world.isEmpty(blockposition.down()) ? enumdirection : EnumDirection.UP;
-@@ -475,12 +820,40 @@
-                 d3 = 0.0D;
-             }
- 
--            EntityBoat entityboat = new EntityBoat(world, d0, d1 + d3, d2);
-+            // EntityBoat entityboat = new EntityBoat(world, d0, d1 + d3, d2);
-+            // CraftBukkit start
-+            ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
-+            org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
-+
-+            BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1 + d3, d2));
-+            if (!BlockDispenser.eventFired) {
-+                world.getServer().getPluginManager().callEvent(event);
-+            }
-+
-+            if (event.isCancelled()) {
-+                itemstack.add(1);
-+                return itemstack;
-+            }
-+
-+            if (!event.getItem().equals(craftItem)) {
-+                itemstack.add(1);
-+                // Chain to handler for new item
-+                ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                    idispensebehavior.a(isourceblock, eventStack);
-+                    return itemstack;
-+                }
-+            }
-+
-+            EntityBoat entityboat = new EntityBoat(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
-+            // CraftBukkit end
- 
-             entityboat.setType(this.c);
-             entityboat.yaw = enumdirection.l();
--            world.addEntity(entityboat);
--            itemstack.subtract(1);
-+            if (!world.addEntity(entityboat)) itemstack.add(1); // CraftBukkit
-+            // itemstack.subtract(1); // CraftBukkit - handled during event processing
-             return itemstack;
-         }
- 
diff --git a/nms-patches/DragonControllerManager.patch b/nms-patches/DragonControllerManager.patch
deleted file mode 100644
index d637a25..0000000
--- a/nms-patches/DragonControllerManager.patch
+++ /dev/null
@@ -1,41 +0,0 @@
---- a/net/minecraft/server/DragonControllerManager.java
-+++ b/net/minecraft/server/DragonControllerManager.java
-@@ -2,6 +2,10 @@
- 
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.entity.CraftEnderDragon;
-+import org.bukkit.event.entity.EnderDragonChangePhaseEvent;
-+// CraftBukkit end
- 
- public class DragonControllerManager {
- 
-@@ -21,6 +25,19 @@
-                 this.currentDragonController.e();
-             }
- 
-+            // CraftBukkit start - Call EnderDragonChangePhaseEvent
-+            EnderDragonChangePhaseEvent event = new EnderDragonChangePhaseEvent(
-+                    (CraftEnderDragon) this.enderDragon.getBukkitEntity(),
-+                    (this.currentDragonController == null) ? null : CraftEnderDragon.getBukkitPhase(this.currentDragonController.getControllerPhase()),
-+                    CraftEnderDragon.getBukkitPhase(dragoncontrollerphase)
-+            );
-+            this.enderDragon.world.getServer().getPluginManager().callEvent(event);
-+            if (event.isCancelled()) {
-+                return;
-+            }
-+            dragoncontrollerphase = CraftEnderDragon.getMinecraftPhase(event.getNewPhase());
-+            // CraftBukkit end
-+
-             this.currentDragonController = this.b(dragoncontrollerphase);
-             if (!this.enderDragon.world.isClientSide) {
-                 this.enderDragon.getDataWatcher().set(EntityEnderDragon.PHASE, Integer.valueOf(dragoncontrollerphase.b()));
-@@ -42,6 +59,6 @@
-             this.dragonControllers[i] = dragoncontrollerphase.a(this.enderDragon);
-         }
- 
--        return this.dragonControllers[i];
-+        return (T) this.dragonControllers[i]; // CraftBukkit - decompile error
-     }
- }
diff --git a/nms-patches/Enchantment.patch b/nms-patches/Enchantment.patch
deleted file mode 100644
index 498dc96..0000000
--- a/nms-patches/Enchantment.patch
+++ /dev/null
@@ -1,23 +0,0 @@
---- a/net/minecraft/server/Enchantment.java
-+++ b/net/minecraft/server/Enchantment.java
-@@ -20,7 +20,7 @@
-     }
- 
-     public static int getId(Enchantment enchantment) {
--        return Enchantment.enchantments.a((Object) enchantment);
-+        return Enchantment.enchantments.a(enchantment); // CraftBukkit - fix decompile error
-     }
- 
-     @Nullable
-@@ -155,6 +155,11 @@
-         Enchantment.enchantments.a(62, new MinecraftKey("lure"), new EnchantmentLure(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-         Enchantment.enchantments.a(70, new MinecraftKey("mending"), new EnchantmentMending(Enchantment.Rarity.RARE, EnumItemSlot.values()));
-         Enchantment.enchantments.a(71, new MinecraftKey("vanishing_curse"), new EnchantmentVanishing(Enchantment.Rarity.VERY_RARE, EnumItemSlot.values()));
-+        // CraftBukkit start
-+        for (Object enchantment : Enchantment.enchantments) {
-+            org.bukkit.enchantments.Enchantment.registerEnchantment(new org.bukkit.craftbukkit.enchantments.CraftEnchantment((Enchantment) enchantment));
-+        }
-+        // CraftBukkit end
-     }
- 
-     public static enum Rarity {
diff --git a/nms-patches/EnchantmentFrostWalker.patch b/nms-patches/EnchantmentFrostWalker.patch
deleted file mode 100644
index c4f9f2b..0000000
--- a/nms-patches/EnchantmentFrostWalker.patch
+++ /dev/null
@@ -1,25 +0,0 @@
---- a/net/minecraft/server/EnchantmentFrostWalker.java
-+++ b/net/minecraft/server/EnchantmentFrostWalker.java
-@@ -1,5 +1,8 @@
- package net.minecraft.server;
- 
-+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-+import org.bukkit.event.block.EntityBlockFormEvent;
-+
- import java.util.Iterator;
- 
- public class EnchantmentFrostWalker extends Enchantment {
-@@ -42,8 +45,11 @@
-                         IBlockData iblockdata1 = world.getType(blockposition_mutableblockposition1);
- 
-                         if (iblockdata1.getMaterial() == Material.WATER && ((Integer) iblockdata1.get(BlockFluids.LEVEL)).intValue() == 0 && world.a(Blocks.FROSTED_ICE, blockposition_mutableblockposition1, false, EnumDirection.DOWN, (Entity) null)) {
--                            world.setTypeUpdate(blockposition_mutableblockposition1, Blocks.FROSTED_ICE.getBlockData());
--                            world.a(blockposition_mutableblockposition1.h(), Blocks.FROSTED_ICE, MathHelper.nextInt(entityliving.getRandom(), 60, 120));
-+                            // CraftBukkit Start - Call EntityBlockFormEvent for Frost Walker
-+                            if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition_mutableblockposition1, Blocks.FROSTED_ICE.getBlockData(), entityliving)) {
-+                                world.a(blockposition_mutableblockposition1.h(), Blocks.FROSTED_ICE, MathHelper.nextInt(entityliving.getRandom(), 60, 120));
-+                            }
-+                            // CraftBukkit End
-                         }
-                     }
-                 }
diff --git a/nms-patches/EnchantmentThorns.patch b/nms-patches/EnchantmentThorns.patch
deleted file mode 100644
index 82ffbcd..0000000
--- a/nms-patches/EnchantmentThorns.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/EnchantmentThorns.java
-+++ b/net/minecraft/server/EnchantmentThorns.java
-@@ -29,7 +29,7 @@
-         Random random = entityliving.getRandom();
-         ItemStack itemstack = EnchantmentManager.b(Enchantments.THORNS, entityliving);
- 
--        if (a(i, random)) {
-+        if (entity != null && a(i, random)) { // CraftBukkit
-             if (entity != null) {
-                 entity.damageEntity(DamageSource.a(entityliving), (float) b(i, random));
-             }
diff --git a/nms-patches/Entity.patch b/nms-patches/Entity.patch
deleted file mode 100644
index 2bae50a..0000000
--- a/nms-patches/Entity.patch
+++ /dev/null
@@ -1,721 +0,0 @@
---- a/net/minecraft/server/Entity.java
-+++ b/net/minecraft/server/Entity.java
-@@ -16,8 +16,48 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import org.bukkit.Bukkit;
-+import org.bukkit.Location;
-+import org.bukkit.Server;
-+import org.bukkit.TravelAgent;
-+import org.bukkit.block.BlockFace;
-+import org.bukkit.entity.Hanging;
-+import org.bukkit.entity.LivingEntity;
-+import org.bukkit.entity.Vehicle;
-+import org.bukkit.event.entity.EntityCombustByEntityEvent;
-+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
-+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
-+import org.bukkit.event.vehicle.VehicleEnterEvent;
-+import org.bukkit.event.vehicle.VehicleExitEvent;
-+import org.bukkit.craftbukkit.CraftWorld;
-+import org.bukkit.craftbukkit.entity.CraftEntity;
-+import org.bukkit.craftbukkit.entity.CraftPlayer;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.EntityAirChangeEvent;
-+import org.bukkit.event.entity.EntityCombustEvent;
-+import org.bukkit.event.entity.EntityPortalEvent;
-+import org.bukkit.plugin.PluginManager;
-+// CraftBukkit end
-+
- public abstract class Entity implements ICommandListener {
- 
-+    // CraftBukkit start
-+    private static final int CURRENT_LEVEL = 2;
-+    static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
-+        return tag.hasKey("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
-+    }
-+
-+    protected CraftEntity bukkitEntity;
-+
-+    public CraftEntity getBukkitEntity() {
-+        if (bukkitEntity == null) {
-+            bukkitEntity = CraftEntity.getEntity(world.getServer(), this);
-+        }
-+        return bukkitEntity;
-+    }
-+    // CraftBukikt end
-+
-     private static final Logger a = LogManager.getLogger();
-     private static final List<ItemStack> b = Collections.emptyList();
-     private static final AxisAlignedBB c = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-@@ -102,6 +142,9 @@
-     private boolean aI;
-     private final double[] aJ;
-     private long aK;
-+    public boolean valid; // CraftBukkit
-+    public org.bukkit.projectiles.ProjectileSource projectileSource; // CraftBukkit - For projectiles only
-+    public boolean forceExplosionKnockback; // CraftBukkit - SPIGOT-949
- 
-     public Entity(World world) {
-         this.id = Entity.entityCount++;
-@@ -208,6 +251,33 @@
-     }
- 
-     protected void setYawPitch(float f, float f1) {
-+        // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
-+        if (Float.isNaN(f)) {
-+            f = 0;
-+        }
-+
-+        if (f == Float.POSITIVE_INFINITY || f == Float.NEGATIVE_INFINITY) {
-+            if (this instanceof EntityPlayer) {
-+                this.world.getServer().getLogger().warning(this.getName() + " was caught trying to crash the server with an invalid yaw");
-+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
-+            }
-+            f = 0;
-+        }
-+
-+        // pitch was sometimes set to NaN, so we need to set it back to 0
-+        if (Float.isNaN(f1)) {
-+            f1 = 0;
-+        }
-+
-+        if (f1 == Float.POSITIVE_INFINITY || f1 == Float.NEGATIVE_INFINITY) {
-+            if (this instanceof EntityPlayer) {
-+                this.world.getServer().getLogger().warning(this.getName() + " was caught trying to crash the server with an invalid pitch");
-+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
-+            }
-+            f1 = 0;
-+        }
-+        // CraftBukkit end
-+
-         this.yaw = f % 360.0F;
-         this.pitch = f1 % 360.0F;
-     }
-@@ -230,6 +300,51 @@
-         this.Y();
-     }
- 
-+    // CraftBukkit start
-+    public void postTick() {
-+        // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
-+        if (!this.world.isClientSide && this.world instanceof WorldServer) {
-+            this.world.methodProfiler.a("portal");
-+            if (this.ak) {
-+                MinecraftServer minecraftserver = this.world.getMinecraftServer();
-+
-+                if (true || minecraftserver.getAllowNether()) { // CraftBukkit
-+                    if (!this.isPassenger()) {
-+                        int i = this.Z();
-+
-+                        if (this.al++ >= i) {
-+                            this.al = i;
-+                            this.portalCooldown = this.aM();
-+                            byte b0;
-+
-+                            if (this.world.worldProvider.getDimensionManager().getDimensionID() == -1) {
-+                                b0 = 0;
-+                            } else {
-+                                b0 = -1;
-+                            }
-+
-+                            this.b(b0);
-+                        }
-+                    }
-+
-+                    this.ak = false;
-+                }
-+            } else {
-+                if (this.al > 0) {
-+                    this.al -= 4;
-+                }
-+
-+                if (this.al < 0) {
-+                    this.al = 0;
-+                }
-+            }
-+
-+            this.I();
-+            this.world.methodProfiler.b();
-+        }
-+    }
-+    // CraftBukkit end
-+
-     public void Y() {
-         this.world.methodProfiler.a("entityBaseTick");
-         if (this.isPassenger() && this.bJ().dead) {
-@@ -246,6 +361,8 @@
-         this.lastZ = this.locZ;
-         this.lastPitch = this.pitch;
-         this.lastYaw = this.yaw;
-+        // Moved up to postTick
-+        /*
-         if (!this.world.isClientSide && this.world instanceof WorldServer) {
-             this.world.methodProfiler.a("portal");
-             if (this.ak) {
-@@ -285,6 +402,7 @@
-             this.I();
-             this.world.methodProfiler.b();
-         }
-+        */
- 
-         this.as();
-         this.aq();
-@@ -336,6 +454,27 @@
-     protected void burnFromLava() {
-         if (!this.fireProof) {
-             this.damageEntity(DamageSource.LAVA, 4.0F);
-+
-+            // CraftBukkit start - Fallen in lava TODO: this event spams!
-+            if (this instanceof EntityLiving) {
-+                if (fireTicks <= 0) {
-+                    // not on fire yet
-+                    // TODO: shouldn't be sending null for the block
-+                    org.bukkit.block.Block damager = null; // ((WorldServer) this.l).getWorld().getBlockAt(i, j, k);
-+                    org.bukkit.entity.Entity damagee = this.getBukkitEntity();
-+                    EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
-+                    this.world.getServer().getPluginManager().callEvent(combustEvent);
-+
-+                    if (!combustEvent.isCancelled()) {
-+                        this.setOnFire(combustEvent.getDuration());
-+                    }
-+                } else {
-+                    // This will be called every single tick the entity is in lava, so don't throw an event
-+                    this.setOnFire(15);
-+                }
-+                return;
-+            }
-+            // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
-             this.setOnFire(15);
-         }
-     }
-@@ -376,6 +515,22 @@
-             this.a(this.getBoundingBox().d(d0, d1, d2));
-             this.recalcPosition();
-         } else {
-+            // CraftBukkit start - Don't do anything if we aren't moving
-+            // We need to do this regardless of whether or not we are moving thanks to portals
-+            try {
-+                this.checkBlockCollisions();
-+            } catch (Throwable throwable) {
-+                CrashReport crashreport = CrashReport.a(throwable, "Checking entity block collision");
-+                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being checked for collision");
-+
-+                this.appendEntityCrashDetails(crashreportsystemdetails);
-+                throw new ReportedException(crashreport);
-+            }
-+            // Check if we're moving
-+            if (d0 == 0 && d1 == 0 && d2 == 0 && this.isVehicle() && this.isPassenger()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             if (enummovetype == EnumMoveType.PISTON) {
-                 long i = this.world.getTime();
- 
-@@ -517,7 +672,7 @@
-                 }
-             }
- 
--            boolean flag = this.onGround || d1 != d1 && d1 < 0.0D;
-+            boolean flag = this.onGround || d1 != d8 && d1 < 0.0D; // CraftBukkit - decompile error
-             double d11;
- 
-             if (this.P > 0.0F && flag && (d7 != d0 || d9 != d2)) {
-@@ -615,7 +770,7 @@
-             this.world.methodProfiler.a("rest");
-             this.recalcPosition();
-             this.positionChanged = d7 != d0 || d9 != d2;
--            this.B = d1 != d1;
-+            this.B = d1 != d8; // CraftBukkit - decompile error
-             this.onGround = this.B && d8 < 0.0D;
-             this.C = this.positionChanged || this.B;
-             l = MathHelper.floor(this.locX);
-@@ -650,6 +805,28 @@
-                 block1.a(this.world, this);
-             }
- 
-+            // CraftBukkit start
-+            if (positionChanged && getBukkitEntity() instanceof Vehicle) {
-+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
-+                org.bukkit.block.Block bl = this.world.getWorld().getBlockAt(MathHelper.floor(this.locX), MathHelper.floor(this.locY), MathHelper.floor(this.locZ));
-+
-+                if (d7 > d0) {
-+                    bl = bl.getRelative(BlockFace.EAST);
-+                } else if (d7 < d0) {
-+                    bl = bl.getRelative(BlockFace.WEST);
-+                } else if (d9 > d2) {
-+                    bl = bl.getRelative(BlockFace.SOUTH);
-+                } else if (d9 < d2) {
-+                    bl = bl.getRelative(BlockFace.NORTH);
-+                }
-+
-+                if (bl.getType() != org.bukkit.Material.AIR) {
-+                    VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
-+                    world.getServer().getPluginManager().callEvent(event);
-+                }
-+            }
-+            // CraftBukkit end
-+
-             if (this.playStepSound() && (!this.onGround || !this.isSneaking() || !(this instanceof EntityHuman)) && !this.isPassenger()) {
-                 double d22 = this.locX - d4;
-                 double d23 = this.locY - d5;
-@@ -685,6 +862,8 @@
-                 }
-             }
- 
-+            // CraftBukkit start - Move to the top of the method
-+            /*
-             try {
-                 this.checkBlockCollisions();
-             } catch (Throwable throwable) {
-@@ -694,6 +873,8 @@
-                 this.appendEntityCrashDetails(crashreportsystemdetails);
-                 throw new ReportedException(crashreport);
-             }
-+            */
-+            // CraftBukkit end
- 
-             boolean flag1 = this.an();
- 
-@@ -702,7 +883,14 @@
-                 if (!flag1) {
-                     ++this.fireTicks;
-                     if (this.fireTicks == 0) {
--                        this.setOnFire(8);
-+                        // CraftBukkit start
-+                        EntityCombustEvent event = new org.bukkit.event.entity.EntityCombustByBlockEvent(null, getBukkitEntity(), 8);
-+                        world.getServer().getPluginManager().callEvent(event);
-+
-+                        if (!event.isCancelled()) {
-+                            this.setOnFire(event.getDuration());
-+                        }
-+                        // CraftBukkit end
-                     }
-                 }
-             } else if (this.fireTicks <= 0) {
-@@ -834,7 +1022,7 @@
-         return null;
-     }
- 
--    protected void burn(int i) {
-+    protected void burn(float i) { // CraftBukkit - int -> float
-         if (!this.fireProof) {
-             this.damageEntity(DamageSource.FIRE, (float) i);
-         }
-@@ -1008,6 +1196,13 @@
-     }
- 
-     public void spawnIn(World world) {
-+        // CraftBukkit start
-+        if (world == null) {
-+            die();
-+            this.world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
-+            return;
-+        }
-+        // CraftBukkit end
-         this.world = world;
-     }
- 
-@@ -1245,6 +1440,18 @@
-         try {
-             nbttagcompound.set("Pos", this.a(new double[] { this.locX, this.locY, this.locZ}));
-             nbttagcompound.set("Motion", this.a(new double[] { this.motX, this.motY, this.motZ}));
-+
-+            // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
-+            // TODO: make sure this is the best way to address this.
-+            if (Float.isNaN(this.yaw)) {
-+                this.yaw = 0;
-+            }
-+
-+            if (Float.isNaN(this.pitch)) {
-+                this.pitch = 0;
-+            }
-+            // CraftBukkit end
-+
-             nbttagcompound.set("Rotation", this.a(new float[] { this.yaw, this.pitch}));
-             nbttagcompound.setFloat("FallDistance", this.fallDistance);
-             nbttagcompound.setShort("Fire", (short) this.fireTicks);
-@@ -1254,6 +1461,12 @@
-             nbttagcompound.setBoolean("Invulnerable", this.invulnerable);
-             nbttagcompound.setInt("PortalCooldown", this.portalCooldown);
-             nbttagcompound.a("UUID", this.getUniqueID());
-+            // CraftBukkit start
-+            // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
-+            nbttagcompound.setLong("WorldUUIDLeast", this.world.getDataManager().getUUID().getLeastSignificantBits());
-+            nbttagcompound.setLong("WorldUUIDMost", this.world.getDataManager().getUUID().getMostSignificantBits());
-+            nbttagcompound.setInt("Bukkit.updateLevel", CURRENT_LEVEL);
-+            // CraftBukkit end
-             if (this.hasCustomName()) {
-                 nbttagcompound.setString("CustomName", this.getCustomName());
-             }
-@@ -1329,6 +1542,8 @@
-             this.motX = nbttaglist1.f(0);
-             this.motY = nbttaglist1.f(1);
-             this.motZ = nbttaglist1.f(2);
-+
-+            /* CraftBukkit start - Moved section down
-             if (Math.abs(this.motX) > 10.0D) {
-                 this.motX = 0.0D;
-             }
-@@ -1340,6 +1555,7 @@
-             if (Math.abs(this.motZ) > 10.0D) {
-                 this.motZ = 0.0D;
-             }
-+            // CraftBukkit end */
- 
-             this.locX = nbttaglist.f(0);
-             this.locY = nbttaglist.f(1);
-@@ -1397,6 +1613,58 @@
-                 this.setPosition(this.locX, this.locY, this.locZ);
-             }
- 
-+            // CraftBukkit start
-+            if (this instanceof EntityLiving) {
-+                EntityLiving entity = (EntityLiving) this;
-+
-+                // Reset the persistence for tamed animals
-+                if (entity instanceof EntityTameableAnimal && !isLevelAtLeast(nbttagcompound, 2) && !nbttagcompound.getBoolean("PersistenceRequired")) {
-+                    EntityInsentient entityinsentient = (EntityInsentient) entity;
-+                    entityinsentient.persistent = !entityinsentient.isTypeNotPersistent();
-+                }
-+            }
-+            // CraftBukkit end
-+
-+            // CraftBukkit start - Exempt Vehicles from notch's sanity check
-+            if (!(getBukkitEntity() instanceof Vehicle)) {
-+                if (Math.abs(this.motX) > 10.0D) {
-+                    this.motX = 0.0D;
-+                }
-+
-+                if (Math.abs(this.motY) > 10.0D) {
-+                    this.motY = 0.0D;
-+                }
-+
-+                if (Math.abs(this.motZ) > 10.0D) {
-+                    this.motZ = 0.0D;
-+                }
-+            }
-+            // CraftBukkit end
-+
-+            // CraftBukkit start - Reset world
-+            if (this instanceof EntityPlayer) {
-+                Server server = Bukkit.getServer();
-+                org.bukkit.World bworld = null;
-+
-+                // TODO: Remove World related checks, replaced with WorldUID
-+                String worldName = nbttagcompound.getString("world");
-+
-+                if (nbttagcompound.hasKey("WorldUUIDMost") && nbttagcompound.hasKey("WorldUUIDLeast")) {
-+                    UUID uid = new UUID(nbttagcompound.getLong("WorldUUIDMost"), nbttagcompound.getLong("WorldUUIDLeast"));
-+                    bworld = server.getWorld(uid);
-+                } else {
-+                    bworld = server.getWorld(worldName);
-+                }
-+
-+                if (bworld == null) {
-+                    EntityPlayer entityPlayer = (EntityPlayer) this;
-+                    bworld = ((org.bukkit.craftbukkit.CraftServer) server).getServer().getWorldServer(entityPlayer.dimension).getWorld();
-+                }
-+
-+                spawnIn(bworld == null? null : ((CraftWorld) bworld).getHandle());
-+            }
-+            // CraftBukkit end
-+
-         } catch (Throwable throwable) {
-             CrashReport crashreport = CrashReport.a(throwable, "Loading entity NBT");
-             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being loaded");
-@@ -1464,6 +1732,12 @@
-         if (itemstack.isEmpty()) {
-             return null;
-         } else {
-+            // CraftBukkit start - Capture drops for death event
-+            if (this instanceof EntityLiving && !((EntityLiving) this).forceDrops) {
-+                ((EntityLiving) this).drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack));
-+                return null;
-+            }
-+            // CraftBukkit end
-             EntityItem entityitem = new EntityItem(this.world, this.locX, this.locY + (double) f, this.locZ, itemstack);
- 
-             entityitem.q();
-@@ -1589,6 +1863,24 @@
-         if (entity.bJ() != this) {
-             throw new IllegalStateException("Use x.startRiding(y), not y.addPassenger(x)");
-         } else {
-+            // CraftBukkit start
-+            com.google.common.base.Preconditions.checkState(!entity.passengers.contains(this), "Circular entity riding! %s %s", this, entity);
-+
-+            CraftEntity craft = (CraftEntity) entity.getBukkitEntity().getVehicle();
-+            Entity orig = craft == null ? null : craft.getHandle();
-+            if (getBukkitEntity() instanceof Vehicle && entity.getBukkitEntity() instanceof LivingEntity && entity.world.isChunkLoaded((int) entity.locX >> 4, (int) entity.locZ >> 4, false)) { // Boolean not used
-+                VehicleEnterEvent event = new VehicleEnterEvent(
-+                        (Vehicle) getBukkitEntity(),
-+                         entity.getBukkitEntity()
-+                );
-+                Bukkit.getPluginManager().callEvent(event);
-+                CraftEntity craftn = (CraftEntity) entity.getBukkitEntity().getVehicle();
-+                Entity n = craftn == null ? null : craftn.getHandle();
-+                if (event.isCancelled() || n != orig) {
-+                    return;
-+                }
-+            }
-+            // CraftBukkit end
-             if (!this.world.isClientSide && entity instanceof EntityHuman && !(this.bE() instanceof EntityHuman)) {
-                 this.passengers.add(0, entity);
-             } else {
-@@ -1602,6 +1894,22 @@
-         if (entity.bJ() == this) {
-             throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
-         } else {
-+            // CraftBukkit start
-+            CraftEntity craft = (CraftEntity) entity.getBukkitEntity().getVehicle();
-+            Entity orig = craft == null ? null : craft.getHandle();
-+            if (getBukkitEntity() instanceof Vehicle && entity.getBukkitEntity() instanceof LivingEntity) {
-+                VehicleExitEvent event = new VehicleExitEvent(
-+                        (Vehicle) getBukkitEntity(),
-+                        (LivingEntity) entity.getBukkitEntity()
-+                );
-+                Bukkit.getPluginManager().callEvent(event);
-+                CraftEntity craftn = (CraftEntity) entity.getBukkitEntity().getVehicle();
-+                Entity n = craftn == null ? null : craftn.getHandle();
-+                if (event.isCancelled() || n != orig) {
-+                    return;
-+                }
-+            }
-+            // CraftBukkit end
-             this.passengers.remove(entity);
-             entity.j = 60;
-         }
-@@ -1741,14 +2049,49 @@
-     }
- 
-     public void setAirTicks(int i) {
--        this.datawatcher.set(Entity.aA, Integer.valueOf(i));
-+        // CraftBukkit start
-+        EntityAirChangeEvent event = new EntityAirChangeEvent(this.getBukkitEntity(), i);
-+        event.getEntity().getServer().getPluginManager().callEvent(event);
-+        if (event.isCancelled()) {
-+            return;
-+        }
-+        this.datawatcher.set(Entity.aA, Integer.valueOf(event.getAmount()));
-+        // CraftBukkit end
-     }
- 
-     public void onLightningStrike(EntityLightning entitylightning) {
--        this.damageEntity(DamageSource.LIGHTNING, 5.0F);
-+        // CraftBukkit start
-+        final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
-+        final org.bukkit.entity.Entity stormBukkitEntity = entitylightning.getBukkitEntity();
-+        final PluginManager pluginManager = Bukkit.getPluginManager();
-+
-+        if (thisBukkitEntity instanceof Hanging) {
-+            HangingBreakByEntityEvent hangingEvent = new HangingBreakByEntityEvent((Hanging) thisBukkitEntity, stormBukkitEntity);
-+            pluginManager.callEvent(hangingEvent);
-+
-+            if (hangingEvent.isCancelled()) {
-+                return;
-+            }
-+        }
-+
-+        if (this.fireProof) {
-+            return;
-+        }
-+        CraftEventFactory.entityDamage = entitylightning;
-+        if (!this.damageEntity(DamageSource.LIGHTNING, 5.0F)) {
-+            CraftEventFactory.entityDamage = null;
-+            return;
-+        }
-+        // CraftBukkit end
-         ++this.fireTicks;
-         if (this.fireTicks == 0) {
--            this.setOnFire(8);
-+            // CraftBukkit start - Call a combust event when lightning strikes
-+            EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
-+            pluginManager.callEvent(entityCombustEvent);
-+            if (!entityCombustEvent.isCancelled()) {
-+                this.setOnFire(entityCombustEvent.getDuration());
-+            }
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -1893,19 +2236,76 @@
-         if (!this.world.isClientSide && !this.dead) {
-             this.world.methodProfiler.a("changeDimension");
-             MinecraftServer minecraftserver = this.C_();
--            int j = this.dimension;
--            WorldServer worldserver = minecraftserver.getWorldServer(j);
--            WorldServer worldserver1 = minecraftserver.getWorldServer(i);
-+            // CraftBukkit start - Move logic into new function "teleportTo(Location,boolean)"
-+            // int j = this.dimension;
-+            // WorldServer worldserver = minecraftserver.getWorldServer(j);
-+            // WorldServer worldserver1 = minecraftserver.getWorldServer(i);
-+            WorldServer exitWorld = null;
-+            if (this.dimension < CraftWorld.CUSTOM_DIMENSION_OFFSET) { // Plugins must specify exit from custom Bukkit worlds
-+                // Only target existing worlds (compensate for allow-nether/allow-end as false)
-+                for (WorldServer world : minecraftserver.worlds) {
-+                    if (world.dimension == i) {
-+                        exitWorld = world;
-+                    }
-+                }
-+            }
-+
-+            BlockPosition blockposition = null; // PAIL: CHECK
-+            Location enter = this.getBukkitEntity().getLocation();
-+            Location exit;
-+            if (exitWorld != null) {
-+                if (blockposition != null) {
-+                    exit = new Location(exitWorld.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                } else {
-+                    exit = minecraftserver.getPlayerList().calculateTarget(enter, minecraftserver.getWorldServer(i));
-+                }
-+            }
-+            else {
-+                exit = null;
-+            }
-+            boolean useTravelAgent = exitWorld != null && !(this.dimension == 1 && exitWorld.dimension == 1); // don't use agent for custom worlds or return from THE_END
-+
-+            TravelAgent agent = exit != null ? (TravelAgent) ((CraftWorld) exit.getWorld()).getHandle().getTravelAgent() : org.bukkit.craftbukkit.CraftTravelAgent.DEFAULT; // return arbitrary TA to compensate for implementation dependent plugins
-+            boolean oldCanCreate = agent.getCanCreatePortal();
-+            agent.setCanCreatePortal(false); // General entities cannot create portals
-+
-+            EntityPortalEvent event = new EntityPortalEvent(this.getBukkitEntity(), enter, exit, agent);
-+            event.useTravelAgent(useTravelAgent);
-+            event.getEntity().getServer().getPluginManager().callEvent(event);
-+            if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !this.isAlive()) {
-+                agent.setCanCreatePortal(oldCanCreate);
-+                return null;
-+            }
-+            exit = event.useTravelAgent() ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo();
-+            agent.setCanCreatePortal(oldCanCreate);
-+
-+            // Need to make sure the profiler state is reset afterwards (but we still want to time the call)
-+            Entity entity = this.teleportTo(exit, true);
-+            this.world.methodProfiler.b();
-+            return entity;
-+        }
-+        return null;
-+    }
-+
-+    public Entity teleportTo(Location exit, boolean portal) {
-+        if (true) {
-+            WorldServer worldserver = ((CraftWorld) getBukkitEntity().getLocation().getWorld()).getHandle();
-+            WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
-+            int i = worldserver1.dimension;
-+            // CraftBukkit end
- 
-             this.dimension = i;
-+            /* CraftBukkit start - TODO: Check if we need this
-             if (j == 1 && i == 1) {
-                 worldserver1 = minecraftserver.getWorldServer(0);
-                 this.dimension = 0;
-             }
-+            // CraftBukkit end */
- 
-             this.world.kill(this);
-             this.dead = false;
-             this.world.methodProfiler.a("reposition");
-+            /* CraftBukkit start - Handled in calculateTarget
-             BlockPosition blockposition;
- 
-             if (i == 1) {
-@@ -1934,12 +2334,18 @@
-                 blockposition = new BlockPosition(this);
-             }
- 
--            worldserver.entityJoinedWorld(this, false);
-+            // CraftBukkit end */
-+            // CraftBukkit start - Ensure chunks are loaded in case TravelAgent is not used which would initially cause chunks to load during find/create
-+            // minecraftserver.getPlayerList().changeWorld(this, j, worldserver, worldserver1);
-+            worldserver1.getMinecraftServer().getPlayerList().repositionEntity(this, exit, portal);
-+            // worldserver.entityJoinedWorld(this, false); // Handled in repositionEntity
-+            // CraftBukkit end
-             this.world.methodProfiler.c("reloading");
-             Entity entity = EntityTypes.a(this.getClass(), (World) worldserver1);
- 
-             if (entity != null) {
-                 entity.a(this);
-+                /* CraftBukkit start - We need to do this...
-                 if (j == 1 && i == 1) {
-                     BlockPosition blockposition1 = worldserver1.q(worldserver1.getSpawn());
- 
-@@ -1947,6 +2353,7 @@
-                 } else {
-                     entity.setPositionRotation(blockposition, entity.yaw, entity.pitch);
-                 }
-+                // CraftBukkit end */
- 
-                 boolean flag = entity.attachedToPlayer;
- 
-@@ -1954,13 +2361,21 @@
-                 worldserver1.addEntity(entity);
-                 entity.attachedToPlayer = flag;
-                 worldserver1.entityJoinedWorld(entity, false);
-+                // CraftBukkit start - Forward the CraftEntity to the new entity
-+                this.getBukkitEntity().setHandle(entity);
-+                entity.bukkitEntity = this.getBukkitEntity();
-+
-+                if (this instanceof EntityInsentient) {
-+                    ((EntityInsentient)this).unleash(true, false); // Unleash to prevent duping of leads.
-+                }
-+                // CraftBukkit end
-             }
- 
-             this.dead = true;
-             this.world.methodProfiler.b();
-             worldserver.m();
-             worldserver1.m();
--            this.world.methodProfiler.b();
-+            // this.world.methodProfiler.b(); // CraftBukkit: Moved up to keep balanced
-             return entity;
-         } else {
-             return null;
-@@ -2064,6 +2479,11 @@
-     }
- 
-     public void setCustomName(String s) {
-+        // CraftBukkit start - Add a sane limit for name length
-+        if (s.length() > 256) {
-+            s = s.substring(0, 256);
-+        }
-+        // CraftBukkit end
-         this.datawatcher.set(Entity.aB, s);
-     }
- 
-@@ -2121,7 +2541,26 @@
-     }
- 
-     public void a(AxisAlignedBB axisalignedbb) {
--        this.boundingBox = axisalignedbb;
-+        // CraftBukkit start - block invalid bounding boxes
-+        double a = axisalignedbb.a,
-+                b = axisalignedbb.b,
-+                c = axisalignedbb.c,
-+                d = axisalignedbb.d,
-+                e = axisalignedbb.e,
-+                f = axisalignedbb.f;
-+        double len = axisalignedbb.d - axisalignedbb.a;
-+        if (len < 0) d = a;
-+        if (len > 64) d = a + 64.0;
-+
-+        len = axisalignedbb.e - axisalignedbb.b;
-+        if (len < 0) e = b;
-+        if (len > 64) e = b + 64.0;
-+
-+        len = axisalignedbb.f - axisalignedbb.c;
-+        if (len < 0) f = c;
-+        if (len > 64) f = c + 64.0;
-+        this.boundingBox = new AxisAlignedBB(a, b, c, d, e, f);
-+        // CraftBukkit end
-     }
- 
-     public float getHeadHeight() {
-@@ -2295,7 +2734,7 @@
-         for (Iterator iterator = this.bF().iterator(); iterator.hasNext(); entity.a(oclass, set)) {
-             entity = (Entity) iterator.next();
-             if (oclass.isAssignableFrom(entity.getClass())) {
--                set.add(entity);
-+                set.add((T) entity); // CraftBukkit - decompile error
-             }
-         }
- 
diff --git a/nms-patches/EntityAgeable.patch b/nms-patches/EntityAgeable.patch
deleted file mode 100644
index 5800328..0000000
--- a/nms-patches/EntityAgeable.patch
+++ /dev/null
@@ -1,43 +0,0 @@
---- a/net/minecraft/server/EntityAgeable.java
-+++ b/net/minecraft/server/EntityAgeable.java
-@@ -10,6 +10,7 @@
-     protected int c;
-     private float by = -1.0F;
-     private float bz;
-+    public boolean ageLocked; // CraftBukkit
- 
-     public EntityAgeable(World world) {
-         super(world);
-@@ -31,7 +32,7 @@
-                     if (entityageable != null) {
-                         entityageable.setAgeRaw(-24000);
-                         entityageable.setPositionRotation(this.locX, this.locY, this.locZ, 0.0F, 0.0F);
--                        this.world.addEntity(entityageable);
-+                        this.world.addEntity(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG); // CraftBukkit
-                         if (itemstack.hasName()) {
-                             entityageable.setCustomName(itemstack.getName());
-                         }
-@@ -110,12 +111,14 @@
-         super.b(nbttagcompound);
-         nbttagcompound.setInt("Age", this.getAge());
-         nbttagcompound.setInt("ForcedAge", this.b);
-+        nbttagcompound.setBoolean("AgeLocked", this.ageLocked); // CraftBukkit
-     }
- 
-     public void a(NBTTagCompound nbttagcompound) {
-         super.a(nbttagcompound);
-         this.setAgeRaw(nbttagcompound.getInt("Age"));
-         this.b = nbttagcompound.getInt("ForcedAge");
-+        this.ageLocked = nbttagcompound.getBoolean("AgeLocked"); // CraftBukkit
-     }
- 
-     public void a(DataWatcherObject<?> datawatcherobject) {
-@@ -128,7 +131,7 @@
- 
-     public void n() {
-         super.n();
--        if (this.world.isClientSide) {
-+        if (this.world.isClientSide || ageLocked) { // CraftBukkit
-             if (this.c > 0) {
-                 if (this.c % 4 == 0) {
-                     this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
diff --git a/nms-patches/EntityAnimal.patch b/nms-patches/EntityAnimal.patch
deleted file mode 100644
index 80469e6..0000000
--- a/nms-patches/EntityAnimal.patch
+++ /dev/null
@@ -1,36 +0,0 @@
---- a/net/minecraft/server/EntityAnimal.java
-+++ b/net/minecraft/server/EntityAnimal.java
-@@ -8,6 +8,7 @@
-     protected Block bA;
-     private int bx;
-     private UUID by;
-+    public ItemStack breedItem; // CraftBukkit - Add breedItem variable
- 
-     public EntityAnimal(World world) {
-         super(world);
-@@ -41,6 +42,9 @@
- 
-     }
- 
-+    /* CraftBukkit start
-+    // Function disabled as it has no special function anymore after
-+    // setSitting is disabled.
-     public boolean damageEntity(DamageSource damagesource, float f) {
-         if (this.isInvulnerable(damagesource)) {
-             return false;
-@@ -49,6 +53,7 @@
-             return super.damageEntity(damagesource, f);
-         }
-     }
-+    // CraftBukkit end */
- 
-     public float a(BlockPosition blockposition) {
-         return this.world.getType(blockposition.down()).getBlock() == this.bA ? 10.0F : this.world.n(blockposition) - 0.5F;
-@@ -130,6 +135,7 @@
-         if (entityhuman != null) {
-             this.by = entityhuman.getUniqueID();
-         }
-+        this.breedItem = entityhuman.inventory.getItemInHand(); // CraftBukkit
- 
-         this.world.broadcastEntityEffect(this, (byte) 18);
-     }
diff --git a/nms-patches/EntityAreaEffectCloud.patch b/nms-patches/EntityAreaEffectCloud.patch
deleted file mode 100644
index c5009a5..0000000
--- a/nms-patches/EntityAreaEffectCloud.patch
+++ /dev/null
@@ -1,62 +0,0 @@
---- a/net/minecraft/server/EntityAreaEffectCloud.java
-+++ b/net/minecraft/server/EntityAreaEffectCloud.java
-@@ -8,6 +8,10 @@
- import java.util.List;
- import java.util.Map;
- import java.util.UUID;
-+
-+import org.bukkit.craftbukkit.entity.CraftLivingEntity; // CraftBukkit
-+import org.bukkit.entity.LivingEntity; // CraftBukkit
-+
- import java.util.Map.Entry;
- import javax.annotation.Nullable;
- 
-@@ -101,6 +105,22 @@
- 
-     }
- 
-+    // CraftBukkit start accessor methods
-+    public void refreshEffects() {
-+        if (!this.hasColor) {
-+            this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects)))); // PAIL: rename
-+        }
-+    }
-+
-+    public String getType() {
-+        return ((MinecraftKey) PotionRegistry.a.b(this.potionRegistry)).toString(); // PAIL: rename
-+    }
-+
-+    public void setType(String string) {
-+        a(PotionRegistry.a.get(new MinecraftKey(string))); // PAIL: rename
-+    }
-+    // CraftBukkit end
-+
-     public int getColor() {
-         return ((Integer) this.getDataWatcher().get(EntityAreaEffectCloud.b)).intValue();
-     }
-@@ -270,6 +290,7 @@
-                     if (!list.isEmpty()) {
-                         Iterator iterator2 = list.iterator();
- 
-+                        List<LivingEntity> entities = new ArrayList<LivingEntity>(); // CraftBukkit
-                         while (iterator2.hasNext()) {
-                             EntityLiving entityliving = (EntityLiving) iterator2.next();
- 
-@@ -279,6 +300,17 @@
-                                 double d2 = d0 * d0 + d1 * d1;
- 
-                                 if (d2 <= (double) (f * f)) {
-+                                    // CraftBukkit start
-+                                    entities.add((LivingEntity) entityliving.getBukkitEntity());
-+                                }
-+                            }
-+                        }
-+                        org.bukkit.event.entity.AreaEffectCloudApplyEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callAreaEffectCloudApplyEvent(this, entities);
-+                        if (true) { // Preserve NMS spacing and bracket count for smallest diff
-+                            for (LivingEntity entity : event.getAffectedEntities()) {
-+                                if (entity instanceof CraftLivingEntity) {
-+                                    EntityLiving entityliving = ((CraftLivingEntity) entity).getHandle();
-+                                    // CraftBukkit end
-                                     this.at.put(entityliving, Integer.valueOf(this.ticksLived + this.reapplicationDelay));
-                                     Iterator iterator3 = arraylist.iterator();
- 
diff --git a/nms-patches/EntityArmorStand.patch b/nms-patches/EntityArmorStand.patch
deleted file mode 100644
index b89cca7..0000000
--- a/nms-patches/EntityArmorStand.patch
+++ /dev/null
@@ -1,124 +0,0 @@
---- a/net/minecraft/server/EntityArmorStand.java
-+++ b/net/minecraft/server/EntityArmorStand.java
-@@ -5,6 +5,15 @@
- import java.util.List;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.inventory.EquipmentSlot;
-+import org.bukkit.craftbukkit.CraftEquipmentSlot;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.entity.ArmorStand;
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
-+// CraftBukkit end
-+
- public class EntityArmorStand extends EntityLiving {
- 
-     private static final Vector3f br = new Vector3f(0.0F, 0.0F, 0.0F);
-@@ -364,6 +373,21 @@
-         if (itemstack1.isEmpty() || (this.bB & 1 << enumitemslot.c() + 8) == 0) {
-             if (!itemstack1.isEmpty() || (this.bB & 1 << enumitemslot.c() + 16) == 0) {
-                 ItemStack itemstack2;
-+                // CraftBukkit start
-+                org.bukkit.inventory.ItemStack armorStandItem = CraftItemStack.asCraftMirror(itemstack1);
-+                org.bukkit.inventory.ItemStack playerHeldItem = CraftItemStack.asCraftMirror(itemstack);
-+
-+                Player player = (Player) entityhuman.getBukkitEntity();
-+                ArmorStand self = (ArmorStand) this.getBukkitEntity();
-+
-+                EquipmentSlot slot = CraftEquipmentSlot.getSlot(enumitemslot);
-+                PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player,self,playerHeldItem,armorStandItem,slot);
-+                this.world.getServer().getPluginManager().callEvent(armorStandManipulateEvent);
-+
-+                if (armorStandManipulateEvent.isCancelled()) {
-+                    return;
-+                }
-+                // CraftBukkit end
- 
-                 if (entityhuman.abilities.canInstantlyBuild && itemstack1.isEmpty() && !itemstack.isEmpty()) {
-                     itemstack2 = itemstack.cloneItemStack();
-@@ -385,14 +409,19 @@
-     }
- 
-     public boolean damageEntity(DamageSource damagesource, float f) {
-+        // CraftBukkit start
-+        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
-+            return false;
-+        }
-+        // CraftBukkit end
-         if (!this.world.isClientSide && !this.dead) {
-             if (DamageSource.OUT_OF_WORLD.equals(damagesource)) {
--                this.die();
-+                this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
-                 return false;
-             } else if (!this.isInvulnerable(damagesource) && !this.bA && !this.isMarker()) {
-                 if (damagesource.isExplosion()) {
-                     this.F();
--                    this.die();
-+                    this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
-                     return false;
-                 } else if (DamageSource.FIRE.equals(damagesource)) {
-                     if (this.isBurning()) {
-@@ -421,7 +450,7 @@
-                         } else if (damagesource.u()) {
-                             this.H();
-                             this.D();
--                            this.die();
-+                            this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
-                             return false;
-                         } else {
-                             long i = this.world.getTime();
-@@ -432,7 +461,7 @@
-                             } else {
-                                 this.E();
-                                 this.D();
--                                this.die();
-+                                this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
-                             }
- 
-                             return false;
-@@ -460,7 +489,7 @@
-         f1 -= f;
-         if (f1 <= 0.5F) {
-             this.F();
--            this.die();
-+            this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
-         } else {
-             this.setHealth(f1);
-         }
-@@ -468,7 +497,7 @@
-     }
- 
-     private void E() {
--        Block.a(this.world, new BlockPosition(this), new ItemStack(Items.ARMOR_STAND));
-+        drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(new ItemStack(Items.ARMOR_STAND))); // CraftBukkit - add to drops
-         this.F();
-     }
- 
-@@ -481,7 +510,7 @@
-         for (i = 0; i < this.by.size(); ++i) {
-             itemstack = (ItemStack) this.by.get(i);
-             if (!itemstack.isEmpty()) {
--                Block.a(this.world, (new BlockPosition(this)).up(), itemstack);
-+                drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack)); // CraftBukkit - add to drops
-                 this.by.set(i, ItemStack.a);
-             }
-         }
-@@ -489,7 +518,7 @@
-         for (i = 0; i < this.bz.size(); ++i) {
-             itemstack = (ItemStack) this.bz.get(i);
-             if (!itemstack.isEmpty()) {
--                Block.a(this.world, (new BlockPosition(this)).up(), itemstack);
-+                drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack)); // CraftBukkit - add to drops
-                 this.bz.set(i, ItemStack.a);
-             }
-         }
-@@ -601,6 +630,7 @@
-     }
- 
-     public void killEntity() {
-+        org.bukkit.craftbukkit.event.CraftEventFactory.callEntityDeathEvent(this, drops); // CraftBukkit - call event
-         this.die();
-     }
- 
diff --git a/nms-patches/EntityArrow.patch b/nms-patches/EntityArrow.patch
deleted file mode 100644
index 8da69dc..0000000
--- a/nms-patches/EntityArrow.patch
+++ /dev/null
@@ -1,88 +0,0 @@
---- a/net/minecraft/server/EntityArrow.java
-+++ b/net/minecraft/server/EntityArrow.java
-@@ -5,6 +5,13 @@
- import java.util.List;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.entity.LivingEntity;
-+import org.bukkit.event.entity.EntityCombustByEntityEvent;
-+import org.bukkit.event.entity.EntityCombustEvent;
-+import org.bukkit.event.player.PlayerPickupArrowEvent;
-+// CraftBukkit end
-+
- public abstract class EntityArrow extends Entity implements IProjectile {
- 
-     private static final Predicate<Entity> f = Predicates.and(new Predicate[] { IEntitySelector.e, IEntitySelector.a, new Predicate() {
-@@ -50,6 +57,7 @@
-     public EntityArrow(World world, EntityLiving entityliving) {
-         this(world, entityliving.locX, entityliving.locY + (double) entityliving.getHeadHeight() - 0.10000000149011612D, entityliving.locZ);
-         this.shooter = entityliving;
-+        this.projectileSource = (LivingEntity) entityliving.getBukkitEntity(); // CraftBukkit
-         if (entityliving instanceof EntityHuman) {
-             this.fromPlayer = EntityArrow.PickupStatus.ALLOWED;
-         }
-@@ -236,7 +244,7 @@
- 
-     protected void a(MovingObjectPosition movingobjectposition) {
-         Entity entity = movingobjectposition.entity;
--
-+        org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition); // CraftBukkit - Call event
-         if (entity != null) {
-             float f = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
-             int i = MathHelper.f((double) f * this.damage);
-@@ -254,7 +262,13 @@
-             }
- 
-             if (this.isBurning() && !(entity instanceof EntityEnderman)) {
--                entity.setOnFire(5);
-+                // CraftBukkit start
-+                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
-+                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
-+                if (!combustEvent.isCancelled()) {
-+                    entity.setOnFire(combustEvent.getDuration());
-+                }
-+                // CraftBukkit end
-             }
- 
-             if (entity.damageEntity(damagesource, (float) i)) {
-@@ -422,9 +436,22 @@
- 
-     public void d(EntityHuman entityhuman) {
-         if (!this.world.isClientSide && this.inGround && this.shake <= 0) {
-+            // CraftBukkit start
-+            ItemStack itemstack = this.j(); // PAIL: rename
-+            EntityItem item = new EntityItem(this.world, this.locX, this.locY, this.locZ, itemstack);
-+            if (this.fromPlayer == PickupStatus.ALLOWED && entityhuman.inventory.canHold(itemstack) > 0) {
-+                PlayerPickupArrowEvent event = new PlayerPickupArrowEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), new org.bukkit.craftbukkit.entity.CraftItem(this.world.getServer(), this, item), (org.bukkit.entity.Arrow) this.getBukkitEntity());
-+                // event.setCancelled(!entityhuman.canPickUpLoot); TODO
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    return;
-+                }
-+            }
-             boolean flag = this.fromPlayer == EntityArrow.PickupStatus.ALLOWED || this.fromPlayer == EntityArrow.PickupStatus.CREATIVE_ONLY && entityhuman.abilities.canInstantlyBuild;
- 
--            if (this.fromPlayer == EntityArrow.PickupStatus.ALLOWED && !entityhuman.inventory.pickup(this.j())) {
-+            if (this.fromPlayer == EntityArrow.PickupStatus.ALLOWED && !entityhuman.inventory.pickup(item.getItemStack())) {
-+                // CraftBukkit end
-                 flag = false;
-             }
- 
-@@ -493,7 +520,14 @@
-         }
- 
-         if (EnchantmentManager.a(Enchantments.ARROW_FIRE, entityliving) > 0) {
--            this.setOnFire(100);
-+            // CraftBukkit start - call EntityCombustEvent
-+            EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 100);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (!event.isCancelled()) {
-+                this.setOnFire(event.getDuration());
-+            }
-+            // CraftBukkit end
-         }
- 
-     }
diff --git a/nms-patches/EntityBoat.patch b/nms-patches/EntityBoat.patch
deleted file mode 100644
index e322502..0000000
--- a/nms-patches/EntityBoat.patch
+++ /dev/null
@@ -1,154 +0,0 @@
---- a/net/minecraft/server/EntityBoat.java
-+++ b/net/minecraft/server/EntityBoat.java
-@@ -5,6 +5,15 @@
- import java.util.List;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.Location;
-+import org.bukkit.entity.Vehicle;
-+import org.bukkit.event.vehicle.VehicleDamageEvent;
-+import org.bukkit.event.vehicle.VehicleDestroyEvent;
-+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
-+import org.bukkit.event.vehicle.VehicleMoveEvent;
-+// CraftBukkit end
-+
- public class EntityBoat extends Entity {
- 
-     private static final DataWatcherObject<Integer> a = DataWatcher.a(EntityBoat.class, DataWatcherRegistry.b);
-@@ -32,6 +41,14 @@
-     private EntityBoat.EnumStatus aH;
-     private double aI;
- 
-+    // CraftBukkit start
-+    // PAIL: Some of these haven't worked since a few updates, and since 1.9 they are less and less applicable.
-+    public double maxSpeed = 0.4D;
-+    public double occupiedDeceleration = 0.2D;
-+    public double unoccupiedDeceleration = -1;
-+    public boolean landBoats = false;
-+    // CraftBukkit end
-+
-     public EntityBoat(World world) {
-         super(world);
-         this.f = new float[2];
-@@ -95,6 +112,19 @@
-             if (damagesource instanceof EntityDamageSourceIndirect && damagesource.getEntity() != null && this.w(damagesource.getEntity())) {
-                 return false;
-             } else {
-+                // CraftBukkit start
-+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
-+                org.bukkit.entity.Entity attacker = (damagesource.getEntity() == null) ? null : damagesource.getEntity().getBukkitEntity();
-+
-+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) f);
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    return true;
-+                }
-+                // f = event.getDamage(); // TODO Why don't we do this?
-+                // CraftBukkit end
-+
-                 this.d(-this.r());
-                 this.c(10);
-                 this.setDamage(this.p() + f * 10.0F);
-@@ -102,6 +132,15 @@
-                 boolean flag = damagesource.getEntity() instanceof EntityHuman && ((EntityHuman) damagesource.getEntity()).abilities.canInstantlyBuild;
- 
-                 if (flag || this.p() > 40.0F) {
-+                    // CraftBukkit start
-+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, attacker);
-+                    this.world.getServer().getPluginManager().callEvent(destroyEvent);
-+
-+                    if (destroyEvent.isCancelled()) {
-+                        this.setDamage(40F); // Maximize damage so this doesn't get triggered again right away
-+                        return true;
-+                    }
-+                    // CraftBukkit end
-                     if (!flag && this.world.getGameRules().getBoolean("doEntityDrops")) {
-                         this.a(this.j(), 1, 0.0F);
-                     }
-@@ -119,9 +158,25 @@
-     public void collide(Entity entity) {
-         if (entity instanceof EntityBoat) {
-             if (entity.getBoundingBox().b < this.getBoundingBox().e) {
-+                // CraftBukkit start
-+                VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entity.getBukkitEntity());
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 super.collide(entity);
-             }
-         } else if (entity.getBoundingBox().b <= this.getBoundingBox().b) {
-+            // CraftBukkit start
-+            VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entity.getBukkitEntity());
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-             super.collide(entity);
-         }
- 
-@@ -158,6 +213,7 @@
-         return this.getDirection().e();
-     }
- 
-+    private Location lastLocation; // CraftBukkit
-     public void B_() {
-         this.aH = this.aG;
-         this.aG = this.u();
-@@ -178,7 +234,6 @@
-         if (this.p() > 0.0F) {
-             this.setDamage(this.p() - 1.0F);
-         }
--
-         this.lastX = this.locX;
-         this.lastY = this.locY;
-         this.lastZ = this.locZ;
-@@ -202,6 +257,22 @@
-             this.motZ = 0.0D;
-         }
- 
-+        // CraftBukkit start
-+        org.bukkit.Server server = this.world.getServer();
-+        org.bukkit.World bworld = this.world.getWorld();
-+
-+        Location to = new Location(bworld, this.locX, this.locY, this.locZ, this.yaw, this.pitch);
-+        Vehicle vehicle = (Vehicle) this.getBukkitEntity();
-+
-+        server.getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
-+
-+        if (lastLocation != null && !lastLocation.equals(to)) {
-+            VehicleMoveEvent event = new VehicleMoveEvent(vehicle, lastLocation, to);
-+            server.getPluginManager().callEvent(event);
-+        }
-+        lastLocation = vehicle.getLocation();
-+        // CraftBukkit end
-+
-         for (int i = 0; i <= 1; ++i) {
-             if (this.a(i)) {
-                 if (!this.isSilent() && (double) (this.f[i] % 6.2831855F) <= 0.7853981852531433D && ((double) this.f[i] + 0.39269909262657166D) % 6.2831854820251465D >= 0.7853981852531433D) {
-@@ -622,6 +693,11 @@
- 
-                     this.e(this.fallDistance, 1.0F);
-                     if (!this.world.isClientSide && !this.dead) {
-+                    // CraftBukkit start
-+                    Vehicle vehicle = (Vehicle) this.getBukkitEntity();
-+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, null);
-+                    this.world.getServer().getPluginManager().callEvent(destroyEvent);
-+                    if (!destroyEvent.isCancelled()) {
-                         this.die();
-                         if (this.world.getGameRules().getBoolean("doEntityDrops")) {
-                             int i;
-@@ -635,6 +711,7 @@
-                             }
-                         }
-                     }
-+                    } // CraftBukkit end
-                 }
- 
-                 this.fallDistance = 0.0F;
diff --git a/nms-patches/EntityChicken.patch b/nms-patches/EntityChicken.patch
deleted file mode 100644
index d98f010..0000000
--- a/nms-patches/EntityChicken.patch
+++ /dev/null
@@ -1,24 +0,0 @@
---- a/net/minecraft/server/EntityChicken.java
-+++ b/net/minecraft/server/EntityChicken.java
-@@ -44,6 +44,11 @@
-     }
- 
-     public void n() {
-+        // CraftBukkit start
-+        if (this.isChickenJockey()) {
-+            this.persistent = !this.isTypeNotPersistent();
-+        }
-+        // CraftBukkit end
-         super.n();
-         this.bB = this.bx;
-         this.bz = this.by;
-@@ -61,7 +66,9 @@
-         this.bx += this.bC * 2.0F;
-         if (!this.world.isClientSide && !this.isBaby() && !this.isChickenJockey() && --this.bD <= 0) {
-             this.a(SoundEffects.af, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
-+            this.forceDrops = true; // CraftBukkit
-             this.a(Items.EGG, 1);
-+            this.forceDrops = false; // CraftBukkit
-             this.bD = this.random.nextInt(6000) + 6000;
-         }
- 
diff --git a/nms-patches/EntityCow.patch b/nms-patches/EntityCow.patch
deleted file mode 100644
index a69a075..0000000
--- a/nms-patches/EntityCow.patch
+++ /dev/null
@@ -1,40 +0,0 @@
---- a/net/minecraft/server/EntityCow.java
-+++ b/net/minecraft/server/EntityCow.java
-@@ -1,6 +1,10 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+// CraftBukkit end
- 
- public class EntityCow extends EntityAnimal {
- 
-@@ -59,13 +63,23 @@
-         ItemStack itemstack = entityhuman.b(enumhand);
- 
-         if (itemstack.getItem() == Items.BUCKET && !entityhuman.abilities.canInstantlyBuild && !this.isBaby()) {
-+            // CraftBukkit start - Got milk?
-+            org.bukkit.Location loc = this.getBukkitEntity().getLocation();
-+            org.bukkit.event.player.PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), null, itemstack, Items.MILK_BUCKET);
-+
-+            if (event.isCancelled()) {
-+                return false;
-+            }
-+
-+            ItemStack result = CraftItemStack.asNMSCopy(event.getItemStack());
-             entityhuman.a(SoundEffects.au, 1.0F, 1.0F);
-             itemstack.subtract(1);
-             if (itemstack.isEmpty()) {
--                entityhuman.a(enumhand, new ItemStack(Items.MILK_BUCKET));
--            } else if (!entityhuman.inventory.pickup(new ItemStack(Items.MILK_BUCKET))) {
--                entityhuman.drop(new ItemStack(Items.MILK_BUCKET), false);
-+                entityhuman.a(enumhand, result);
-+            } else if (!entityhuman.inventory.pickup(result)) {
-+                entityhuman.drop(result, false);
-             }
-+            // CraftBukkit end
- 
-             return true;
-         } else {
diff --git a/nms-patches/EntityCreature.patch b/nms-patches/EntityCreature.patch
deleted file mode 100644
index 7813c99..0000000
--- a/nms-patches/EntityCreature.patch
+++ /dev/null
@@ -1,29 +0,0 @@
---- a/net/minecraft/server/EntityCreature.java
-+++ b/net/minecraft/server/EntityCreature.java
-@@ -2,6 +2,10 @@
- 
- import java.util.UUID;
- 
-+// CraftBukkit start
-+import org.bukkit.event.entity.EntityUnleashEvent;
-+// CraftBukkit end
-+
- public abstract class EntityCreature extends EntityInsentient {
- 
-     public static final UUID bv = UUID.fromString("E199AD21-BA8A-4C53-8D13-6182D5C69D3A");
-@@ -68,6 +72,7 @@
- 
-             if (this instanceof EntityTameableAnimal && ((EntityTameableAnimal) this).isSitting()) {
-                 if (f > 10.0F) {
-+                    this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.DISTANCE)); // CraftBukkit
-                     this.unleash(true, true);
-                 }
- 
-@@ -76,6 +81,7 @@
- 
-             this.q(f);
-             if (f > 10.0F) {
-+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.DISTANCE)); // CraftBukkit
-                 this.unleash(true, true);
-                 this.goalSelector.c(1);
-             } else if (f > 6.0F) {
diff --git a/nms-patches/EntityCreeper.patch b/nms-patches/EntityCreeper.patch
deleted file mode 100644
index 5721057..0000000
--- a/nms-patches/EntityCreeper.patch
+++ /dev/null
@@ -1,82 +0,0 @@
---- a/net/minecraft/server/EntityCreeper.java
-+++ b/net/minecraft/server/EntityCreeper.java
-@@ -3,6 +3,10 @@
- import java.util.Collection;
- import java.util.Iterator;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.ExplosionPrimeEvent;
-+// CraftBukkit end
- 
- public class EntityCreeper extends EntityMonster {
- 
-@@ -125,7 +129,7 @@
-     }
- 
-     public void die(DamageSource damagesource) {
--        super.die(damagesource);
-+        // super.die(damagesource); // CraftBukkit - Moved to end
-         if (this.world.getGameRules().getBoolean("doMobLoot")) {
-             if (damagesource.getEntity() instanceof EntitySkeleton) {
-                 int i = Item.getId(Items.RECORD_13);
-@@ -138,6 +142,7 @@
-                 this.a(new ItemStack(Items.SKULL, 1, 4), 0.0F);
-             }
-         }
-+        super.die(damagesource); // CraftBukkit - Moved from above
- 
-     }
- 
-@@ -164,9 +169,19 @@
- 
-     public void onLightningStrike(EntityLightning entitylightning) {
-         super.onLightningStrike(entitylightning);
--        this.datawatcher.set(EntityCreeper.b, Boolean.valueOf(true));
-+        // CraftBukkit start
-+        if (CraftEventFactory.callCreeperPowerEvent(this, entitylightning, org.bukkit.event.entity.CreeperPowerEvent.PowerCause.LIGHTNING).isCancelled()) {
-+            return;
-+        }
-+
-+        this.setPowered(true);
-     }
- 
-+    public void setPowered(boolean powered) {
-+        this.datawatcher.set(EntityCreeper.b, powered);
-+    }
-+    // CraftBukkit end
-+
-     protected boolean a(EntityHuman entityhuman, EnumHand enumhand) {
-         ItemStack itemstack = entityhuman.b(enumhand);
- 
-@@ -188,10 +203,18 @@
-             boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
-             float f = this.isPowered() ? 2.0F : 1.0F;
- 
--            this.aU = true;
--            this.world.explode(this, this.locX, this.locY, this.locZ, (float) this.explosionRadius * f, flag);
--            this.die();
--            this.ds();
-+            // CraftBukkit start
-+            ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), this.explosionRadius * f, false);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+            if (!event.isCancelled()) {
-+                this.aU = true;
-+                this.world.createExplosion(this, this.locX, this.locY, this.locZ, event.getRadius(), event.getFire(), flag);
-+                this.die();
-+                this.ds();
-+            } else {
-+                fuseTicks = 0;
-+            }
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -202,6 +225,7 @@
-         if (!collection.isEmpty()) {
-             EntityAreaEffectCloud entityareaeffectcloud = new EntityAreaEffectCloud(this.world, this.locX, this.locY, this.locZ);
- 
-+            entityareaeffectcloud.setSource(this); // CraftBukkit
-             entityareaeffectcloud.setRadius(2.5F);
-             entityareaeffectcloud.setRadiusOnUse(-0.5F);
-             entityareaeffectcloud.setWaitTime(10);
diff --git a/nms-patches/EntityDamageSourceIndirect.patch b/nms-patches/EntityDamageSourceIndirect.patch
deleted file mode 100644
index 2bd5300..0000000
--- a/nms-patches/EntityDamageSourceIndirect.patch
+++ /dev/null
@@ -1,13 +0,0 @@
---- a/net/minecraft/server/EntityDamageSourceIndirect.java
-+++ b/net/minecraft/server/EntityDamageSourceIndirect.java
-@@ -29,4 +29,10 @@
- 
-         return !itemstack.isEmpty() && itemstack.hasName() && LocaleI18n.c(s1) ? new ChatMessage(s1, new Object[] { entityliving.getScoreboardDisplayName(), ichatbasecomponent, itemstack.C()}) : new ChatMessage(s, new Object[] { entityliving.getScoreboardDisplayName(), ichatbasecomponent});
-     }
-+
-+    // CraftBukkit start
-+    public Entity getProximateDamageSource() {
-+        return super.getEntity();
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/EntityEgg.patch b/nms-patches/EntityEgg.patch
deleted file mode 100644
index 314bd2f..0000000
--- a/nms-patches/EntityEgg.patch
+++ /dev/null
@@ -1,62 +0,0 @@
---- a/net/minecraft/server/EntityEgg.java
-+++ b/net/minecraft/server/EntityEgg.java
-@@ -1,5 +1,12 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.entity.Ageable;
-+import org.bukkit.entity.EntityType;
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.player.PlayerEggThrowEvent;
-+// CraftBukkit end
-+
- public class EntityEgg extends EntityProjectile {
- 
-     public EntityEgg(World world) {
-@@ -24,20 +31,40 @@
-         }
- 
-         if (!this.world.isClientSide) {
--            if (this.random.nextInt(8) == 0) {
-+            boolean hatching = this.random.nextInt(8) == 0; // CraftBukkit
-+            if (true) {
-                 byte b0 = 1;
- 
-                 if (this.random.nextInt(32) == 0) {
-                     b0 = 4;
-                 }
- 
--                for (int i = 0; i < b0; ++i) {
--                    EntityChicken entitychicken = new EntityChicken(this.world);
-+                // CraftBukkit start
-+                if (!hatching) {
-+                    b0 = 0;
-+                }
-+                EntityType hatchingType = EntityType.CHICKEN;
-+
-+                Entity shooter = this.getShooter();
-+                if (shooter instanceof EntityPlayer) {
-+                    PlayerEggThrowEvent event = new PlayerEggThrowEvent((Player) shooter.getBukkitEntity(), (org.bukkit.entity.Egg) this.getBukkitEntity(), hatching, b0, hatchingType);
-+                    this.world.getServer().getPluginManager().callEvent(event);
-+
-+                    b0 = event.getNumHatches();
-+                    hatching = event.isHatching();
-+                    hatchingType = event.getHatchingType();
-+                }
- 
--                    entitychicken.setAgeRaw(-24000);
--                    entitychicken.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, 0.0F);
--                    this.world.addEntity(entitychicken);
-+                if (hatching) {
-+                    for (int i = 0; i < b0; ++i) {
-+                        Entity entity = world.getWorld().createEntity(new org.bukkit.Location(world.getWorld(), this.locX, this.locY, this.locZ, this.yaw, 0.0F), hatchingType.getEntityClass());
-+                        if (entity.getBukkitEntity() instanceof Ageable) {
-+                            ((Ageable) entity.getBukkitEntity()).setBaby();
-+                        }
-+                        world.getWorld().addEntity(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.EGG);
-+                    }
-                 }
-+                // CraftBukkit end
-             }
- 
-             this.world.broadcastEntityEffect(this, (byte) 3);
diff --git a/nms-patches/EntityEnderCrystal.patch b/nms-patches/EntityEnderCrystal.patch
deleted file mode 100644
index e8fe828..0000000
--- a/nms-patches/EntityEnderCrystal.patch
+++ /dev/null
@@ -1,52 +0,0 @@
---- a/net/minecraft/server/EntityEnderCrystal.java
-+++ b/net/minecraft/server/EntityEnderCrystal.java
-@@ -3,6 +3,11 @@
- import com.google.common.base.Optional;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.ExplosionPrimeEvent;
-+// CraftBukkit end
-+
- public class EntityEnderCrystal extends Entity {
- 
-     private static final DataWatcherObject<Optional<BlockPosition>> b = DataWatcher.a(EntityEnderCrystal.class, DataWatcherRegistry.k);
-@@ -39,7 +44,11 @@
-             BlockPosition blockposition = new BlockPosition(this);
- 
-             if (this.world.worldProvider instanceof WorldProviderTheEnd && this.world.getType(blockposition).getBlock() != Blocks.FIRE) {
--                this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                // CraftBukkit start
-+                if (!CraftEventFactory.callBlockIgniteEvent(this.world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
-+                    this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                }
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -75,10 +84,23 @@
-             return false;
-         } else {
-             if (!this.dead && !this.world.isClientSide) {
-+                // CraftBukkit start - All non-living entities need this
-+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
-+                    return false;
-+                }
-+                // CraftBukkit end
-                 this.die();
-                 if (!this.world.isClientSide) {
-                     if (!damagesource.isExplosion()) {
--                        this.world.explode((Entity) null, this.locX, this.locY, this.locZ, 6.0F, true);
-+                        // CraftBukkit start
-+                        ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 6.0F, true);
-+                        this.world.getServer().getPluginManager().callEvent(event);
-+                        if (event.isCancelled()) {
-+                            this.dead = false;
-+                            return false;
-+                        }
-+                        this.world.explode(this, this.locX, this.locY, this.locZ, event.getRadius(), event.getFire());
-+                        // CraftBukkit end
-                     }
- 
-                     this.a(damagesource);
diff --git a/nms-patches/EntityEnderDragon.patch b/nms-patches/EntityEnderDragon.patch
deleted file mode 100644
index 6bfae17..0000000
--- a/nms-patches/EntityEnderDragon.patch
+++ /dev/null
@@ -1,114 +0,0 @@
---- a/net/minecraft/server/EntityEnderDragon.java
-+++ b/net/minecraft/server/EntityEnderDragon.java
-@@ -5,7 +5,12 @@
- import javax.annotation.Nullable;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
-+// CraftBukkit start
-+import org.bukkit.event.entity.EntityExplodeEvent;
-+import org.bukkit.event.entity.EntityRegainHealthEvent;
-+// CraftBukkit end
- 
-+// PAIL: Fixme
- public class EntityEnderDragon extends EntityInsentient implements IComplex, IMonster {
- 
-     private static final Logger bJ = LogManager.getLogger();
-@@ -33,6 +38,7 @@
-     private final PathPoint[] bO = new PathPoint[24];
-     private final int[] bP = new int[24];
-     private final Path bQ = new Path();
-+    private Explosion explosionSource = new Explosion(null, this, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, true); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
- 
-     public EntityEnderDragon(World world) {
-         super(world);
-@@ -171,7 +177,7 @@
- 
-                     Vec3D vec3d = idragoncontroller.g();
- 
--                    if (vec3d != null) {
-+                    if (vec3d != null && idragoncontroller.getControllerPhase() != DragonControllerPhase.k) { // CraftBukkit - Don't move when hovering // PAIL: rename
-                         d0 = vec3d.x - this.locX;
-                         d1 = vec3d.y - this.locY;
-                         d2 = vec3d.z - this.locZ;
-@@ -327,7 +333,14 @@
-             if (this.currentEnderCrystal.dead) {
-                 this.currentEnderCrystal = null;
-             } else if (this.ticksLived % 10 == 0 && this.getHealth() < this.getMaxHealth()) {
--                this.setHealth(this.getHealth() + 1.0F);
-+                // CraftBukkit start
-+                EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), 1.0F, EntityRegainHealthEvent.RegainReason.ENDER_CRYSTAL);
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (!event.isCancelled()) {
-+                    this.setHealth((float) (this.getHealth() + event.getAmount()));
-+                }
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -400,6 +413,10 @@
-         int j1 = MathHelper.floor(axisalignedbb.f);
-         boolean flag = false;
-         boolean flag1 = false;
-+        // CraftBukkit start - Create a list to hold all the destroyed blocks
-+        List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<org.bukkit.block.Block>();
-+        org.bukkit.craftbukkit.CraftWorld craftWorld = this.world.getWorld();
-+        // CraftBukkit end
- 
-         for (int k1 = i; k1 <= l; ++k1) {
-             for (int l1 = j; l1 <= i1; ++l1) {
-@@ -413,7 +430,11 @@
-                             flag = true;
-                         } else if (block != Blocks.BARRIER && block != Blocks.OBSIDIAN && block != Blocks.END_STONE && block != Blocks.BEDROCK && block != Blocks.END_PORTAL && block != Blocks.END_PORTAL_FRAME) {
-                             if (block != Blocks.COMMAND_BLOCK && block != Blocks.dc && block != Blocks.dd && block != Blocks.IRON_BARS && block != Blocks.END_GATEWAY) {
--                                flag1 = this.world.setAir(blockposition) || flag1;
-+                                // CraftBukkit start - Add blocks to list rather than destroying them
-+                                // flag1 = this.world.setAir(blockposition) || flag1;
-+                                flag1 = true;
-+                                destroyedBlocks.add(craftWorld.getBlockAt(k1, l1, i2));
-+                                // CraftBukkit end
-                             } else {
-                                 flag = true;
-                             }
-@@ -425,6 +446,41 @@
-             }
-         }
- 
-+        // CraftBukkit start - Set off an EntityExplodeEvent for the dragon exploding all these blocks
-+        org.bukkit.entity.Entity bukkitEntity = this.getBukkitEntity();
-+        EntityExplodeEvent event = new EntityExplodeEvent(bukkitEntity, bukkitEntity.getLocation(), destroyedBlocks, 0F);
-+        bukkitEntity.getServer().getPluginManager().callEvent(event);
-+        if (event.isCancelled()) {
-+            // This flag literally means 'Dragon hit something hard' (Obsidian, White Stone or Bedrock) and will cause the dragon to slow down.
-+            // We should consider adding an event extension for it, or perhaps returning true if the event is cancelled.
-+            return flag;
-+        } else if (event.getYield() == 0F) {
-+            // Yield zero ==> no drops
-+            for (org.bukkit.block.Block block : event.blockList()) {
-+                this.world.setAir(new BlockPosition(block.getX(), block.getY(), block.getZ()));
-+            }
-+        } else {
-+            for (org.bukkit.block.Block block : event.blockList()) {
-+                org.bukkit.Material blockId = block.getType();
-+                if (blockId == org.bukkit.Material.AIR) {
-+                    continue;
-+                }
-+
-+                int blockX = block.getX();
-+                int blockY = block.getY();
-+                int blockZ = block.getZ();
-+
-+                Block nmsBlock = org.bukkit.craftbukkit.util.CraftMagicNumbers.getBlock(blockId);
-+                if (nmsBlock.a(explosionSource)) {
-+                    nmsBlock.dropNaturally(this.world, new BlockPosition(blockX, blockY, blockZ), nmsBlock.fromLegacyData(block.getData()), event.getYield(), 0);
-+                }
-+                nmsBlock.wasExploded(world, new BlockPosition(blockX, blockY, blockZ), explosionSource);
-+
-+                this.world.setAir(new BlockPosition(blockX, blockY, blockZ));
-+            }
-+        }
-+        // CraftBukkit end
-+
-         if (flag1) {
-             double d0 = axisalignedbb.a + (axisalignedbb.d - axisalignedbb.a) * (double) this.random.nextFloat();
-             double d1 = axisalignedbb.b + (axisalignedbb.e - axisalignedbb.b) * (double) this.random.nextFloat();
diff --git a/nms-patches/EntityEnderPearl.patch b/nms-patches/EntityEnderPearl.patch
deleted file mode 100644
index e209aab..0000000
--- a/nms-patches/EntityEnderPearl.patch
+++ /dev/null
@@ -1,65 +0,0 @@
---- a/net/minecraft/server/EntityEnderPearl.java
-+++ b/net/minecraft/server/EntityEnderPearl.java
-@@ -1,5 +1,12 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.Bukkit;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.CreatureSpawnEvent;
-+import org.bukkit.event.player.PlayerTeleportEvent;
-+// CraftBukkit end
-+
- public class EntityEnderPearl extends EntityProjectile {
- 
-     private EntityLiving d;
-@@ -59,21 +66,35 @@
-                 EntityPlayer entityplayer = (EntityPlayer) entityliving;
- 
-                 if (entityplayer.playerConnection.a().isConnected() && entityplayer.world == this.world && !entityplayer.isSleeping()) {
--                    if (this.random.nextFloat() < 0.05F && this.world.getGameRules().getBoolean("doMobSpawning")) {
--                        EntityEndermite entityendermite = new EntityEndermite(this.world);
--
--                        entityendermite.a(true);
--                        entityendermite.setPositionRotation(entityliving.locX, entityliving.locY, entityliving.locZ, entityliving.yaw, entityliving.pitch);
--                        this.world.addEntity(entityendermite);
-+                    // CraftBukkit start - Fire PlayerTeleportEvent
-+                    org.bukkit.craftbukkit.entity.CraftPlayer player = entityplayer.getBukkitEntity();
-+                    org.bukkit.Location location = getBukkitEntity().getLocation();
-+                    location.setPitch(player.getLocation().getPitch());
-+                    location.setYaw(player.getLocation().getYaw());
-+
-+                    PlayerTeleportEvent teleEvent = new PlayerTeleportEvent(player, player.getLocation(), location, PlayerTeleportEvent.TeleportCause.ENDER_PEARL);
-+                    Bukkit.getPluginManager().callEvent(teleEvent);
-+
-+                    if (!teleEvent.isCancelled() && !entityplayer.playerConnection.isDisconnected()) {
-+                        if (this.random.nextFloat() < 0.05F && this.world.getGameRules().getBoolean("doMobSpawning")) {
-+                            EntityEndermite entityendermite = new EntityEndermite(this.world);
-+
-+                            entityendermite.a(true);
-+                            entityendermite.setPositionRotation(entityliving.locX, entityliving.locY, entityliving.locZ, entityliving.yaw, entityliving.pitch);
-+                            this.world.addEntity(entityendermite, CreatureSpawnEvent.SpawnReason.ENDER_PEARL);
-+                        }
-+
-+                        if (entityliving.isPassenger()) {
-+                            entityliving.stopRiding();
-+                        }
-+
-+                        entityplayer.playerConnection.teleport(teleEvent.getTo());
-+                        entityliving.fallDistance = 0.0F;
-+                        CraftEventFactory.entityDamage = this;
-+                        entityliving.damageEntity(DamageSource.FALL, 5.0F);
-+                        CraftEventFactory.entityDamage = null;
-                     }
--
--                    if (entityliving.isPassenger()) {
--                        entityliving.stopRiding();
--                    }
--
--                    entityliving.enderTeleportTo(this.locX, this.locY, this.locZ);
--                    entityliving.fallDistance = 0.0F;
--                    entityliving.damageEntity(DamageSource.FALL, 5.0F);
-+                    // CraftBukkit end
-                 }
-             } else if (entityliving != null) {
-                 entityliving.enderTeleportTo(this.locX, this.locY, this.locZ);
diff --git a/nms-patches/EntityEnderman.patch b/nms-patches/EntityEnderman.patch
deleted file mode 100644
index dc6ad77..0000000
--- a/nms-patches/EntityEnderman.patch
+++ /dev/null
@@ -1,66 +0,0 @@
---- a/net/minecraft/server/EntityEnderman.java
-+++ b/net/minecraft/server/EntityEnderman.java
-@@ -4,6 +4,8 @@
- import com.google.common.base.Optional;
- import com.google.common.base.Predicate;
- import com.google.common.collect.Sets;
-+import org.bukkit.event.entity.EntityTargetEvent;
-+
- import java.util.Random;
- import java.util.Set;
- import java.util.UUID;
-@@ -56,7 +58,17 @@
-     }
- 
-     public void setGoalTarget(@Nullable EntityLiving entityliving) {
--        super.setGoalTarget(entityliving);
-+        // CraftBukkit start - fire event
-+        setGoalTarget(entityliving, EntityTargetEvent.TargetReason.UNKNOWN, true);
-+    }
-+
-+    @Override
-+    public boolean setGoalTarget(EntityLiving entityliving, org.bukkit.event.entity.EntityTargetEvent.TargetReason reason, boolean fireEvent) {
-+        if (!super.setGoalTarget(entityliving, reason, fireEvent)) {
-+            return false;
-+        }
-+        entityliving = getGoalTarget();
-+        // CraftBukkit end
-         AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
- 
-         if (entityliving == null) {
-@@ -70,6 +82,7 @@
-                 attributeinstance.b(EntityEnderman.b);
-             }
-         }
-+        return true;
- 
-     }
- 
-@@ -317,8 +330,12 @@
-             boolean flag = movingobjectposition != null && movingobjectposition.a().equals(blockposition);
- 
-             if (EntityEnderman.c.contains(block) && flag) {
--                this.enderman.setCarried(iblockdata);
--                world.setAir(blockposition);
-+                // CraftBukkit start - Pickup event
-+                if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.enderman, this.enderman.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), org.bukkit.Material.AIR).isCancelled()) {
-+                    this.enderman.setCarried(iblockdata);
-+                    world.setAir(blockposition);
-+                }
-+                // CraftBukkit end
-             }
- 
-         }
-@@ -348,8 +365,12 @@
-             IBlockData iblockdata2 = this.a.getCarried();
- 
-             if (iblockdata2 != null && this.a(world, blockposition, iblockdata2.getBlock(), iblockdata, iblockdata1)) {
-+                // CraftBukkit start - Place event
-+                if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.a, blockposition, this.a.getCarried().getBlock(), this.a.getCarried().getBlock().toLegacyData(this.a.getCarried())).isCancelled()) {
-                 world.setTypeAndData(blockposition, iblockdata2, 3);
-                 this.a.setCarried((IBlockData) null);
-+                }
-+                // CraftBukkit end
-             }
- 
-         }
diff --git a/nms-patches/EntityEvokerFangs.patch b/nms-patches/EntityEvokerFangs.patch
deleted file mode 100644
index 0e392ed..0000000
--- a/nms-patches/EntityEvokerFangs.patch
+++ /dev/null
@@ -1,12 +0,0 @@
---- a/net/minecraft/server/EntityEvokerFangs.java
-+++ b/net/minecraft/server/EntityEvokerFangs.java
-@@ -108,7 +108,9 @@
- 
-         if (entityliving.isAlive() && !entityliving.be() && entityliving != entityliving1) {
-             if (entityliving1 == null) {
-+                org.bukkit.craftbukkit.event.CraftEventFactory.entityDamage = this; // CraftBukkit
-                 entityliving.damageEntity(DamageSource.MAGIC, 6.0F);
-+                org.bukkit.craftbukkit.event.CraftEventFactory.entityDamage = null; // CraftBukkit
-             } else {
-                 if (entityliving1.r(entityliving)) {
-                     return;
diff --git a/nms-patches/EntityExperienceOrb.patch b/nms-patches/EntityExperienceOrb.patch
deleted file mode 100644
index 24aa1ab..0000000
--- a/nms-patches/EntityExperienceOrb.patch
+++ /dev/null
@@ -1,82 +0,0 @@
---- a/net/minecraft/server/EntityExperienceOrb.java
-+++ b/net/minecraft/server/EntityExperienceOrb.java
-@@ -1,5 +1,11 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
-+import org.bukkit.event.entity.EntityTargetEvent;
-+// CraftBukkit end
-+
- public class EntityExperienceOrb extends Entity {
- 
-     public int a;
-@@ -34,6 +40,7 @@
- 
-     public void B_() {
-         super.B_();
-+        EntityHuman prevTarget = this.targetPlayer;// CraftBukkit - store old target
-         if (this.c > 0) {
-             --this.c;
-         }
-@@ -68,6 +75,16 @@
-         }
- 
-         if (this.targetPlayer != null) {
-+            // CraftBukkit start
-+            boolean cancelled = false;
-+            if (this.targetPlayer != prevTarget) {
-+                EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(this, targetPlayer, EntityTargetEvent.TargetReason.CLOSEST_PLAYER);
-+                EntityLiving target = event.getTarget() == null ? null : ((org.bukkit.craftbukkit.entity.CraftLivingEntity) event.getTarget()).getHandle();
-+                targetPlayer = target instanceof EntityHuman ? (EntityHuman) target : null;
-+                cancelled = event.isCancelled();
-+            }
-+
-+            if (!cancelled && targetPlayer != null) {
-             double d1 = (this.targetPlayer.locX - this.locX) / 8.0D;
-             double d2 = (this.targetPlayer.locY + (double) this.targetPlayer.getHeadHeight() / 2.0D - this.locY) / 8.0D;
-             double d3 = (this.targetPlayer.locZ - this.locZ) / 8.0D;
-@@ -80,6 +97,8 @@
-                 this.motY += d2 / d4 * d5 * 0.1D;
-                 this.motZ += d3 / d4 * d5 * 0.1D;
-             }
-+            }
-+            // CraftBukkit end
-         }
- 
-         this.move(EnumMoveType.SELF, this.motX, this.motY, this.motZ);
-@@ -153,7 +172,7 @@
-                 }
- 
-                 if (this.value > 0) {
--                    entityhuman.giveExp(this.value);
-+                    entityhuman.giveExp(CraftEventFactory.callPlayerExpChangeEvent(entityhuman, this.value).getAmount()); // CraftBukkit - this.value -> event.getAmount()
-                 }
- 
-                 this.die();
-@@ -175,6 +194,24 @@
-     }
- 
-     public static int getOrbValue(int i) {
-+        // CraftBukkit start
-+        if (i > 162670129) return i - 100000;
-+        if (i > 81335063) return 81335063;
-+        if (i > 40667527) return 40667527;
-+        if (i > 20333759) return 20333759;
-+        if (i > 10166857) return 10166857;
-+        if (i > 5083423) return 5083423;
-+        if (i > 2541701) return 2541701;
-+        if (i > 1270849) return 1270849;
-+        if (i > 635413) return 635413;
-+        if (i > 317701) return 317701;
-+        if (i > 158849) return 158849;
-+        if (i > 79423) return 79423;
-+        if (i > 39709) return 39709;
-+        if (i > 19853) return 19853;
-+        if (i > 9923) return 9923;
-+        if (i > 4957) return 4957;
-+        // CraftBukkit end
-         return i >= 2477 ? 2477 : (i >= 1237 ? 1237 : (i >= 617 ? 617 : (i >= 307 ? 307 : (i >= 149 ? 149 : (i >= 73 ? 73 : (i >= 37 ? 37 : (i >= 17 ? 17 : (i >= 7 ? 7 : (i >= 3 ? 3 : 1)))))))));
-     }
- 
diff --git a/nms-patches/EntityFallingBlock.patch b/nms-patches/EntityFallingBlock.patch
deleted file mode 100644
index afdb8db..0000000
--- a/nms-patches/EntityFallingBlock.patch
+++ /dev/null
@@ -1,54 +0,0 @@
---- a/net/minecraft/server/EntityFallingBlock.java
-+++ b/net/minecraft/server/EntityFallingBlock.java
-@@ -5,6 +5,8 @@
- import java.util.Iterator;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class EntityFallingBlock extends Entity {
- 
-     private IBlockData block;
-@@ -69,7 +71,7 @@
- 
-             if (this.ticksLived++ == 0) {
-                 blockposition = new BlockPosition(this);
--                if (this.world.getType(blockposition).getBlock() == block) {
-+                if (this.world.getType(blockposition).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, Blocks.AIR, 0).isCancelled()) {
-                     this.world.setAir(blockposition);
-                 } else if (!this.world.isClientSide) {
-                     this.die();
-@@ -110,7 +112,7 @@
- 
-                     if (!flag1 && BlockFalling.x(this.world.getType(new BlockPosition(this.locX, this.locY - 0.009999999776482582D, this.locZ)))) {
-                         this.onGround = false;
--                        return;
-+                        // return; // CraftBukkit
-                     }
- 
-                     this.motX *= 0.699999988079071D;
-@@ -119,7 +121,13 @@
-                     if (iblockdata.getBlock() != Blocks.PISTON_EXTENSION) {
-                         this.die();
-                         if (!this.f) {
--                            if (this.world.a(block, blockposition, true, EnumDirection.UP, (Entity) null) && (flag1 || !BlockFalling.x(this.world.getType(blockposition.down()))) && this.world.setTypeAndData(blockposition, this.block, 3)) {
-+                            // CraftBukkit start
-+                            if (this.world.a(block, blockposition, true, EnumDirection.UP, (Entity) null) && (flag1 || !BlockFalling.x(this.world.getType(blockposition.down())))) {
-+                                if (CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, this.block.getBlock(), this.block.getBlock().toLegacyData(this.block)).isCancelled()) {
-+                                    return;
-+                                }
-+                                this.world.setTypeAndData(blockposition, this.block, 3);
-+                                // CraftBukkit end
-                                 if (block instanceof BlockFalling) {
-                                     ((BlockFalling) block).a(this.world, blockposition, this.block, iblockdata);
-                                 }
-@@ -175,7 +183,9 @@
-                 while (iterator.hasNext()) {
-                     Entity entity = (Entity) iterator.next();
- 
-+                    CraftEventFactory.entityDamage = this; // CraftBukkit
-                     entity.damageEntity(damagesource, (float) Math.min(MathHelper.d((float) i * this.fallHurtAmount), this.fallHurtMax));
-+                    CraftEventFactory.entityDamage = null; // CraftBukkit
-                 }
- 
-                 if (flag && (double) this.random.nextFloat() < 0.05000000074505806D + (double) i * 0.05D) {
diff --git a/nms-patches/EntityFireball.patch b/nms-patches/EntityFireball.patch
deleted file mode 100644
index e9e26fd..0000000
--- a/nms-patches/EntityFireball.patch
+++ /dev/null
@@ -1,72 +0,0 @@
---- a/net/minecraft/server/EntityFireball.java
-+++ b/net/minecraft/server/EntityFireball.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public abstract class EntityFireball extends Entity {
- 
-     public EntityLiving shooter;
-@@ -8,6 +10,8 @@
-     public double dirX;
-     public double dirY;
-     public double dirZ;
-+    public float bukkitYield = 1; // CraftBukkit
-+    public boolean isIncendiary = true; // CraftBukkit
- 
-     public EntityFireball(World world) {
-         super(world);
-@@ -31,12 +35,19 @@
-     public EntityFireball(World world, EntityLiving entityliving, double d0, double d1, double d2) {
-         super(world);
-         this.shooter = entityliving;
-+        this.projectileSource = (org.bukkit.entity.LivingEntity) entityliving.getBukkitEntity(); // CraftBukkit
-         this.setSize(1.0F, 1.0F);
-         this.setPositionRotation(entityliving.locX, entityliving.locY, entityliving.locZ, entityliving.yaw, entityliving.pitch);
-         this.setPosition(this.locX, this.locY, this.locZ);
-         this.motX = 0.0D;
-         this.motY = 0.0D;
-         this.motZ = 0.0D;
-+        // CraftBukkit start - Added setDirection method
-+        this.setDirection(d0, d1, d2);
-+    }
-+
-+    public void setDirection(double d0, double d1, double d2) {
-+        // CraftBukkit end
-         d0 += this.random.nextGaussian() * 0.4D;
-         d1 += this.random.nextGaussian() * 0.4D;
-         d2 += this.random.nextGaussian() * 0.4D;
-@@ -61,6 +72,12 @@
- 
-             if (movingobjectposition != null) {
-                 this.a(movingobjectposition);
-+
-+                // CraftBukkit start - Fire ProjectileHitEvent
-+                if (this.dead) {
-+                    CraftEventFactory.callProjectileHitEvent(this, movingobjectposition);
-+                }
-+                // CraftBukkit end
-             }
- 
-             this.locX += this.motX;
-@@ -150,6 +167,11 @@
-         } else {
-             this.ax();
-             if (damagesource.getEntity() != null) {
-+                // CraftBukkit start
-+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
-+                    return false;
-+                }
-+                // CraftBukkit end
-                 Vec3D vec3d = damagesource.getEntity().aJ();
- 
-                 if (vec3d != null) {
-@@ -163,6 +185,7 @@
- 
-                 if (damagesource.getEntity() instanceof EntityLiving) {
-                     this.shooter = (EntityLiving) damagesource.getEntity();
-+                    this.projectileSource = (org.bukkit.projectiles.ProjectileSource) this.shooter.getBukkitEntity();
-                 }
- 
-                 return true;
diff --git a/nms-patches/EntityFireworks.patch b/nms-patches/EntityFireworks.patch
deleted file mode 100644
index 99fc74a..0000000
--- a/nms-patches/EntityFireworks.patch
+++ /dev/null
@@ -1,45 +0,0 @@
---- a/net/minecraft/server/EntityFireworks.java
-+++ b/net/minecraft/server/EntityFireworks.java
-@@ -2,6 +2,7 @@
- 
- import java.util.Iterator;
- import java.util.List;
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
- 
- public class EntityFireworks extends Entity {
- 
-@@ -117,8 +118,12 @@
-         }
- 
-         if (!this.world.isClientSide && this.ticksFlown > this.expectedLifespan) {
--            this.world.broadcastEntityEffect(this, (byte) 17);
--            this.k();
-+            // CraftBukkit start
-+            if (!org.bukkit.craftbukkit.event.CraftEventFactory.callFireworkExplodeEvent(this).isCancelled()) {
-+                this.world.broadcastEntityEffect(this, (byte) 17);
-+                this.k();
-+            }
-+            // CraftBukkit end
-             this.die();
-         }
- 
-@@ -136,7 +141,9 @@
- 
-         if (f > 0.0F) {
-             if (this.e != null) {
-+                CraftEventFactory.entityDamage = this; // CraftBukkit
-                 this.e.damageEntity(DamageSource.t, (float) (5 + nbttaglist.size() * 2));
-+                CraftEventFactory.entityDamage = null; // CraftBukkit
-             }
- 
-             double d0 = 5.0D;
-@@ -162,7 +169,9 @@
-                     if (flag) {
-                         float f1 = f * (float) Math.sqrt((5.0D - (double) this.g(entityliving)) / 5.0D);
- 
-+                        CraftEventFactory.entityDamage = this; // CraftBukkit
-                         entityliving.damageEntity(DamageSource.t, f1);
-+                        CraftEventFactory.entityDamage = null; // CraftBukkit
-                     }
-                 }
-             }
diff --git a/nms-patches/EntityFishingHook.patch b/nms-patches/EntityFishingHook.patch
deleted file mode 100644
index bcad37d..0000000
--- a/nms-patches/EntityFishingHook.patch
+++ /dev/null
@@ -1,117 +0,0 @@
---- a/net/minecraft/server/EntityFishingHook.java
-+++ b/net/minecraft/server/EntityFishingHook.java
-@@ -2,6 +2,11 @@
- 
- import java.util.Iterator;
- import java.util.List;
-+// CraftBukkit start
-+import org.bukkit.entity.Player;
-+import org.bukkit.entity.Fish;
-+import org.bukkit.event.player.PlayerFishEvent;
-+// CraftBukkit end
- 
- public class EntityFishingHook extends Entity {
- 
-@@ -261,6 +266,7 @@
-         }
- 
-         if (movingobjectposition != null && movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.MISS) {
-+            org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition); // Craftbukkit - Call event
-             if (movingobjectposition.type == MovingObjectPosition.EnumMovingObjectType.ENTITY) {
-                 this.hooked = movingobjectposition.entity;
-                 this.s();
-@@ -293,6 +299,10 @@
-             if (this.g <= 0) {
-                 this.h = 0;
-                 this.at = 0;
-+                // CraftBukkit start
-+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), null, (Fish) this.getBukkitEntity(), PlayerFishEvent.State.FAILED_ATTEMPT);
-+                this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-+                // CraftBukkit end
-             } else {
-                 this.motY -= 0.2D * (double) this.random.nextFloat() * (double) this.random.nextFloat();
-             }
-@@ -328,6 +338,13 @@
-                         worldserver.a(EnumParticle.WATER_WAKE, d0, d1, d2, 0, (double) (-f4), 0.01D, (double) f3, 1.0D, new int[0]);
-                     }
-                 } else {
-+                    // CraftBukkit start
-+                    PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), null, (Fish) this.getBukkitEntity(), PlayerFishEvent.State.BITE);
-+                    this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-+                    if (playerFishEvent.isCancelled()) {
-+                        return;
-+                    }
-+                    // CraftBukkit end
-                     this.motY = (double) (-0.4F * MathHelper.a(this.random, 0.6F, 1.0F));
-                     this.a(SoundEffects.K, 0.25F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
-                     double d3 = this.getBoundingBox().b + 0.5D;
-@@ -384,6 +401,14 @@
-             int i = 0;
- 
-             if (this.hooked != null) {
-+                // CraftBukkit start
-+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), this.hooked.getBukkitEntity(), (Fish) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_ENTITY);
-+                this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-+
-+                if (playerFishEvent.isCancelled()) {
-+                    return 0;
-+                }
-+                // CraftBukkit end
-                 this.k();
-                 this.world.broadcastEntityEffect(this, (byte) 31);
-                 i = this.hooked instanceof EntityItem ? 3 : 5;
-@@ -396,6 +421,15 @@
-                 while (iterator.hasNext()) {
-                     ItemStack itemstack = (ItemStack) iterator.next();
-                     EntityItem entityitem = new EntityItem(this.world, this.locX, this.locY, this.locZ, itemstack);
-+                    // CraftBukkit start
-+                    PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), entityitem.getBukkitEntity(), (Fish) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_FISH);
-+                    playerFishEvent.setExpToDrop(this.random.nextInt(6) + 1);
-+                    this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-+
-+                    if (playerFishEvent.isCancelled()) {
-+                        return 0;
-+                    }
-+                    // CraftBukkit end
-                     double d0 = this.owner.locX - this.locX;
-                     double d1 = this.owner.locY - this.locY;
-                     double d2 = this.owner.locZ - this.locZ;
-@@ -406,7 +440,11 @@
-                     entityitem.motY = d1 * 0.1D + (double) MathHelper.sqrt(d3) * 0.08D;
-                     entityitem.motZ = d2 * 0.1D;
-                     this.world.addEntity(entityitem);
--                    this.owner.world.addEntity(new EntityExperienceOrb(this.owner.world, this.owner.locX, this.owner.locY + 0.5D, this.owner.locZ + 0.5D, this.random.nextInt(6) + 1));
-+                    // CraftBukkit start - this.random.nextInt(6) + 1 -> playerFishEvent.getExpToDrop()
-+                    if (playerFishEvent.getExpToDrop() > 0) {
-+                        this.owner.world.addEntity(new EntityExperienceOrb(this.owner.world, this.owner.locX, this.owner.locY + 0.5D, this.owner.locZ + 0.5D, playerFishEvent.getExpToDrop()));
-+                    }
-+                    // CraftBukkit end
-                     Item item = itemstack.getItem();
- 
-                     if (item == Items.FISH || item == Items.COOKED_FISH) {
-@@ -418,8 +456,25 @@
-             }
- 
-             if (this.isInGround) {
-+                // CraftBukkit start
-+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), null, (Fish) this.getBukkitEntity(), PlayerFishEvent.State.IN_GROUND);
-+                this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-+
-+                if (playerFishEvent.isCancelled()) {
-+                    return 0;
-+                }
-+                // CraftBukkit end
-                 i = 2;
-             }
-+            // CraftBukkit start
-+            if (i == 0) {
-+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), null, (Fish) this.getBukkitEntity(), PlayerFishEvent.State.FAILED_ATTEMPT);
-+                this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-+                if (playerFishEvent.isCancelled()) {
-+                    return 0;
-+                }
-+            }
-+            // CraftBukkit end
- 
-             this.die();
-             return i;
diff --git a/nms-patches/EntityGhast.patch b/nms-patches/EntityGhast.patch
deleted file mode 100644
index e4a07c9..0000000
--- a/nms-patches/EntityGhast.patch
+++ /dev/null
@@ -1,12 +0,0 @@
---- a/net/minecraft/server/EntityGhast.java
-+++ b/net/minecraft/server/EntityGhast.java
-@@ -158,7 +158,8 @@
-                     world.a((EntityHuman) null, 1016, new BlockPosition(this.ghast), 0);
-                     EntityLargeFireball entitylargefireball = new EntityLargeFireball(world, this.ghast, d2, d3, d4);
- 
--                    entitylargefireball.yield = this.ghast.getPower();
-+                    // CraftBukkit - set bukkitYield when setting explosionpower
-+                    entitylargefireball.bukkitYield = entitylargefireball.yield = this.ghast.getPower();
-                     entitylargefireball.locX = this.ghast.locX + vec3d.x * 4.0D;
-                     entitylargefireball.locY = this.ghast.locY + (double) (this.ghast.length / 2.0F) + 0.5D;
-                     entitylargefireball.locZ = this.ghast.locZ + vec3d.z * 4.0D;
diff --git a/nms-patches/EntityHanging.patch b/nms-patches/EntityHanging.patch
deleted file mode 100644
index 1c6ff30..0000000
--- a/nms-patches/EntityHanging.patch
+++ /dev/null
@@ -1,175 +0,0 @@
---- a/net/minecraft/server/EntityHanging.java
-+++ b/net/minecraft/server/EntityHanging.java
-@@ -4,6 +4,12 @@
- import javax.annotation.Nullable;
- import org.apache.commons.lang3.Validate;
- 
-+// CraftBukkit start
-+import org.bukkit.entity.Hanging;
-+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
-+import org.bukkit.event.hanging.HangingBreakEvent;
-+// CraftBukkit end
-+
- public abstract class EntityHanging extends Entity {
- 
-     private static final Predicate<Entity> c = new Predicate() {
-@@ -41,43 +47,52 @@
-         this.updateBoundingBox();
-     }
- 
--    protected void updateBoundingBox() {
--        if (this.direction != null) {
--            double d0 = (double) this.blockPosition.getX() + 0.5D;
--            double d1 = (double) this.blockPosition.getY() + 0.5D;
--            double d2 = (double) this.blockPosition.getZ() + 0.5D;
--            double d3 = 0.46875D;
--            double d4 = this.a(this.getWidth());
--            double d5 = this.a(this.getHeight());
--
--            d0 -= (double) this.direction.getAdjacentX() * 0.46875D;
--            d2 -= (double) this.direction.getAdjacentZ() * 0.46875D;
--            d1 += d5;
--            EnumDirection enumdirection = this.direction.f();
-+    // CraftBukkit start - break out BB calc into own method
-+    public static AxisAlignedBB calculateBoundingBox(Entity entity, BlockPosition blockPosition, EnumDirection direction, int width, int height) {
-+        double d0 = (double) blockPosition.getX() + 0.5D;
-+        double d1 = (double) blockPosition.getY() + 0.5D;
-+        double d2 = (double) blockPosition.getZ() + 0.5D;
-+        double d3 = 0.46875D;
-+        double d4 = a(width);
-+        double d5 = a(height);
-+
-+        d0 -= (double) direction.getAdjacentX() * 0.46875D;
-+        d2 -= (double) direction.getAdjacentZ() * 0.46875D;
-+        d1 += d5;
-+        EnumDirection enumdirection = direction.f();
-+
-+        d0 += d4 * (double) enumdirection.getAdjacentX();
-+        d2 += d4 * (double) enumdirection.getAdjacentZ();
-+        if (entity != null) {
-+            entity.locX = d0;
-+            entity.locY = d1;
-+            entity.locZ = d2;
-+        }
-+        double d6 = (double) width;
-+        double d7 = (double) height;
-+        double d8 = (double) width;
- 
--            d0 += d4 * (double) enumdirection.getAdjacentX();
--            d2 += d4 * (double) enumdirection.getAdjacentZ();
--            this.locX = d0;
--            this.locY = d1;
--            this.locZ = d2;
--            double d6 = (double) this.getWidth();
--            double d7 = (double) this.getHeight();
--            double d8 = (double) this.getWidth();
--
--            if (this.direction.k() == EnumDirection.EnumAxis.Z) {
--                d8 = 1.0D;
--            } else {
--                d6 = 1.0D;
--            }
-+        if (direction.k() == EnumDirection.EnumAxis.Z) {
-+            d8 = 1.0D;
-+        } else {
-+            d6 = 1.0D;
-+        }
- 
--            d6 /= 32.0D;
--            d7 /= 32.0D;
--            d8 /= 32.0D;
--            this.a(new AxisAlignedBB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8));
-+        d6 /= 32.0D;
-+        d7 /= 32.0D;
-+        d8 /= 32.0D;
-+        return new AxisAlignedBB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8);
-+    }
-+
-+    protected void updateBoundingBox() {
-+        if (this.direction != null) {
-+            // CraftBukkit start code moved in to calculateBoundingBox
-+            this.a(calculateBoundingBox(this, this.blockPosition, this.direction, this.getWidth(), this.getHeight()));
-+            // CraftBukkit end
-         }
-     }
- 
--    private double a(int i) {
-+    private static double a(int i) { // CraftBukkit - static
-         return i % 32 == 0 ? 0.5D : 0.0D;
-     }
- 
-@@ -88,6 +103,24 @@
-         if (this.d++ == 100 && !this.world.isClientSide) {
-             this.d = 0;
-             if (!this.dead && !this.survives()) {
-+                // CraftBukkit start - fire break events
-+                Material material = this.world.getType(new BlockPosition(this)).getMaterial();
-+                HangingBreakEvent.RemoveCause cause;
-+
-+                if (!material.equals(Material.AIR)) {
-+                    // TODO: This feels insufficient to catch 100% of suffocation cases
-+                    cause = HangingBreakEvent.RemoveCause.OBSTRUCTION;
-+                } else {
-+                    cause = HangingBreakEvent.RemoveCause.PHYSICS;
-+                }
-+
-+                HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), cause);
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (dead || event.isCancelled()) {
-+                    return;
-+                }
-+                // CraftBukkit end
-                 this.die();
-                 this.a((Entity) null);
-             }
-@@ -140,6 +173,21 @@
-             return false;
-         } else {
-             if (!this.dead && !this.world.isClientSide) {
-+                // CraftBukkit start - fire break events
-+                HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.DEFAULT);
-+                if (damagesource.getEntity() != null) {
-+                    event = new HangingBreakByEntityEvent((Hanging) this.getBukkitEntity(), damagesource.getEntity() == null ? null : damagesource.getEntity().getBukkitEntity(), damagesource.isExplosion() ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.ENTITY);
-+                } else if (damagesource.isExplosion()) {
-+                    event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.EXPLOSION);
-+                }
-+
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (this.dead || event.isCancelled()) {
-+                    return true;
-+                }
-+                // CraftBukkit end
-+
-                 this.die();
-                 this.ax();
-                 this.a(damagesource.getEntity());
-@@ -151,6 +199,18 @@
- 
-     public void move(EnumMoveType enummovetype, double d0, double d1, double d2) {
-         if (!this.world.isClientSide && !this.dead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) {
-+            if (this.dead) return; // CraftBukkit
-+
-+            // CraftBukkit start - fire break events
-+            // TODO - Does this need its own cause? Seems to only be triggered by pistons
-+            HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.PHYSICS);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (this.dead || event.isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-+
-             this.die();
-             this.a((Entity) null);
-         }
-@@ -158,7 +218,7 @@
-     }
- 
-     public void f(double d0, double d1, double d2) {
--        if (!this.world.isClientSide && !this.dead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) {
-+        if (false && !this.world.isClientSide && !this.dead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) { // CraftBukkit - not needed
-             this.die();
-             this.a((Entity) null);
-         }
diff --git a/nms-patches/EntityHorseAbstract.patch b/nms-patches/EntityHorseAbstract.patch
deleted file mode 100644
index 58896b4..0000000
--- a/nms-patches/EntityHorseAbstract.patch
+++ /dev/null
@@ -1,110 +0,0 @@
---- a/net/minecraft/server/EntityHorseAbstract.java
-+++ b/net/minecraft/server/EntityHorseAbstract.java
-@@ -6,6 +6,7 @@
- import java.util.List;
- import java.util.UUID;
- import javax.annotation.Nullable;
-+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason; // CraftBukkit
- 
- public abstract class EntityHorseAbstract extends EntityAnimal implements IInventoryListener, IJumpable {
- 
-@@ -39,6 +40,7 @@
-     private float bT;
-     protected boolean bF = true;
-     protected int bG;
-+    public int maxDomestication = 100; // CraftBukkit - store max domestication value
- 
-     public EntityHorseAbstract(World world) {
-         super(world);
-@@ -214,7 +216,7 @@
-     public void loadChest() {
-         InventoryHorseChest inventoryhorsechest = this.inventoryChest;
- 
--        this.inventoryChest = new InventoryHorseChest("HorseChest", this.dn());
-+        this.inventoryChest = new InventoryHorseChest("HorseChest", this.dn(), this); // CraftBukkit
-         this.inventoryChest.a(this.getName());
-         if (inventoryhorsechest != null) {
-             inventoryhorsechest.b(this);
-@@ -354,7 +356,7 @@
-     }
- 
-     public int getMaxDomestication() {
--        return 100;
-+        return this.maxDomestication; // CraftBukkit - return stored max domestication instead of 100
-     }
- 
-     protected float cq() {
-@@ -414,7 +416,7 @@
-         }
- 
-         if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
--            this.heal(f);
-+            this.heal(f, RegainReason.EATING); // CraftBukkit
-             flag = true;
-         }
- 
-@@ -465,7 +467,7 @@
-     }
- 
-     public void die(DamageSource damagesource) {
--        super.die(damagesource);
-+        // super.die(damagesource); // Moved down
-         if (!this.world.isClientSide && this.inventoryChest != null) {
-             for (int i = 0; i < this.inventoryChest.getSize(); ++i) {
-                 ItemStack itemstack = this.inventoryChest.getItem(i);
-@@ -476,6 +478,7 @@
-             }
- 
-         }
-+        super.die(damagesource); // CraftBukkit
-     }
- 
-     public void n() {
-@@ -486,7 +489,7 @@
-         super.n();
-         if (!this.world.isClientSide) {
-             if (this.random.nextInt(900) == 0 && this.deathTicks == 0) {
--                this.heal(1.0F);
-+                this.heal(1.0F, RegainReason.REGEN); // CraftBukkit
-             }
- 
-             if (this.dJ()) {
-@@ -723,6 +726,7 @@
-         if (this.getOwnerUUID() != null) {
-             nbttagcompound.setString("OwnerUUID", this.getOwnerUUID().toString());
-         }
-+        nbttagcompound.setInt("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
- 
-         if (!this.inventoryChest.getItem(0).isEmpty()) {
-             nbttagcompound.set("SaddleItem", this.inventoryChest.getItem(0).save(new NBTTagCompound()));
-@@ -749,6 +753,11 @@
-         if (!s.isEmpty()) {
-             this.setOwnerUUID(UUID.fromString(s));
-         }
-+        // CraftBukkit start
-+        if (nbttagcompound.hasKey("Bukkit.MaxDomestication")) {
-+            this.maxDomestication = nbttagcompound.getInt("Bukkit.MaxDomestication");
-+        }
-+        // CraftBukkit end
- 
-         AttributeInstance attributeinstance = this.getAttributeMap().a("Speed");
- 
-@@ -801,6 +810,18 @@
-     }
- 
-     public void b_(int i) {
-+        // CraftBukkit start
-+        float power;
-+        if (i >= 90) {
-+            power = 1.0F;
-+        } else {
-+            power = 0.4F + 0.4F * (float) i / 90.0F;
-+        }
-+        org.bukkit.event.entity.HorseJumpEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callHorseJumpEvent(this, power);
-+        if (event.isCancelled()) {
-+            return;
-+        }
-+        // CraftBukkit end
-         this.canSlide = true;
-         this.dt();
-     }
diff --git a/nms-patches/EntityHorseChestedAbstract.patch b/nms-patches/EntityHorseChestedAbstract.patch
deleted file mode 100644
index 99c2c11..0000000
--- a/nms-patches/EntityHorseChestedAbstract.patch
+++ /dev/null
@@ -1,19 +0,0 @@
---- a/net/minecraft/server/EntityHorseChestedAbstract.java
-+++ b/net/minecraft/server/EntityHorseChestedAbstract.java
-@@ -43,7 +43,7 @@
-     }
- 
-     public void die(DamageSource damagesource) {
--        super.die(damagesource);
-+        // super.die(damagesource); // CraftBukkit - moved down
-         if (this.isCarryingChest()) {
-             if (!this.world.isClientSide) {
-                 this.a(Item.getItemOf(Blocks.CHEST), 1);
-@@ -51,6 +51,7 @@
- 
-             this.setCarryingChest(false);
-         }
-+        super.die(damagesource); // CraftBukkit
- 
-     }
- 
diff --git a/nms-patches/EntityHuman.patch b/nms-patches/EntityHuman.patch
deleted file mode 100644
index a816999..0000000
--- a/nms-patches/EntityHuman.patch
+++ /dev/null
@@ -1,405 +0,0 @@
---- a/net/minecraft/server/EntityHuman.java
-+++ b/net/minecraft/server/EntityHuman.java
-@@ -9,6 +9,19 @@
- import java.util.UUID;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.craftbukkit.entity.CraftItem;
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.entity.CreatureSpawnEvent;
-+import org.bukkit.event.entity.EntityCombustByEntityEvent;
-+import org.bukkit.event.player.PlayerBedEnterEvent;
-+import org.bukkit.event.player.PlayerBedLeaveEvent;
-+import org.bukkit.event.player.PlayerDropItemEvent;
-+import org.bukkit.event.player.PlayerVelocityEvent;
-+import org.bukkit.util.Vector;
-+// CraftBukkit end
-+
- public abstract class EntityHuman extends EntityLiving {
- 
-     private static final DataWatcherObject<Float> a = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);
-@@ -18,10 +31,10 @@
-     protected static final DataWatcherObject<NBTTagCompound> bt = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.n);
-     protected static final DataWatcherObject<NBTTagCompound> bu = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.n);
-     public PlayerInventory inventory = new PlayerInventory(this);
--    protected InventoryEnderChest enderChest = new InventoryEnderChest();
-+    protected InventoryEnderChest enderChest = new InventoryEnderChest(this); // CraftBukkit - add "this" to constructor
-     public Container defaultContainer;
-     public Container activeContainer;
--    protected FoodMetaData foodData = new FoodMetaData();
-+    protected FoodMetaData foodData = new FoodMetaData(this); // CraftBukkit - add "this" to constructor
-     protected int bA;
-     public float bB;
-     public float bC;
-@@ -52,6 +65,17 @@
-     @Nullable
-     public EntityFishingHook hookedFish;
- 
-+    // CraftBukkit start
-+    public boolean fauxSleeping;
-+    public String spawnWorld = "";
-+    public int oldLevel = -1;
-+
-+    @Override
-+    public CraftHumanEntity getBukkitEntity() {
-+        return (CraftHumanEntity) super.getBukkitEntity();
-+    }
-+    // CraftBukkit end
-+
-     protected ItemCooldown l() {
-         return new ItemCooldown();
-     }
-@@ -310,7 +334,8 @@
- 
-         if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.world.getGameRules().getBoolean("naturalRegeneration")) {
-             if (this.getHealth() < this.getMaxHealth() && this.ticksLived % 20 == 0) {
--                this.heal(1.0F);
-+                // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
-+                this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN);
-             }
- 
-             if (this.foodData.c() && this.ticksLived % 10 == 0) {
-@@ -334,7 +359,7 @@
- 
-         this.k((float) attributeinstance.getValue());
-         float f = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
--        float f1 = (float) (Math.atan(-this.motY * 0.20000000298023224D) * 15.0D);
-+        float f1 = (float) ( org.bukkit.craftbukkit.TrigMath.atan(-this.motY * 0.20000000298023224D) * 15.0D); // CraftBukkit
- 
-         if (f > 0.1F) {
-             f = 0.1F;
-@@ -456,6 +481,7 @@
- 
-     @Nullable
-     public EntityItem a(boolean flag) {
-+        // Called only when dropped by Q or CTRL-Q
-         return this.a(this.inventory.splitStack(this.inventory.itemInHandIndex, flag && !this.inventory.getItemInHand().isEmpty() ? this.inventory.getItemInHand().getCount() : 1), false, true);
-     }
- 
-@@ -498,6 +524,30 @@
-                 entityitem.motZ += Math.sin((double) f1) * (double) f;
-             }
- 
-+            // CraftBukkit start - fire PlayerDropItemEvent
-+            Player player = (Player) this.getBukkitEntity();
-+            CraftItem drop = new CraftItem(this.world.getServer(), entityitem);
-+
-+            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
-+                if (flag1 && (cur == null || cur.getAmount() == 0)) {
-+                    // The complete stack was dropped
-+                    player.getInventory().setItemInHand(drop.getItemStack());
-+                } else if (flag1 && cur.isSimilar(drop.getItemStack()) && drop.getItemStack().getAmount() == 1) {
-+                    // Only one item is dropped
-+                    cur.setAmount(cur.getAmount() + 1);
-+                    player.getInventory().setItemInHand(cur);
-+                } else {
-+                    // Fallback
-+                    player.getInventory().addItem(drop.getItemStack());
-+                }
-+                return null;
-+            }
-+            // CraftBukkit end
-+
-             ItemStack itemstack1 = this.a(entityitem);
- 
-             if (flag1) {
-@@ -613,6 +663,13 @@
-             this.a(true, true, false);
-         }
- 
-+        // CraftBukkit start
-+        this.spawnWorld = nbttagcompound.getString("SpawnWorld");
-+        if ("".equals(spawnWorld)) {
-+            this.spawnWorld = this.world.getServer().getWorlds().get(0).getName();
-+        }
-+        // CraftBukkit end
-+
-         if (nbttagcompound.hasKeyOfType("SpawnX", 99) && nbttagcompound.hasKeyOfType("SpawnY", 99) && nbttagcompound.hasKeyOfType("SpawnZ", 99)) {
-             this.d = new BlockPosition(nbttagcompound.getInt("SpawnX"), nbttagcompound.getInt("SpawnY"), nbttagcompound.getInt("SpawnZ"));
-             this.e = nbttagcompound.getBoolean("SpawnForced");
-@@ -665,6 +722,7 @@
-         if (!this.getShoulderEntityRight().isEmpty()) {
-             nbttagcompound.set("ShoulderEntityRight", this.getShoulderEntityRight());
-         }
-+        nbttagcompound.setString("SpawnWorld", spawnWorld); // CraftBukkit - fixes bed spawns for multiworld worlds
- 
-     }
- 
-@@ -682,10 +740,10 @@
-                     this.a(true, true, false);
-                 }
- 
--                this.releaseShoulderEntities();
-+                // this.releaseShoulderEntities(); // CraftBukkit - moved down
-                 if (damagesource.r()) {
-                     if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
--                        f = 0.0F;
-+                        return false; // CraftBukkit - f = 0.0f -> return false
-                     }
- 
-                     if (this.world.getDifficulty() == EnumDifficulty.EASY) {
-@@ -697,7 +755,13 @@
-                     }
-                 }
- 
--                return f == 0.0F ? false : super.damageEntity(damagesource, f);
-+                // CraftBukkit start - Don't filter out 0 damage
-+                boolean damaged = super.damageEntity(damagesource, f);
-+                if (damaged) {
-+                    this.releaseShoulderEntities();
-+                }
-+                return damaged;
-+                // CraftBukkit end
-             }
-         }
-     }
-@@ -711,10 +775,29 @@
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
--        ScoreboardTeamBase scoreboardteambase = this.aY();
--        ScoreboardTeamBase scoreboardteambase1 = entityhuman.aY();
-+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
-+        // To summarize this method's logic, it's "Can parameter hurt this"
-+        org.bukkit.scoreboard.Team team;
-+        if (entityhuman instanceof EntityPlayer) {
-+            EntityPlayer thatPlayer = (EntityPlayer) entityhuman;
-+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
-+            if (team == null || team.allowFriendlyFire()) {
-+                return true;
-+            }
-+        } else {
-+            // This should never be called, but is implemented anyway
-+            org.bukkit.OfflinePlayer thisPlayer = entityhuman.world.getServer().getOfflinePlayer(entityhuman.getName());
-+            team = entityhuman.world.getServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
-+            if (team == null || team.allowFriendlyFire()) {
-+                return true;
-+            }
-+        }
- 
--        return scoreboardteambase == null ? true : (!scoreboardteambase.isAlly(scoreboardteambase1) ? true : scoreboardteambase.allowFriendlyFire());
-+        if (this instanceof EntityPlayer) {
-+            return !team.hasPlayer(((EntityPlayer) this).getBukkitEntity());
-+        }
-+        return !team.hasPlayer(this.world.getServer().getOfflinePlayer(this.getName()));
-+        // CraftBukkit end
-     }
- 
-     protected void damageArmor(float f) {
-@@ -757,7 +840,12 @@
-         return (float) i / (float) this.inventory.armor.size();
-     }
- 
--    protected void damageEntity0(DamageSource damagesource, float f) {
-+    // CraftBukkit start
-+    protected boolean damageEntity0(DamageSource damagesource, float f) { // void -> boolean
-+        if (true) {
-+            return super.damageEntity0(damagesource, f);
-+        }
-+        // CraftBukkit end
-         if (!this.isInvulnerable(damagesource)) {
-             f = this.applyArmorModifier(damagesource, f);
-             f = this.applyMagicModifier(damagesource, f);
-@@ -777,6 +865,7 @@
- 
-             }
-         }
-+        return false; // CraftBukkit
-     }
- 
-     public void openSign(TileEntitySign tileentitysign) {}
-@@ -898,8 +987,15 @@
-                     if (entity instanceof EntityLiving) {
-                         f3 = ((EntityLiving) entity).getHealth();
-                         if (j > 0 && !entity.isBurning()) {
--                            flag4 = true;
--                            entity.setOnFire(1);
-+                            // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
-+                            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 1);
-+                            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
-+
-+                            if (!combustEvent.isCancelled()) {
-+                                flag4 = true;
-+                                entity.setOnFire(combustEvent.getDuration());
-+                            }
-+                            // CraftBukkit end
-                         }
-                     }
- 
-@@ -930,8 +1026,11 @@
-                                 EntityLiving entityliving = (EntityLiving) iterator.next();
- 
-                                 if (entityliving != this && entityliving != entity && !this.r(entityliving) && this.h(entityliving) < 9.0D) {
-+                                    // CraftBukkit start - Only apply knockback if the damage hits
-+                                    if (entityliving.damageEntity(DamageSource.playerAttack(this).sweep(), f4)) {
-                                     entityliving.a(this, 0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
--                                    entityliving.damageEntity(DamageSource.playerAttack(this), f4);
-+                                    }
-+                                    // CraftBukkit end
-                                 }
-                             }
- 
-@@ -940,11 +1039,28 @@
-                         }
- 
-                         if (entity instanceof EntityPlayer && entity.velocityChanged) {
-+                            // CraftBukkit start - Add Velocity Event
-+                            boolean cancelled = false;
-+                            Player player = (Player) entity.getBukkitEntity();
-+                            org.bukkit.util.Vector velocity = new Vector( d1, d2, d3 );
-+
-+                            PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
-+                            world.getServer().getPluginManager().callEvent(event);
-+
-+                            if (event.isCancelled()) {
-+                                cancelled = true;
-+                            } else if (!velocity.equals(event.getVelocity())) {
-+                                player.setVelocity(event.getVelocity());
-+                            }
-+
-+                            if (!cancelled) {
-                             ((EntityPlayer) entity).playerConnection.sendPacket(new PacketPlayOutEntityVelocity(entity));
-                             entity.velocityChanged = false;
-                             entity.motX = d1;
-                             entity.motY = d2;
-                             entity.motZ = d3;
-+                            }
-+                            // CraftBukkit end
-                         }
- 
-                         if (flag2) {
-@@ -993,7 +1109,14 @@
- 
-                             this.a(StatisticList.y, Math.round(f5 * 10.0F));
-                             if (j > 0) {
--                                entity.setOnFire(j * 4);
-+                                // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
-+                                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
-+                                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
-+
-+                                if (!combustEvent.isCancelled()) {
-+                                    entity.setOnFire(combustEvent.getDuration());
-+                                }
-+                                // CraftBukkit end
-                             }
- 
-                             if (this.world instanceof WorldServer && f5 > 2.0F) {
-@@ -1009,6 +1132,11 @@
-                         if (flag4) {
-                             entity.extinguish();
-                         }
-+                        // CraftBukkit start - resync on cancelled event
-+                        if (this instanceof EntityPlayer) {
-+                            ((EntityPlayer) this).getBukkitEntity().updateInventory();
-+                        }
-+                        // CraftBukkit end
-                     }
-                 }
- 
-@@ -1099,6 +1227,20 @@
-             this.stopRiding();
-         }
- 
-+        // CraftBukkit start - fire PlayerBedEnterEvent
-+        if (this.getBukkitEntity() instanceof Player) {
-+            Player player = (Player) this.getBukkitEntity();
-+            org.bukkit.block.Block bed = this.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+            PlayerBedEnterEvent event = new PlayerBedEnterEvent(player, bed);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                return EnumBedResult.OTHER_PROBLEM;
-+            }
-+        }
-+        // CraftBukkit end
-+
-         this.releaseShoulderEntities();
-         this.setSize(0.2F, 0.2F);
-         if (this.world.isLoaded(blockposition)) {
-@@ -1159,6 +1301,23 @@
-             this.world.everyoneSleeping();
-         }
- 
-+        // CraftBukkit start - fire PlayerBedLeaveEvent
-+        if (this.getBukkitEntity() instanceof Player) {
-+            Player player = (Player) this.getBukkitEntity();
-+
-+            org.bukkit.block.Block bed;
-+            BlockPosition blockposition = this.bedPosition;
-+            if (blockposition != null) {
-+                bed = this.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            } else {
-+                bed = this.world.getWorld().getBlockAt(player.getLocation());
-+            }
-+
-+            PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+        }
-+        // CraftBukkit end
-+
-         this.sleepTicks = flag ? 0 : 100;
-         if (flag2) {
-             this.setRespawnPosition(this.bedPosition, false);
-@@ -1210,9 +1369,11 @@
-         if (blockposition != null) {
-             this.d = blockposition;
-             this.e = flag;
-+            this.spawnWorld = this.world.worldData.getName(); // CraftBukkit
-         } else {
-             this.d = null;
-             this.e = false;
-+            this.spawnWorld = ""; // CraftBukkit
-         }
- 
-     }
-@@ -1540,13 +1701,17 @@
-     }
- 
-     protected void releaseShoulderEntities() {
--        this.spawnEntityFromShoulder(this.getShoulderEntityLeft());
--        this.setShoulderEntityLeft(new NBTTagCompound());
--        this.spawnEntityFromShoulder(this.getShoulderEntityRight());
--        this.setShoulderEntityRight(new NBTTagCompound());
-+        // CraftBukkit start
-+        if (this.spawnEntityFromShoulder(this.getShoulderEntityLeft())) {
-+            this.setShoulderEntityLeft(new NBTTagCompound());
-+        }
-+        if (this.spawnEntityFromShoulder(this.getShoulderEntityRight())) {
-+            this.setShoulderEntityRight(new NBTTagCompound());
-+        }
-+        // CraftBukkit end
-     }
- 
--    private void spawnEntityFromShoulder(@Nullable NBTTagCompound nbttagcompound) {
-+    private boolean spawnEntityFromShoulder(@Nullable NBTTagCompound nbttagcompound) { // CraftBukkit void->boolean
-         if (!this.world.isClientSide && !nbttagcompound.isEmpty()) {
-             Entity entity = EntityTypes.a(nbttagcompound, this.world);
- 
-@@ -1555,9 +1720,10 @@
-             }
- 
-             entity.setPosition(this.locX, this.locY + 0.699999988079071D, this.locZ);
--            this.world.addEntity(entity);
-+            return this.world.addEntity(entity, CreatureSpawnEvent.SpawnReason.SHOULDER_ENTITY); // CraftBukkit
-         }
- 
-+        return true; // CraftBukkit
-     }
- 
-     public abstract boolean isSpectator();
-@@ -1759,7 +1925,7 @@
-             return entitymonster.c(this.a);
-         }
- 
--        public boolean apply(@Nullable Object object) {
-+        public boolean apply(@Nullable EntityMonster object) { // CraftBukkit - decompile error
-             return this.a((EntityMonster) object);
-         }
- 
diff --git a/nms-patches/EntityInsentient.patch b/nms-patches/EntityInsentient.patch
deleted file mode 100644
index ef6aadb..0000000
--- a/nms-patches/EntityInsentient.patch
+++ /dev/null
@@ -1,198 +0,0 @@
---- a/net/minecraft/server/EntityInsentient.java
-+++ b/net/minecraft/server/EntityInsentient.java
-@@ -9,6 +9,17 @@
- import java.util.UUID;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
-+import org.bukkit.entity.LivingEntity;
-+import org.bukkit.event.entity.EntityPickupItemEvent;
-+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
-+import org.bukkit.event.entity.EntityTargetEvent;
-+import org.bukkit.event.entity.EntityUnleashEvent;
-+import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
-+// CraftBukkit end
-+
- public abstract class EntityInsentient extends EntityLiving {
- 
-     private static final DataWatcherObject<Byte> a = DataWatcher.a(EntityInsentient.class, DataWatcherRegistry.a);
-@@ -27,7 +38,7 @@
-     public float[] dropChanceHand;
-     private final NonNullList<ItemStack> by;
-     public float[] dropChanceArmor;
--    public boolean canPickUpLoot;
-+    // public boolean canPickUpLoot; // CraftBukkit - moved up to EntityLiving
-     public boolean persistent;
-     private final Map<PathType, Float> bB;
-     private MinecraftKey bC;
-@@ -57,6 +68,9 @@
-             this.r();
-         }
- 
-+        // CraftBukkit start - default persistance to type's persistance value
-+        this.persistent = !isTypeNotPersistent();
-+        // CraftBukkit end
-     }
- 
-     protected void r() {}
-@@ -110,7 +124,38 @@
-     }
- 
-     public void setGoalTarget(@Nullable EntityLiving entityliving) {
-+        // CraftBukkit start - fire event
-+        setGoalTarget(entityliving, EntityTargetEvent.TargetReason.UNKNOWN, true);
-+    }
-+
-+    public boolean setGoalTarget(EntityLiving entityliving, EntityTargetEvent.TargetReason reason, boolean fireEvent) {
-+        if (getGoalTarget() == entityliving) return false;
-+        if (fireEvent) {
-+            if (reason == EntityTargetEvent.TargetReason.UNKNOWN && getGoalTarget() != null && entityliving == null) {
-+                reason = getGoalTarget().isAlive() ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED;
-+            }
-+            if (reason == EntityTargetEvent.TargetReason.UNKNOWN) {
-+                world.getServer().getLogger().log(java.util.logging.Level.WARNING, "Unknown target reason, please report on the issue tracker", new Exception());
-+            }
-+            CraftLivingEntity ctarget = null;
-+            if (entityliving != null) {
-+                ctarget = (CraftLivingEntity) entityliving.getBukkitEntity();
-+            }
-+            EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(this.getBukkitEntity(), ctarget, reason);
-+            world.getServer().getPluginManager().callEvent(event);
-+            if (event.isCancelled()) {
-+                return false;
-+            }
-+
-+            if (event.getTarget() != null) {
-+                entityliving = ((CraftLivingEntity) event.getTarget()).getHandle();
-+            } else {
-+                entityliving = null;
-+            }
-+        }
-         this.goalTarget = entityliving;
-+        return true;
-+        // CraftBukkit end
-     }
- 
-     public boolean d(Class<? extends EntityLiving> oclass) {
-@@ -340,11 +385,20 @@
- 
-     public void a(NBTTagCompound nbttagcompound) {
-         super.a(nbttagcompound);
-+
-+        // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
-         if (nbttagcompound.hasKeyOfType("CanPickUpLoot", 1)) {
--            this.m(nbttagcompound.getBoolean("CanPickUpLoot"));
-+            boolean data = nbttagcompound.getBoolean("CanPickUpLoot");
-+            if (isLevelAtLeast(nbttagcompound, 1) || data) {
-+                this.m(data);
-+            }
-         }
- 
--        this.persistent = nbttagcompound.getBoolean("PersistenceRequired");
-+        boolean data = nbttagcompound.getBoolean("PersistenceRequired");
-+        if (isLevelAtLeast(nbttagcompound, 1) || data) {
-+            this.persistent = data;
-+        }
-+        // CraftBukkit end
-         NBTTagList nbttaglist;
-         int i;
- 
-@@ -508,7 +562,15 @@
-             }
-         }
- 
--        if (flag && this.c(itemstack)) {
-+        // CraftBukkit start
-+        boolean canPickup = flag && this.c(itemstack);
-+
-+        EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((LivingEntity) getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity(), 0);
-+        entityEvent.setCancelled(!canPickup);
-+        this.world.getServer().getPluginManager().callEvent(entityEvent);
-+        canPickup = !entityEvent.isCancelled();
-+        if (canPickup) {
-+            // CraftBukkit end
-             double d0;
- 
-             switch (enumitemslot.a()) {
-@@ -525,7 +587,9 @@
-             }
- 
-             if (!itemstack1.isEmpty() && (double) (this.random.nextFloat() - 0.1F) < d0) {
-+                this.forceDrops = true; // CraftBukkit
-                 this.a(itemstack1, 0.0F);
-+                this.forceDrops = false; // CraftBukkit
-             }
- 
-             this.setSlot(enumitemslot, itemstack);
-@@ -565,11 +629,11 @@
-                 double d2 = entityhuman.locZ - this.locZ;
-                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
- 
--                if (this.isTypeNotPersistent() && d3 > 16384.0D) {
-+                if (d3 > 16384.0D) { // CraftBukkit - remove isTypeNotPersistent() check
-                     this.die();
-                 }
- 
--                if (this.ticksFarFromPlayer > 600 && this.random.nextInt(800) == 0 && d3 > 1024.0D && this.isTypeNotPersistent()) {
-+                if (this.ticksFarFromPlayer > 600 && this.random.nextInt(800) == 0 && d3 > 1024.0D) { // CraftBukkit - remove isTypeNotPersistent() check
-                     this.die();
-                 } else if (d3 < 1024.0D) {
-                     this.ticksFarFromPlayer = 0;
-@@ -938,12 +1002,24 @@
- 
-     public final boolean b(EntityHuman entityhuman, EnumHand enumhand) {
-         if (this.isLeashed() && this.getLeashHolder() == entityhuman) {
-+            // CraftBukkit start - fire PlayerUnleashEntityEvent
-+            if (CraftEventFactory.callPlayerUnleashEntityEvent(this, entityhuman).isCancelled()) {
-+                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutAttachEntity(this, this.getLeashHolder()));
-+                return false;
-+            }
-+            // CraftBukkit end
-             this.unleash(true, !entityhuman.abilities.canInstantlyBuild);
-             return true;
-         } else {
-             ItemStack itemstack = entityhuman.b(enumhand);
- 
-             if (itemstack.getItem() == Items.LEAD && this.a(entityhuman)) {
-+                // CraftBukkit start - fire PlayerLeashEntityEvent
-+                if (CraftEventFactory.callPlayerLeashEntityEvent(this, entityhuman, entityhuman).isCancelled()) {
-+                    ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutAttachEntity(this, this.getLeashHolder()));
-+                    return false;
-+                }
-+                // CraftBukkit end
-                 this.setLeashHolder(entityhuman, true);
-                 itemstack.subtract(1);
-                 return true;
-@@ -964,10 +1040,12 @@
- 
-         if (this.bE) {
-             if (!this.isAlive()) {
-+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.PLAYER_UNLEASH)); // CraftBukkit
-                 this.unleash(true, true);
-             }
- 
-             if (this.leashHolder == null || this.leashHolder.dead) {
-+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.HOLDER_GONE)); // CraftBukkit
-                 this.unleash(true, true);
-             }
-         }
-@@ -978,7 +1056,9 @@
-             this.bE = false;
-             this.leashHolder = null;
-             if (!this.world.isClientSide && flag1) {
-+                this.forceDrops = true; // CraftBukkit
-                 this.a(Items.LEAD, 1);
-+                this.forceDrops = false; // CraftBukkit
-             }
- 
-             if (!this.world.isClientSide && flag && this.world instanceof WorldServer) {
-@@ -1048,6 +1128,7 @@
- 
-                 this.setLeashHolder(entityleash, true);
-             } else {
-+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
-                 this.unleash(false, true);
-             }
-         }
diff --git a/nms-patches/EntityIronGolem.patch b/nms-patches/EntityIronGolem.patch
deleted file mode 100644
index 45aee39..0000000
--- a/nms-patches/EntityIronGolem.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/EntityIronGolem.java
-+++ b/net/minecraft/server/EntityIronGolem.java
-@@ -73,7 +73,7 @@
- 
-     protected void C(Entity entity) {
-         if (entity instanceof IMonster && !(entity instanceof EntityCreeper) && this.getRandom().nextInt(20) == 0) {
--            this.setGoalTarget((EntityLiving) entity);
-+            this.setGoalTarget((EntityLiving) entity, org.bukkit.event.entity.EntityTargetLivingEntityEvent.TargetReason.COLLISION, true); // CraftBukkit - set reason
-         }
- 
-         super.C(entity);
diff --git a/nms-patches/EntityItem.patch b/nms-patches/EntityItem.patch
deleted file mode 100644
index 0cb43b4..0000000
--- a/nms-patches/EntityItem.patch
+++ /dev/null
@@ -1,118 +0,0 @@
---- a/net/minecraft/server/EntityItem.java
-+++ b/net/minecraft/server/EntityItem.java
-@@ -4,6 +4,10 @@
- import javax.annotation.Nullable;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
-+// CraftBukkit start
-+import org.bukkit.event.entity.EntityPickupItemEvent;
-+import org.bukkit.event.player.PlayerPickupItemEvent;
-+// CraftBukkit end
- 
- public class EntityItem extends Entity {
- 
-@@ -15,6 +19,7 @@
-     private String g;
-     private String h;
-     public float a;
-+    private int lastTick = MinecraftServer.currentTick - 1; // CraftBukkit
- 
-     public EntityItem(World world, double d0, double d1, double d2) {
-         super(world);
-@@ -54,9 +59,12 @@
-             this.die();
-         } else {
-             super.B_();
--            if (this.pickupDelay > 0 && this.pickupDelay != 32767) {
--                --this.pickupDelay;
--            }
-+            // CraftBukkit start - Use wall time for pickup and despawn timers
-+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
-+            if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
-+            if (this.age != -32768) this.age += elapsedTicks;
-+            this.lastTick = MinecraftServer.currentTick;
-+            // CraftBukkit end
- 
-             this.lastX = this.locX;
-             this.lastY = this.locY;
-@@ -104,9 +112,11 @@
-                 this.motY *= -0.5D;
-             }
- 
-+            /* Craftbukkit start - moved up
-             if (this.age != -32768) {
-                 ++this.age;
-             }
-+            // Craftbukkit end */
- 
-             this.aq();
-             if (!this.world.isClientSide) {
-@@ -121,6 +131,12 @@
-             }
- 
-             if (!this.world.isClientSide && this.age >= 6000) {
-+                // CraftBukkit start - fire ItemDespawnEvent
-+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
-+                    this.age = 0;
-+                    return;
-+                }
-+                // CraftBukkit end
-                 this.die();
-             }
- 
-@@ -162,6 +178,7 @@
-                     } else if (itemstack1.getCount() + itemstack.getCount() > itemstack1.getMaxStackSize()) {
-                         return false;
-                     } else {
-+                        if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemMergeEvent(this, entityitem).isCancelled()) return false; // CraftBukkit
-                         itemstack1.add(itemstack.getCount());
-                         entityitem.pickupDelay = Math.max(entityitem.pickupDelay, this.pickupDelay);
-                         entityitem.age = Math.min(entityitem.age, this.age);
-@@ -208,6 +225,11 @@
-         } else if (!this.getItemStack().isEmpty() && this.getItemStack().getItem() == Items.NETHER_STAR && damagesource.isExplosion()) {
-             return false;
-         } else {
-+            // CraftBukkit start
-+            if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
-+                return false;
-+            }
-+            // CraftBukkit end
-             this.ax();
-             this.f = (int) ((float) this.f - f);
-             if (this.f <= 0) {
-@@ -270,6 +292,35 @@
-             Item item = itemstack.getItem();
-             int i = itemstack.getCount();
- 
-+            // CraftBukkit start - fire PlayerPickupItemEvent
-+            int canHold = entityhuman.inventory.canHold(itemstack);
-+            int remaining = i - canHold;
-+
-+            if (this.pickupDelay <= 0 && canHold > 0) {
-+                itemstack.setCount(canHold);
-+                // Call legacy event
-+                PlayerPickupItemEvent playerEvent = new PlayerPickupItemEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
-+                playerEvent.setCancelled(!entityhuman.canPickUpLoot);
-+                this.world.getServer().getPluginManager().callEvent(playerEvent);
-+                if (playerEvent.isCancelled()) {
-+                    return;
-+                }
-+
-+                // Call newer event afterwards
-+                EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
-+                entityEvent.setCancelled(!entityhuman.canPickUpLoot);
-+                this.world.getServer().getPluginManager().callEvent(entityEvent);
-+                if (entityEvent.isCancelled()) {
-+                    return;
-+                }
-+
-+                itemstack.setCount(canHold + remaining);
-+
-+                // Possibly < 0; fix here so we do not have to modify code below
-+                this.pickupDelay = 0;
-+            }
-+            // CraftBukkit end
-+
-             if (this.pickupDelay == 0 && (this.h == null || 6000 - this.age <= 200 || this.h.equals(entityhuman.getName())) && entityhuman.inventory.pickup(itemstack)) {
-                 entityhuman.receive(this, i);
-                 if (itemstack.isEmpty()) {
diff --git a/nms-patches/EntityItemFrame.patch b/nms-patches/EntityItemFrame.patch
deleted file mode 100644
index f2cd4fa..0000000
--- a/nms-patches/EntityItemFrame.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/EntityItemFrame.java
-+++ b/net/minecraft/server/EntityItemFrame.java
-@@ -31,6 +31,11 @@
-             return false;
-         } else if (!damagesource.isExplosion() && !this.getItem().isEmpty()) {
-             if (!this.world.isClientSide) {
-+                // CraftBukkit start - fire EntityDamageEvent
-+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f, false) || this.dead) {
-+                    return true;
-+                }
-+                // CraftBukkit end
-                 this.b(damagesource.getEntity(), false);
-                 this.a(SoundEffects.du, 1.0F, 1.0F);
-                 this.setItem(ItemStack.a);
diff --git a/nms-patches/EntityLargeFireball.patch b/nms-patches/EntityLargeFireball.patch
deleted file mode 100644
index 3e4e73c..0000000
--- a/nms-patches/EntityLargeFireball.patch
+++ /dev/null
@@ -1,49 +0,0 @@
---- a/net/minecraft/server/EntityLargeFireball.java
-+++ b/net/minecraft/server/EntityLargeFireball.java
-@@ -1,15 +1,19 @@
- package net.minecraft.server;
- 
-+import org.bukkit.event.entity.ExplosionPrimeEvent; // CraftBukkit
-+
- public class EntityLargeFireball extends EntityFireball {
- 
-     public int yield = 1;
- 
-     public EntityLargeFireball(World world) {
-         super(world);
-+        isIncendiary = this.world.getGameRules().getBoolean("mobGriefing"); // CraftBukkit
-     }
- 
-     public EntityLargeFireball(World world, EntityLiving entityliving, double d0, double d1, double d2) {
-         super(world, entityliving, d0, d1, d2);
-+        isIncendiary = this.world.getGameRules().getBoolean("mobGriefing"); // CraftBukkit
-     }
- 
-     protected void a(MovingObjectPosition movingobjectposition) {
-@@ -21,7 +25,15 @@
- 
-             boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
- 
--            this.world.createExplosion((Entity) null, this.locX, this.locY, this.locZ, (float) this.yield, flag, flag);
-+            // CraftBukkit start - fire ExplosionPrimeEvent
-+            ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) org.bukkit.craftbukkit.entity.CraftEntity.getEntity(this.world.getServer(), this));
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (!event.isCancelled()) {
-+                // give 'this' instead of (Entity) null so we know what causes the damage
-+                this.world.createExplosion(this, this.locX, this.locY, this.locZ, event.getRadius(), event.getFire(), isIncendiary);
-+            }
-+            // CraftBukkit end
-             this.die();
-         }
- 
-@@ -39,7 +51,8 @@
-     public void a(NBTTagCompound nbttagcompound) {
-         super.a(nbttagcompound);
-         if (nbttagcompound.hasKeyOfType("ExplosionPower", 99)) {
--            this.yield = nbttagcompound.getInt("ExplosionPower");
-+            // CraftBukkit - set bukkitYield when setting explosionpower
-+            bukkitYield = this.yield = nbttagcompound.getInt("ExplosionPower");
-         }
- 
-     }
diff --git a/nms-patches/EntityLeash.patch b/nms-patches/EntityLeash.patch
deleted file mode 100644
index c742be1..0000000
--- a/nms-patches/EntityLeash.patch
+++ /dev/null
@@ -1,56 +0,0 @@
---- a/net/minecraft/server/EntityLeash.java
-+++ b/net/minecraft/server/EntityLeash.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+
- import java.util.Iterator;
- import java.util.List;
- import javax.annotation.Nullable;
-@@ -71,22 +73,42 @@
-             while (iterator.hasNext()) {
-                 entityinsentient = (EntityInsentient) iterator.next();
-                 if (entityinsentient.isLeashed() && entityinsentient.getLeashHolder() == entityhuman) {
-+                    // CraftBukkit start
-+                    if (CraftEventFactory.callPlayerLeashEntityEvent(entityinsentient, this, entityhuman).isCancelled()) {
-+                        ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutAttachEntity(entityinsentient, entityinsentient.getLeashHolder()));
-+                        continue;
-+                    }
-+                    // CraftBukkit end
-                     entityinsentient.setLeashHolder(this, true);
-                     flag = true;
-                 }
-             }
- 
-             if (!flag) {
--                this.die();
--                if (entityhuman.abilities.canInstantlyBuild) {
-+                // CraftBukkit start - Move below
-+                // this.die();
-+                boolean die = true;
-+                // CraftBukkit end
-+                if (true || entityhuman.abilities.canInstantlyBuild) { // CraftBukkit - Process for non-creative as well
-                     iterator = list.iterator();
- 
-                     while (iterator.hasNext()) {
-                         entityinsentient = (EntityInsentient) iterator.next();
-                         if (entityinsentient.isLeashed() && entityinsentient.getLeashHolder() == this) {
--                            entityinsentient.unleash(true, false);
-+                            // CraftBukkit start
-+                            if (CraftEventFactory.callPlayerUnleashEntityEvent(entityinsentient, entityhuman).isCancelled()) {
-+                                die = false;
-+                                continue;
-+                            }
-+                            entityinsentient.unleash(true, !entityhuman.abilities.canInstantlyBuild); // false -> survival mode boolean
-+                            // CraftBukkit end
-                         }
-                     }
-+                    // CraftBukkit start
-+                    if (die) {
-+                        this.die();
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
- 
diff --git a/nms-patches/EntityLightning.patch b/nms-patches/EntityLightning.patch
deleted file mode 100644
index ec1e14a..0000000
--- a/nms-patches/EntityLightning.patch
+++ /dev/null
@@ -1,93 +0,0 @@
---- a/net/minecraft/server/EntityLightning.java
-+++ b/net/minecraft/server/EntityLightning.java
-@@ -2,15 +2,19 @@
- 
- import java.util.List;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class EntityLightning extends EntityWeather {
- 
-     private int lifeTicks;
-     public long a;
-     private int c;
-     private final boolean d;
-+    public boolean isEffect; // CraftBukkit
- 
-     public EntityLightning(World world, double d0, double d1, double d2, boolean flag) {
-         super(world);
-+        this.isEffect = flag; // CraftBukkit
-         this.setPositionRotation(d0, d1, d2, 0.0F, 0.0F);
-         this.lifeTicks = 2;
-         this.a = this.random.nextLong();
-@@ -20,14 +24,22 @@
- 
-         if (!flag && !world.isClientSide && world.getGameRules().getBoolean("doFireTick") && (world.getDifficulty() == EnumDifficulty.NORMAL || world.getDifficulty() == EnumDifficulty.HARD) && world.areChunksLoaded(blockposition, 10)) {
-             if (world.getType(blockposition).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(world, blockposition)) {
--                world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                // CraftBukkit start
-+                if (!CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
-+                    world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                }
-+                // CraftBukkit end
-             }
- 
-             for (int i = 0; i < 4; ++i) {
-                 BlockPosition blockposition1 = blockposition.a(this.random.nextInt(3) - 1, this.random.nextInt(3) - 1, this.random.nextInt(3) - 1);
- 
-                 if (world.getType(blockposition1).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(world, blockposition1)) {
--                    world.setTypeUpdate(blockposition1, Blocks.FIRE.getBlockData());
-+                    // CraftBukkit start
-+                    if (!CraftEventFactory.callBlockIgniteEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), this).isCancelled()) {
-+                        world.setTypeUpdate(blockposition1, Blocks.FIRE.getBlockData());
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
-         }
-@@ -41,7 +53,24 @@
-     public void B_() {
-         super.B_();
-         if (this.lifeTicks == 2) {
--            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dK, SoundCategory.WEATHER, 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
-+            // CraftBukkit start - Use relative location for far away sounds
-+            // this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dG, SoundCategory.WEATHER, 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
-+            float pitch = 0.8F + this.random.nextFloat() * 0.2F;
-+            int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
-+            for (EntityPlayer player : (List<EntityPlayer>) (List) this.world.players) {
-+                double deltaX = this.locX - player.locX;
-+                double deltaZ = this.locZ - player.locZ;
-+                double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
-+                if (distanceSquared > viewDistance * viewDistance) {
-+                    double deltaLength = Math.sqrt(distanceSquared);
-+                    double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
-+                    double relativeZ = player.locZ + (deltaZ / deltaLength) * viewDistance;
-+                    player.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.dK, SoundCategory.WEATHER, relativeX, this.locY, relativeZ, 10000.0F, pitch));
-+                } else {
-+                    player.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.dK, SoundCategory.WEATHER, this.locX, this.locY, this.locZ, 10000.0F, pitch));
-+                }
-+            }
-+            // CraftBukkit end
-             this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dJ, SoundCategory.WEATHER, 2.0F, 0.5F + this.random.nextFloat() * 0.2F);
-         }
- 
-@@ -57,13 +86,17 @@
-                     BlockPosition blockposition = new BlockPosition(this);
- 
-                     if (this.world.getGameRules().getBoolean("doFireTick") && this.world.areChunksLoaded(blockposition, 10) && this.world.getType(blockposition).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(this.world, blockposition)) {
--                        this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                        // CraftBukkit start - add "!isEffect"
-+                        if (!isEffect && !CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
-+                            this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                        }
-+                        // CraftBukkit end
-                     }
-                 }
-             }
-         }
- 
--        if (this.lifeTicks >= 0) {
-+        if (this.lifeTicks >= 0 && !this.isEffect) { // CraftBukkit - add !this.isEffect
-             if (this.world.isClientSide) {
-                 this.world.d(2);
-             } else if (!this.d) {
diff --git a/nms-patches/EntityLiving.patch b/nms-patches/EntityLiving.patch
deleted file mode 100644
index 0172fc2..0000000
--- a/nms-patches/EntityLiving.patch
+++ /dev/null
@@ -1,651 +0,0 @@
---- a/net/minecraft/server/EntityLiving.java
-+++ b/net/minecraft/server/EntityLiving.java
-@@ -13,6 +13,24 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import java.util.ArrayList;
-+import com.google.common.base.Function;
-+import com.google.common.collect.Lists;
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.entity.LivingEntity;
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.entity.EntityDamageEvent;
-+import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
-+import org.bukkit.event.entity.EntityRegainHealthEvent;
-+import org.bukkit.event.entity.EntityResurrectEvent;
-+import org.bukkit.event.entity.EntityTeleportEvent;
-+import org.bukkit.event.player.PlayerItemConsumeEvent;
-+// CraftBukkit end
-+
- public abstract class EntityLiving extends Entity {
- 
-     private static final Logger a = LogManager.getLogger();
-@@ -88,6 +106,15 @@
-     private BlockPosition bF;
-     private DamageSource bG;
-     private long bH;
-+    // CraftBukkit start
-+    public int expToDrop;
-+    public int maxAirTicks = 300;
-+    boolean forceDrops;
-+    ArrayList<org.bukkit.inventory.ItemStack> drops = new ArrayList<org.bukkit.inventory.ItemStack>();
-+    public org.bukkit.craftbukkit.attribute.CraftAttributeMap craftAttributes;
-+    public boolean collides = true;
-+    public boolean canPickUpLoot;
-+    // CraftBukkit end
- 
-     public void killEntity() {
-         this.damageEntity(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE);
-@@ -102,7 +129,8 @@
-         this.updateEffects = true;
-         this.activeItem = ItemStack.a;
-         this.initAttributes();
--        this.setHealth(this.getMaxHealth());
-+        // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
-+        this.datawatcher.set(EntityLiving.HEALTH, (float) this.getAttributeInstance(GenericAttributes.maxHealth).getValue());
-         this.i = true;
-         this.aM = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
-         this.setPosition(this.locX, this.locY, this.locZ);
-@@ -140,7 +168,13 @@
-                 double d1 = Math.min((double) (0.2F + f / 15.0F), 2.5D);
-                 int i = (int) (150.0D * d1);
- 
--                ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
-+                // CraftBukkit start - visiblity api
-+                if (this instanceof EntityPlayer) {
-+                    ((WorldServer) this.world).sendParticles((EntityPlayer) this, EnumParticle.BLOCK_DUST, false, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
-+                } else {
-+                    ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
-+                }
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -202,7 +236,11 @@
-                     this.stopRiding();
-                 }
-             } else {
--                this.setAirTicks(300);
-+                // CraftBukkit start - Only set if needed to work around a DataWatcher inefficiency
-+                if (this.getAirTicks() != 300) {
-+                    this.setAirTicks(maxAirTicks);
-+                }
-+                // CraftBukkit end
-             }
- 
-             if (!this.world.isClientSide) {
-@@ -259,6 +297,18 @@
-         this.world.methodProfiler.b();
-     }
- 
-+    // CraftBukkit start
-+    public int getExpReward() {
-+        int exp = this.getExpValue(this.killer);
-+
-+        if (!this.world.isClientSide && (this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) {
-+            return exp;
-+        } else {
-+            return 0;
-+        }
-+    }
-+    // CraftBukkit end
-+
-     protected void b(BlockPosition blockposition) {
-         int i = EnchantmentManager.a(Enchantments.j, this);
- 
-@@ -274,19 +324,19 @@
- 
-     protected void bO() {
-         ++this.deathTicks;
--        if (this.deathTicks == 20) {
-+        if (this.deathTicks >= 20 && !this.dead) { // CraftBukkit - (this.deathTicks == 20) -> (this.deathTicks >= 20 && !this.dead)
-             int i;
- 
--            if (!this.world.isClientSide && (this.alwaysGivesExp() || this.lastDamageByPlayerTime > 0 && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot"))) {
--                i = this.getExpValue(this.killer);
--
--                while (i > 0) {
--                    int j = EntityExperienceOrb.getOrbValue(i);
-+            // CraftBukkit start - Update getExpReward() above if the removed if() changes!
-+            i = this.expToDrop;
-+            while (i > 0) {
-+                int j = EntityExperienceOrb.getOrbValue(i);
- 
--                    i -= j;
--                    this.world.addEntity(new EntityExperienceOrb(this.world, this.locX, this.locY, this.locZ, j));
--                }
-+                i -= j;
-+                this.world.addEntity(new EntityExperienceOrb(this.world, this.locX, this.locY, this.locZ, j));
-             }
-+            this.expToDrop = 0;
-+            // CraftBukkit end
- 
-             this.die();
- 
-@@ -442,6 +492,17 @@
-             }
-         }
- 
-+        // CraftBukkit start
-+        if (nbttagcompound.hasKey("Bukkit.MaxHealth")) {
-+            NBTBase nbtbase = nbttagcompound.get("Bukkit.MaxHealth");
-+            if (nbtbase.getTypeId() == 5) {
-+                this.getAttributeInstance(GenericAttributes.maxHealth).setValue(((NBTTagFloat) nbtbase).asDouble());
-+            } else if (nbtbase.getTypeId() == 3) {
-+                this.getAttributeInstance(GenericAttributes.maxHealth).setValue(((NBTTagInt) nbtbase).asDouble());
-+            }
-+        }
-+        // CraftBukkit end
-+
-         if (nbttagcompound.hasKeyOfType("Health", 99)) {
-             this.setHealth(nbttagcompound.getFloat("Health"));
-         }
-@@ -464,9 +525,15 @@
- 
-     }
- 
-+    // CraftBukkit start
-+    private boolean isTickingEffects = false;
-+    private List<Object> effectsToProcess = Lists.newArrayList();
-+    // CraftBukkit end
-+
-     protected void tickPotionEffects() {
-         Iterator iterator = this.effects.keySet().iterator();
- 
-+        isTickingEffects = true; // CraftBukkit
-         try {
-             while (iterator.hasNext()) {
-                 MobEffectList mobeffectlist = (MobEffectList) iterator.next();
-@@ -484,6 +551,17 @@
-         } catch (ConcurrentModificationException concurrentmodificationexception) {
-             ;
-         }
-+        // CraftBukkit start
-+        isTickingEffects = false;
-+        for (Object e : effectsToProcess) {
-+            if (e instanceof MobEffect) {
-+                addEffect((MobEffect) e);
-+            } else {
-+                removeEffect((MobEffectList) e);
-+            }
-+        }
-+        effectsToProcess.clear();
-+        // CraftBukkit end
- 
-         if (this.updateEffects) {
-             if (!this.world.isClientSide) {
-@@ -585,6 +663,12 @@
-     }
- 
-     public void addEffect(MobEffect mobeffect) {
-+        // CraftBukkit start
-+        if (isTickingEffects) {
-+            effectsToProcess.add(mobeffect);
-+            return;
-+        }
-+        // CraftBukkit end
-         if (this.d(mobeffect)) {
-             MobEffect mobeffect1 = (MobEffect) this.effects.get(mobeffect.getMobEffect());
- 
-@@ -617,6 +701,12 @@
- 
-     @Nullable
-     public MobEffect c(@Nullable MobEffectList mobeffectlist) {
-+        // CraftBukkit start
-+        if (isTickingEffects) {
-+            effectsToProcess.add(mobeffectlist);
-+            return null;
-+        }
-+        // CraftBukkit end
-         return (MobEffect) this.effects.remove(mobeffectlist);
-     }
- 
-@@ -656,20 +746,52 @@
- 
-     }
- 
-+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
-     public void heal(float f) {
-+        heal(f, EntityRegainHealthEvent.RegainReason.CUSTOM);
-+    }
-+
-+    public void heal(float f, EntityRegainHealthEvent.RegainReason regainReason) {
-         float f1 = this.getHealth();
- 
-         if (f1 > 0.0F) {
--            this.setHealth(f1 + f);
-+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (!event.isCancelled()) {
-+                this.setHealth((float) (this.getHealth() + event.getAmount()));
-+            }
-+            // CraftBukkit end
-         }
- 
-     }
- 
-     public final float getHealth() {
-+        // CraftBukkit start - Use unscaled health
-+        if (this instanceof EntityPlayer) {
-+            return (float) ((EntityPlayer) this).getBukkitEntity().getHealth();
-+        }
-+        // CraftBukkit end
-         return ((Float) this.datawatcher.get(EntityLiving.HEALTH)).floatValue();
-     }
- 
-     public void setHealth(float f) {
-+        // CraftBukkit start - Handle scaled health
-+        if (this instanceof EntityPlayer) {
-+            org.bukkit.craftbukkit.entity.CraftPlayer player = ((EntityPlayer) this).getBukkitEntity();
-+            // Squeeze
-+            if (f < 0.0F) {
-+                player.setRealHealth(0.0D);
-+            } else if (f > player.getMaxHealth()) {
-+                player.setRealHealth(player.getMaxHealth());
-+            } else {
-+                player.setRealHealth(f);
-+            }
-+
-+            this.datawatcher.set(EntityLiving.HEALTH, Float.valueOf(player.getScaledHealth()));
-+            return;
-+        }
-+        // CraftBukkit end
-         this.datawatcher.set(EntityLiving.HEALTH, Float.valueOf(MathHelper.a(f, 0.0F, this.getMaxHealth())));
-     }
- 
-@@ -687,14 +809,16 @@
-             } else {
-                 float f1 = f;
- 
--                if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && !this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
-+                // CraftBukkit - Moved into damageEntity0(DamageSource, float)
-+                if (false && (damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && !this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
-                     this.getEquipment(EnumItemSlot.HEAD).damage((int) (f * 4.0F + this.random.nextFloat() * f * 2.0F), this);
-                     f *= 0.75F;
-                 }
- 
--                boolean flag = false;
-+                boolean flag = f > 0.0F && this.applyBlockingModifier(damagesource); // Copied from below
- 
--                if (f > 0.0F && this.applyBlockingModifier(damagesource)) {
-+                // CraftBukkit - Moved into damageEntity0(DamageSource, float)
-+                if (false && f > 0.0F && this.applyBlockingModifier(damagesource)) {
-                     this.damageShield(f);
-                     f = 0.0F;
-                     if (!damagesource.a()) {
-@@ -713,20 +837,39 @@
- 
-                 if ((float) this.noDamageTicks > (float) this.maxNoDamageTicks / 2.0F) {
-                     if (f <= this.lastDamage) {
-+                        this.forceExplosionKnockback = true; // CraftBukkit - SPIGOT-949 - for vanilla consistency, cooldown does not prevent explosion knockback
-                         return false;
-                     }
- 
--                    this.damageEntity0(damagesource, f - this.lastDamage);
-+                    // CraftBukkit start
-+                    if (!this.damageEntity0(damagesource, f - this.lastDamage)) {
-+                        return false;
-+                    }
-+                    // CraftBukkit end
-                     this.lastDamage = f;
-                     flag1 = false;
-                 } else {
-+                    // CraftBukkit start
-+                    if (!this.damageEntity0(damagesource, f)) {
-+                        return false;
-+                    }
-                     this.lastDamage = f;
-                     this.noDamageTicks = this.maxNoDamageTicks;
--                    this.damageEntity0(damagesource, f);
-+                    // this.damageEntity0(damagesource, f);
-+                    // CraftBukkit end
-                     this.az = 10;
-                     this.hurtTicks = this.az;
-                 }
- 
-+                // CraftBukkit start
-+                if (this instanceof EntityAnimal) {
-+                    ((EntityAnimal) this).resetLove();
-+                    if (this instanceof EntityTameableAnimal) {
-+                        ((EntityTameableAnimal) this).getGoalSit().setSitting(false);
-+                    }
-+                }
-+                // CraftBukkit end
-+
-                 this.aA = 0.0F;
-                 Entity entity1 = damagesource.getEntity();
- 
-@@ -833,18 +976,26 @@
-             EnumHand[] aenumhand = EnumHand.values();
-             int i = aenumhand.length;
- 
-+            // CraftBukkit start
-+            ItemStack itemstack1 = ItemStack.a;
-             for (int j = 0; j < i; ++j) {
-                 EnumHand enumhand = aenumhand[j];
--                ItemStack itemstack1 = this.b(enumhand);
-+                itemstack1 = this.b(enumhand);
- 
-                 if (itemstack1.getItem() == Items.cY) {
-                     itemstack = itemstack1.cloneItemStack();
--                    itemstack1.subtract(1);
-+                    // itemstack1.subtract(1); // CraftBukkit
-                     break;
-                 }
-             }
- 
--            if (itemstack != null) {
-+            EntityResurrectEvent event = new EntityResurrectEvent((LivingEntity) this.getBukkitEntity());
-+            event.setCancelled(itemstack == null);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (!event.isCancelled()) {
-+                itemstack1.subtract(1);
-+                // CraftBukkit end
-                 if (this instanceof EntityPlayer) {
-                     EntityPlayer entityplayer = (EntityPlayer) this;
- 
-@@ -859,7 +1010,7 @@
-                 this.world.broadcastEntityEffect(this, (byte) 35);
-             }
- 
--            return itemstack != null;
-+            return !event.isCancelled();
-         }
-     }
- 
-@@ -944,6 +1095,12 @@
-                     boolean flag = this.lastDamageByPlayerTime > 0;
- 
-                     this.a(flag, i, damagesource);
-+                    // CraftBukkit start - Call death event
-+                    CraftEventFactory.callEntityDeathEvent(this, this.drops);
-+                    this.drops = new ArrayList<org.bukkit.inventory.ItemStack>();
-+                } else {
-+                    CraftEventFactory.callEntityDeathEvent(this);
-+                    // CraftBukkit end
-                 }
-             }
- 
-@@ -1033,8 +1190,13 @@
-         int i = MathHelper.f((f - 3.0F - f2) * f1);
- 
-         if (i > 0) {
-+            // CraftBukkit start
-+            if (!this.damageEntity(DamageSource.FALL, (float) i)) {
-+                return;
-+            }
-+            // CraftBukkit end
-             this.a(this.e(i), 1.0F, 1.0F);
--            this.damageEntity(DamageSource.FALL, (float) i);
-+            // this.damageEntity(DamageSource.FALL, (float) i); // CraftBukkit - moved up
-             int j = MathHelper.floor(this.locX);
-             int k = MathHelper.floor(this.locY - 0.20000000298023224D);
-             int l = MathHelper.floor(this.locZ);
-@@ -1061,7 +1223,7 @@
- 
-     protected float applyArmorModifier(DamageSource damagesource, float f) {
-         if (!damagesource.ignoresArmor()) {
--            this.damageArmor(f);
-+            // this.damageArmor(f); // CraftBukkit - Moved into damageEntity0(DamageSource, float)
-             f = CombatMath.a(f, (float) this.getArmorStrength(), (float) this.getAttributeInstance(GenericAttributes.i).getValue());
-         }
- 
-@@ -1074,7 +1236,8 @@
-         } else {
-             int i;
- 
--            if (this.hasEffect(MobEffects.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
-+            // CraftBukkit - Moved to damageEntity0(DamageSource, float)
-+            if (false && this.hasEffect(MobEffects.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
-                 i = (this.getEffect(MobEffects.RESISTANCE).getAmplifier() + 1) * 5;
-                 int j = 25 - i;
-                 float f1 = f * (float) j;
-@@ -1095,22 +1258,142 @@
-         }
-     }
- 
--    protected void damageEntity0(DamageSource damagesource, float f) {
--        if (!this.isInvulnerable(damagesource)) {
--            f = this.applyArmorModifier(damagesource, f);
--            f = this.applyMagicModifier(damagesource, f);
--            float f1 = f;
--
--            f = Math.max(f - this.getAbsorptionHearts(), 0.0F);
--            this.setAbsorptionHearts(this.getAbsorptionHearts() - (f1 - f));
--            if (f != 0.0F) {
-+    // CraftBukkit start
-+    protected boolean damageEntity0(final DamageSource damagesource, float f) { // void -> boolean, add final
-+       if (!this.isInvulnerable(damagesource)) {
-+            final boolean human = this instanceof EntityHuman;
-+            float originalDamage = f;
-+            Function<Double, Double> hardHat = new Function<Double, Double>() {
-+                @Override
-+                public Double apply(Double f) {
-+                    if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && !EntityLiving.this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
-+                        return -(f - (f * 0.75F));
-+
-+                    }
-+                    return -0.0;
-+                }
-+            };
-+            float hardHatModifier = hardHat.apply((double) f).floatValue();
-+            f += hardHatModifier;
-+
-+            Function<Double, Double> blocking = new Function<Double, Double>() {
-+                @Override
-+                public Double apply(Double f) {
-+                    return -((EntityLiving.this.applyBlockingModifier(damagesource)) ? f : 0.0);
-+                }
-+            };
-+            float blockingModifier = blocking.apply((double) f).floatValue();
-+            f += blockingModifier;
-+
-+            Function<Double, Double> armor = new Function<Double, Double>() {
-+                @Override
-+                public Double apply(Double f) {
-+                    return -(f - EntityLiving.this.applyArmorModifier(damagesource, f.floatValue()));
-+                }
-+            };
-+            float armorModifier = armor.apply((double) f).floatValue();
-+            f += armorModifier;
-+
-+            Function<Double, Double> resistance = new Function<Double, Double>() {
-+                @Override
-+                public Double apply(Double f) {
-+                    if (!damagesource.isStarvation() && EntityLiving.this.hasEffect(MobEffects.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
-+                        int i = (EntityLiving.this.getEffect(MobEffects.RESISTANCE).getAmplifier() + 1) * 5;
-+                        int j = 25 - i;
-+                        float f1 = f.floatValue() * (float) j;
-+                        return -(f - (f1 / 25.0F));
-+                    }
-+                    return -0.0;
-+                }
-+            };
-+            float resistanceModifier = resistance.apply((double) f).floatValue();
-+            f += resistanceModifier;
-+
-+            Function<Double, Double> magic = new Function<Double, Double>() {
-+                @Override
-+                public Double apply(Double f) {
-+                    return -(f - EntityLiving.this.applyMagicModifier(damagesource, f.floatValue()));
-+                }
-+            };
-+            float magicModifier = magic.apply((double) f).floatValue();
-+            f += magicModifier;
-+
-+            Function<Double, Double> absorption = new Function<Double, Double>() {
-+                @Override
-+                public Double apply(Double f) {
-+                    return -(Math.max(f - Math.max(f - EntityLiving.this.getAbsorptionHearts(), 0.0F), 0.0F));
-+                }
-+            };
-+            float absorptionModifier = absorption.apply((double) f).floatValue();
-+
-+            EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
-+            if (event.isCancelled()) {
-+                return false;
-+            }
-+
-+            f = (float) event.getFinalDamage();
-+
-+            // Apply damage to helmet
-+            if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getEquipment(EnumItemSlot.HEAD) != null) {
-+                this.getEquipment(EnumItemSlot.HEAD).damage((int) (event.getDamage() * 4.0F + this.random.nextFloat() * event.getDamage() * 2.0F), this);
-+            }
-+
-+            // Apply damage to armor
-+            if (!damagesource.ignoresArmor()) {
-+                float armorDamage = (float) (event.getDamage() + event.getDamage(DamageModifier.BLOCKING) + event.getDamage(DamageModifier.HARD_HAT));
-+                this.damageArmor(armorDamage);
-+            }
-+
-+            // Apply blocking code // PAIL: steal from above
-+            if (event.getDamage(DamageModifier.BLOCKING) < 0) {
-+                this.damageShield((float) -event.getDamage(DamageModifier.BLOCKING));
-+                Entity entity = damagesource.i();
-+
-+                if (entity instanceof EntityLiving) {
-+                    this.c((EntityLiving) entity);
-+                }
-+            }
-+
-+            absorptionModifier = (float) -event.getDamage(DamageModifier.ABSORPTION);
-+            this.setAbsorptionHearts(Math.max(this.getAbsorptionHearts() - absorptionModifier, 0.0F));
-+            if (f > 0 || !human) {
-+                if (human) {
-+                    // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
-+                    ((EntityHuman) this).applyExhaustion(damagesource.getExhaustionCost());
-+                    if (f < 3.4028235E37F) {
-+                        ((EntityHuman) this).a(StatisticList.z, Math.round(f * 10.0F));
-+                    }
-+                }
-+                // CraftBukkit end
-                 float f2 = this.getHealth();
- 
-                 this.setHealth(f2 - f);
-                 this.getCombatTracker().trackDamage(damagesource, f2, f);
--                this.setAbsorptionHearts(this.getAbsorptionHearts() - f);
-+                // CraftBukkit start
-+                if (!human) {
-+                    this.setAbsorptionHearts(this.getAbsorptionHearts() - f);
-+                }
-+
-+                return true;
-+            } else {
-+                // Duplicate triggers if blocking
-+                if (event.getDamage(DamageModifier.BLOCKING) < 0) {
-+                    if (this instanceof EntityPlayer) {
-+                        CriterionTriggers.h.a((EntityPlayer) this, damagesource, f, originalDamage, true);
-+                    }
-+
-+                    if (damagesource.getEntity() instanceof EntityPlayer) {
-+                        CriterionTriggers.g.a((EntityPlayer) damagesource.getEntity(), this, damagesource, f, originalDamage, true);
-+                    }
-+
-+                    return false;
-+                } else {
-+                    return originalDamage > 0;
-+                }
-+                // CraftBukkit end
-             }
-         }
-+        return false; // CraftBukkit
-     }
- 
-     public CombatTracker getCombatTracker() {
-@@ -1177,6 +1460,7 @@
-     public AttributeMapBase getAttributeMap() {
-         if (this.attributeMap == null) {
-             this.attributeMap = new AttributeMapServer();
-+            this.craftAttributes = new CraftAttributeMap(attributeMap); // CraftBukkit
-         }
- 
-         return this.attributeMap;
-@@ -1469,6 +1753,7 @@
-                 }
- 
-                 if (this.onGround && !this.world.isClientSide) {
-+                    if (getFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
-                     this.setFlag(7, false);
-                 }
-             } else {
-@@ -1838,6 +2123,7 @@
-         }
- 
-         if (!this.world.isClientSide) {
-+            if (flag != this.getFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
-             this.setFlag(7, flag);
-         }
- 
-@@ -1931,11 +2217,11 @@
-     }
- 
-     public boolean isInteractable() {
--        return !this.dead;
-+        return !this.dead && this.collides; // CraftBukkit
-     }
- 
-     public boolean isCollidable() {
--        return this.isAlive() && !this.m_();
-+        return this.isAlive() && !this.m_() && this.collides; // CraftBukkit
-     }
- 
-     protected void ax() {
-@@ -2072,7 +2358,27 @@
-     protected void v() {
-         if (!this.activeItem.isEmpty() && this.isHandRaised()) {
-             this.b(this.activeItem, 16);
--            this.a(this.cH(), this.activeItem.a(this.world, this));
-+            // CraftBukkit start - fire PlayerItemConsumeEvent
-+            ItemStack itemstack;
-+            if (this instanceof EntityPlayer) {
-+                org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.activeItem);
-+                PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((Player) this.getBukkitEntity(), craftItem);
-+                world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    // Update client
-+                    ((EntityPlayer) this).getBukkitEntity().updateInventory();
-+                    ((EntityPlayer) this).getBukkitEntity().updateScaledHealth();
-+                    return;
-+                }
-+
-+                itemstack = (craftItem.equals(event.getItem())) ? this.activeItem.a(this.world, this) : CraftItemStack.asNMSCopy(event.getItem()).a(world, this);
-+            } else {
-+                itemstack = this.activeItem.a(this.world, this);
-+            }
-+
-+            this.a(this.cH(), itemstack);
-+            // CraftBukkit end
-             this.cN();
-         }
- 
-@@ -2151,10 +2457,18 @@
-             }
- 
-             if (flag1) {
--                this.enderTeleportTo(this.locX, this.locY, this.locZ);
--                if (world.getCubes(this, this.getBoundingBox()).isEmpty() && !world.containsLiquid(this.getBoundingBox())) {
--                    flag = true;
-+                // CraftBukkit start - Teleport event
-+                // this.enderTeleportTo(this.locX, this.locY, this.locZ);
-+                EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.world.getWorld(), d3, d4, d5), new Location(this.world.getWorld(), this.locX, this.locY, this.locZ));
-+                this.world.getServer().getPluginManager().callEvent(teleport);
-+                if (!teleport.isCancelled()) {
-+                    Location to = teleport.getTo();
-+                    this.enderTeleportTo(to.getX(), to.getY(), to.getZ());
-+                    if (world.getCubes(this, this.getBoundingBox()).isEmpty() && !world.containsLiquid(this.getBoundingBox())) {
-+                        flag = true;
-+                    }
-                 }
-+                // CraftBukkit end
-             }
-         }
- 
diff --git a/nms-patches/EntityLlamaSpit.patch b/nms-patches/EntityLlamaSpit.patch
deleted file mode 100644
index 4b28424..0000000
--- a/nms-patches/EntityLlamaSpit.patch
+++ /dev/null
@@ -1,19 +0,0 @@
---- a/net/minecraft/server/EntityLlamaSpit.java
-+++ b/net/minecraft/server/EntityLlamaSpit.java
-@@ -7,7 +7,7 @@
- 
- public class EntityLlamaSpit extends Entity implements IProjectile {
- 
--    public EntityLlama shooter;
-+    public EntityLiving shooter; // CraftBukkit - type
-     private NBTTagCompound b;
- 
-     public EntityLlamaSpit(World world) {
-@@ -143,6 +143,7 @@
-     }
- 
-     public void a(MovingObjectPosition movingobjectposition) {
-+        org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition); // Craftbukkit - Call event
-         if (movingobjectposition.entity != null && this.shooter != null) {
-             movingobjectposition.entity.damageEntity(DamageSource.a(this, this.shooter).b(), 1.0F);
-         }
diff --git a/nms-patches/EntityMinecartAbstract.patch b/nms-patches/EntityMinecartAbstract.patch
deleted file mode 100644
index 5f5d070..0000000
--- a/nms-patches/EntityMinecartAbstract.patch
+++ /dev/null
@@ -1,227 +0,0 @@
---- a/net/minecraft/server/EntityMinecartAbstract.java
-+++ b/net/minecraft/server/EntityMinecartAbstract.java
-@@ -6,6 +6,15 @@
- import java.util.Map;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.Location;
-+import org.bukkit.entity.Vehicle;
-+import org.bukkit.event.vehicle.VehicleDamageEvent;
-+import org.bukkit.event.vehicle.VehicleDestroyEvent;
-+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
-+import org.bukkit.util.Vector;
-+// CraftBukkit end
-+
- public abstract class EntityMinecartAbstract extends Entity implements INamableTileEntity {
- 
-     private static final DataWatcherObject<Integer> a = DataWatcher.a(EntityMinecartAbstract.class, DataWatcherRegistry.b);
-@@ -23,6 +32,17 @@
-     private double ax;
-     private double ay;
- 
-+    // CraftBukkit start
-+    public boolean slowWhenEmpty = true;
-+    private double derailedX = 0.5;
-+    private double derailedY = 0.5;
-+    private double derailedZ = 0.5;
-+    private double flyingX = 0.95;
-+    private double flyingY = 0.95;
-+    private double flyingZ = 0.95;
-+    public double maxSpeed = 0.4D;
-+    // CraftBukkit end
-+
-     public EntityMinecartAbstract(World world) {
-         super(world);
-         this.i = true;
-@@ -101,6 +121,19 @@
-             if (this.isInvulnerable(damagesource)) {
-                 return false;
-             } else {
-+                // CraftBukkit start - fire VehicleDamageEvent
-+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
-+                org.bukkit.entity.Entity passenger = (damagesource.getEntity() == null) ? null : damagesource.getEntity().getBukkitEntity();
-+
-+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, f);
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    return true;
-+                }
-+
-+                f = (float) event.getDamage();
-+                // CraftBukkit end
-                 this.e(-this.u());
-                 this.d(10);
-                 this.ax();
-@@ -108,6 +141,15 @@
-                 boolean flag = damagesource.getEntity() instanceof EntityHuman && ((EntityHuman) damagesource.getEntity()).abilities.canInstantlyBuild;
- 
-                 if (flag || this.getDamage() > 40.0F) {
-+                    // CraftBukkit start
-+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
-+                    this.world.getServer().getPluginManager().callEvent(destroyEvent);
-+
-+                    if (destroyEvent.isCancelled()) {
-+                        this.setDamage(40); // Maximize damage so this doesn't get triggered again right away
-+                        return true;
-+                    }
-+                    // CraftBukkit end
-                     this.ejectPassengers();
-                     if (flag && !this.hasCustomName()) {
-                         this.die();
-@@ -146,6 +188,14 @@
-     }
- 
-     public void B_() {
-+        // CraftBukkit start
-+        double prevX = this.locX;
-+        double prevY = this.locY;
-+        double prevZ = this.locZ;
-+        float prevYaw = this.yaw;
-+        float prevPitch = this.pitch;
-+        // CraftBukkit end
-+
-         if (this.getType() > 0) {
-             this.d(this.getType() - 1);
-         }
-@@ -166,7 +216,7 @@
- 
-             i = this.Z();
-             if (this.ak) {
--                if (minecraftserver.getAllowNether()) {
-+                if (true || minecraftserver.getAllowNether()) { // CraftBukkit - multi-world should still allow teleport even if default vanilla nether disabled
-                     if (!this.isPassenger() && this.al++ >= i) {
-                         this.al = i;
-                         this.portalCooldown = this.aM();
-@@ -266,6 +316,18 @@
-             }
- 
-             this.setYawPitch(this.yaw, this.pitch);
-+            // CraftBukkit start
-+            org.bukkit.World bworld = this.world.getWorld();
-+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
-+            Location to = new Location(bworld, this.locX, this.locY, this.locZ, this.yaw, this.pitch);
-+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
-+
-+            this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
-+
-+            if (!from.equals(to)) {
-+                this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
-+            }
-+            // CraftBukkit end
-             if (this.v() == EntityMinecartAbstract.EnumMinecartType.RIDEABLE && this.motX * this.motX + this.motZ * this.motZ > 0.01D) {
-                 List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D), IEntitySelector.a(this));
- 
-@@ -274,8 +336,24 @@
-                         Entity entity = (Entity) list.get(l);
- 
-                         if (!(entity instanceof EntityHuman) && !(entity instanceof EntityIronGolem) && !(entity instanceof EntityMinecartAbstract) && !this.isVehicle() && !entity.isPassenger()) {
-+                            // CraftBukkit start
-+                            VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
-+                            this.world.getServer().getPluginManager().callEvent(collisionEvent);
-+
-+                            if (collisionEvent.isCancelled()) {
-+                                continue;
-+                            }
-+                            // CraftBukkit end
-                             entity.startRiding(this);
-                         } else {
-+                            // CraftBukkit start
-+                            VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
-+                            this.world.getServer().getPluginManager().callEvent(collisionEvent);
-+
-+                            if (collisionEvent.isCancelled()) {
-+                                continue;
-+                            }
-+                            // CraftBukkit end
-                             entity.collide(this);
-                         }
-                     }
-@@ -287,6 +365,14 @@
-                     Entity entity1 = (Entity) iterator.next();
- 
-                     if (!this.w(entity1) && entity1.isCollidable() && entity1 instanceof EntityMinecartAbstract) {
-+                        // CraftBukkit start
-+                        VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
-+                        this.world.getServer().getPluginManager().callEvent(collisionEvent);
-+
-+                        if (collisionEvent.isCancelled()) {
-+                            continue;
-+                        }
-+                        // CraftBukkit end
-                         entity1.collide(this);
-                     }
-                 }
-@@ -297,7 +383,7 @@
-     }
- 
-     protected double p() {
--        return 0.4D;
-+        return this.maxSpeed; // CraftBukkit
-     }
- 
-     public void a(int i, int j, int k, boolean flag) {}
-@@ -308,16 +394,20 @@
-         this.motX = MathHelper.a(this.motX, -d0, d0);
-         this.motZ = MathHelper.a(this.motZ, -d0, d0);
-         if (this.onGround) {
--            this.motX *= 0.5D;
--            this.motY *= 0.5D;
--            this.motZ *= 0.5D;
-+            // CraftBukkit start - replace magic numbers with our variables
-+            this.motX *= this.derailedX;
-+            this.motY *= this.derailedY;
-+            this.motZ *= this.derailedZ;
-+            // CraftBukkit end
-         }
- 
-         this.move(EnumMoveType.SELF, this.motX, this.motY, this.motZ);
-         if (!this.onGround) {
--            this.motX *= 0.949999988079071D;
--            this.motY *= 0.949999988079071D;
--            this.motZ *= 0.949999988079071D;
-+            // CraftBukkit start - replace magic numbers with our variables
-+            this.motX *= this.flyingX;
-+            this.motY *= this.flyingY;
-+            this.motZ *= this.flyingZ;
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -505,7 +595,7 @@
-     }
- 
-     protected void r() {
--        if (this.isVehicle()) {
-+        if (this.isVehicle() || !this.slowWhenEmpty) { // CraftBukkit - add !this.slowWhenEmpty
-             this.motX *= 0.996999979019165D;
-             this.motY *= 0.0D;
-             this.motZ *= 0.996999979019165D;
-@@ -780,4 +870,26 @@
- 
-         }
-     }
-+
-+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
-+    public Vector getFlyingVelocityMod() {
-+        return new Vector(flyingX, flyingY, flyingZ);
-+    }
-+
-+    public void setFlyingVelocityMod(Vector flying) {
-+        flyingX = flying.getX();
-+        flyingY = flying.getY();
-+        flyingZ = flying.getZ();
-+    }
-+
-+    public Vector getDerailedVelocityMod() {
-+        return new Vector(derailedX, derailedY, derailedZ);
-+    }
-+
-+    public void setDerailedVelocityMod(Vector derailed) {
-+        derailedX = derailed.getX();
-+        derailedY = derailed.getY();
-+        derailedZ = derailed.getZ();
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/EntityMinecartCommandBlock.patch b/nms-patches/EntityMinecartCommandBlock.patch
deleted file mode 100644
index 1f44e4a..0000000
--- a/nms-patches/EntityMinecartCommandBlock.patch
+++ /dev/null
@@ -1,12 +0,0 @@
---- a/net/minecraft/server/EntityMinecartCommandBlock.java
-+++ b/net/minecraft/server/EntityMinecartCommandBlock.java
-@@ -5,6 +5,9 @@
-     public static final DataWatcherObject<String> COMMAND = DataWatcher.a(EntityMinecartCommandBlock.class, DataWatcherRegistry.d);
-     private static final DataWatcherObject<IChatBaseComponent> b = DataWatcher.a(EntityMinecartCommandBlock.class, DataWatcherRegistry.e);
-     private final CommandBlockListenerAbstract c = new CommandBlockListenerAbstract() {
-+        {
-+            this.sender = (org.bukkit.craftbukkit.entity.CraftMinecartCommand) EntityMinecartCommandBlock.this.getBukkitEntity(); // CraftBukkit - Set the sender
-+        }
-         public void i() {
-             EntityMinecartCommandBlock.this.getDataWatcher().set(EntityMinecartCommandBlock.COMMAND, this.getCommand());
-             EntityMinecartCommandBlock.this.getDataWatcher().set(EntityMinecartCommandBlock.b, this.l());
diff --git a/nms-patches/EntityMinecartContainer.patch b/nms-patches/EntityMinecartContainer.patch
deleted file mode 100644
index 19c2f36..0000000
--- a/nms-patches/EntityMinecartContainer.patch
+++ /dev/null
@@ -1,79 +0,0 @@
---- a/net/minecraft/server/EntityMinecartContainer.java
-+++ b/net/minecraft/server/EntityMinecartContainer.java
-@@ -3,6 +3,13 @@
- import java.util.Iterator;
- import java.util.Random;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import java.util.List;
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+import org.bukkit.inventory.InventoryHolder;
-+// CraftBukkit end
- 
- public abstract class EntityMinecartContainer extends EntityMinecartAbstract implements ITileInventory, ILootable {
- 
-@@ -11,15 +18,51 @@
-     private MinecraftKey c;
-     private long d;
- 
-+    // CraftBukkit start
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public InventoryHolder getOwner() {
-+        org.bukkit.entity.Entity cart = getBukkitEntity();
-+        if(cart instanceof InventoryHolder) return (InventoryHolder) cart;
-+        return null;
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+
-+    @Override
-+    public Location getLocation() {
-+        return getBukkitEntity().getLocation();
-+    }
-+    // CraftBukkit end
-+
-     public EntityMinecartContainer(World world) {
-         super(world);
--        this.items = NonNullList.a(36, ItemStack.a);
-+        this.items = NonNullList.a(this.getSize(), ItemStack.a); // CraftBukkit - SPIGOT-3513
-         this.b = true;
-     }
- 
-     public EntityMinecartContainer(World world, double d0, double d1, double d2) {
-         super(world, d0, d1, d2);
--        this.items = NonNullList.a(36, ItemStack.a);
-+        this.items = NonNullList.a(this.getSize(), ItemStack.a); // CraftBukkit - SPIGOT-3513
-         this.b = true;
-     }
- 
-@@ -93,7 +136,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return maxStack; // CraftBukkit
-     }
- 
-     @Nullable
diff --git a/nms-patches/EntityMonster.patch b/nms-patches/EntityMonster.patch
deleted file mode 100644
index 0a19ca7..0000000
--- a/nms-patches/EntityMonster.patch
+++ /dev/null
@@ -1,26 +0,0 @@
---- a/net/minecraft/server/EntityMonster.java
-+++ b/net/minecraft/server/EntityMonster.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.event.entity.EntityCombustByEntityEvent; // CraftBukkit
-+
- public abstract class EntityMonster extends EntityCreature implements IMonster {
- 
-     public EntityMonster(World world) {
-@@ -75,7 +77,14 @@
-             int j = EnchantmentManager.getFireAspectEnchantmentLevel(this);
- 
-             if (j > 0) {
--                entity.setOnFire(j * 4);
-+                // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
-+                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
-+                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
-+
-+                if (!combustEvent.isCancelled()) {
-+                    entity.setOnFire(combustEvent.getDuration());
-+                }
-+                // CraftBukkit end
-             }
- 
-             if (entity instanceof EntityHuman) {
diff --git a/nms-patches/EntityMushroomCow.patch b/nms-patches/EntityMushroomCow.patch
deleted file mode 100644
index 4fa155b..0000000
--- a/nms-patches/EntityMushroomCow.patch
+++ /dev/null
@@ -1,25 +0,0 @@
---- a/net/minecraft/server/EntityMushroomCow.java
-+++ b/net/minecraft/server/EntityMushroomCow.java
-@@ -1,6 +1,7 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+import org.bukkit.event.player.PlayerShearEntityEvent; // CraftBukkit
- 
- public class EntityMushroomCow extends EntityCow {
- 
-@@ -27,6 +28,14 @@
- 
-             return true;
-         } else if (itemstack.getItem() == Items.SHEARS && this.getAge() >= 0) {
-+            // CraftBukkit start
-+            PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                return false;
-+            }
-+            // CraftBukkit end
-             this.die();
-             this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
-             if (!this.world.isClientSide) {
diff --git a/nms-patches/EntityOcelot.patch b/nms-patches/EntityOcelot.patch
deleted file mode 100644
index 1caea98..0000000
--- a/nms-patches/EntityOcelot.patch
+++ /dev/null
@@ -1,40 +0,0 @@
---- a/net/minecraft/server/EntityOcelot.java
-+++ b/net/minecraft/server/EntityOcelot.java
-@@ -57,7 +57,7 @@
-     }
- 
-     protected boolean isTypeNotPersistent() {
--        return !this.isTamed() && this.ticksLived > 2400;
-+        return !this.isTamed() /*&& this.ticksLived > 2400*/; // CraftBukkit
-     }
- 
-     protected void initAttributes() {
-@@ -108,7 +108,8 @@
-             return false;
-         } else {
-             if (this.goalSit != null) {
--                this.goalSit.setSitting(false);
-+                // CraftBukkit - moved into EntityLiving.d(DamageSource, float)
-+                // this.goalSit.setSitting(false);
-             }
- 
-             return super.damageEntity(damagesource, f);
-@@ -133,7 +134,8 @@
-             }
- 
-             if (!this.world.isClientSide) {
--                if (this.random.nextInt(3) == 0) {
-+                // CraftBukkit - added event call and isCancelled check
-+                if (this.random.nextInt(3) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
-                     this.c(entityhuman);
-                     this.setCatType(1 + this.world.random.nextInt(3));
-                     this.p(true);
-@@ -237,7 +239,7 @@
- 
-                 entityocelot.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, 0.0F);
-                 entityocelot.setAgeRaw(-24000);
--                this.world.addEntity(entityocelot);
-+                this.world.addEntity(entityocelot, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.OCELOT_BABY); // CraftBukkit - add SpawnReason
-             }
-         }
- 
diff --git a/nms-patches/EntityPainting.patch b/nms-patches/EntityPainting.patch
deleted file mode 100644
index 06269bb..0000000
--- a/nms-patches/EntityPainting.patch
+++ /dev/null
@@ -1,10 +0,0 @@
---- a/net/minecraft/server/EntityPainting.java
-+++ b/net/minecraft/server/EntityPainting.java
-@@ -11,6 +11,7 @@
- 
-     public EntityPainting(World world) {
-         super(world);
-+        this.art = EnumArt.values()[this.random.nextInt(EnumArt.values().length)]; // CraftBukkit - generate a non-null painting
-     }
- 
-     public EntityPainting(World world, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/nms-patches/EntityParrot.patch b/nms-patches/EntityParrot.patch
deleted file mode 100644
index 432c1d9..0000000
--- a/nms-patches/EntityParrot.patch
+++ /dev/null
@@ -1,103 +0,0 @@
---- a/net/minecraft/server/EntityParrot.java
-+++ b/net/minecraft/server/EntityParrot.java
-@@ -15,7 +15,7 @@
-     private static final DataWatcherObject<Integer> bG = DataWatcher.a(EntityParrot.class, DataWatcherRegistry.b);
-     private static final Predicate<EntityInsentient> bH = new Predicate() {
-         public boolean a(@Nullable EntityInsentient entityinsentient) {
--            return entityinsentient != null && EntityParrot.bK.containsKey(EntityTypes.b.a((Object) entityinsentient.getClass()));
-+            return entityinsentient != null && EntityParrot.bK.containsKey(EntityTypes.b.a(entityinsentient.getClass())); // CraftBukkit - decompile error
-         }
- 
-         public boolean apply(@Nullable Object object) {
-@@ -114,7 +114,7 @@
-                 EntityInsentient entityinsentient = (EntityInsentient) list.get(world.random.nextInt(list.size()));
- 
-                 if (!entityinsentient.isSilent()) {
--                    SoundEffect soundeffect = g(EntityTypes.b.a((Object) entityinsentient.getClass()));
-+                    SoundEffect soundeffect = g(EntityTypes.b.a(entityinsentient.getClass())); // CraftBukkit - decompile error
- 
-                     world.a((EntityHuman) null, entity.locX, entity.locY, entity.locZ, soundeffect, entity.bK(), 0.7F, b(world.random));
-                     return true;
-@@ -140,7 +140,7 @@
-             }
- 
-             if (!this.world.isClientSide) {
--                if (this.random.nextInt(10) == 0) {
-+                if (this.random.nextInt(10) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) { // CraftBukkit
-                     this.c(entityhuman);
-                     this.p(true);
-                     this.world.broadcastEntityEffect(this, (byte) 7);
-@@ -276,7 +276,8 @@
-             return false;
-         } else {
-             if (this.goalSit != null) {
--                this.goalSit.setSitting(false);
-+                // CraftBukkit - moved into EntityLiving.d(DamageSource, float)
-+                // this.goalSit.setSitting(false);
-             }
- 
-             return super.damageEntity(damagesource, f);
-@@ -316,33 +317,35 @@
-     }
- 
-     static {
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityBlaze.class), SoundEffects.eM);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityCaveSpider.class), SoundEffects.fc);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityCreeper.class), SoundEffects.eN);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityGuardianElder.class), SoundEffects.eO);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityEnderDragon.class), SoundEffects.eP);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityEnderman.class), SoundEffects.eQ);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityEndermite.class), SoundEffects.eR);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityEvoker.class), SoundEffects.eS);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityGhast.class), SoundEffects.eT);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityZombieHusk.class), SoundEffects.eU);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityIllagerIllusioner.class), SoundEffects.eV);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityMagmaCube.class), SoundEffects.eW);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityPigZombie.class), SoundEffects.fl);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityPolarBear.class), SoundEffects.eX);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityShulker.class), SoundEffects.eY);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntitySilverfish.class), SoundEffects.eZ);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntitySkeleton.class), SoundEffects.fa);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntitySlime.class), SoundEffects.fb);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntitySpider.class), SoundEffects.fc);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntitySkeletonStray.class), SoundEffects.fd);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityVex.class), SoundEffects.fe);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityVindicator.class), SoundEffects.ff);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityWitch.class), SoundEffects.fg);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityWither.class), SoundEffects.fh);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntitySkeletonWither.class), SoundEffects.fi);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityWolf.class), SoundEffects.fj);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityZombie.class), SoundEffects.fk);
--        EntityParrot.bK.put(EntityTypes.b.a((Object) EntityZombieVillager.class), SoundEffects.fm);
-+        // CraftBukkit start
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityBlaze.class), SoundEffects.eM);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityCaveSpider.class), SoundEffects.fc);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityCreeper.class), SoundEffects.eN);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityGuardianElder.class), SoundEffects.eO);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityEnderDragon.class), SoundEffects.eP);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityEnderman.class), SoundEffects.eQ);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityEndermite.class), SoundEffects.eR);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityEvoker.class), SoundEffects.eS);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityGhast.class), SoundEffects.eT);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityZombieHusk.class), SoundEffects.eU);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityIllagerIllusioner.class), SoundEffects.eV);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityMagmaCube.class), SoundEffects.eW);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityPigZombie.class), SoundEffects.fl);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityPolarBear.class), SoundEffects.eX);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityShulker.class), SoundEffects.eY);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntitySilverfish.class), SoundEffects.eZ);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntitySkeleton.class), SoundEffects.fa);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntitySlime.class), SoundEffects.fb);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntitySpider.class), SoundEffects.fc);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntitySkeletonStray.class), SoundEffects.fd);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityVex.class), SoundEffects.fe);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityVindicator.class), SoundEffects.ff);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityWitch.class), SoundEffects.fg);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityWither.class), SoundEffects.fh);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntitySkeletonWither.class), SoundEffects.fi);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityWolf.class), SoundEffects.fj);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityZombie.class), SoundEffects.fk);
-+        EntityParrot.bK.put(EntityTypes.b.a(EntityZombieVillager.class), SoundEffects.fm);
-+        // CraftBukkit end
-     }
- }
diff --git a/nms-patches/EntityPig.patch b/nms-patches/EntityPig.patch
deleted file mode 100644
index 0af22aa..0000000
--- a/nms-patches/EntityPig.patch
+++ /dev/null
@@ -1,50 +0,0 @@
---- a/net/minecraft/server/EntityPig.java
-+++ b/net/minecraft/server/EntityPig.java
-@@ -4,6 +4,8 @@
- import java.util.Set;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-+
- public class EntityPig extends EntityAnimal {
- 
-     private static final DataWatcherObject<Boolean> bx = DataWatcher.a(EntityPig.class, DataWatcherRegistry.h);
-@@ -124,13 +126,14 @@
-     }
- 
-     public void die(DamageSource damagesource) {
--        super.die(damagesource);
-+        // super.die(damagesource); // CraftBukkit - Moved to end
-         if (!this.world.isClientSide) {
-             if (this.hasSaddle()) {
-                 this.a(Items.SADDLE, 1);
-             }
- 
-         }
-+        super.die(damagesource); // CraftBukkit - Moved from above
-     }
- 
-     @Nullable
-@@ -155,6 +158,12 @@
-         if (!this.world.isClientSide && !this.dead) {
-             EntityPigZombie entitypigzombie = new EntityPigZombie(this.world);
- 
-+            // CraftBukkit start
-+            if (CraftEventFactory.callPigZapEvent(this, entitylightning, entitypigzombie).isCancelled()) {
-+                return;
-+            }
-+            // CraftBukkit end
-+
-             entitypigzombie.setSlot(EnumItemSlot.MAINHAND, new ItemStack(Items.GOLDEN_SWORD));
-             entitypigzombie.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
-             entitypigzombie.setNoAI(this.isNoAI());
-@@ -163,7 +172,8 @@
-                 entitypigzombie.setCustomNameVisible(this.getCustomNameVisible());
-             }
- 
--            this.world.addEntity(entitypigzombie);
-+            // CraftBukkit - added a reason for spawning this creature
-+            this.world.addEntity(entitypigzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING);
-             this.die();
-         }
-     }
diff --git a/nms-patches/EntityPlayer.patch b/nms-patches/EntityPlayer.patch
deleted file mode 100644
index 20d242d..0000000
--- a/nms-patches/EntityPlayer.patch
+++ /dev/null
@@ -1,776 +0,0 @@
---- a/net/minecraft/server/EntityPlayer.java
-+++ b/net/minecraft/server/EntityPlayer.java
-@@ -11,10 +11,27 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import com.google.common.base.Preconditions;
-+import org.bukkit.Bukkit;
-+import org.bukkit.GameMode;
-+import org.bukkit.WeatherType;
-+import org.bukkit.craftbukkit.CraftWorld;
-+import org.bukkit.craftbukkit.entity.CraftPlayer;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.inventory.InventoryType;
-+import org.bukkit.event.player.PlayerChangedMainHandEvent;
-+import org.bukkit.event.player.PlayerGameModeChangeEvent;
-+import org.bukkit.event.player.PlayerLocaleChangeEvent;
-+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
-+import org.bukkit.inventory.MainHand;
-+// CraftBukkit end
-+
- public class EntityPlayer extends EntityHuman implements ICrafting {
- 
-     private static final Logger bV = LogManager.getLogger();
--    public String locale = "en_US";
-+    public String locale = "en_us"; // CraftBukkit - lowercase
-     public PlayerConnection playerConnection;
-     public final MinecraftServer server;
-     public final PlayerInteractManager playerInteractManager;
-@@ -50,6 +67,19 @@
-     public int ping;
-     public boolean viewingCredits;
- 
-+    // CraftBukkit start
-+    public String displayName;
-+    public IChatBaseComponent listName;
-+    public org.bukkit.Location compassTarget;
-+    public int newExp = 0;
-+    public int newLevel = 0;
-+    public int newTotalExp = 0;
-+    public boolean keepLevel = false;
-+    public double maxHealthCache;
-+    public boolean joining = true;
-+    public boolean sentListPacket = false;
-+    // CraftBukkit end
-+
-     public EntityPlayer(MinecraftServer minecraftserver, WorldServer worldserver, GameProfile gameprofile, PlayerInteractManager playerinteractmanager) {
-         super(worldserver, gameprofile);
-         playerinteractmanager.player = this;
-@@ -81,6 +111,11 @@
-             this.setPosition(this.locX, this.locY + 1.0D, this.locZ);
-         }
- 
-+        // CraftBukkit start
-+        this.displayName = this.getName();
-+        this.canPickUpLoot = true;
-+        this.maxHealthCache = this.getMaxHealth();
-+        // CraftBukkit end
-     }
- 
-     public void a(NBTTagCompound nbttagcompound) {
-@@ -103,6 +138,7 @@
-         if (nbttagcompound.hasKeyOfType("recipeBook", 10)) {
-             this.cr.a(nbttagcompound.getCompound("recipeBook"));
-         }
-+        this.getBukkitEntity().readExtraData(nbttagcompound); // CraftBukkit
- 
-     }
- 
-@@ -149,8 +185,34 @@
-         }
- 
-         nbttagcompound.set("recipeBook", this.cr.c());
-+        this.getBukkitEntity().setExtraData(nbttagcompound); // CraftBukkit
-     }
- 
-+    // CraftBukkit start - World fallback code, either respawn location or global spawn
-+    public void spawnIn(World world) {
-+        super.spawnIn(world);
-+        if (world == null) {
-+            this.dead = false;
-+            BlockPosition position = null;
-+            if (this.spawnWorld != null && !this.spawnWorld.equals("")) {
-+                CraftWorld cworld = (CraftWorld) Bukkit.getServer().getWorld(this.spawnWorld);
-+                if (cworld != null && this.getBed() != null) {
-+                    world = cworld.getHandle();
-+                    position = EntityHuman.getBed(cworld.getHandle(), this.getBed(), false);
-+                }
-+            }
-+            if (world == null || position == null) {
-+                world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
-+                position = world.getSpawn();
-+            }
-+            this.world = world;
-+            this.setPosition(position.getX() + 0.5, position.getY(), position.getZ() + 0.5);
-+        }
-+        this.dimension = ((WorldServer) this.world).dimension;
-+        this.playerInteractManager.a((WorldServer) world);
-+    }
-+    // CraftBukkit end
-+
-     public void levelDown(int i) {
-         super.levelDown(i);
-         this.lastSentExp = -1;
-@@ -184,6 +246,11 @@
-     }
- 
-     public void B_() {
-+        // CraftBukkit start
-+        if (this.joining) {
-+            this.joining = false;
-+        }
-+        // CraftBukkit end
-         this.playerInteractManager.a();
-         --this.invulnerableTicks;
-         if (this.noDamageTicks > 0) {
-@@ -249,7 +316,7 @@
-             }
- 
-             if (this.getHealth() != this.lastHealthSent || this.ch != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.ci) {
--                this.playerConnection.sendPacket(new PacketPlayOutUpdateHealth(this.getHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel()));
-+                this.playerConnection.sendPacket(new PacketPlayOutUpdateHealth(this.getBukkitEntity().getScaledHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel())); // CraftBukkit
-                 this.lastHealthSent = this.getHealth();
-                 this.ch = this.foodData.getFoodLevel();
-                 this.ci = this.foodData.getSaturationLevel() == 0.0F;
-@@ -270,6 +337,12 @@
-                 this.a(IScoreboardCriteria.i, MathHelper.f((float) this.cc));
-             }
- 
-+            // CraftBukkit start - Force max health updates
-+            if (this.maxHealthCache != this.getMaxHealth()) {
-+                this.getBukkitEntity().updateScaledHealth();
-+            }
-+            // CraftBukkit end
-+
-             if (this.getArmorStrength() != this.cd) {
-                 this.cd = this.getArmorStrength();
-                 this.a(IScoreboardCriteria.j, MathHelper.f((float) this.cd));
-@@ -294,6 +367,16 @@
-                 CriterionTriggers.o.a(this);
-             }
- 
-+            // CraftBukkit start - initialize oldLevel and fire PlayerLevelChangeEvent
-+            if (this.oldLevel == -1) {
-+                this.oldLevel = this.expLevel;
-+            }
-+
-+            if (this.oldLevel != this.expLevel) {
-+                CraftEventFactory.callPlayerLevelChangeEvent(this.world.getServer().getPlayer((EntityPlayer) this), this.oldLevel, this.expLevel);
-+                this.oldLevel = this.expLevel;
-+            }
-+            // CraftBukkit end
-         } catch (Throwable throwable) {
-             CrashReport crashreport = CrashReport.a(throwable, "Ticking player");
-             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Player being ticked");
-@@ -304,12 +387,11 @@
-     }
- 
-     private void a(IScoreboardCriteria iscoreboardcriteria, int i) {
--        Collection collection = this.getScoreboard().getObjectivesForCriteria(iscoreboardcriteria);
-+        Collection collection = this.world.getServer().getScoreboardManager().getScoreboardScores(iscoreboardcriteria, this.getName(), new java.util.ArrayList<ScoreboardScore>()); // CraftBukkit - Use our scores instead
-         Iterator iterator = collection.iterator();
- 
-         while (iterator.hasNext()) {
--            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
--            ScoreboardScore scoreboardscore = this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective);
-+            ScoreboardScore scoreboardscore = (ScoreboardScore) iterator.next(); // CraftBukkit - Use our scores instead
- 
-             scoreboardscore.setScore(i);
-         }
-@@ -320,32 +402,62 @@
-         boolean flag = this.world.getGameRules().getBoolean("showDeathMessages");
- 
-         this.playerConnection.sendPacket(new PacketPlayOutCombatEvent(this.getCombatTracker(), PacketPlayOutCombatEvent.EnumCombatEventType.ENTITY_DIED, flag));
--        if (flag) {
--            ScoreboardTeamBase scoreboardteambase = this.aY();
-+        // CraftBukkit start - fire PlayerDeathEvent
-+        if (this.dead) {
-+            return;
-+        }
-+        java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>(this.inventory.getSize());
-+        boolean keepInventory = this.world.getGameRules().getBoolean("keepInventory") || this.isSpectator();
-+
-+        if (!keepInventory) {
-+            for (ItemStack item : this.inventory.getContents()) {
-+                if (!item.isEmpty() && !EnchantmentManager.shouldNotDrop(item)) {
-+                    loot.add(CraftItemStack.asCraftMirror(item));
-+                }
-+            }
-+        }
-+
-+        IChatBaseComponent chatmessage = this.getCombatTracker().getDeathMessage();
- 
--            if (scoreboardteambase != null && scoreboardteambase.getDeathMessageVisibility() != ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS) {
--                if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OTHER_TEAMS) {
--                    this.server.getPlayerList().a((EntityHuman) this, this.getCombatTracker().getDeathMessage());
--                } else if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OWN_TEAM) {
--                    this.server.getPlayerList().b((EntityHuman) this, this.getCombatTracker().getDeathMessage());
-+        String deathmessage = chatmessage.toPlainText();
-+        org.bukkit.event.entity.PlayerDeathEvent event = CraftEventFactory.callPlayerDeathEvent(this, loot, deathmessage, keepInventory);
-+
-+        String deathMessage = event.getDeathMessage();
-+
-+        if (deathMessage != null && deathMessage.length() > 0 && flag) { // TODO: allow plugins to override?
-+            if (deathMessage.equals(deathmessage)) {
-+                ScoreboardTeamBase scoreboardteambase = this.aY();
-+
-+                if (scoreboardteambase != null && scoreboardteambase.getDeathMessageVisibility() != ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS) {
-+                    if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OTHER_TEAMS) {
-+                        this.server.getPlayerList().a((EntityHuman) this, chatmessage);
-+                    } else if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OWN_TEAM) {
-+                        this.server.getPlayerList().b((EntityHuman) this, chatmessage);
-+                    }
-+                } else {
-+                    this.server.getPlayerList().sendMessage(chatmessage);
-                 }
-             } else {
--                this.server.getPlayerList().sendMessage(this.getCombatTracker().getDeathMessage());
-+                this.server.getPlayerList().sendMessage(org.bukkit.craftbukkit.util.CraftChatMessage.fromString(deathMessage));
-             }
-         }
- 
-         this.releaseShoulderEntities();
--        if (!this.world.getGameRules().getBoolean("keepInventory") && !this.isSpectator()) {
--            this.cV();
--            this.inventory.o();
-+        // we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
-+        if (!event.getKeepInventory()) {
-+            this.inventory.clear();
-         }
- 
--        Collection collection = this.world.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.d);
-+        this.closeInventory();
-+        this.setSpectatorTarget(this); // Remove spectated target
-+        // CraftBukkit end
-+
-+        // CraftBukkit - Get our scores instead
-+        Collection collection = this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreboardCriteria.d, this.getName(), new java.util.ArrayList<ScoreboardScore>());
-         Iterator iterator = collection.iterator();
- 
-         while (iterator.hasNext()) {
--            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
--            ScoreboardScore scoreboardscore = this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective);
-+            ScoreboardScore scoreboardscore = (ScoreboardScore) iterator.next(); // CraftBukkit - Use our scores instead
- 
-             scoreboardscore.incrementScore();
-         }
-@@ -373,29 +485,36 @@
-         if (entity != this) {
-             super.a(entity, i, damagesource);
-             this.addScore(i);
--            Collection collection = this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.f);
-+            // CraftBukkit - Get our scores instead
-+            Collection<ScoreboardScore> collection = this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreboardCriteria.f, this.getName(), new java.util.ArrayList<ScoreboardScore>());
- 
-             if (entity instanceof EntityHuman) {
-                 this.b(StatisticList.D);
--                collection.addAll(this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.e));
-+                // CraftBukkit - Get our scores instead
-+                this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreboardCriteria.e, this.getName(), collection);
-+                // collection.addAll(this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.e));
-+                // CraftBukkit end
-             } else {
-                 this.b(StatisticList.B);
-             }
- 
-             collection.addAll(this.E(entity));
--            Iterator iterator = collection.iterator();
-+            Iterator<ScoreboardScore> iterator = collection.iterator(); // CraftBukkit
- 
-             while (iterator.hasNext()) {
--                ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
-+                // CraftBukkit start
-+                // ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
- 
--                this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).incrementScore();
-+                // this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).incrementScore();
-+                iterator.next().incrementScore();
-+                // CraftBukkit end
-             }
- 
-             CriterionTriggers.b.a(this, entity, damagesource);
-         }
-     }
- 
--    private Collection<ScoreboardObjective> E(Entity entity) {
-+    private Collection<ScoreboardScore> E(Entity entity) { // CraftBukkit
-         String s = entity instanceof EntityHuman ? entity.getName() : entity.bn();
-         ScoreboardTeam scoreboardteam = this.getScoreboard().getPlayerTeam(this.getName());
- 
-@@ -420,7 +539,10 @@
-             int j = scoreboardteam1.getColor().b();
- 
-             if (j >= 0 && j < IScoreboardCriteria.m.length) {
--                return this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.m[j]);
-+                // CraftBukkit - Get our scores instead
-+                return this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreboardCriteria.m[j], this.getName(), new java.util.ArrayList<ScoreboardScore>());
-+                // return this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.m[j]);
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -462,12 +584,14 @@
-     }
- 
-     private boolean canPvP() {
--        return this.server.getPVP();
-+        // CraftBukkit - this.server.getPvP() -> this.world.pvpMode
-+        return this.world.pvpMode;
-     }
- 
-     @Nullable
-     public Entity b(int i) {
--        this.worldChangeInvuln = true;
-+        if (this.isSleeping()) return this; // CraftBukkit - SPIGOT-3154
-+        // this.worldChangeInvuln = true; // CraftBukkit - Moved down and into PlayerList#changeDimension
-         if (this.dimension == 0 && i == -1) {
-             this.cv = new Vec3D(this.locX, this.locY, this.locZ);
-         } else if (this.dimension != -1 && i != 0) {
-@@ -475,6 +599,7 @@
-         }
- 
-         if (this.dimension == 1 && i == 1) {
-+            this.worldChangeInvuln = true; // CraftBukkit - Moved down from above
-             this.world.kill(this);
-             if (!this.viewingCredits) {
-                 this.viewingCredits = true;
-@@ -488,7 +613,10 @@
-                 i = 1;
-             }
- 
--            this.server.getPlayerList().a(this, i);
-+            // CraftBukkit start
-+            TeleportCause cause = (this.dimension == 1 || i == 1) ? TeleportCause.END_PORTAL : TeleportCause.NETHER_PORTAL;
-+            this.server.getPlayerList().changeDimension(this, i, cause); // PAIL: check all this
-+            // CraftBukkit end
-             this.playerConnection.sendPacket(new PacketPlayOutWorldEvent(1032, BlockPosition.ZERO, 0, false));
-             this.lastSentExp = -1;
-             this.lastHealthSent = -1.0F;
-@@ -534,6 +662,7 @@
-     }
- 
-     public void a(boolean flag, boolean flag1, boolean flag2) {
-+        if (!this.sleeping) return; // CraftBukkit - Can't leave bed if not in one!
-         if (this.isSleeping()) {
-             this.x().getTracker().sendPacketToEntity(this, new PacketPlayOutAnimation(this, 2));
-         }
-@@ -612,23 +741,55 @@
-         this.playerConnection.sendPacket(new PacketPlayOutOpenSignEditor(tileentitysign.getPosition()));
-     }
- 
--    public void nextContainerCounter() {
-+    public int nextContainerCounter() { // CraftBukkit - void -> int
-         this.containerCounter = this.containerCounter % 100 + 1;
-+        return containerCounter; // CraftBukkit
-     }
- 
-     public void openTileEntity(ITileEntityContainer itileentitycontainer) {
--        if (itileentitycontainer instanceof ILootable && ((ILootable) itileentitycontainer).b() != null && this.isSpectator()) {
-+        // CraftBukkit start - Inventory open hook
-+        if (false && itileentitycontainer instanceof ILootable && ((ILootable) itileentitycontainer).b() != null && this.isSpectator()) {
-             this.a((new ChatMessage("container.spectatorCantOpen", new Object[0])).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)), true);
-         } else {
-+            boolean cancelled = itileentitycontainer instanceof ILootable && ((ILootable) itileentitycontainer).b() != null && this.isSpectator();
-+            Container container = CraftEventFactory.callInventoryOpenEvent(this, itileentitycontainer.createContainer(this.inventory, this), cancelled);
-+            if (container == null) {
-+                return;
-+            }
-             this.nextContainerCounter();
-+            this.activeContainer = container;
-             this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, itileentitycontainer.getContainerName(), itileentitycontainer.getScoreboardDisplayName()));
--            this.activeContainer = itileentitycontainer.createContainer(this.inventory, this);
-+            // CraftBukkit end
-             this.activeContainer.windowId = this.containerCounter;
-             this.activeContainer.addSlotListener(this);
-         }
-     }
- 
-     public void openContainer(IInventory iinventory) {
-+        // CraftBukkit start - Inventory open hook
-+        // Copied from below
-+        boolean cancelled = false;
-+        if (iinventory instanceof ITileInventory) {
-+            ITileInventory itileinventory = (ITileInventory) iinventory;
-+            cancelled = itileinventory.isLocked() && !this.a(itileinventory.getLock()) && !this.isSpectator();
-+        }
-+
-+        Container container;
-+        if (iinventory instanceof ITileEntityContainer) {
-+            if (iinventory instanceof TileEntity) {
-+                Preconditions.checkArgument(((TileEntity) iinventory).getWorld() != null, "Container must have world to be opened");
-+            }
-+            container = ((ITileEntityContainer) iinventory).createContainer(this.inventory, this);
-+        } else {
-+            container = new ContainerChest(this.inventory, iinventory, this);
-+        }
-+        container = CraftEventFactory.callInventoryOpenEvent(this, container, cancelled);
-+        if (container == null && !cancelled) { // Let pre-cancelled events fall through
-+            iinventory.closeContainer(this);
-+            return;
-+        }
-+        // CraftBukkit end
-+
-         if (iinventory instanceof ILootable && ((ILootable) iinventory).b() != null && this.isSpectator()) {
-             this.a((new ChatMessage("container.spectatorCantOpen", new Object[0])).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)), true);
-         } else {
-@@ -642,18 +803,21 @@
-                 if (itileinventory.isLocked() && !this.a(itileinventory.getLock()) && !this.isSpectator()) {
-                     this.playerConnection.sendPacket(new PacketPlayOutChat(new ChatMessage("container.isLocked", new Object[] { iinventory.getScoreboardDisplayName()}), ChatMessageType.GAME_INFO));
-                     this.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.ab, SoundCategory.BLOCKS, this.locX, this.locY, this.locZ, 1.0F, 1.0F));
-+                    iinventory.closeContainer(this); // CraftBukkit
-                     return;
-                 }
-             }
- 
-             this.nextContainerCounter();
-+            // CraftBukkit start
-             if (iinventory instanceof ITileEntityContainer) {
-+                this.activeContainer = container;
-                 this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, ((ITileEntityContainer) iinventory).getContainerName(), iinventory.getScoreboardDisplayName(), iinventory.getSize()));
--                this.activeContainer = ((ITileEntityContainer) iinventory).createContainer(this.inventory, this);
-             } else {
-+                this.activeContainer = container;
-                 this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, "minecraft:container", iinventory.getScoreboardDisplayName(), iinventory.getSize()));
--                this.activeContainer = new ContainerChest(this.inventory, iinventory, this);
-             }
-+            // CraftBukkit end
- 
-             this.activeContainer.windowId = this.containerCounter;
-             this.activeContainer.addSlotListener(this);
-@@ -661,8 +825,14 @@
-     }
- 
-     public void openTrade(IMerchant imerchant) {
-+        // CraftBukkit start - Inventory open hook
-+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerMerchant(this.inventory, imerchant, this.world));
-+        if (container == null) {
-+            return;
-+        }
-+        // CraftBukkit end
-         this.nextContainerCounter();
--        this.activeContainer = new ContainerMerchant(this.inventory, imerchant, this.world);
-+        this.activeContainer = container; // CraftBukkit
-         this.activeContainer.windowId = this.containerCounter;
-         this.activeContainer.addSlotListener(this);
-         InventoryMerchant inventorymerchant = ((ContainerMerchant) this.activeContainer).e();
-@@ -682,13 +852,20 @@
-     }
- 
-     public void openHorseInventory(EntityHorseAbstract entityhorseabstract, IInventory iinventory) {
-+        // CraftBukkit start - Inventory open hook
-+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerHorse(this.inventory, iinventory, entityhorseabstract, this));
-+        if (container == null) {
-+            iinventory.closeContainer(this);
-+            return;
-+        }
-+        // CraftBukkit end
-         if (this.activeContainer != this.defaultContainer) {
-             this.closeInventory();
-         }
- 
-         this.nextContainerCounter();
-         this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, "EntityHorse", iinventory.getScoreboardDisplayName(), iinventory.getSize(), entityhorseabstract.getId()));
--        this.activeContainer = new ContainerHorse(this.inventory, iinventory, entityhorseabstract, this);
-+        this.activeContainer = container; // CraftBukkit
-         this.activeContainer.windowId = this.containerCounter;
-         this.activeContainer.addSlotListener(this);
-     }
-@@ -729,6 +906,11 @@
-     public void a(Container container, NonNullList<ItemStack> nonnulllist) {
-         this.playerConnection.sendPacket(new PacketPlayOutWindowItems(container.windowId, nonnulllist));
-         this.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.inventory.getCarried()));
-+        // CraftBukkit start - Send a Set Slot to update the crafting result slot
-+        if (java.util.EnumSet.of(InventoryType.CRAFTING,InventoryType.WORKBENCH).contains(container.getBukkitView().getType())) {
-+            this.playerConnection.sendPacket(new PacketPlayOutSetSlot(container.windowId, 0, container.getSlot(0).getItem()));
-+        }
-+        // CraftBukkit end
-     }
- 
-     public void setContainerData(Container container, int i, int j) {
-@@ -743,6 +925,7 @@
-     }
- 
-     public void closeInventory() {
-+        CraftEventFactory.handleInventoryCloseEvent(this); // CraftBukkit
-         this.playerConnection.sendPacket(new PacketPlayOutCloseWindow(this.activeContainer.windowId));
-         this.r();
-     }
-@@ -814,10 +997,16 @@
-         for (int j = 0; j < i; ++j) {
-             MinecraftKey minecraftkey = aminecraftkey1[j];
- 
-+            // CraftBukkit start
-+            if (CraftingManager.a(minecraftkey) == null) {
-+                Bukkit.getLogger().warning("Ignoring grant of non existent recipe " + minecraftkey);
-+                continue;
-+            }
-+            // CraftBukit end
-             arraylist.add(CraftingManager.a(minecraftkey));
-         }
- 
--        this.a((List) arraylist);
-+        this.a((List<IRecipe>) arraylist); // CraftBukkit - decompile error
-     }
- 
-     public void b(List<IRecipe> list) {
-@@ -839,8 +1028,17 @@
- 
-     public void triggerHealthUpdate() {
-         this.lastHealthSent = -1.0E8F;
-+        this.lastSentExp = -1; // CraftBukkit - Added to reset
-     }
- 
-+    // CraftBukkit start - Support multi-line messages
-+    public void sendMessage(IChatBaseComponent[] ichatbasecomponent) {
-+        for (IChatBaseComponent component : ichatbasecomponent) {
-+            this.sendMessage(component);
-+        }
-+    }
-+    // CraftBukkit end
-+
-     public void a(IChatBaseComponent ichatbasecomponent, boolean flag) {
-         this.playerConnection.sendPacket(new PacketPlayOutChat(ichatbasecomponent, flag ? ChatMessageType.GAME_INFO : ChatMessageType.CHAT));
-     }
-@@ -879,7 +1077,7 @@
-         this.lastSentExp = -1;
-         this.lastHealthSent = -1.0F;
-         this.ch = -1;
--        this.cr.a((RecipeBook) entityplayer.cr);
-+        // this.cr.a((RecipeBook) entityplayer.cr); // CraftBukkit
-         this.removeQueue.addAll(entityplayer.removeQueue);
-         this.cq = entityplayer.cq;
-         this.cv = entityplayer.cv;
-@@ -938,6 +1136,18 @@
-     }
- 
-     public void a(EnumGamemode enumgamemode) {
-+        // CraftBukkit start
-+        if (enumgamemode == this.playerInteractManager.getGameMode()) {
-+            return;
-+        }
-+
-+        PlayerGameModeChangeEvent event = new PlayerGameModeChangeEvent(getBukkitEntity(), GameMode.getByValue(enumgamemode.getId()));
-+        world.getServer().getPluginManager().callEvent(event);
-+        if (event.isCancelled()) {
-+            return;
-+        }
-+        // CraftBukkit end
-+
-         this.playerInteractManager.setGameMode(enumgamemode);
-         this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(3, (float) enumgamemode.getId()));
-         if (enumgamemode == EnumGamemode.SPECTATOR) {
-@@ -964,6 +1174,7 @@
-     }
- 
-     public boolean a(int i, String s) {
-+        /* CraftBukkit start
-         if ("seed".equals(s) && !this.server.aa()) {
-             return true;
-         } else if (!"tell".equals(s) && !"help".equals(s) && !"me".equals(s) && !"trigger".equals(s)) {
-@@ -977,6 +1188,15 @@
-         } else {
-             return true;
-         }
-+        */
-+        if ("@".equals(s)) {
-+            return getBukkitEntity().hasPermission("minecraft.command.selector");
-+        }
-+        if ("".equals(s)) {
-+            return getBukkitEntity().isOp();
-+        }
-+        return getBukkitEntity().hasPermission("minecraft.command." + s);
-+        // CraftBukkit end
-     }
- 
-     public String A() {
-@@ -988,6 +1208,16 @@
-     }
- 
-     public void a(PacketPlayInSettings packetplayinsettings) {
-+        // CraftBukkit start
-+        if (getMainHand() != packetplayinsettings.getMainHand()) {
-+            PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(getBukkitEntity(), getMainHand() == EnumMainHand.LEFT ? MainHand.LEFT : MainHand.RIGHT);
-+            this.server.server.getPluginManager().callEvent(event);
-+        }
-+        if (!this.locale.equals(packetplayinsettings.a())) {
-+            PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(getBukkitEntity(), packetplayinsettings.a());
-+            this.server.server.getPluginManager().callEvent(event);
-+        }
-+        // CraftBukkit end
-         this.locale = packetplayinsettings.a();
-         this.cl = packetplayinsettings.c();
-         this.cm = packetplayinsettings.d();
-@@ -1053,7 +1283,7 @@
-         this.co = (Entity) (entity == null ? this : entity);
-         if (entity1 != this.co) {
-             this.playerConnection.sendPacket(new PacketPlayOutCamera(this.co));
--            this.enderTeleportTo(this.co.locX, this.co.locY, this.co.locZ);
-+            this.playerConnection.a(this.co.locX, this.co.locY, this.co.locZ, this.yaw, this.pitch, TeleportCause.SPECTATE); // CraftBukkit
-         }
- 
-     }
-@@ -1080,7 +1310,7 @@
- 
-     @Nullable
-     public IChatBaseComponent getPlayerListName() {
--        return null;
-+        return listName; // CraftBukkit
-     }
- 
-     public void a(EnumHand enumhand) {
-@@ -1097,12 +1327,17 @@
-     }
- 
-     public void N() {
-+        if (!CraftEventFactory.callToggleGlideEvent(this, true).isCancelled()) // CraftBukkit
-         this.setFlag(7, true);
-     }
- 
-     public void O() {
-+        // CraftBukkit start
-+        if (!CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
-         this.setFlag(7, true);
-         this.setFlag(7, false);
-+        }
-+        // CraftBukkit end
-     }
- 
-     public AdvancementDataPlayer getAdvancementData() {
-@@ -1113,4 +1348,144 @@
-     public Vec3D Q() {
-         return this.cv;
-     }
-+
-+    // CraftBukkit start - Add per-player time and weather.
-+    public long timeOffset = 0;
-+    public boolean relativeTime = true;
-+
-+    public long getPlayerTime() {
-+        if (this.relativeTime) {
-+            // Adds timeOffset to the current server time.
-+            return this.world.getDayTime() + this.timeOffset;
-+        } else {
-+            // Adds timeOffset to the beginning of this day.
-+            return this.world.getDayTime() - (this.world.getDayTime() % 24000) + this.timeOffset;
-+        }
-+    }
-+
-+    public WeatherType weather = null;
-+
-+    public WeatherType getPlayerWeather() {
-+        return this.weather;
-+    }
-+
-+    public void setPlayerWeather(WeatherType type, boolean plugin) {
-+        if (!plugin && this.weather != null) {
-+            return;
-+        }
-+
-+        if (plugin) {
-+            this.weather = type;
-+        }
-+
-+        if (type == WeatherType.DOWNFALL) {
-+            this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(2, 0));
-+        } else {
-+            this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(1, 0));
-+        }
-+    }
-+
-+    private float pluginRainPosition;
-+    private float pluginRainPositionPrevious;
-+
-+    public void updateWeather(float oldRain, float newRain, float oldThunder, float newThunder) {
-+        if (this.weather == null) {
-+            // Vanilla
-+            if (oldRain != newRain) {
-+                this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(7, newRain));
-+            }
-+        } else {
-+            // Plugin
-+            if (pluginRainPositionPrevious != pluginRainPosition) {
-+                this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(7, pluginRainPosition));
-+            }
-+        }
-+
-+        if (oldThunder != newThunder) {
-+            if (weather == WeatherType.DOWNFALL || weather == null) {
-+                this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(8, newThunder));
-+            } else {
-+                this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(8, 0));
-+            }
-+        }
-+    }
-+
-+    public void tickWeather() {
-+        if (this.weather == null) return;
-+
-+        pluginRainPositionPrevious = pluginRainPosition;
-+        if (weather == WeatherType.DOWNFALL) {
-+            pluginRainPosition += 0.01;
-+        } else {
-+            pluginRainPosition -= 0.01;
-+        }
-+
-+        pluginRainPosition = MathHelper.a(pluginRainPosition, 0.0F, 1.0F);
-+    }
-+
-+    public void resetPlayerWeather() {
-+        this.weather = null;
-+        this.setPlayerWeather(this.world.getWorldData().hasStorm() ? WeatherType.DOWNFALL : WeatherType.CLEAR, false);
-+    }
-+
-+    @Override
-+    public String toString() {
-+        return super.toString() + "(" + this.getName() + " at " + this.locX + "," + this.locY + "," + this.locZ + ")";
-+    }
-+
-+    // SPIGOT-1903, MC-98153
-+    public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
-+        this.setPositionRotation(x, y, z, yaw, pitch);
-+        this.playerConnection.syncPosition();
-+    }
-+
-+    @Override
-+    protected boolean isFrozen() {
-+        return super.isFrozen() || !getBukkitEntity().isOnline();
-+    }
-+
-+    @Override
-+    public Scoreboard getScoreboard() {
-+        return getBukkitEntity().getScoreboard().getHandle();
-+    }
-+
-+    public void reset() {
-+        float exp = 0;
-+        boolean keepInventory = this.world.getGameRules().getBoolean("keepInventory");
-+
-+        if (this.keepLevel || keepInventory) {
-+            exp = this.exp;
-+            this.newTotalExp = this.expTotal;
-+            this.newLevel = this.expLevel;
-+        }
-+
-+        this.setHealth(this.getMaxHealth());
-+        this.fireTicks = 0;
-+        this.fallDistance = 0;
-+        this.foodData = new FoodMetaData(this);
-+        this.expLevel = this.newLevel;
-+        this.expTotal = this.newTotalExp;
-+        this.exp = 0;
-+        this.deathTicks = 0;
-+        this.f(0); // PAIL: setArrowCount
-+        this.removeAllEffects();
-+        this.updateEffects = true;
-+        this.activeContainer = this.defaultContainer;
-+        this.killer = null;
-+        this.lastDamager = null;
-+        this.combatTracker = new CombatTracker(this);
-+        this.lastSentExp = -1;
-+        if (this.keepLevel || keepInventory) {
-+            this.exp = exp;
-+        } else {
-+            this.giveExp(this.newExp);
-+        }
-+        this.keepLevel = false;
-+    }
-+
-+    @Override
-+    public CraftPlayer getBukkitEntity() {
-+        return (CraftPlayer) super.getBukkitEntity();
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/EntityPotion.patch b/nms-patches/EntityPotion.patch
deleted file mode 100644
index 117e59d..0000000
--- a/nms-patches/EntityPotion.patch
+++ /dev/null
@@ -1,109 +0,0 @@
---- a/net/minecraft/server/EntityPotion.java
-+++ b/net/minecraft/server/EntityPotion.java
-@@ -6,6 +6,12 @@
- import javax.annotation.Nullable;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
-+// CraftBukkit start
-+import java.util.HashMap;
-+import java.util.Map;
-+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
-+import org.bukkit.entity.LivingEntity;
-+// CraftBukkit end
- 
- public class EntityPotion extends EntityProjectile {
- 
-@@ -87,7 +93,7 @@
- 
-             if (flag) {
-                 this.n();
--            } else if (!list.isEmpty()) {
-+            } else if (true || !list.isEmpty()) { // CraftBukkit - Call event even if no effects to apply
-                 if (this.isLingering()) {
-                     this.a(itemstack, potionregistry);
-                 } else {
-@@ -124,6 +130,7 @@
-     private void a(MovingObjectPosition movingobjectposition, List<MobEffect> list) {
-         AxisAlignedBB axisalignedbb = this.getBoundingBox().grow(4.0D, 2.0D, 4.0D);
-         List list1 = this.world.a(EntityLiving.class, axisalignedbb);
-+        Map<LivingEntity, Double> affected = new HashMap<LivingEntity, Double>(); // CraftBukkit
- 
-         if (!list1.isEmpty()) {
-             Iterator iterator = list1.iterator();
-@@ -141,21 +148,46 @@
-                             d1 = 1.0D;
-                         }
- 
--                        Iterator iterator1 = list.iterator();
-+                        // CraftBukkit start
-+                        affected.put((LivingEntity) entityliving.getBukkitEntity(), d1);
-+                    }
-+                }
-+            }
-+        }
-+
-+        org.bukkit.event.entity.PotionSplashEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPotionSplashEvent(this, affected);
-+        if (!event.isCancelled() && list != null && !list.isEmpty()) { // do not process effects if there are no effects to process
-+            for (LivingEntity victim : event.getAffectedEntities()) {
-+                if (!(victim instanceof CraftLivingEntity)) {
-+                    continue;
-+                }
- 
--                        while (iterator1.hasNext()) {
--                            MobEffect mobeffect = (MobEffect) iterator1.next();
--                            MobEffectList mobeffectlist = mobeffect.getMobEffect();
--
--                            if (mobeffectlist.isInstant()) {
--                                mobeffectlist.applyInstantEffect(this, this.getShooter(), entityliving, mobeffect.getAmplifier(), d1);
--                            } else {
--                                int i = (int) (d1 * (double) mobeffect.getDuration() + 0.5D);
--
--                                if (i > 20) {
--                                    entityliving.addEffect(new MobEffect(mobeffectlist, i, mobeffect.getAmplifier(), mobeffect.isAmbient(), mobeffect.isShowParticles()));
--                                }
--                            }
-+                EntityLiving entityliving = ((CraftLivingEntity) victim).getHandle();
-+                double d1 = event.getIntensity(victim);
-+                // CraftBukkit end
-+
-+                Iterator iterator1 = list.iterator();
-+
-+                while (iterator1.hasNext()) {
-+                    MobEffect mobeffect = (MobEffect) iterator1.next();
-+                    MobEffectList mobeffectlist = mobeffect.getMobEffect();
-+                    // CraftBukkit start - Abide by PVP settings - for players only!
-+                    if (!this.world.pvpMode && this.getShooter() instanceof EntityPlayer && entityliving instanceof EntityPlayer && entityliving != this.getShooter()) {
-+                        int i = MobEffectList.getId(mobeffectlist);
-+                        // Block SLOWER_MOVEMENT, SLOWER_DIG, HARM, BLINDNESS, HUNGER, WEAKNESS and POISON potions
-+                        if (i == 2 || i == 4 || i == 7 || i == 15 || i == 17 || i == 18 || i == 19) {
-+                            continue;
-+                        }
-+                    }
-+                    // CraftBukkit end
-+
-+                    if (mobeffectlist.isInstant()) {
-+                        mobeffectlist.applyInstantEffect(this, this.getShooter(), entityliving, mobeffect.getAmplifier(), d1);
-+                    } else {
-+                        int i = (int) (d1 * (double) mobeffect.getDuration() + 0.5D);
-+
-+                        if (i > 20) {
-+                            entityliving.addEffect(new MobEffect(mobeffectlist, i, mobeffect.getAmplifier(), mobeffect.isAmbient(), mobeffect.isShowParticles()));
-                         }
-                     }
-                 }
-@@ -187,7 +219,14 @@
-             entityareaeffectcloud.setColor(nbttagcompound.getInt("CustomPotionColor"));
-         }
- 
--        this.world.addEntity(entityareaeffectcloud);
-+        // CraftBukkit start
-+        org.bukkit.event.entity.LingeringPotionSplashEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callLingeringPotionSplashEvent(this, entityareaeffectcloud);
-+        if (!(event.isCancelled() || entityareaeffectcloud.dead)) {
-+            this.world.addEntity(entityareaeffectcloud);
-+        } else {
-+            entityareaeffectcloud.dead = true;
-+        }
-+        // CraftBukkit end
-     }
- 
-     public boolean isLingering() {
diff --git a/nms-patches/EntityProjectile.patch b/nms-patches/EntityProjectile.patch
deleted file mode 100644
index f2c9c7f..0000000
--- a/nms-patches/EntityProjectile.patch
+++ /dev/null
@@ -1,31 +0,0 @@
---- a/net/minecraft/server/EntityProjectile.java
-+++ b/net/minecraft/server/EntityProjectile.java
-@@ -35,6 +35,7 @@
-     public EntityProjectile(World world, EntityLiving entityliving) {
-         this(world, entityliving.locX, entityliving.locY + (double) entityliving.getHeadHeight() - 0.10000000149011612D, entityliving.locZ);
-         this.shooter = entityliving;
-+        this.projectileSource = (org.bukkit.entity.LivingEntity) entityliving.getBukkitEntity(); // CraftBukkit
-     }
- 
-     protected void i() {}
-@@ -127,7 +128,7 @@
-             if (entity1.isInteractable()) {
-                 if (entity1 == this.c) {
-                     flag = true;
--                } else if (this.shooter != null && this.ticksLived < 2 && this.c == null) {
-+                } else if (this.shooter != null && this.ticksLived < 2 && this.c == null && this.shooter == entity1) { // CraftBukkit - MC-88491
-                     this.c = entity1;
-                     flag = true;
-                 } else {
-@@ -164,6 +165,11 @@
-                 this.e(movingobjectposition.a());
-             } else {
-                 this.a(movingobjectposition);
-+                // CraftBukkit start
-+                if (this.dead) {
-+                    org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition);
-+                }
-+                // CraftBukkit end
-             }
-         }
- 
diff --git a/nms-patches/EntityRabbit.patch b/nms-patches/EntityRabbit.patch
deleted file mode 100644
index 890a0ef..0000000
--- a/nms-patches/EntityRabbit.patch
+++ /dev/null
@@ -1,41 +0,0 @@
---- a/net/minecraft/server/EntityRabbit.java
-+++ b/net/minecraft/server/EntityRabbit.java
-@@ -16,8 +16,14 @@
-         this.setSize(0.4F, 0.5F);
-         this.g = new EntityRabbit.ControllerJumpRabbit(this);
-         this.moveController = new EntityRabbit.ControllerMoveRabbit(this);
-+        this.initializePathFinderGoals(); // CraftBukkit - moved code
-+    }
-+
-+    // CraftBukkit start - code from constructor
-+    public void initializePathFinderGoals(){
-         this.c(0.0D);
-     }
-+    // CraftBukkit end
- 
-     protected void r() {
-         this.goalSelector.a(1, new PathfinderGoalFloat(this));
-@@ -400,9 +406,23 @@
-                     Integer integer = (Integer) iblockdata.get(BlockCarrots.AGE);
- 
-                     if (integer.intValue() == 0) {
-+                        // CraftBukkit start
-+                        if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.c, blockposition, Blocks.AIR, 0).isCancelled()) {
-+                            return;
-+                        }
-+                        // CraftBukkit end
-                         world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 2);
-                         world.setAir(blockposition, true);
-                     } else {
-+                        // CraftBukkit start
-+                        if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(
-+                                this.c,
-+                                blockposition,
-+                                block, block.toLegacyData(iblockdata.set(BlockCarrots.AGE, Integer.valueOf(integer.intValue() - 1)))
-+                        ).isCancelled()) {
-+                            return;
-+                        }
-+                        // CraftBukkit end
-                         world.setTypeAndData(blockposition, iblockdata.set(BlockCarrots.AGE, Integer.valueOf(integer.intValue() - 1)), 2);
-                         world.triggerEffect(2001, blockposition, Block.getCombinedId(iblockdata));
-                     }
diff --git a/nms-patches/EntitySheep.patch b/nms-patches/EntitySheep.patch
deleted file mode 100644
index a9b69ca..0000000
--- a/nms-patches/EntitySheep.patch
+++ /dev/null
@@ -1,73 +0,0 @@
---- a/net/minecraft/server/EntitySheep.java
-+++ b/net/minecraft/server/EntitySheep.java
-@@ -5,6 +5,12 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.event.entity.SheepRegrowWoolEvent;
-+import org.bukkit.event.player.PlayerShearEntityEvent;
-+import org.bukkit.inventory.InventoryView;
-+// CraftBukkit end
-+
- public class EntitySheep extends EntityAnimal {
- 
-     private static final DataWatcherObject<Byte> bx = DataWatcher.a(EntitySheep.class, DataWatcherRegistry.a);
-@@ -12,6 +18,13 @@
-         public boolean a(EntityHuman entityhuman) {
-             return false;
-         }
-+
-+        // CraftBukkit start
-+        @Override
-+        public InventoryView getBukkitView() {
-+            return null; // TODO: O.O
-+        }
-+        // CraftBukkit end
-     }, 2, 1);
-     private static final Map<EnumColor, float[]> bz = Maps.newEnumMap(EnumColor.class);
-     private int bB;
-@@ -29,6 +42,7 @@
-         this.setSize(0.9F, 1.3F);
-         this.container.setItem(0, new ItemStack(Items.DYE));
-         this.container.setItem(1, new ItemStack(Items.DYE));
-+        this.container.resultInventory = new InventoryCraftResult(); // CraftBukkit - add result slot for event
-     }
- 
-     protected void r() {
-@@ -131,11 +145,22 @@
- 
-         if (itemstack.getItem() == Items.SHEARS && !this.isSheared() && !this.isBaby()) {
-             if (!this.world.isClientSide) {
-+                // CraftBukkit start
-+                PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    return false;
-+                }
-+                // CraftBukkit end
-+
-                 this.setSheared(true);
-                 int i = 1 + this.random.nextInt(3);
- 
-                 for (int j = 0; j < i; ++j) {
-+                    this.forceDrops = true; // CraftBukkit
-                     EntityItem entityitem = this.a(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, this.getColor().getColorIndex()), 1.0F);
-+                    this.forceDrops = false; // CraftBukkit
- 
-                     entityitem.motY += (double) (this.random.nextFloat() * 0.05F);
-                     entityitem.motX += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
-@@ -222,6 +247,12 @@
-     }
- 
-     public void A() {
-+        // CraftBukkit start
-+        SheepRegrowWoolEvent event = new SheepRegrowWoolEvent((org.bukkit.entity.Sheep) this.getBukkitEntity());
-+        this.world.getServer().getPluginManager().callEvent(event);
-+
-+        if (event.isCancelled()) return;
-+        // CraftBukkit end
-         this.setSheared(false);
-         if (this.isBaby()) {
-             this.setAge(60);
diff --git a/nms-patches/EntityShulker.patch b/nms-patches/EntityShulker.patch
deleted file mode 100644
index 9b21b29..0000000
--- a/nms-patches/EntityShulker.patch
+++ /dev/null
@@ -1,42 +0,0 @@
---- a/net/minecraft/server/EntityShulker.java
-+++ b/net/minecraft/server/EntityShulker.java
-@@ -6,6 +6,10 @@
- import java.util.List;
- import java.util.UUID;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.Location;
-+import org.bukkit.event.entity.EntityTeleportEvent;
-+// CraftBukkit end
- 
- public class EntityShulker extends EntityGolem implements IMonster {
- 
-@@ -112,7 +116,7 @@
- 
-             this.datawatcher.set(EntityShulker.b, Optional.of(new BlockPosition(i, j, k)));
-         } else {
--            this.datawatcher.set(EntityShulker.b, Optional.absent());
-+            this.datawatcher.set(EntityShulker.b, Optional.<BlockPosition>absent());
-         }
- 
-     }
-@@ -331,8 +335,17 @@
-                         EnumDirection enumdirection = aenumdirection[k];
- 
-                         if (this.world.d(blockposition1.shift(enumdirection), false)) {
--                            this.datawatcher.set(EntityShulker.a, enumdirection);
--                            flag = true;
-+                            // CraftBukkit start
-+                            EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), this.getBukkitEntity().getLocation(), new Location(this.world.getWorld(), blockposition1.getX(), blockposition1.getY(), blockposition1.getZ()));
-+                            this.world.getServer().getPluginManager().callEvent(teleport);
-+                            if (!teleport.isCancelled()) {
-+                                Location to = teleport.getTo();
-+                                blockposition1 = new BlockPosition(to.getX(), to.getY(), to.getZ());
-+
-+                                this.datawatcher.set(EntityShulker.a, enumdirection);
-+                                flag = true;
-+                            }
-+                            // CraftBukkit end
-                             break;
-                         }
-                     }
diff --git a/nms-patches/EntityShulkerBullet.patch b/nms-patches/EntityShulkerBullet.patch
deleted file mode 100644
index 915d374..0000000
--- a/nms-patches/EntityShulkerBullet.patch
+++ /dev/null
@@ -1,40 +0,0 @@
---- a/net/minecraft/server/EntityShulkerBullet.java
-+++ b/net/minecraft/server/EntityShulkerBullet.java
-@@ -46,8 +46,29 @@
-         this.target = entity;
-         this.c = EnumDirection.UP;
-         this.a(enumdirection_enumaxis);
-+        projectileSource = (org.bukkit.entity.LivingEntity) entityliving.getBukkitEntity(); // CraftBukkit
-     }
- 
-+    // CraftBukkit start
-+    public EntityLiving getShooter() {
-+        return this.shooter;
-+    }
-+
-+    public void setShooter(EntityLiving e) {
-+        this.shooter = e;
-+    }
-+
-+    public Entity getTarget() {
-+        return this.target;
-+    }
-+
-+    public void setTarget(Entity e) {
-+        this.target = e;
-+        this.c = EnumDirection.UP;
-+        this.a(EnumDirection.EnumAxis.X);
-+    }
-+    // CraftBukkit end
-+
-     protected void b(NBTTagCompound nbttagcompound) {
-         BlockPosition blockposition;
-         NBTTagCompound nbttagcompound1;
-@@ -287,6 +308,7 @@
-     }
- 
-     protected void a(MovingObjectPosition movingobjectposition) {
-+        org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition); // Craftbukkit - Call event
-         if (movingobjectposition.entity == null) {
-             ((WorldServer) this.world).a(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY, this.locZ, 2, 0.2D, 0.2D, 0.2D, 0.0D, new int[0]);
-             this.a(SoundEffects.gD, 1.0F, 1.0F);
diff --git a/nms-patches/EntitySilverfish.patch b/nms-patches/EntitySilverfish.patch
deleted file mode 100644
index c631fa4..0000000
--- a/nms-patches/EntitySilverfish.patch
+++ /dev/null
@@ -1,26 +0,0 @@
---- a/net/minecraft/server/EntitySilverfish.java
-+++ b/net/minecraft/server/EntitySilverfish.java
-@@ -157,6 +157,11 @@
-                 IBlockData iblockdata = world.getType(blockposition);
- 
-                 if (BlockMonsterEggs.x(iblockdata)) {
-+                    // CraftBukkit start
-+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.a, blockposition, Blocks.MONSTER_EGG, Block.getId(BlockMonsterEggs.getById(iblockdata.getBlock().toLegacyData(iblockdata)))).isCancelled()) {
-+                        return;
-+                    }
-+                    // CraftBukkit end
-                     world.setTypeAndData(blockposition, Blocks.MONSTER_EGG.getBlockData().set(BlockMonsterEggs.VARIANT, BlockMonsterEggs.EnumMonsterEggVarient.a(iblockdata)), 3);
-                     this.a.doSpawnEffect();
-                     this.a.die();
-@@ -200,6 +205,11 @@
-                             IBlockData iblockdata = world.getType(blockposition1);
- 
-                             if (iblockdata.getBlock() == Blocks.MONSTER_EGG) {
-+                                // CraftBukkit start
-+                                if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.silverfish, blockposition1, Blocks.AIR, 0).isCancelled()) {
-+                                    continue;
-+                                }
-+                                // CraftBukkit end
-                                 if (world.getGameRules().getBoolean("mobGriefing")) {
-                                     world.setAir(blockposition1, true);
-                                 } else {
diff --git a/nms-patches/EntitySkeleton.patch b/nms-patches/EntitySkeleton.patch
deleted file mode 100644
index 1824371..0000000
--- a/nms-patches/EntitySkeleton.patch
+++ /dev/null
@@ -1,19 +0,0 @@
---- a/net/minecraft/server/EntitySkeleton.java
-+++ b/net/minecraft/server/EntitySkeleton.java
-@@ -34,7 +34,7 @@
-     }
- 
-     public void die(DamageSource damagesource) {
--        super.die(damagesource);
-+        // super.die(damagesource); // CraftBukkit
-         if (damagesource.getEntity() instanceof EntityCreeper) {
-             EntityCreeper entitycreeper = (EntityCreeper) damagesource.getEntity();
- 
-@@ -43,6 +43,7 @@
-                 this.a(new ItemStack(Items.SKULL, 1, 0), 0.0F);
-             }
-         }
-+        super.die(damagesource); // CraftBukkit - moved from above
- 
-     }
- 
diff --git a/nms-patches/EntitySkeletonAbstract.patch b/nms-patches/EntitySkeletonAbstract.patch
deleted file mode 100644
index 424cca7..0000000
--- a/nms-patches/EntitySkeletonAbstract.patch
+++ /dev/null
@@ -1,54 +0,0 @@
---- a/net/minecraft/server/EntitySkeletonAbstract.java
-+++ b/net/minecraft/server/EntitySkeletonAbstract.java
-@@ -2,12 +2,13 @@
- 
- import java.util.Calendar;
- import javax.annotation.Nullable;
-+import org.bukkit.event.entity.EntityCombustEvent; // CraftBukkit
- 
- public abstract class EntitySkeletonAbstract extends EntityMonster implements IRangedEntity {
- 
-     private static final DataWatcherObject<Boolean> a = DataWatcher.a(EntitySkeletonAbstract.class, DataWatcherRegistry.h);
-     private final PathfinderGoalBowShoot<EntitySkeletonAbstract> b = new PathfinderGoalBowShoot(this, 1.0D, 20, 15.0F);
--    private final PathfinderGoalMeleeAttack c = new PathfinderGoalMeleeAttack(this, 1.2D, flag) {
-+    private final PathfinderGoalMeleeAttack c = new PathfinderGoalMeleeAttack(this, 1.2D, false) { // CraftBukkit - decompile error
-         public void d() {
-             super.d();
-             EntitySkeletonAbstract.this.p(false);
-@@ -80,7 +81,14 @@
-                 }
- 
-                 if (flag) {
--                    this.setOnFire(8);
-+                    // CraftBukkit start
-+                    EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
-+                    this.world.getServer().getPluginManager().callEvent(event);
-+
-+                    if (!event.isCancelled()) {
-+                        this.setOnFire(event.getDuration());
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
-         }
-@@ -152,8 +160,19 @@
-         double d3 = (double) MathHelper.sqrt(d0 * d0 + d2 * d2);
- 
-         entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.world.getDifficulty().a() * 4));
-+        // CraftBukkit start
-+        org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(this, this.getItemInMainHand(), entityarrow, 0.8F);
-+        if (event.isCancelled()) {
-+            event.getProjectile().remove();
-+            return;
-+        }
-+
-+        if (event.getProjectile() == entityarrow.getBukkitEntity()) {
-+            world.addEntity(entityarrow);
-+        }
-+        // CraftBukkit end
-         this.a(SoundEffects.gW, 1.0F, 1.0F / (this.getRandom().nextFloat() * 0.4F + 0.8F));
--        this.world.addEntity(entityarrow);
-+        // this.world.addEntity(entityarrow); // CraftBukkit - moved up
-     }
- 
-     protected EntityArrow a(float f) {
diff --git a/nms-patches/EntitySkeletonWither.patch b/nms-patches/EntitySkeletonWither.patch
deleted file mode 100644
index 25d7fc8..0000000
--- a/nms-patches/EntitySkeletonWither.patch
+++ /dev/null
@@ -1,19 +0,0 @@
---- a/net/minecraft/server/EntitySkeletonWither.java
-+++ b/net/minecraft/server/EntitySkeletonWither.java
-@@ -36,7 +36,7 @@
-     }
- 
-     public void die(DamageSource damagesource) {
--        super.die(damagesource);
-+        // super.die(damagesource); // CraftBukkit
-         if (damagesource.getEntity() instanceof EntityCreeper) {
-             EntityCreeper entitycreeper = (EntityCreeper) damagesource.getEntity();
- 
-@@ -45,6 +45,7 @@
-                 this.a(new ItemStack(Items.SKULL, 1, 1), 0.0F);
-             }
-         }
-+        super.die(damagesource); // CraftBukkit - moved from above
- 
-     }
- 
diff --git a/nms-patches/EntitySlice.patch b/nms-patches/EntitySlice.patch
deleted file mode 100644
index 2efa923..0000000
--- a/nms-patches/EntitySlice.patch
+++ /dev/null
@@ -1,29 +0,0 @@
---- a/net/minecraft/server/EntitySlice.java
-+++ b/net/minecraft/server/EntitySlice.java
-@@ -13,7 +13,7 @@
- 
- public class EntitySlice<T> extends AbstractSet<T> {
- 
--    private static final Set<Class<?>> a = Sets.newHashSet();
-+    private static final Set<Class<?>> a = Sets.newConcurrentHashSet(); // CraftBukkit
-     private final Map<Class<?>, List<T>> b = Maps.newHashMap();
-     private final Set<Class<?>> c = Sets.newIdentityHashSet();
-     private final Class<T> d;
-@@ -41,7 +41,7 @@
-             Object object = iterator.next();
- 
-             if (oclass.isAssignableFrom(object.getClass())) {
--                this.a(object, oclass);
-+                this.a((T) object, oclass);
-             }
-         }
- 
-@@ -78,7 +78,7 @@
-         List list = (List) this.b.get(oclass);
- 
-         if (list == null) {
--            this.b.put(oclass, Lists.newArrayList(new Object[] { t0}));
-+            this.b.put(oclass, Lists.newArrayList(t0));
-         } else {
-             list.add(t0);
-         }
diff --git a/nms-patches/EntitySlime.patch b/nms-patches/EntitySlime.patch
deleted file mode 100644
index 6e55a14..0000000
--- a/nms-patches/EntitySlime.patch
+++ /dev/null
@@ -1,40 +0,0 @@
---- a/net/minecraft/server/EntitySlime.java
-+++ b/net/minecraft/server/EntitySlime.java
-@@ -1,6 +1,9 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.event.entity.SlimeSplitEvent;
-+// CraftBukkit end
- 
- public class EntitySlime extends EntityInsentient implements IMonster {
- 
-@@ -143,6 +146,18 @@
-         if (!this.world.isClientSide && i > 1 && this.getHealth() <= 0.0F) {
-             int j = 2 + this.random.nextInt(3);
- 
-+            // CraftBukkit start
-+            SlimeSplitEvent event = new SlimeSplitEvent((org.bukkit.entity.Slime) this.getBukkitEntity(), j);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (!event.isCancelled() && event.getCount() > 0) {
-+                j = event.getCount();
-+            } else {
-+                super.die();
-+                return;
-+            }
-+            // CraftBukkit end
-+
-             for (int k = 0; k < j; ++k) {
-                 float f = ((float) (k % 2) - 0.5F) * (float) i / 4.0F;
-                 float f1 = ((float) (k / 2) - 0.5F) * (float) i / 4.0F;
-@@ -158,7 +173,7 @@
- 
-                 entityslime.setSize(i / 2, true);
-                 entityslime.setPositionRotation(this.locX + (double) f, this.locY + 0.5D, this.locZ + (double) f1, this.random.nextFloat() * 360.0F, 0.0F);
--                this.world.addEntity(entityslime);
-+                this.world.addEntity(entityslime, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SLIME_SPLIT); // CraftBukkit - SpawnReason
-             }
-         }
- 
diff --git a/nms-patches/EntitySmallFireball.patch b/nms-patches/EntitySmallFireball.patch
deleted file mode 100644
index 0833ca9..0000000
--- a/nms-patches/EntitySmallFireball.patch
+++ /dev/null
@@ -1,61 +0,0 @@
---- a/net/minecraft/server/EntitySmallFireball.java
-+++ b/net/minecraft/server/EntitySmallFireball.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.event.entity.EntityCombustByEntityEvent; // CraftBukkit
-+
- public class EntitySmallFireball extends EntityFireball {
- 
-     public EntitySmallFireball(World world) {
-@@ -10,6 +12,11 @@
-     public EntitySmallFireball(World world, EntityLiving entityliving, double d0, double d1, double d2) {
-         super(world, entityliving, d0, d1, d2);
-         this.setSize(0.3125F, 0.3125F);
-+        // CraftBukkit start
-+        if (this.shooter != null && this.shooter instanceof EntityInsentient) {
-+            isIncendiary = this.world.getGameRules().getBoolean("mobGriefing");
-+        }
-+        // CraftBukkit end
-     }
- 
-     public EntitySmallFireball(World world, double d0, double d1, double d2, double d3, double d4, double d5) {
-@@ -27,10 +34,17 @@
- 
-             if (movingobjectposition.entity != null) {
-                 if (!movingobjectposition.entity.isFireProof()) {
--                    flag = movingobjectposition.entity.damageEntity(DamageSource.fireball(this, this.shooter), 5.0F);
--                    if (flag) {
-+                    // CraftBukkit start - Entity damage by entity event + combust event
-+                    isIncendiary = movingobjectposition.entity.damageEntity(DamageSource.fireball(this, this.shooter), 5.0F);
-+                    if (isIncendiary) {
-                         this.a(this.shooter, movingobjectposition.entity);
--                        movingobjectposition.entity.setOnFire(5);
-+                        EntityCombustByEntityEvent event = new EntityCombustByEntityEvent((org.bukkit.entity.Projectile) this.getBukkitEntity(), movingobjectposition.entity.getBukkitEntity(), 5);
-+                        movingobjectposition.entity.world.getServer().getPluginManager().callEvent(event);
-+
-+                        if (!event.isCancelled()) {
-+                            movingobjectposition.entity.setOnFire(event.getDuration());
-+                        }
-+                        // CraftBukkit end
-                     }
-                 }
-             } else {
-@@ -39,11 +53,15 @@
-                     flag = this.world.getGameRules().getBoolean("mobGriefing");
-                 }
- 
--                if (flag) {
-+                // CraftBukkit start
-+                if (isIncendiary) {
-                     BlockPosition blockposition = movingobjectposition.a().shift(movingobjectposition.direction);
- 
-                     if (this.world.isEmpty(blockposition)) {
--                        this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
-+                            this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                        }
-+                        // CraftBukkit end
-                     }
-                 }
-             }
diff --git a/nms-patches/EntitySnowman.patch b/nms-patches/EntitySnowman.patch
deleted file mode 100644
index bf919be..0000000
--- a/nms-patches/EntitySnowman.patch
+++ /dev/null
@@ -1,47 +0,0 @@
---- a/net/minecraft/server/EntitySnowman.java
-+++ b/net/minecraft/server/EntitySnowman.java
-@@ -1,6 +1,10 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.player.PlayerShearEntityEvent;
-+// CraftBukkit end
- 
- public class EntitySnowman extends EntityGolem implements IRangedEntity {
- 
-@@ -59,7 +63,7 @@
-             }
- 
-             if (this.world.getBiome(new BlockPosition(i, 0, k)).a(new BlockPosition(i, j, k)) > 1.0F) {
--                this.damageEntity(DamageSource.BURN, 1.0F);
-+                this.damageEntity(CraftEventFactory.MELTING, 1.0F); // CraftBukkit - DamageSource.BURN -> CraftEventFactory.MELTING
-             }
- 
-             if (!this.world.getGameRules().getBoolean("mobGriefing")) {
-@@ -73,7 +77,7 @@
-                 BlockPosition blockposition = new BlockPosition(i, j, k);
- 
-                 if (this.world.getType(blockposition).getMaterial() == Material.AIR && this.world.getBiome(blockposition).a(blockposition) < 0.8F && Blocks.SNOW_LAYER.canPlace(this.world, blockposition)) {
--                    this.world.setTypeUpdate(blockposition, Blocks.SNOW_LAYER.getBlockData());
-+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this.world, blockposition, Blocks.SNOW_LAYER.getBlockData(), this); // CraftBukkit
-                 }
-             }
-         }
-@@ -106,6 +110,15 @@
-         ItemStack itemstack = entityhuman.b(enumhand);
- 
-         if (itemstack.getItem() == Items.SHEARS && this.hasPumpkin() && !this.world.isClientSide) {
-+            // CraftBukkit start
-+            PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                return false;
-+            }
-+            // CraftBukkit end
-+
-             this.setHasPumpkin(false);
-             itemstack.damage(1, entityhuman);
-         }
diff --git a/nms-patches/EntitySpider.patch b/nms-patches/EntitySpider.patch
deleted file mode 100644
index 4c7b19b..0000000
--- a/nms-patches/EntitySpider.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/EntitySpider.java
-+++ b/net/minecraft/server/EntitySpider.java
-@@ -115,7 +115,7 @@
- 
-             entityskeleton.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, 0.0F);
-             entityskeleton.prepare(difficultydamagescaler, (GroupDataEntity) null);
--            this.world.addEntity(entityskeleton);
-+            this.world.addEntity(entityskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.JOCKEY); // CraftBukkit - add SpawnReason
-             entityskeleton.startRiding(this);
-         }
- 
diff --git a/nms-patches/EntityTNTPrimed.patch b/nms-patches/EntityTNTPrimed.patch
deleted file mode 100644
index 0836702..0000000
--- a/nms-patches/EntityTNTPrimed.patch
+++ /dev/null
@@ -1,54 +0,0 @@
---- a/net/minecraft/server/EntityTNTPrimed.java
-+++ b/net/minecraft/server/EntityTNTPrimed.java
-@@ -1,6 +1,7 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+import org.bukkit.event.entity.ExplosionPrimeEvent; // CraftBukkit
- 
- public class EntityTNTPrimed extends Entity {
- 
-@@ -8,6 +9,8 @@
-     @Nullable
-     private EntityLiving source;
-     private int c;
-+    public float yield = 4; // CraftBukkit - add field
-+    public boolean isIncendiary = false; // CraftBukkit - add field
- 
-     public EntityTNTPrimed(World world) {
-         super(world);
-@@ -64,10 +67,13 @@
- 
-         --this.c;
-         if (this.c <= 0) {
--            this.die();
-+            // CraftBukkit start - Need to reverse the order of the explosion and the entity death so we have a location for the event
-+            // this.die();
-             if (!this.world.isClientSide) {
-                 this.explode();
-             }
-+            this.die();
-+            // CraftBukkit end
-         } else {
-             this.aq();
-             this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
-@@ -76,9 +82,17 @@
-     }
- 
-     private void explode() {
--        float f = 4.0F;
-+        // CraftBukkit start
-+        // float f = 4.0F;
- 
--        this.world.explode(this, this.locX, this.locY + (double) (this.length / 16.0F), this.locZ, 4.0F, true);
-+        org.bukkit.craftbukkit.CraftServer server = this.world.getServer();
-+        ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) org.bukkit.craftbukkit.entity.CraftEntity.getEntity(server, this));
-+        server.getPluginManager().callEvent(event);
-+
-+        if (!event.isCancelled()) {
-+            this.world.createExplosion(this, this.locX, this.locY + (double) (this.length / 16.0F), this.locZ, event.getRadius(), event.getFire(), true);
-+        }
-+        // CraftBukkit end
-     }
- 
-     protected void b(NBTTagCompound nbttagcompound) {
diff --git a/nms-patches/EntityThrownExpBottle.patch b/nms-patches/EntityThrownExpBottle.patch
deleted file mode 100644
index 256bf0a..0000000
--- a/nms-patches/EntityThrownExpBottle.patch
+++ /dev/null
@@ -1,22 +0,0 @@
---- a/net/minecraft/server/EntityThrownExpBottle.java
-+++ b/net/minecraft/server/EntityThrownExpBottle.java
-@@ -24,9 +24,18 @@
- 
-     protected void a(MovingObjectPosition movingobjectposition) {
-         if (!this.world.isClientSide) {
--            this.world.triggerEffect(2002, new BlockPosition(this), PotionUtil.a(Potions.b));
-+            // CraftBukkit - moved to after event
-+            // this.world.triggerEffect(2002, new BlockPosition(this), PotionUtil.a(Potions.b));
-             int i = 3 + this.world.random.nextInt(5) + this.world.random.nextInt(5);
- 
-+            // CraftBukkit start
-+            org.bukkit.event.entity.ExpBottleEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callExpBottleEvent(this, i);
-+            i = event.getExperience();
-+            if (event.getShowEffect()) {
-+                this.world.triggerEffect(2002, new BlockPosition(this), PotionUtil.a(Potions.b));
-+            }
-+            // CraftBukkit end
-+
-             while (i > 0) {
-                 int j = EntityExperienceOrb.getOrbValue(i);
- 
diff --git a/nms-patches/EntityTippedArrow.patch b/nms-patches/EntityTippedArrow.patch
deleted file mode 100644
index 12e2824..0000000
--- a/nms-patches/EntityTippedArrow.patch
+++ /dev/null
@@ -1,28 +0,0 @@
---- a/net/minecraft/server/EntityTippedArrow.java
-+++ b/net/minecraft/server/EntityTippedArrow.java
-@@ -116,6 +116,25 @@
-         }
-     }
- 
-+    // CraftBukkit start accessor methods
-+    public void refreshEffects() {
-+        this.getDataWatcher().set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects))));
-+    }
-+
-+    public String getType() {
-+        return ((MinecraftKey) PotionRegistry.a.b(this.potionRegistry)).toString();
-+    }
-+
-+    public void setType(String string) {
-+        this.potionRegistry = PotionRegistry.a.get(new MinecraftKey(string));
-+        this.datawatcher.set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects))));
-+    }
-+
-+    public boolean isTipped() {
-+        return !(this.effects.isEmpty() && this.potionRegistry == Potions.EMPTY);
-+    }
-+    // CraftBukkit end
-+
-     public int getColor() {
-         return ((Integer) this.datawatcher.get(EntityTippedArrow.f)).intValue();
-     }
diff --git a/nms-patches/EntityTracker.patch b/nms-patches/EntityTracker.patch
deleted file mode 100644
index 67c6412..0000000
--- a/nms-patches/EntityTracker.patch
+++ /dev/null
@@ -1,17 +0,0 @@
---- a/net/minecraft/server/EntityTracker.java
-+++ b/net/minecraft/server/EntityTracker.java
-@@ -120,11 +120,12 @@
-             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity To Track");
- 
-             crashreportsystemdetails.a("Tracking range", (Object) (i + " blocks"));
-+            final int finalI = i; // CraftBukkit - fix decompile error
-             crashreportsystemdetails.a("Update interval", new CrashReportCallable() {
-                 public String a() throws Exception {
--                    String s = "Once per " + i + " ticks";
-+                    String s = "Once per " + finalI + " ticks"; // CraftBukkit
- 
--                    if (i == Integer.MAX_VALUE) {
-+                    if (finalI == Integer.MAX_VALUE) { // CraftBukkit
-                         s = "Maximum (" + s + ")";
-                     }
- 
diff --git a/nms-patches/EntityTrackerEntry.patch b/nms-patches/EntityTrackerEntry.patch
deleted file mode 100644
index 88438c3..0000000
--- a/nms-patches/EntityTrackerEntry.patch
+++ /dev/null
@@ -1,179 +0,0 @@
---- a/net/minecraft/server/EntityTrackerEntry.java
-+++ b/net/minecraft/server/EntityTrackerEntry.java
-@@ -9,6 +9,11 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.player.PlayerVelocityEvent;
-+// CraftBukkit end
-+
- public class EntityTrackerEntry {
- 
-     private static final Logger c = LogManager.getLogger();
-@@ -76,16 +81,17 @@
- 
-         if (!list1.equals(this.w)) {
-             this.w = list1;
--            this.broadcast(new PacketPlayOutMount(this.tracker));
-+            this.broadcastIncludingSelf(new PacketPlayOutMount(this.tracker)); // CraftBukkit
-         }
- 
--        if (this.tracker instanceof EntityItemFrame && this.a % 10 == 0) {
-+        // PAIL : rename
-+        if (this.tracker instanceof EntityItemFrame /*&& this.a % 10 == 0*/) { // CraftBukkit - Moved below, should always enter this block
-             EntityItemFrame entityitemframe = (EntityItemFrame) this.tracker;
-             ItemStack itemstack = entityitemframe.getItem();
- 
--            if (itemstack.getItem() instanceof ItemWorldMap) {
-+            if (this.a % 10 == 0 && itemstack.getItem() instanceof ItemWorldMap) { // CraftBukkit - Moved this.a % 10 logic here so item frames do not enter the other blocks
-                 WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, this.tracker.world);
--                Iterator iterator = list.iterator();
-+                Iterator iterator = this.trackedPlayers.iterator(); // CraftBukkit
- 
-                 while (iterator.hasNext()) {
-                     EntityHuman entityhuman = (EntityHuman) iterator.next();
-@@ -136,6 +142,19 @@
-                 boolean flag1 = l1 * l1 + i2 * i2 + j2 * j2 >= 128L || this.a % 60 == 0;
-                 boolean flag2 = Math.abs(j1 - this.yRot) >= 1 || Math.abs(k1 - this.xRot) >= 1;
- 
-+                // CraftBukkit start - Code moved from below
-+                if (flag1) {
-+                    this.xLoc = k;
-+                    this.yLoc = l;
-+                    this.zLoc = i1;
-+                }
-+
-+                if (flag2) {
-+                    this.yRot = j1;
-+                    this.xRot = k1;
-+                }
-+                // CraftBukkit end
-+
-                 if (this.a > 0 || this.tracker instanceof EntityArrow) {
-                     if (l1 >= -32768L && l1 < 32768L && i2 >= -32768L && i2 < 32768L && j2 >= -32768L && j2 < 32768L && this.v <= 400 && !this.x && this.y == this.tracker.onGround) {
-                         if ((!flag1 || !flag2) && !(this.tracker instanceof EntityArrow)) {
-@@ -150,6 +169,11 @@
-                     } else {
-                         this.y = this.tracker.onGround;
-                         this.v = 0;
-+                        // CraftBukkit start - Refresh list of who can see a player before sending teleport packet
-+                        if (this.tracker instanceof EntityPlayer) {
-+                            this.scanPlayers(new java.util.ArrayList(this.trackedPlayers));
-+                        }
-+                        // CraftBukkit end
-                         this.c();
-                         object = new PacketPlayOutEntityTeleport(this.tracker);
-                     }
-@@ -181,6 +205,7 @@
-                 }
- 
-                 this.d();
-+                /* CraftBukkit start - Code moved up
-                 if (flag1) {
-                     this.xLoc = k;
-                     this.yLoc = l;
-@@ -191,6 +216,7 @@
-                     this.yRot = j1;
-                     this.xRot = k1;
-                 }
-+                // CraftBukkit end */
- 
-                 this.x = false;
-             }
-@@ -206,7 +232,27 @@
- 
-         ++this.a;
-         if (this.tracker.velocityChanged) {
--            this.broadcastIncludingSelf(new PacketPlayOutEntityVelocity(this.tracker));
-+            // CraftBukkit start - Create PlayerVelocity event
-+            boolean cancelled = false;
-+
-+            if (this.tracker instanceof EntityPlayer) {
-+                Player player = (Player) this.tracker.getBukkitEntity();
-+                org.bukkit.util.Vector velocity = player.getVelocity();
-+
-+                PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
-+                this.tracker.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    cancelled = true;
-+                } else if (!velocity.equals(event.getVelocity())) {
-+                    player.setVelocity(event.getVelocity());
-+                }
-+            }
-+
-+            if (!cancelled) {
-+                this.broadcastIncludingSelf(new PacketPlayOutEntityVelocity(this.tracker));
-+            }
-+            // CraftBukkit end
-             this.tracker.velocityChanged = false;
-         }
- 
-@@ -224,6 +270,11 @@
-             Set set = attributemapserver.getAttributes();
- 
-             if (!set.isEmpty()) {
-+                // CraftBukkit start - Send scaled max health
-+                if (this.tracker instanceof EntityPlayer) {
-+                    ((EntityPlayer) this.tracker).getBukkitEntity().injectScaledMaxHealth(set, false);
-+                }
-+                // CraftBukkit end
-                 this.broadcastIncludingSelf(new PacketPlayOutUpdateAttributes(this.tracker.getId(), set));
-             }
- 
-@@ -276,6 +327,16 @@
-         if (entityplayer != this.tracker) {
-             if (this.c(entityplayer)) {
-                 if (!this.trackedPlayers.contains(entityplayer) && (this.e(entityplayer) || this.tracker.attachedToPlayer)) {
-+                    // CraftBukkit start - respect vanish API
-+                    if (this.tracker instanceof EntityPlayer) {
-+                        Player player = ((EntityPlayer) this.tracker).getBukkitEntity();
-+                        if (!entityplayer.getBukkitEntity().canSee(player)) {
-+                            return;
-+                        }
-+                    }
-+
-+                    entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId()));
-+                    // CraftBukkit end
-                     this.trackedPlayers.add(entityplayer);
-                     Packet packet = this.e();
- 
-@@ -290,6 +351,12 @@
-                         AttributeMapServer attributemapserver = (AttributeMapServer) ((EntityLiving) this.tracker).getAttributeMap();
-                         Collection collection = attributemapserver.c();
- 
-+                        // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
-+                        if (this.tracker.getId() == entityplayer.getId()) {
-+                            ((EntityPlayer) this.tracker).getBukkitEntity().injectScaledMaxHealth(collection, false);
-+                        }
-+                        // CraftBukkit end
-+
-                         if (!collection.isEmpty()) {
-                             entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateAttributes(this.tracker.getId(), collection));
-                         }
-@@ -328,6 +395,11 @@
-                         }
-                     }
- 
-+                    // CraftBukkit start - Fix for nonsensical head yaw
-+                    this.headYaw = MathHelper.d(this.tracker.getHeadRotation() * 256.0F / 360.0F);
-+                    this.broadcast(new PacketPlayOutEntityHeadRotation(this.tracker, (byte) headYaw));
-+                    // CraftBukkit end
-+
-                     if (this.tracker instanceof EntityLiving) {
-                         EntityLiving entityliving = (EntityLiving) this.tracker;
-                         Iterator iterator = entityliving.getEffects().iterator();
-@@ -380,7 +452,10 @@
- 
-     private Packet<?> e() {
-         if (this.tracker.dead) {
--            EntityTrackerEntry.c.warn("Fetching addPacket for removed entity");
-+            // CraftBukkit start - Remove useless error spam, just return
-+            // EntityTrackerEntry.d.warn("Fetching addPacket for removed entity");
-+            return null;
-+            // CraftBukkit end
-         }
- 
-         if (this.tracker instanceof EntityPlayer) {
diff --git a/nms-patches/EntityVex.patch b/nms-patches/EntityVex.patch
deleted file mode 100644
index 0c50e0e..0000000
--- a/nms-patches/EntityVex.patch
+++ /dev/null
@@ -1,19 +0,0 @@
---- a/net/minecraft/server/EntityVex.java
-+++ b/net/minecraft/server/EntityVex.java
-@@ -1,6 +1,7 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+import org.bukkit.event.entity.EntityTargetEvent;
- 
- public class EntityVex extends EntityMonster {
- 
-@@ -182,7 +183,7 @@
-         }
- 
-         public void c() {
--            EntityVex.this.setGoalTarget(EntityVex.this.b.getGoalTarget());
-+            EntityVex.this.setGoalTarget(EntityVex.this.b.getGoalTarget(), EntityTargetEvent.TargetReason.OWNER_ATTACKED_TARGET, true); // CraftBukkit
-             super.c();
-         }
-     }
diff --git a/nms-patches/EntityVillager.patch b/nms-patches/EntityVillager.patch
deleted file mode 100644
index fa7f585..0000000
--- a/nms-patches/EntityVillager.patch
+++ /dev/null
@@ -1,64 +0,0 @@
---- a/net/minecraft/server/EntityVillager.java
-+++ b/net/minecraft/server/EntityVillager.java
-@@ -6,6 +6,14 @@
- import javax.annotation.Nullable;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
-+// CraftBukkit start
-+import org.bukkit.Bukkit;
-+import org.bukkit.craftbukkit.entity.CraftVillager;
-+import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-+import org.bukkit.entity.Villager;
-+import org.bukkit.event.entity.VillagerAcquireTradeEvent;
-+import org.bukkit.event.entity.VillagerReplenishTradeEvent;
-+// CraftBukkit end
- 
- public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
- 
-@@ -37,7 +45,7 @@
- 
-     public EntityVillager(World world, int i) {
-         super(world);
--        this.inventory = new InventorySubcontainer("Items", false, 8);
-+        this.inventory = new InventorySubcontainer("Items", false, 8, (CraftVillager) this.getBukkitEntity()); // CraftBukkit add argument
-         this.setProfession(i);
-         this.setSize(0.6F, 1.95F);
-         ((Navigation) this.getNavigation()).a(true);
-@@ -119,7 +127,14 @@
-                         MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
- 
-                         if (merchantrecipe.h()) {
--                            merchantrecipe.a(this.random.nextInt(6) + this.random.nextInt(6) + 2);
-+                            // CraftBukkit start
-+                            int bonus = this.random.nextInt(6) + this.random.nextInt(6) + 2;
-+                            VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
-+                            Bukkit.getPluginManager().callEvent(event);
-+                            if (!event.isCancelled()) {
-+                                merchantrecipe.a(event.getBonus());
-+                            }
-+                            // CraftBukkit end
-                         }
-                     }
- 
-@@ -460,7 +475,20 @@
-                 for (int l = 0; l < k; ++l) {
-                     EntityVillager.IMerchantRecipeOption entityvillager_imerchantrecipeoption = aentityvillager_imerchantrecipeoption3[l];
- 
--                    entityvillager_imerchantrecipeoption.a(this, this.trades, this.random);
-+                    // CraftBukkit start
-+                    // this is a hack. this must be done because otherwise, if
-+                    // mojang adds a new type of villager merchant option, it will need to
-+                    // have event handling added manually. this is better than having to do that.
-+                    MerchantRecipeList list = new MerchantRecipeList();
-+                    entityvillager_imerchantrecipeoption.a(this, list, this.random);
-+                    for (MerchantRecipe recipe : list) {
-+                        VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((Villager) getBukkitEntity(), recipe.asBukkit());
-+                        Bukkit.getPluginManager().callEvent(event);
-+                        if (!event.isCancelled()) {
-+                            this.trades.add(CraftMerchantRecipe.fromBukkit(event.getRecipe()).toMinecraft());
-+                        }
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
- 
diff --git a/nms-patches/EntityWither.patch b/nms-patches/EntityWither.patch
deleted file mode 100644
index c6a4a11..0000000
--- a/nms-patches/EntityWither.patch
+++ /dev/null
@@ -1,78 +0,0 @@
---- a/net/minecraft/server/EntityWither.java
-+++ b/net/minecraft/server/EntityWither.java
-@@ -5,6 +5,12 @@
- import java.util.List;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.EntityRegainHealthEvent;
-+import org.bukkit.event.entity.ExplosionPrimeEvent;
-+// CraftBukkit end
-+
- public class EntityWither extends EntityMonster implements IRangedEntity {
- 
-     private static final DataWatcherObject<Integer> a = DataWatcher.a(EntityWither.class, DataWatcherRegistry.b);
-@@ -192,13 +198,38 @@
-         if (this.dm() > 0) {
-             i = this.dm() - 1;
-             if (i <= 0) {
--                this.world.createExplosion(this, this.locX, this.locY + (double) this.getHeadHeight(), this.locZ, 7.0F, false, this.world.getGameRules().getBoolean("mobGriefing"));
--                this.world.a(1023, new BlockPosition(this), 0);
-+                // CraftBukkit start
-+                // this.world.createExplosion(this, this.locX, this.locY + (double) this.getHeadHeight(), this.locZ, 7.0F, false, this.world.getGameRules().getBoolean("mobGriefing"));
-+                ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (!event.isCancelled()) {
-+                    this.world.createExplosion(this, this.locX, this.locY + (double) this.getHeadHeight(), this.locZ, event.getRadius(), event.getFire(), this.world.getGameRules().getBoolean("mobGriefing"));
-+                }
-+                // CraftBukkit end
-+
-+                // CraftBukkit start - Use relative location for far away sounds
-+                // this.world.a(1023, new BlockPosition(this), 0);
-+                int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
-+                for (EntityPlayer player : (List<EntityPlayer>) MinecraftServer.getServer().getPlayerList().players) {
-+                    double deltaX = this.locX - player.locX;
-+                    double deltaZ = this.locZ - player.locZ;
-+                    double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
-+                    if (distanceSquared > viewDistance * viewDistance) {
-+                        double deltaLength = Math.sqrt(distanceSquared);
-+                        double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
-+                        double relativeZ = player.locZ + (deltaZ / deltaLength) * viewDistance;
-+                        player.playerConnection.sendPacket(new PacketPlayOutWorldEvent(1023, new BlockPosition((int) relativeX, (int) this.locY, (int) relativeZ), 0, true));
-+                    } else {
-+                        player.playerConnection.sendPacket(new PacketPlayOutWorldEvent(1023, new BlockPosition((int) this.locX, (int) this.locY, (int) this.locZ), 0, true));
-+                    }
-+                }
-+                // CraftBukkit end
-             }
- 
-             this.g(i);
-             if (this.ticksLived % 10 == 0) {
--                this.heal(10.0F);
-+                this.heal(10.0F, EntityRegainHealthEvent.RegainReason.WITHER_SPAWN); // CraftBukkit
-             }
- 
-         } else {
-@@ -289,6 +320,11 @@
-                                 Block block = iblockdata.getBlock();
- 
-                                 if (iblockdata.getMaterial() != Material.AIR && a(block)) {
-+                                    // CraftBukkit start
-+                                    if (CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, Blocks.AIR, 0).isCancelled()) {
-+                                        continue;
-+                                    }
-+                                    // CraftBukkit end
-                                     flag = this.world.setAir(blockposition, true) || flag;
-                                 }
-                             }
-@@ -302,7 +338,7 @@
-             }
- 
-             if (this.ticksLived % 20 == 0) {
--                this.heal(1.0F);
-+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
-             }
- 
-             this.bG.setProgress(this.getHealth() / this.getMaxHealth());
diff --git a/nms-patches/EntityWitherSkull.patch b/nms-patches/EntityWitherSkull.patch
deleted file mode 100644
index ba9d947..0000000
--- a/nms-patches/EntityWitherSkull.patch
+++ /dev/null
@@ -1,41 +0,0 @@
---- a/net/minecraft/server/EntityWitherSkull.java
-+++ b/net/minecraft/server/EntityWitherSkull.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.event.entity.ExplosionPrimeEvent; // CraftBukkit
-+
- public class EntityWitherSkull extends EntityFireball {
- 
-     private static final DataWatcherObject<Boolean> e = DataWatcher.a(EntityWitherSkull.class, DataWatcherRegistry.h);
-@@ -41,11 +43,11 @@
-         if (!this.world.isClientSide) {
-             if (movingobjectposition.entity != null) {
-                 if (this.shooter != null) {
--                    if (movingobjectposition.entity.damageEntity(DamageSource.mobAttack(this.shooter), 8.0F)) {
-+                    if (movingobjectposition.entity.damageEntity(DamageSource.projectile(this, shooter), 8.0F)) { // CraftBukkit
-                         if (movingobjectposition.entity.isAlive()) {
-                             this.a(this.shooter, movingobjectposition.entity);
-                         } else {
--                            this.shooter.heal(5.0F);
-+                            this.shooter.heal(5.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.WITHER); // CraftBukkit
-                         }
-                     }
-                 } else {
-@@ -67,7 +69,15 @@
-                 }
-             }
- 
--            this.world.createExplosion(this, this.locX, this.locY, this.locZ, 1.0F, false, this.world.getGameRules().getBoolean("mobGriefing"));
-+            // CraftBukkit start
-+            // this.world.createExplosion(this, this.locX, this.locY, this.locZ, 1.0F, false, this.world.getGameRules().getBoolean("mobGriefing"));
-+            ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 1.0F, false);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (!event.isCancelled()) {
-+                this.world.createExplosion(this, this.locX, this.locY, this.locZ, event.getRadius(), event.getFire(), this.world.getGameRules().getBoolean("mobGriefing"));
-+            }
-+            // CraftBukkit end
-             this.die();
-         }
- 
diff --git a/nms-patches/EntityWolf.patch b/nms-patches/EntityWolf.patch
deleted file mode 100644
index 1efa3ef..0000000
--- a/nms-patches/EntityWolf.patch
+++ /dev/null
@@ -1,83 +0,0 @@
---- a/net/minecraft/server/EntityWolf.java
-+++ b/net/minecraft/server/EntityWolf.java
-@@ -4,6 +4,11 @@
- import java.util.UUID;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
-+// CraftBukkit end
-+
- public class EntityWolf extends EntityTameableAnimal {
- 
-     private static final DataWatcherObject<Float> DATA_HEALTH = DataWatcher.a(EntityWolf.class, DataWatcherRegistry.c);
-@@ -62,6 +67,22 @@
-         this.getAttributeMap().b(GenericAttributes.ATTACK_DAMAGE).setValue(2.0D);
-     }
- 
-+    // CraftBukkit - add overriden version
-+    @Override
-+    public boolean setGoalTarget(EntityLiving entityliving, org.bukkit.event.entity.EntityTargetEvent.TargetReason reason, boolean fire) {
-+        if (!super.setGoalTarget(entityliving, reason, fire)) {
-+            return false;
-+        }
-+        entityliving = getGoalTarget();
-+        if (entityliving == null) {
-+            this.setAngry(false);
-+        } else if (!this.isTamed()) {
-+            this.setAngry(true);
-+        }
-+        return true;
-+    }
-+    // CraftBukkit end
-+
-     public void setGoalTarget(@Nullable EntityLiving entityliving) {
-         super.setGoalTarget(entityliving);
-         if (entityliving == null) {
-@@ -200,9 +221,9 @@
-             Entity entity = damagesource.getEntity();
- 
-             if (this.goalSit != null) {
--                this.goalSit.setSitting(false);
-+                // CraftBukkit - moved into EntityLiving.d(DamageSource, float)
-+                // this.goalSit.setSitting(false);
-             }
--
-             if (entity != null && !(entity instanceof EntityHuman) && !(entity instanceof EntityArrow)) {
-                 f = (f + 1.0F) / 2.0F;
-             }
-@@ -245,7 +266,7 @@
-                             itemstack.subtract(1);
-                         }
- 
--                        this.heal((float) itemfood.getNutrition(itemstack));
-+                        this.heal((float) itemfood.getNutrition(itemstack), org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
-                         return true;
-                     }
-                 } else if (itemstack.getItem() == Items.DYE) {
-@@ -266,7 +287,7 @@
-                 this.goalSit.setSitting(!this.isSitting());
-                 this.bd = false;
-                 this.navigation.p();
--                this.setGoalTarget((EntityLiving) null);
-+                this.setGoalTarget((EntityLiving) null, TargetReason.FORGOT_TARGET, true); // CraftBukkit - reason
-             }
-         } else if (itemstack.getItem() == Items.BONE && !this.isAngry()) {
-             if (!entityhuman.abilities.canInstantlyBuild) {
-@@ -274,12 +295,13 @@
-             }
- 
-             if (!this.world.isClientSide) {
--                if (this.random.nextInt(3) == 0) {
-+                // CraftBukkit - added event call and isCancelled check.
-+                if (this.random.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
-                     this.c(entityhuman);
-                     this.navigation.p();
-                     this.setGoalTarget((EntityLiving) null);
-                     this.goalSit.setSitting(true);
--                    this.setHealth(20.0F);
-+                    this.setHealth(this.getMaxHealth()); // CraftBukkit - 20.0 -> getMaxHealth()
-                     this.p(true);
-                     this.world.broadcastEntityEffect(this, (byte) 7);
-                 } else {
diff --git a/nms-patches/EntityZombie.patch b/nms-patches/EntityZombie.patch
deleted file mode 100644
index 60c0887..0000000
--- a/nms-patches/EntityZombie.patch
+++ /dev/null
@@ -1,94 +0,0 @@
---- a/net/minecraft/server/EntityZombie.java
-+++ b/net/minecraft/server/EntityZombie.java
-@@ -5,6 +5,13 @@
- import java.util.UUID;
- import javax.annotation.Nullable;
- 
-+//CraftBukkit start
-+import org.bukkit.event.entity.CreatureSpawnEvent;
-+import org.bukkit.event.entity.EntityCombustByEntityEvent;
-+import org.bukkit.event.entity.EntityCombustEvent;
-+import org.bukkit.event.entity.EntityTargetEvent;
-+//CraftBukkit end
-+
- public class EntityZombie extends EntityMonster {
- 
-     protected static final IAttribute a = (new AttributeRanged((IAttribute) null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
-@@ -133,7 +140,14 @@
-                 }
- 
-                 if (flag) {
--                    this.setOnFire(8);
-+                    // CraftBukkit start
-+                    EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
-+                    this.world.getServer().getPluginManager().callEvent(event);
-+
-+                    if (!event.isCancelled()) {
-+                        this.setOnFire(event.getDuration());
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
-         }
-@@ -167,8 +181,8 @@
-                     if (this.world.getType(new BlockPosition(i1, j1 - 1, k1)).q() && this.world.getLightLevel(new BlockPosition(i1, j1, k1)) < 10) {
-                         entityzombie.setPosition((double) i1, (double) j1, (double) k1);
-                         if (!this.world.isPlayerNearby((double) i1, (double) j1, (double) k1, 7.0D) && this.world.a(entityzombie.getBoundingBox(), (Entity) entityzombie) && this.world.getCubes(entityzombie, entityzombie.getBoundingBox()).isEmpty() && !this.world.containsLiquid(entityzombie.getBoundingBox())) {
--                            this.world.addEntity(entityzombie);
--                            entityzombie.setGoalTarget(entityliving);
-+                            this.world.addEntity(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
-+                            entityzombie.setGoalTarget(entityliving, EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true);
-                             entityzombie.prepare(this.world.D(new BlockPosition(entityzombie)), (GroupDataEntity) null);
-                             this.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, 0));
-                             entityzombie.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, 0));
-@@ -191,7 +205,14 @@
-             float f = this.world.D(new BlockPosition(this)).b();
- 
-             if (this.getItemInMainHand().isEmpty() && this.isBurning() && this.random.nextFloat() < f * 0.3F) {
--                entity.setOnFire(2 * (int) f);
-+                // CraftBukkit start
-+                EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 2 * (int) f); // PAIL: fixme
-+                this.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (!event.isCancelled()) {
-+                    entity.setOnFire(event.getDuration());
-+                }
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -284,7 +305,7 @@
-                 entityzombievillager.setCustomNameVisible(entityvillager.getCustomNameVisible());
-             }
- 
--            this.world.addEntity(entityzombievillager);
-+            this.world.addEntity(entityzombievillager, CreatureSpawnEvent.SpawnReason.INFECTION); // CraftBukkit - add SpawnReason
-             this.world.a((EntityHuman) null, 1026, new BlockPosition(this), 0);
-         }
- 
-@@ -334,7 +355,7 @@
-                     entitychicken1.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, 0.0F);
-                     entitychicken1.prepare(difficultydamagescaler, (GroupDataEntity) null);
-                     entitychicken1.p(true);
--                    this.world.addEntity(entitychicken1);
-+                    this.world.addEntity(entitychicken1, CreatureSpawnEvent.SpawnReason.MOUNT); // CraftBukkit
-                     this.startRiding(entitychicken1);
-                 }
-             }
-@@ -392,7 +413,7 @@
-     }
- 
-     public void die(DamageSource damagesource) {
--        super.die(damagesource);
-+        // super.die(damagesource); // CraftBukkit
-         if (damagesource.getEntity() instanceof EntityCreeper) {
-             EntityCreeper entitycreeper = (EntityCreeper) damagesource.getEntity();
- 
-@@ -405,6 +426,7 @@
-                 }
-             }
-         }
-+        super.die(damagesource); // CraftBukkit - moved from above
- 
-     }
- 
diff --git a/nms-patches/EntityZombieVillager.patch b/nms-patches/EntityZombieVillager.patch
deleted file mode 100644
index 247d022..0000000
--- a/nms-patches/EntityZombieVillager.patch
+++ /dev/null
@@ -1,31 +0,0 @@
---- a/net/minecraft/server/EntityZombieVillager.java
-+++ b/net/minecraft/server/EntityZombieVillager.java
-@@ -9,6 +9,7 @@
-     private static final DataWatcherObject<Integer> c = DataWatcher.a(EntityZombieVillager.class, DataWatcherRegistry.b);
-     private int conversionTime;
-     private UUID by;
-+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
- 
-     public EntityZombieVillager(World world) {
-         super(world);
-@@ -60,6 +61,11 @@
-     public void B_() {
-         if (!this.world.isClientSide && this.isConverting()) {
-             int i = this.du();
-+            // CraftBukkit start - Use wall time instead of ticks for villager conversion
-+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
-+            this.lastTick = MinecraftServer.currentTick;
-+            i *= elapsedTicks;
-+            // CraftBukkit end
- 
-             this.conversionTime -= i;
-             if (this.conversionTime <= 0) {
-@@ -123,7 +129,7 @@
-             entityvillager.setCustomNameVisible(this.getCustomNameVisible());
-         }
- 
--        this.world.addEntity(entityvillager);
-+        this.world.addEntity(entityvillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CURED); // CraftBukkit - add SpawnReason
-         if (this.by != null) {
-             EntityHuman entityhuman = this.world.b(this.by);
- 
diff --git a/nms-patches/ExpirableListEntry.patch b/nms-patches/ExpirableListEntry.patch
deleted file mode 100644
index aa81c82..0000000
--- a/nms-patches/ExpirableListEntry.patch
+++ /dev/null
@@ -1,42 +0,0 @@
---- a/net/minecraft/server/ExpirableListEntry.java
-+++ b/net/minecraft/server/ExpirableListEntry.java
-@@ -22,7 +22,7 @@
-     }
- 
-     protected ExpirableListEntry(T t0, JsonObject jsonobject) {
--        super(t0, jsonobject);
-+        super(checkExpiry(t0, jsonobject), jsonobject);
- 
-         Date date;
- 
-@@ -65,4 +65,30 @@
-         jsonobject.addProperty("expires", this.d == null ? "forever" : ExpirableListEntry.a.format(this.d));
-         jsonobject.addProperty("reason", this.e);
-     }
-+
-+    // CraftBukkit start
-+    public String getSource() {
-+        return this.c;
-+    }
-+
-+    public Date getCreated() {
-+        return this.b;
-+    }
-+
-+    private static <T> T checkExpiry(T object, JsonObject jsonobject) {
-+        Date expires = null;
-+
-+        try {
-+            expires = jsonobject.has("expires") ? a.parse(jsonobject.get("expires").getAsString()) : null;
-+        } catch (ParseException ex) {
-+            // Guess we don't have a date
-+        }
-+
-+        if (expires == null || expires.after(new Date())) {
-+            return object;
-+        } else {
-+            return null;
-+        }
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/Explosion.patch b/nms-patches/Explosion.patch
deleted file mode 100644
index ccc8d40..0000000
--- a/nms-patches/Explosion.patch
+++ /dev/null
@@ -1,154 +0,0 @@
---- a/net/minecraft/server/Explosion.java
-+++ b/net/minecraft/server/Explosion.java
-@@ -10,6 +10,13 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.EntityExplodeEvent;
-+import org.bukkit.Location;
-+import org.bukkit.event.block.BlockExplodeEvent;
-+// CraftBukkit end
-+
- public class Explosion {
- 
-     private final boolean a;
-@@ -23,11 +30,12 @@
-     private final float size;
-     private final List<BlockPosition> blocks = Lists.newArrayList();
-     private final Map<EntityHuman, Vec3D> k = Maps.newHashMap();
-+    public boolean wasCanceled = false; // CraftBukkit - add field
- 
-     public Explosion(World world, Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
-         this.world = world;
-         this.source = entity;
--        this.size = f;
-+        this.size = (float) Math.max(f, 0.0); // CraftBukkit - clamp bad values
-         this.posX = d0;
-         this.posY = d1;
-         this.posZ = d2;
-@@ -36,6 +44,11 @@
-     }
- 
-     public void a() {
-+        // CraftBukkit start
-+        if (this.size < 0.1F) {
-+            return;
-+        }
-+        // CraftBukkit end
-         HashSet hashset = Sets.newHashSet();
-         boolean flag = true;
- 
-@@ -69,7 +82,7 @@
-                                 f -= (f2 + 0.3F) * 0.3F;
-                             }
- 
--                            if (f > 0.0F && (this.source == null || this.source.a(this, this.world, blockposition, iblockdata, f))) {
-+                            if (f > 0.0F && (this.source == null || this.source.a(this, this.world, blockposition, iblockdata, f)) && blockposition.getY() < 256 && blockposition.getY() >= 0) { // CraftBukkit - don't wrap explosions
-                                 hashset.add(blockposition);
-                             }
- 
-@@ -113,7 +126,16 @@
-                         double d12 = (double) this.world.a(vec3d, entity.getBoundingBox());
-                         double d13 = (1.0D - d7) * d12;
- 
--                        entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 7.0D * (double) f3 + 1.0D)));
-+                        // CraftBukkit start
-+                        // entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 7.0D * (double) f3 + 1.0D)));
-+                        CraftEventFactory.entityDamage = source;
-+                        entity.forceExplosionKnockback = false;
-+                        boolean wasDamaged = entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 7.0D * (double) f3 + 1.0D)));
-+                        CraftEventFactory.entityDamage = null;
-+                        if (!wasDamaged && !(entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && !entity.forceExplosionKnockback) {
-+                            continue;
-+                        }
-+                        // CraftBukkit end
-                         double d14 = d13;
- 
-                         if (entity instanceof EntityLiving) {
-@@ -149,6 +171,50 @@
-         BlockPosition blockposition;
- 
-         if (this.b) {
-+            // CraftBukkit start
-+            org.bukkit.World bworld = this.world.getWorld();
-+            org.bukkit.entity.Entity explode = this.source == null ? null : this.source.getBukkitEntity();
-+            Location location = new Location(bworld, this.posX, this.posY, this.posZ);
-+
-+            List<org.bukkit.block.Block> blockList = Lists.newArrayList();
-+            for (int i1 = this.blocks.size() - 1; i1 >= 0; i1--) {
-+                BlockPosition cpos = (BlockPosition) this.blocks.get(i1);
-+                org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
-+                if (bblock.getType() != org.bukkit.Material.AIR) {
-+                    blockList.add(bblock);
-+                }
-+            }
-+
-+            boolean cancelled;
-+            List<org.bukkit.block.Block> bukkitBlocks;
-+            float yield;
-+
-+            if (explode != null) {
-+                EntityExplodeEvent event = new EntityExplodeEvent(explode, location, blockList, 1.0F / this.size);
-+                this.world.getServer().getPluginManager().callEvent(event);
-+                cancelled = event.isCancelled();
-+                bukkitBlocks = event.blockList();
-+                yield = event.getYield();
-+            } else {
-+                BlockExplodeEvent event = new BlockExplodeEvent(location.getBlock(), blockList, 1.0F / this.size);
-+                this.world.getServer().getPluginManager().callEvent(event);
-+                cancelled = event.isCancelled();
-+                bukkitBlocks = event.blockList();
-+                yield = event.getYield();
-+            }
-+
-+            this.blocks.clear();
-+
-+            for (org.bukkit.block.Block bblock : bukkitBlocks) {
-+                BlockPosition coords = new BlockPosition(bblock.getX(), bblock.getY(), bblock.getZ());
-+                blocks.add(coords);
-+            }
-+
-+            if (cancelled) {
-+                this.wasCanceled = true;
-+                return;
-+            }
-+            // CraftBukkit end
-             iterator = this.blocks.iterator();
- 
-             while (iterator.hasNext()) {
-@@ -180,7 +246,8 @@
- 
-                 if (iblockdata.getMaterial() != Material.AIR) {
-                     if (block.a(this)) {
--                        block.dropNaturally(this.world, blockposition, this.world.getType(blockposition), 1.0F / this.size, 0);
-+                        // CraftBukkit - add yield
-+                        block.dropNaturally(this.world, blockposition, this.world.getType(blockposition), yield, 0);
-                     }
- 
-                     this.world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
-@@ -195,7 +262,11 @@
-             while (iterator.hasNext()) {
-                 blockposition = (BlockPosition) iterator.next();
-                 if (this.world.getType(blockposition).getMaterial() == Material.AIR && this.world.getType(blockposition.down()).b() && this.c.nextInt(3) == 0) {
--                    this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                    // CraftBukkit start - Ignition by explosion
-+                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(this.world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
-+                        this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
-         }
-@@ -208,7 +279,9 @@
- 
-     @Nullable
-     public EntityLiving getSource() {
--        return this.source == null ? null : (this.source instanceof EntityTNTPrimed ? ((EntityTNTPrimed) this.source).getSource() : (this.source instanceof EntityLiving ? (EntityLiving) this.source : null));
-+        // CraftBukkit start - obtain Fireball shooter for explosion tracking
-+        return this.source == null ? null : (this.source instanceof EntityTNTPrimed ? ((EntityTNTPrimed) this.source).getSource() : (this.source instanceof EntityLiving ? (EntityLiving) this.source : (this.source instanceof EntityFireball ? ((EntityFireball) this.source).shooter : null)));
-+        // CraftBukkit end
-     }
- 
-     public void clearBlocks() {
diff --git a/nms-patches/FoodMetaData.patch b/nms-patches/FoodMetaData.patch
deleted file mode 100644
index 121f388..0000000
--- a/nms-patches/FoodMetaData.patch
+++ /dev/null
@@ -1,74 +0,0 @@
---- a/net/minecraft/server/FoodMetaData.java
-+++ b/net/minecraft/server/FoodMetaData.java
-@@ -6,9 +6,17 @@
-     public float saturationLevel = 5.0F;
-     public float exhaustionLevel;
-     private int foodTickTimer;
-+    private EntityHuman entityhuman; // CraftBukkit
-     private int e = 20;
- 
--    public FoodMetaData() {}
-+    public FoodMetaData() { throw new AssertionError("Whoopsie, we missed the bukkit."); } // CraftBukkit start - throw an error
-+
-+    // CraftBukkit start - added EntityHuman constructor
-+    public FoodMetaData(EntityHuman entityhuman) {
-+        org.apache.commons.lang.Validate.notNull(entityhuman);
-+        this.entityhuman = entityhuman;
-+    }
-+    // CraftBukkit end
- 
-     public void eat(int i, float f) {
-         this.foodLevel = Math.min(i + this.foodLevel, 20);
-@@ -16,7 +24,17 @@
-     }
- 
-     public void a(ItemFood itemfood, ItemStack itemstack) {
--        this.eat(itemfood.getNutrition(itemstack), itemfood.getSaturationModifier(itemstack));
-+        // CraftBukkit start
-+        int oldFoodLevel = foodLevel;
-+
-+        org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(entityhuman, itemfood.getNutrition(itemstack) + oldFoodLevel);
-+
-+        if (!event.isCancelled()) {
-+            this.eat(event.getFoodLevel() - oldFoodLevel, itemfood.getSaturationModifier(itemstack));
-+        }
-+
-+        ((EntityPlayer) entityhuman).getBukkitEntity().sendHealthUpdate();
-+        // CraftBukkit end
-     }
- 
-     public void a(EntityHuman entityhuman) {
-@@ -28,7 +46,15 @@
-             if (this.saturationLevel > 0.0F) {
-                 this.saturationLevel = Math.max(this.saturationLevel - 1.0F, 0.0F);
-             } else if (enumdifficulty != EnumDifficulty.PEACEFUL) {
--                this.foodLevel = Math.max(this.foodLevel - 1, 0);
-+                // CraftBukkit start
-+                org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(entityhuman, Math.max(this.foodLevel - 1, 0));
-+
-+                if (!event.isCancelled()) {
-+                    this.foodLevel = event.getFoodLevel();
-+                }
-+
-+                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutUpdateHealth(((EntityPlayer) entityhuman).getBukkitEntity().getScaledHealth(), this.foodLevel, this.saturationLevel));
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -39,14 +65,14 @@
-             if (this.foodTickTimer >= 10) {
-                 float f = Math.min(this.saturationLevel, 6.0F);
- 
--                entityhuman.heal(f / 6.0F);
-+                entityhuman.heal(f / 6.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED); // CraftBukkit - added RegainReason
-                 this.a(f);
-                 this.foodTickTimer = 0;
-             }
-         } else if (flag && this.foodLevel >= 18 && entityhuman.dj()) {
-             ++this.foodTickTimer;
-             if (this.foodTickTimer >= 80) {
--                entityhuman.heal(1.0F);
-+                entityhuman.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED); // CraftBukkit - added RegainReason
-                 this.a(6.0F);
-                 this.foodTickTimer = 0;
-             }
diff --git a/nms-patches/HandshakeListener.patch b/nms-patches/HandshakeListener.patch
deleted file mode 100644
index dc8c023..0000000
--- a/nms-patches/HandshakeListener.patch
+++ /dev/null
@@ -1,70 +0,0 @@
---- a/net/minecraft/server/HandshakeListener.java
-+++ b/net/minecraft/server/HandshakeListener.java
-@@ -1,7 +1,17 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import java.net.InetAddress;
-+import java.util.HashMap;
-+// CraftBukkit end
-+
- public class HandshakeListener implements PacketHandshakingInListener {
- 
-+    // CraftBukkit start - add fields
-+    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
-+    private static int throttleCounter = 0;
-+    // CraftBukkit end
-+
-     private final MinecraftServer a;
-     private final NetworkManager b;
- 
-@@ -16,6 +26,41 @@
-             this.b.setProtocol(EnumProtocol.LOGIN);
-             ChatMessage chatmessage;
- 
-+            // CraftBukkit start - Connection throttle
-+            try {
-+                long currentTime = System.currentTimeMillis();
-+                long connectionThrottle = MinecraftServer.getServer().server.getConnectionThrottle();
-+                InetAddress address = ((java.net.InetSocketAddress) this.b.getSocketAddress()).getAddress();
-+
-+                synchronized (throttleTracker) {
-+                    if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.get(address) < connectionThrottle) {
-+                        throttleTracker.put(address, currentTime);
-+                        chatmessage = new ChatMessage("Connection throttled! Please wait before reconnecting.");
-+                        this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
-+                        this.b.close(chatmessage);
-+                        return;
-+                    }
-+
-+                    throttleTracker.put(address, currentTime);
-+                    throttleCounter++;
-+                    if (throttleCounter > 200) {
-+                        throttleCounter = 0;
-+
-+                        // Cleanup stale entries
-+                        java.util.Iterator iter = throttleTracker.entrySet().iterator();
-+                        while (iter.hasNext()) {
-+                            java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
-+                            if (entry.getValue() > connectionThrottle) {
-+                                iter.remove();
-+                            }
-+                        }
-+                    }
-+                }
-+            } catch (Throwable t) {
-+                org.apache.logging.log4j.LogManager.getLogger().debug("Failed to check connection throttle", t);
-+            }
-+            // CraftBukkit end
-+
-             if (packethandshakinginsetprotocol.b() > 338) {
-                 chatmessage = new ChatMessage("multiplayer.disconnect.outdated_server", new Object[] { "1.12.1"});
-                 this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
-@@ -26,6 +71,7 @@
-                 this.b.close(chatmessage);
-             } else {
-                 this.b.setPacketListener(new LoginListener(this.a, this.b));
-+                ((LoginListener) this.b.i()).hostname = packethandshakinginsetprotocol.hostname + ":" + packethandshakinginsetprotocol.port; // CraftBukkit - set hostname
-             }
-             break;
- 
diff --git a/nms-patches/IDataManager.patch b/nms-patches/IDataManager.patch
deleted file mode 100644
index 362ecd7..0000000
--- a/nms-patches/IDataManager.patch
+++ /dev/null
@@ -1,9 +0,0 @@
---- a/net/minecraft/server/IDataManager.java
-+++ b/net/minecraft/server/IDataManager.java
-@@ -25,4 +25,6 @@
-     File getDataFile(String s);
- 
-     DefinedStructureManager h();
-+
-+    java.util.UUID getUUID(); // CraftBukkit
- }
diff --git a/nms-patches/IInventory.patch b/nms-patches/IInventory.patch
deleted file mode 100644
index 0d2e884..0000000
--- a/nms-patches/IInventory.patch
+++ /dev/null
@@ -1,33 +0,0 @@
---- a/net/minecraft/server/IInventory.java
-+++ b/net/minecraft/server/IInventory.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity; // CraftBukkit
-+
- public interface IInventory extends INamableTileEntity {
- 
-     int getSize();
-@@ -33,4 +35,22 @@
-     int h();
- 
-     void clear();
-+
-+    // CraftBukkit start
-+    java.util.List<ItemStack> getContents();
-+
-+    void onOpen(CraftHumanEntity who);
-+
-+    void onClose(CraftHumanEntity who);
-+
-+    java.util.List<org.bukkit.entity.HumanEntity> getViewers();
-+
-+    org.bukkit.inventory.InventoryHolder getOwner();
-+
-+    void setMaxStackSize(int size);
-+
-+    org.bukkit.Location getLocation();
-+
-+    int MAX_STACK = 64;
-+    // CraftBukkit end
- }
diff --git a/nms-patches/IRecipe.patch b/nms-patches/IRecipe.patch
deleted file mode 100644
index 325b5b6..0000000
--- a/nms-patches/IRecipe.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/IRecipe.java
-+++ b/net/minecraft/server/IRecipe.java
-@@ -17,4 +17,8 @@
-     default boolean c() {
-         return false;
-     }
-+
-+    org.bukkit.inventory.Recipe toBukkitRecipe(); // CraftBukkit
-+
-+    void setKey(MinecraftKey key); // CraftBukkit
- }
diff --git a/nms-patches/InventoryCraftResult.patch b/nms-patches/InventoryCraftResult.patch
deleted file mode 100644
index 70c8e7f..0000000
--- a/nms-patches/InventoryCraftResult.patch
+++ /dev/null
@@ -1,57 +0,0 @@
---- a/net/minecraft/server/InventoryCraftResult.java
-+++ b/net/minecraft/server/InventoryCraftResult.java
-@@ -2,12 +2,45 @@
- 
- import java.util.Iterator;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+// CraftBukkit end
- 
- public class InventoryCraftResult implements IInventory {
- 
-     private final NonNullList<ItemStack> items;
-     private IRecipe b;
- 
-+    // CraftBukkit start
-+    private int maxStack = MAX_STACK;
-+
-+    public java.util.List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public org.bukkit.inventory.InventoryHolder getOwner() {
-+        return null; // Result slots don't get an owner
-+    }
-+
-+    // Don't need a transaction; the InventoryCrafting keeps track of it for us
-+    public void onOpen(CraftHumanEntity who) {}
-+    public void onClose(CraftHumanEntity who) {}
-+    public java.util.List<HumanEntity> getViewers() {
-+        return new java.util.ArrayList<HumanEntity>();
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+
-+    @Override
-+    public Location getLocation() {
-+        return null;
-+    }
-+    // CraftBukkit end
-+
-     public InventoryCraftResult() {
-         this.items = NonNullList.a(1, ItemStack.a);
-     }
-@@ -61,7 +94,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return maxStack; // CraftBukkit
-     }
- 
-     public void update() {}
diff --git a/nms-patches/InventoryCrafting.patch b/nms-patches/InventoryCrafting.patch
deleted file mode 100644
index 3ddb4a1..0000000
--- a/nms-patches/InventoryCrafting.patch
+++ /dev/null
@@ -1,71 +0,0 @@
---- a/net/minecraft/server/InventoryCrafting.java
-+++ b/net/minecraft/server/InventoryCrafting.java
-@@ -1,6 +1,14 @@
- package net.minecraft.server;
- 
- import java.util.Iterator;
-+// CraftBukkit start
-+import java.util.List;
-+import org.bukkit.Location;
-+
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+import org.bukkit.event.inventory.InventoryType;
-+// CraftBukkit end
- 
- public class InventoryCrafting implements IInventory {
- 
-@@ -9,6 +17,53 @@
-     private final int c;
-     public final Container container;
- 
-+    // CraftBukkit start - add fields
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    public IRecipe currentRecipe;
-+    public IInventory resultInventory;
-+    private EntityHuman owner;
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public InventoryType getInvType() {
-+        return items.size() == 4 ? InventoryType.CRAFTING : InventoryType.WORKBENCH;
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public org.bukkit.inventory.InventoryHolder getOwner() {
-+        return (owner == null) ? null : owner.getBukkitEntity();
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+        resultInventory.setMaxStackSize(size);
-+    }
-+
-+    @Override
-+    public Location getLocation() {
-+        return owner.getBukkitEntity().getLocation();
-+    }
-+
-+    public InventoryCrafting(Container container, int i, int j, EntityHuman player) {
-+        this(container, i, j);
-+        this.owner = player;
-+    }
-+    // CraftBukkit end
-+
-     public InventoryCrafting(Container container, int i, int j) {
-         this.items = NonNullList.a(i * j, ItemStack.a);
-         this.container = container;
diff --git a/nms-patches/InventoryEnderChest.patch b/nms-patches/InventoryEnderChest.patch
deleted file mode 100644
index 18f4a07..0000000
--- a/nms-patches/InventoryEnderChest.patch
+++ /dev/null
@@ -1,31 +0,0 @@
---- a/net/minecraft/server/InventoryEnderChest.java
-+++ b/net/minecraft/server/InventoryEnderChest.java
-@@ -1,11 +1,27 @@
- package net.minecraft.server;
- 
-+import org.bukkit.Location;
-+import org.bukkit.inventory.InventoryHolder;
-+
- public class InventoryEnderChest extends InventorySubcontainer {
- 
-     private TileEntityEnderChest a;
-+    // CraftBukkit start
-+    private final EntityHuman owner;
-+
-+    public InventoryHolder getBukkitOwner() {
-+        return owner.getBukkitEntity();
-+    }
-+
-+    @Override
-+    public Location getLocation() {
-+        return new Location(this.a.getWorld().getWorld(), this.a.getPosition().getX(), this.a.getPosition().getY(), this.a.getPosition().getZ());
-+    }
- 
--    public InventoryEnderChest() {
-+    public InventoryEnderChest(EntityHuman owner) {
-         super("container.enderchest", false, 27);
-+        this.owner = owner;
-+        // CraftBukkit end
-     }
- 
-     public void a(TileEntityEnderChest tileentityenderchest) {
diff --git a/nms-patches/InventoryHorseChest.patch b/nms-patches/InventoryHorseChest.patch
deleted file mode 100644
index 875dd67..0000000
--- a/nms-patches/InventoryHorseChest.patch
+++ /dev/null
@@ -1,14 +0,0 @@
---- a/net/minecraft/server/InventoryHorseChest.java
-+++ b/net/minecraft/server/InventoryHorseChest.java
-@@ -2,7 +2,9 @@
- 
- public class InventoryHorseChest extends InventorySubcontainer {
- 
--    public InventoryHorseChest(String s, int i) {
--        super(s, false, i);
-+    // CraftBukkit start
-+    public InventoryHorseChest(String s, int i, EntityHorseAbstract owner) {
-+        super(s, false, i, (org.bukkit.entity.AbstractHorse) owner.getBukkitEntity());
-+        // CraftBukkit end
-     }
- }
diff --git a/nms-patches/InventoryLargeChest.patch b/nms-patches/InventoryLargeChest.patch
deleted file mode 100644
index 3ed9ccd..0000000
--- a/nms-patches/InventoryLargeChest.patch
+++ /dev/null
@@ -1,74 +0,0 @@
---- a/net/minecraft/server/InventoryLargeChest.java
-+++ b/net/minecraft/server/InventoryLargeChest.java
-@@ -1,11 +1,62 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import java.util.ArrayList;
-+import java.util.List;
-+import org.bukkit.Location;
-+
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+// CraftBukkit end
-+
- public class InventoryLargeChest implements ITileInventory {
- 
-     private final String a;
-     public final ITileInventory left;
-     public final ITileInventory right;
- 
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+
-+    public List<ItemStack> getContents() {
-+        List<ItemStack> result = new ArrayList<ItemStack>(this.getSize());
-+        for (int i = 0; i < this.getSize(); i++) {
-+            result.add(this.getItem(i));
-+        }
-+        return result;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        this.left.onOpen(who);
-+        this.right.onOpen(who);
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        this.left.onClose(who);
-+        this.right.onClose(who);
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public org.bukkit.inventory.InventoryHolder getOwner() {
-+        return null; // This method won't be called since CraftInventoryDoubleChest doesn't defer to here
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        this.left.setMaxStackSize(size);
-+        this.right.setMaxStackSize(size);
-+    }
-+
-+    @Override
-+    public Location getLocation() {
-+        return left.getLocation(); // TODO: right?
-+    }
-+    // CraftBukkit end
-+
-     public InventoryLargeChest(String s, ITileInventory itileinventory, ITileInventory itileinventory1) {
-         this.a = s;
-         if (itileinventory == null) {
-@@ -72,7 +123,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return this.left.getMaxStackSize();
-+        return Math.min(this.left.getMaxStackSize(), this.right.getMaxStackSize()); // CraftBukkit - check both sides
-     }
- 
-     public void update() {
diff --git a/nms-patches/InventoryMerchant.patch b/nms-patches/InventoryMerchant.patch
deleted file mode 100644
index 8c56630..0000000
--- a/nms-patches/InventoryMerchant.patch
+++ /dev/null
@@ -1,66 +0,0 @@
---- a/net/minecraft/server/InventoryMerchant.java
-+++ b/net/minecraft/server/InventoryMerchant.java
-@@ -1,6 +1,13 @@
- package net.minecraft.server;
- 
- import java.util.Iterator;
-+// CraftBukkit start
-+import java.util.List;
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.craftbukkit.entity.CraftVillager;
-+import org.bukkit.entity.HumanEntity;
-+// CraftBukkit end
- 
- public class InventoryMerchant implements IInventory {
- 
-@@ -10,6 +17,40 @@
-     private MerchantRecipe recipe;
-     public int selectedIndex;
- 
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        return this.itemsInSlots;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public void setMaxStackSize(int i) {
-+        maxStack = i;
-+    }
-+
-+    public org.bukkit.inventory.InventoryHolder getOwner() {
-+        return (merchant instanceof EntityVillager) ? (CraftVillager) ((EntityVillager) this.merchant).getBukkitEntity() : null;
-+    }
-+
-+    @Override
-+    public Location getLocation() {
-+        return (merchant instanceof EntityVillager) ? ((EntityVillager) this.merchant).getBukkitEntity().getLocation() : null;
-+    }
-+    // CraftBukkit end
-+
-     public InventoryMerchant(EntityHuman entityhuman, IMerchant imerchant) {
-         this.itemsInSlots = NonNullList.a(3, ItemStack.a);
-         this.player = entityhuman;
-@@ -89,7 +130,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return maxStack; // CraftBukkit
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
diff --git a/nms-patches/InventorySubcontainer.patch b/nms-patches/InventorySubcontainer.patch
deleted file mode 100644
index ee8e435..0000000
--- a/nms-patches/InventorySubcontainer.patch
+++ /dev/null
@@ -1,64 +0,0 @@
---- a/net/minecraft/server/InventorySubcontainer.java
-+++ b/net/minecraft/server/InventorySubcontainer.java
-@@ -4,6 +4,13 @@
- import java.util.Iterator;
- import java.util.List;
- 
-+// CraftBukkit start
-+import java.util.List;
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+// CraftBukkit end
-+
- public class InventorySubcontainer implements IInventory {
- 
-     private String a;
-@@ -12,7 +19,47 @@
-     private List<IInventoryListener> d;
-     private boolean e;
- 
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+    protected org.bukkit.inventory.InventoryHolder bukkitOwner;
-+
-+    public List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public void setMaxStackSize(int i) {
-+        maxStack = i;
-+    }
-+
-+    public org.bukkit.inventory.InventoryHolder getOwner() {
-+        return bukkitOwner;
-+    }
-+
-+    @Override
-+    public Location getLocation() {
-+        return null;
-+    }
-+
-     public InventorySubcontainer(String s, boolean flag, int i) {
-+        this(s, flag, i, null);
-+    }
-+
-+    public InventorySubcontainer(String s, boolean flag, int i, org.bukkit.inventory.InventoryHolder owner) {
-+        this.bukkitOwner = owner;
-+        // CraftBukkit end
-         this.a = s;
-         this.e = flag;
-         this.b = i;
diff --git a/nms-patches/ItemArmor.patch b/nms-patches/ItemArmor.patch
deleted file mode 100644
index 61627ea..0000000
--- a/nms-patches/ItemArmor.patch
+++ /dev/null
@@ -1,47 +0,0 @@
---- a/net/minecraft/server/ItemArmor.java
-+++ b/net/minecraft/server/ItemArmor.java
-@@ -5,6 +5,11 @@
- import java.util.List;
- import java.util.UUID;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.block.BlockDispenseEvent;
-+// CraftBukkit end
-+
- public class ItemArmor extends Item {
- 
-     private static final int[] n = new int[] { 13, 15, 16, 11};
-@@ -33,6 +38,32 @@
-             EntityLiving entityliving = (EntityLiving) list.get(0);
-             EnumItemSlot enumitemslot = EntityInsentient.d(itemstack);
-             ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
-+            // CraftBukkit start
-+            World world = isourceblock.getWorld();
-+            org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
-+
-+            BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
-+            if (!BlockDispenser.eventFired) {
-+                world.getServer().getPluginManager().callEvent(event);
-+            }
-+
-+            if (event.isCancelled()) {
-+                itemstack.add(1);
-+                return itemstack;
-+            }
-+
-+            if (!event.getItem().equals(craftItem)) {
-+                itemstack.add(1);
-+                // Chain to handler for new item
-+                ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != ItemArmor.b) {
-+                    idispensebehavior.a(isourceblock, eventStack);
-+                    return itemstack;
-+                }
-+            }
-+            // CraftBukkit end
- 
-             entityliving.setSlot(enumitemslot, itemstack1);
-             if (entityliving instanceof EntityInsentient) {
diff --git a/nms-patches/ItemBlock.patch b/nms-patches/ItemBlock.patch
deleted file mode 100644
index 859afa2..0000000
--- a/nms-patches/ItemBlock.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/ItemBlock.java
-+++ b/net/minecraft/server/ItemBlock.java
-@@ -36,7 +36,7 @@
- 
-                 SoundEffectType soundeffecttype = this.a.getStepSound();
- 
--                world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
-+                // world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F); // CraftBukkit - SPIGOT-1288
-                 itemstack.subtract(1);
-             }
- 
diff --git a/nms-patches/ItemBoat.patch b/nms-patches/ItemBoat.patch
deleted file mode 100644
index e25ef73..0000000
--- a/nms-patches/ItemBoat.patch
+++ /dev/null
@@ -1,25 +0,0 @@
---- a/net/minecraft/server/ItemBoat.java
-+++ b/net/minecraft/server/ItemBoat.java
-@@ -56,6 +56,13 @@
-             } else if (movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-                 return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
-             } else {
-+                // CraftBukkit start - Boat placement
-+                org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(entityhuman, org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, enumhand);
-+
-+                if (event.isCancelled()) {
-+                    return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
-+                }
-+                // CraftBukkit end
-                 Block block = world.getType(movingobjectposition.a()).getBlock();
-                 boolean flag1 = block == Blocks.WATER || block == Blocks.FLOWING_WATER;
-                 EntityBoat entityboat = new EntityBoat(world, movingobjectposition.pos.x, flag1 ? movingobjectposition.pos.y - 0.12D : movingobjectposition.pos.y, movingobjectposition.pos.z);
-@@ -66,7 +73,7 @@
-                     return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
-                 } else {
-                     if (!world.isClientSide) {
--                        world.addEntity(entityboat);
-+                        if (!world.addEntity(entityboat)) return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack); // CraftBukkit
-                     }
- 
-                     if (!entityhuman.abilities.canInstantlyBuild) {
diff --git a/nms-patches/ItemBow.patch b/nms-patches/ItemBow.patch
deleted file mode 100644
index d17d8d1..0000000
--- a/nms-patches/ItemBow.patch
+++ /dev/null
@@ -1,49 +0,0 @@
---- a/net/minecraft/server/ItemBow.java
-+++ b/net/minecraft/server/ItemBow.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.event.entity.EntityCombustEvent; // CraftBukkit
-+
- public class ItemBow extends Item {
- 
-     public ItemBow() {
-@@ -73,7 +75,20 @@
-                         }
- 
-                         if (EnchantmentManager.getEnchantmentLevel(Enchantments.ARROW_FIRE, itemstack) > 0) {
--                            entityarrow.setOnFire(100);
-+                        // CraftBukkit start - call EntityCombustEvent
-+                        EntityCombustEvent event = new EntityCombustEvent(entityarrow.getBukkitEntity(), 100);
-+                        entityarrow.world.getServer().getPluginManager().callEvent(event);
-+
-+                        if (!event.isCancelled()) {
-+                            entityarrow.setOnFire(event.getDuration());
-+                        }
-+                        // CraftBukkit end
-+                        }
-+                        // CraftBukkit start
-+                        org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(entityhuman, itemstack, entityarrow, f);
-+                        if (event.isCancelled()) {
-+                            event.getProjectile().remove();
-+                            return;
-                         }
- 
-                         itemstack.damage(1, entityhuman);
-@@ -81,7 +96,15 @@
-                             entityarrow.fromPlayer = EntityArrow.PickupStatus.CREATIVE_ONLY;
-                         }
- 
--                        world.addEntity(entityarrow);
-+                        if (event.getProjectile() == entityarrow.getBukkitEntity()) {
-+                            if (!world.addEntity(entityarrow)) {
-+                                if (entityhuman instanceof EntityPlayer) {
-+                                    ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
-+                                }
-+                                return;
-+                            }
-+                        }
-+                        // CraftBukkit end
-                     }
- 
-                     world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.w, SoundCategory.PLAYERS, 1.0F, 1.0F / (ItemBow.j.nextFloat() * 0.4F + 1.2F) + f * 0.5F);
diff --git a/nms-patches/ItemBucket.patch b/nms-patches/ItemBucket.patch
deleted file mode 100644
index 0d6b49e..0000000
--- a/nms-patches/ItemBucket.patch
+++ /dev/null
@@ -1,110 +0,0 @@
---- a/net/minecraft/server/ItemBucket.java
-+++ b/net/minecraft/server/ItemBucket.java
-@@ -1,6 +1,12 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.player.PlayerBucketEmptyEvent;
-+import org.bukkit.event.player.PlayerBucketFillEvent;
-+// CraftBukkit end
- 
- public class ItemBucket extends Item {
- 
-@@ -34,15 +40,29 @@
-                     Material material = iblockdata.getMaterial();
- 
-                     if (material == Material.WATER && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
-+                        // CraftBukkit start
-+                        PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, Items.WATER_BUCKET);
-+ 
-+                        if (event.isCancelled()) {
-+                            return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
-+                        }
-+                        // CraftBukkit end
-                         world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 11);
-                         entityhuman.b(StatisticList.b((Item) this));
-                         entityhuman.a(SoundEffects.S, 1.0F, 1.0F);
--                        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.WATER_BUCKET));
-+                        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.WATER_BUCKET, event.getItemStack())); // CraftBukkit
-                     } else if (material == Material.LAVA && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
-+                        // CraftBukkit start
-+                        PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, Items.LAVA_BUCKET);
-+
-+                        if (event.isCancelled()) {
-+                            return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
-+                        }
-+                        // CraftBukkit end
-                         entityhuman.a(SoundEffects.T, 1.0F, 1.0F);
-                         world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 11);
-                         entityhuman.b(StatisticList.b((Item) this));
--                        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.LAVA_BUCKET));
-+                        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.LAVA_BUCKET, event.getItemStack())); // CraftBukkit
-                     } else {
-                         return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
-                     }
-@@ -53,7 +73,7 @@
- 
-                 if (!entityhuman.a(blockposition1, movingobjectposition.direction, itemstack)) {
-                     return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
--                } else if (this.a(entityhuman, world, blockposition1)) {
-+                } else if (this.a(entityhuman, world, blockposition1, movingobjectposition.direction, blockposition, itemstack)) { // CraftBukkit
-                     if (entityhuman instanceof EntityPlayer) {
-                         CriterionTriggers.x.a((EntityPlayer) entityhuman, blockposition1, itemstack);
-                     }
-@@ -67,16 +87,19 @@
-         }
-     }
- 
--    private ItemStack a(ItemStack itemstack, EntityHuman entityhuman, Item item) {
-+    // CraftBukkit - added ob.ItemStack result - TODO: Is this... the right way to handle this?
-+    private ItemStack a(ItemStack itemstack, EntityHuman entityhuman, Item item, org.bukkit.inventory.ItemStack result) {
-         if (entityhuman.abilities.canInstantlyBuild) {
-             return itemstack;
-         } else {
-             itemstack.subtract(1);
-             if (itemstack.isEmpty()) {
--                return new ItemStack(item);
-+                // CraftBukkit start
-+                return CraftItemStack.asNMSCopy(result);
-             } else {
--                if (!entityhuman.inventory.pickup(new ItemStack(item))) {
--                    entityhuman.drop(new ItemStack(item), false);
-+                if (!entityhuman.inventory.pickup(CraftItemStack.asNMSCopy(result))) {
-+                    entityhuman.drop(CraftItemStack.asNMSCopy(result), false);
-+                    // CraftBukkit end
-                 }
- 
-                 return itemstack;
-@@ -84,7 +107,13 @@
-         }
-     }
- 
-+    // CraftBukkit start
-     public boolean a(@Nullable EntityHuman entityhuman, World world, BlockPosition blockposition) {
-+        return a(entityhuman, world, blockposition, null, blockposition, null);
-+    }
-+
-+    public boolean a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumDirection enumdirection, BlockPosition clicked, ItemStack itemstack) {
-+        // CraftBukkit end
-         if (this.a == Blocks.AIR) {
-             return false;
-         } else {
-@@ -96,6 +125,15 @@
-             if (!world.isEmpty(blockposition) && !flag && !flag1) {
-                 return false;
-             } else {
-+                // CraftBukkit start
-+                if (entityhuman != null) {
-+                    PlayerBucketEmptyEvent event = CraftEventFactory.callPlayerBucketEmptyEvent(entityhuman, clicked.getX(), clicked.getY(), clicked.getZ(), enumdirection, itemstack);
-+                    if (event.isCancelled()) {
-+                        // TODO: inventory not updated
-+                        return false;
-+                    }
-+                }
-+                // CraftBukkit end
-                 if (world.worldProvider.l() && this.a == Blocks.FLOWING_WATER) {
-                     int i = blockposition.getX();
-                     int j = blockposition.getY();
diff --git a/nms-patches/ItemChorusFruit.patch b/nms-patches/ItemChorusFruit.patch
deleted file mode 100644
index c05c10b..0000000
--- a/nms-patches/ItemChorusFruit.patch
+++ /dev/null
@@ -1,35 +0,0 @@
---- a/net/minecraft/server/ItemChorusFruit.java
-+++ b/net/minecraft/server/ItemChorusFruit.java
-@@ -1,5 +1,11 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.Location;
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.player.PlayerTeleportEvent;
-+// CraftBukkit end
-+
- public class ItemChorusFruit extends ItemFood {
- 
-     public ItemChorusFruit(int i, float f) {
-@@ -19,6 +25,20 @@
-                 double d4 = MathHelper.a(entityliving.locY + (double) (entityliving.getRandom().nextInt(16) - 8), 0.0D, (double) (world.ab() - 1));
-                 double d5 = entityliving.locZ + (entityliving.getRandom().nextDouble() - 0.5D) * 16.0D;
- 
-+                // CraftBukkit start
-+                if (entityliving instanceof EntityPlayer) {
-+                    Player player = ((EntityPlayer) entityliving).getBukkitEntity();
-+                    PlayerTeleportEvent teleEvent = new PlayerTeleportEvent(player, player.getLocation(), new Location(player.getWorld(), d3, d4, d5), PlayerTeleportEvent.TeleportCause.CHORUS_FRUIT);
-+                    world.getServer().getPluginManager().callEvent(teleEvent);
-+                    if (teleEvent.isCancelled()) {
-+                        break;
-+                    }
-+                    d3 = teleEvent.getTo().getX();
-+                    d4 = teleEvent.getTo().getY();
-+                    d5 = teleEvent.getTo().getZ();
-+                }
-+                // CraftBukkit end
-+
-                 if (entityliving.isPassenger()) {
-                     entityliving.stopRiding();
-                 }
diff --git a/nms-patches/ItemDye.patch b/nms-patches/ItemDye.patch
deleted file mode 100644
index e92fa18..0000000
--- a/nms-patches/ItemDye.patch
+++ /dev/null
@@ -1,28 +0,0 @@
---- a/net/minecraft/server/ItemDye.java
-+++ b/net/minecraft/server/ItemDye.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.event.entity.SheepDyeWoolEvent; // CraftBukkit
-+
- public class ItemDye extends Item {
- 
-     public static final int[] a = new int[] { 1973019, 11743532, 3887386, 5320730, 2437522, 8073150, 2651799, 11250603, 4408131, 14188952, 4312372, 14602026, 6719955, 12801229, 15435844, 15790320};
-@@ -89,6 +91,17 @@
-             EnumColor enumcolor = EnumColor.fromInvColorIndex(itemstack.getData());
- 
-             if (!entitysheep.isSheared() && entitysheep.getColor() != enumcolor) {
-+                // CraftBukkit start
-+                byte bColor = (byte) enumcolor.getColorIndex();
-+                SheepDyeWoolEvent event = new SheepDyeWoolEvent((org.bukkit.entity.Sheep) entitysheep.getBukkitEntity(), org.bukkit.DyeColor.getByWoolData(bColor));
-+                entitysheep.world.getServer().getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    return false;
-+                }
-+
-+                enumcolor = EnumColor.fromColorIndex((byte) event.getColor().getWoolData());
-+                // CraftBukkit end
-                 entitysheep.setColor(enumcolor);
-                 itemstack.subtract(1);
-             }
diff --git a/nms-patches/ItemEnderPearl.patch b/nms-patches/ItemEnderPearl.patch
deleted file mode 100644
index ea00f57..0000000
--- a/nms-patches/ItemEnderPearl.patch
+++ /dev/null
@@ -1,35 +0,0 @@
---- a/net/minecraft/server/ItemEnderPearl.java
-+++ b/net/minecraft/server/ItemEnderPearl.java
-@@ -10,18 +10,26 @@
-     public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
-         ItemStack itemstack = entityhuman.b(enumhand);
- 
-+        // CraftBukkit start - change order
-+        if (!world.isClientSide) {
-+            EntityEnderPearl entityenderpearl = new EntityEnderPearl(world, entityhuman);
-+
-+            entityenderpearl.a(entityhuman, entityhuman.pitch, entityhuman.yaw, 0.0F, 1.5F, 1.0F);
-+            if (!world.addEntity(entityenderpearl)) {
-+                if (entityhuman instanceof EntityPlayer) {
-+                    ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
-+                }
-+                return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
-+            }
-+        }
-+
-         if (!entityhuman.abilities.canInstantlyBuild) {
-             itemstack.subtract(1);
-         }
- 
-         world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.bn, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemEnderPearl.j.nextFloat() * 0.4F + 0.8F));
-         entityhuman.getCooldownTracker().a(this, 20);
--        if (!world.isClientSide) {
--            EntityEnderPearl entityenderpearl = new EntityEnderPearl(world, entityhuman);
--
--            entityenderpearl.a(entityhuman, entityhuman.pitch, entityhuman.yaw, 0.0F, 1.5F, 1.0F);
--            world.addEntity(entityenderpearl);
--        }
-+        // CraftBukkit end
- 
-         entityhuman.b(StatisticList.b((Item) this));
-         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
diff --git a/nms-patches/ItemFireball.patch b/nms-patches/ItemFireball.patch
deleted file mode 100644
index aa84efa..0000000
--- a/nms-patches/ItemFireball.patch
+++ /dev/null
@@ -1,17 +0,0 @@
---- a/net/minecraft/server/ItemFireball.java
-+++ b/net/minecraft/server/ItemFireball.java
-@@ -17,6 +17,14 @@
-                 return EnumInteractionResult.FAIL;
-             } else {
-                 if (world.getType(blockposition).getMaterial() == Material.AIR) {
-+                    // CraftBukkit start - fire BlockIgniteEvent
-+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), org.bukkit.event.block.BlockIgniteEvent.IgniteCause.FIREBALL, entityhuman).isCancelled()) {
-+                        if (!entityhuman.abilities.canInstantlyBuild) {
-+                            itemstack.subtract(1);
-+                        }
-+                        return EnumInteractionResult.PASS;
-+                    }
-+                    // CraftBukkit end
-                     world.a((EntityHuman) null, blockposition, SoundEffects.bD, SoundCategory.BLOCKS, 1.0F, (ItemFireball.j.nextFloat() - ItemFireball.j.nextFloat()) * 0.2F + 1.0F);
-                     world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-                 }
diff --git a/nms-patches/ItemFishingRod.patch b/nms-patches/ItemFishingRod.patch
deleted file mode 100644
index ca72896..0000000
--- a/nms-patches/ItemFishingRod.patch
+++ /dev/null
@@ -1,37 +0,0 @@
---- a/net/minecraft/server/ItemFishingRod.java
-+++ b/net/minecraft/server/ItemFishingRod.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.event.player.PlayerFishEvent; // CraftBukkit
-+
- public class ItemFishingRod extends Item {
- 
-     public ItemFishingRod() {
-@@ -20,7 +22,7 @@
-             entityhuman.a(enumhand);
-             world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.J, SoundCategory.NEUTRAL, 1.0F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
-         } else {
--            world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
-+            // world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F)); // CraftBukkit - moved down
-             if (!world.isClientSide) {
-                 EntityFishingHook entityfishinghook = new EntityFishingHook(world, entityhuman);
-                 int j = EnchantmentManager.c(itemstack);
-@@ -35,6 +37,17 @@
-                     entityfishinghook.c(k);
-                 }
- 
-+                // CraftBukkit start
-+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), null, (org.bukkit.entity.Fish) entityfishinghook.getBukkitEntity(), PlayerFishEvent.State.FISHING);
-+                world.getServer().getPluginManager().callEvent(playerFishEvent);
-+
-+                if (playerFishEvent.isCancelled()) {
-+                    entityhuman.hookedFish = null;
-+                    return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
-+                }
-+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
-+                // CraftBukkit end
-+
-                 world.addEntity(entityfishinghook);
-             }
- 
diff --git a/nms-patches/ItemFlintAndSteel.patch b/nms-patches/ItemFlintAndSteel.patch
deleted file mode 100644
index 7442ab6..0000000
--- a/nms-patches/ItemFlintAndSteel.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/ItemFlintAndSteel.java
-+++ b/net/minecraft/server/ItemFlintAndSteel.java
-@@ -16,6 +16,12 @@
-             return EnumInteractionResult.FAIL;
-         } else {
-             if (world.getType(blockposition).getMaterial() == Material.AIR) {
-+                // CraftBukkit start - Store the clicked block
-+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), org.bukkit.event.block.BlockIgniteEvent.IgniteCause.FLINT_AND_STEEL, entityhuman).isCancelled()) {
-+                    itemstack.damage(1, entityhuman);
-+                    return EnumInteractionResult.PASS;
-+                }
-+                // CraftBukkit end
-                 world.a(entityhuman, blockposition, SoundEffects.bO, SoundCategory.BLOCKS, 1.0F, ItemFlintAndSteel.j.nextFloat() * 0.4F + 0.8F);
-                 world.setTypeAndData(blockposition, Blocks.FIRE.getBlockData(), 11);
-             }
diff --git a/nms-patches/ItemHanging.patch b/nms-patches/ItemHanging.patch
deleted file mode 100644
index f6826f0..0000000
--- a/nms-patches/ItemHanging.patch
+++ /dev/null
@@ -1,32 +0,0 @@
---- a/net/minecraft/server/ItemHanging.java
-+++ b/net/minecraft/server/ItemHanging.java
-@@ -1,6 +1,10 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.hanging.HangingPlaceEvent;
-+// CraftBukkit end
- 
- public class ItemHanging extends Item {
- 
-@@ -20,6 +24,18 @@
- 
-             if (entityhanging != null && entityhanging.survives()) {
-                 if (!world.isClientSide) {
-+                    // CraftBukkit start - fire HangingPlaceEvent
-+                    Player who = (entityhuman == null) ? null : (Player) entityhuman.getBukkitEntity();
-+                    org.bukkit.block.Block blockClicked = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                    org.bukkit.block.BlockFace blockFace = org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumdirection);
-+
-+                    HangingPlaceEvent event = new HangingPlaceEvent((org.bukkit.entity.Hanging) entityhanging.getBukkitEntity(), who, blockClicked, blockFace);
-+                    world.getServer().getPluginManager().callEvent(event);
-+
-+                    if (event.isCancelled()) {
-+                        return EnumInteractionResult.FAIL;
-+                    }
-+                    // CraftBukkit end
-                     entityhanging.p();
-                     world.addEntity(entityhanging);
-                 }
diff --git a/nms-patches/ItemLeash.patch b/nms-patches/ItemLeash.patch
deleted file mode 100644
index d51c678..0000000
--- a/nms-patches/ItemLeash.patch
+++ /dev/null
@@ -1,35 +0,0 @@
---- a/net/minecraft/server/ItemLeash.java
-+++ b/net/minecraft/server/ItemLeash.java
-@@ -3,6 +3,8 @@
- import java.util.Iterator;
- import java.util.List;
- 
-+import org.bukkit.event.hanging.HangingPlaceEvent; // CraftBukkit
-+
- public class ItemLeash extends Item {
- 
-     public ItemLeash() {
-@@ -39,7 +41,23 @@
-             if (entityinsentient.isLeashed() && entityinsentient.getLeashHolder() == entityhuman) {
-                 if (entityleash == null) {
-                     entityleash = EntityLeash.a(world, blockposition);
-+
-+                    // CraftBukkit start - fire HangingPlaceEvent
-+                    HangingPlaceEvent event = new HangingPlaceEvent((org.bukkit.entity.Hanging) entityleash.getBukkitEntity(), entityhuman != null ? (org.bukkit.entity.Player) entityhuman.getBukkitEntity() : null, world.getWorld().getBlockAt(i, j, k), org.bukkit.block.BlockFace.SELF);
-+                    world.getServer().getPluginManager().callEvent(event);
-+
-+                    if (event.isCancelled()) {
-+                        entityleash.die();
-+                        return false;
-+                    }
-+                    // CraftBukkit end
-+                }
-+
-+                // CraftBukkit start
-+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerLeashEntityEvent(entityinsentient, entityleash, entityhuman).isCancelled()) {
-+                    continue;
-                 }
-+                // CraftBukkit end
- 
-                 entityinsentient.setLeashHolder(entityleash, true);
-                 flag = true;
diff --git a/nms-patches/ItemMinecart.patch b/nms-patches/ItemMinecart.patch
deleted file mode 100644
index 60c5b2e..0000000
--- a/nms-patches/ItemMinecart.patch
+++ /dev/null
@@ -1,69 +0,0 @@
---- a/net/minecraft/server/ItemMinecart.java
-+++ b/net/minecraft/server/ItemMinecart.java
-@@ -1,5 +1,10 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.event.block.BlockDispenseEvent;
-+// CraftBukkit end
-+
- public class ItemMinecart extends Item {
- 
-     private static final IDispenseBehavior a = new DispenseBehaviorItem() {
-@@ -37,14 +42,43 @@
-                 }
-             }
- 
--            EntityMinecartAbstract entityminecartabstract = EntityMinecartAbstract.a(world, d0, d1 + d3, d2, ((ItemMinecart) itemstack.getItem()).b);
-+            // CraftBukkit start
-+            // EntityMinecartAbstract entityminecartabstract = EntityMinecartAbstract.a(world, d0, d1 + d3, d2, ((ItemMinecart) itemstack.getItem()).b);
-+            ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
-+            org.bukkit.block.Block block2 = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
-+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
-+
-+            BlockDispenseEvent event = new BlockDispenseEvent(block2, craftItem.clone(), new org.bukkit.util.Vector(d0, d1 + d3, d2));
-+            if (!BlockDispenser.eventFired) {
-+                world.getServer().getPluginManager().callEvent(event);
-+            }
-+
-+            if (event.isCancelled()) {
-+                itemstack.add(1);
-+                return itemstack;
-+            }
-+
-+            if (!event.getItem().equals(craftItem)) {
-+                itemstack.add(1);
-+                // Chain to handler for new item
-+                ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-+                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
-+                if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
-+                    idispensebehavior.a(isourceblock, eventStack);
-+                    return itemstack;
-+                }
-+            }
-+
-+            itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
-+            EntityMinecartAbstract entityminecartabstract = EntityMinecartAbstract.a(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), ((ItemMinecart) itemstack1.getItem()).b);
- 
-             if (itemstack.hasName()) {
-                 entityminecartabstract.setCustomName(itemstack.getName());
-             }
- 
--            world.addEntity(entityminecartabstract);
--            itemstack.subtract(1);
-+            if (!world.addEntity(entityminecartabstract)) itemstack.add(1);
-+            // itemstack.subtract(1); // CraftBukkit - handled during event processing
-+            // CraftBukkit end
-             return itemstack;
-         }
- 
-@@ -83,7 +117,7 @@
-                     entityminecartabstract.setCustomName(itemstack.getName());
-                 }
- 
--                world.addEntity(entityminecartabstract);
-+                if (!world.addEntity(entityminecartabstract)) return EnumInteractionResult.PASS; // CraftBukkit
-             }
- 
-             itemstack.subtract(1);
diff --git a/nms-patches/ItemMonsterEgg.patch b/nms-patches/ItemMonsterEgg.patch
deleted file mode 100644
index 2069ea1..0000000
--- a/nms-patches/ItemMonsterEgg.patch
+++ /dev/null
@@ -1,30 +0,0 @@
---- a/net/minecraft/server/ItemMonsterEgg.java
-+++ b/net/minecraft/server/ItemMonsterEgg.java
-@@ -152,6 +152,11 @@
- 
-     @Nullable
-     public static Entity a(World world, @Nullable MinecraftKey minecraftkey, double d0, double d1, double d2) {
-+        return spawnCreature(world, minecraftkey, d0, d1, d2, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG);
-+    }
-+
-+    @Nullable
-+    public static Entity spawnCreature(World world, @Nullable MinecraftKey minecraftkey, double d0, double d1, double d2, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
-         if (minecraftkey != null && EntityTypes.eggInfo.containsKey(minecraftkey)) {
-             Entity entity = null;
- 
-@@ -164,8 +169,13 @@
-                     entityinsentient.aP = entityinsentient.yaw;
-                     entityinsentient.aN = entityinsentient.yaw;
-                     entityinsentient.prepare(world.D(new BlockPosition(entityinsentient)), (GroupDataEntity) null);
--                    world.addEntity(entity);
--                    entityinsentient.D();
-+                    // CraftBukkit start - don't return an entity when CreatureSpawnEvent is canceled
-+                    if (!world.addEntity(entity, spawnReason)) {
-+                        entity = null;
-+                    } else {
-+                        entityinsentient.D();
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
- 
diff --git a/nms-patches/ItemRecord.patch b/nms-patches/ItemRecord.patch
deleted file mode 100644
index 0dff112..0000000
--- a/nms-patches/ItemRecord.patch
+++ /dev/null
@@ -1,10 +0,0 @@
---- a/net/minecraft/server/ItemRecord.java
-+++ b/net/minecraft/server/ItemRecord.java
-@@ -22,6 +22,7 @@
- 
-         if (iblockdata.getBlock() == Blocks.JUKEBOX && !((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue()) {
-             if (!world.isClientSide) {
-+                if (true) return EnumInteractionResult.SUCCESS; // CraftBukkit - handled in ItemStack
-                 ItemStack itemstack = entityhuman.b(enumhand);
- 
-                 ((BlockJukeBox) Blocks.JUKEBOX).a(world, blockposition, iblockdata, itemstack);
diff --git a/nms-patches/ItemRedstone.patch b/nms-patches/ItemRedstone.patch
deleted file mode 100644
index 62cf2e3..0000000
--- a/nms-patches/ItemRedstone.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/ItemRedstone.java
-+++ b/net/minecraft/server/ItemRedstone.java
-@@ -11,7 +11,7 @@
-         BlockPosition blockposition1 = flag ? blockposition : blockposition.shift(enumdirection);
-         ItemStack itemstack = entityhuman.b(enumhand);
- 
--        if (entityhuman.a(blockposition1, enumdirection, itemstack) && world.a(world.getType(blockposition1).getBlock(), blockposition1, false, enumdirection, (Entity) null) && Blocks.REDSTONE_WIRE.canPlace(world, blockposition1)) {
-+        if (!itemstack.isEmpty() && entityhuman.a(blockposition1, enumdirection, itemstack) && world.a(world.getType(blockposition1).getBlock(), blockposition1, false, enumdirection, (Entity) null) && Blocks.REDSTONE_WIRE.canPlace(world, blockposition1)) { // CraftBukkit
-             world.setTypeUpdate(blockposition1, Blocks.REDSTONE_WIRE.getBlockData());
-             if (entityhuman instanceof EntityPlayer) {
-                 CriterionTriggers.x.a((EntityPlayer) entityhuman, blockposition1, itemstack);
diff --git a/nms-patches/ItemReed.patch b/nms-patches/ItemReed.patch
deleted file mode 100644
index c3c6658..0000000
--- a/nms-patches/ItemReed.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/ItemReed.java
-+++ b/net/minecraft/server/ItemReed.java
-@@ -2,7 +2,7 @@
- 
- public class ItemReed extends Item {
- 
--    private final Block a;
-+    public final Block a; // PAIL: private->public
- 
-     public ItemReed(Block block) {
-         this.a = block;
diff --git a/nms-patches/ItemSkull.patch b/nms-patches/ItemSkull.patch
deleted file mode 100644
index e0f0e44..0000000
--- a/nms-patches/ItemSkull.patch
+++ /dev/null
@@ -1,18 +0,0 @@
---- a/net/minecraft/server/ItemSkull.java
-+++ b/net/minecraft/server/ItemSkull.java
-@@ -133,6 +133,15 @@
-             nbttagcompound.set("SkullOwner", GameProfileSerializer.serialize(new NBTTagCompound(), gameprofile));
-             return true;
-         } else {
-+            // CraftBukkit start
-+            NBTTagList textures = nbttagcompound.getCompound("SkullOwner").getCompound("Properties").getList("textures", 10); // Safe due to method contracts
-+            for (int i = 0; i < textures.size(); i++) {
-+                if (textures.get(i) instanceof NBTTagCompound && !((NBTTagCompound) textures.get(i)).hasKeyOfType("Signature", 8) && ((NBTTagCompound) textures.get(i)).getString("Value").trim().isEmpty()) {
-+                    nbttagcompound.remove("SkullOwner");
-+                    break;
-+                }
-+            }
-+            // CraftBukkit end
-             return false;
-         }
-     }
diff --git a/nms-patches/ItemSnowball.patch b/nms-patches/ItemSnowball.patch
deleted file mode 100644
index 77d4839..0000000
--- a/nms-patches/ItemSnowball.patch
+++ /dev/null
@@ -1,33 +0,0 @@
---- a/net/minecraft/server/ItemSnowball.java
-+++ b/net/minecraft/server/ItemSnowball.java
-@@ -10,17 +10,29 @@
-     public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
-         ItemStack itemstack = entityhuman.b(enumhand);
- 
-+        // CraftBukkit start - moved down
-+        /*
-         if (!entityhuman.abilities.canInstantlyBuild) {
-             itemstack.subtract(1);
-         }
- 
-         world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.hp, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.j.nextFloat() * 0.4F + 0.8F));
-+        */
-         if (!world.isClientSide) {
-             EntitySnowball entitysnowball = new EntitySnowball(world, entityhuman);
- 
-             entitysnowball.a(entityhuman, entityhuman.pitch, entityhuman.yaw, 0.0F, 1.5F, 1.0F);
--            world.addEntity(entitysnowball);
-+            if (world.addEntity(entitysnowball)) {
-+                if (!entityhuman.abilities.canInstantlyBuild) {
-+                    itemstack.subtract(1);
-+                }
-+
-+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.hp, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.j.nextFloat() * 0.4F + 0.8F));
-+            } else if (entityhuman instanceof EntityPlayer) {
-+                ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
-+            }
-         }
-+        // CraftBukkit end
- 
-         entityhuman.b(StatisticList.b((Item) this));
-         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
diff --git a/nms-patches/ItemStack.patch b/nms-patches/ItemStack.patch
deleted file mode 100644
index 6934390..0000000
--- a/nms-patches/ItemStack.patch
+++ /dev/null
@@ -1,318 +0,0 @@
---- a/net/minecraft/server/ItemStack.java
-+++ b/net/minecraft/server/ItemStack.java
-@@ -6,6 +6,19 @@
- import java.util.Random;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import java.util.List;
-+import java.util.Map;
-+
-+import org.bukkit.Location;
-+import org.bukkit.TreeType;
-+import org.bukkit.block.BlockState;
-+import org.bukkit.craftbukkit.block.CraftBlockState;
-+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.world.StructureGrowEvent;
-+// CraftBukkit end
-+
- public final class ItemStack {
- 
-     public static final ItemStack a = new ItemStack((Item) null);
-@@ -42,32 +55,74 @@
-         this(item, i, 0);
-     }
- 
-+    // CraftBukkit start
-     public ItemStack(Item item, int i, int j) {
-+        this(item, i, j, true);
-+    }
-+
-+    public ItemStack(Item item, int i, int j, boolean convert) {
-+        // CraftBukkit end
-         this.item = item;
-         this.damage = j;
-         this.count = i;
-+        // CraftBukkit start - Pass to setData to do filtering
-+        if (MinecraftServer.getServer() != null) {
-+            this.setData(j);
-+        }
-+        if (convert) {
-+            this.convertStack();
-+        }
-+        // CraftBukkit end
-         if (this.damage < 0) {
--            this.damage = 0;
-+            // this.damage = 0; // CraftBukkit - remove this.
-         }
- 
-         this.F();
-     }
- 
-+    // Called to run this stack through the data converter to handle older storage methods and serialized items
-+    public void convertStack() {
-+        if (MinecraftServer.getServer() != null) {
-+            // Don't convert beds - both the old and new data values are valid
-+            // Conversion would make getting white beds (data value 0) impossible
-+            if (this.item == Items.BED) {
-+                return;
-+            }
-+
-+            NBTTagCompound savedStack = new NBTTagCompound();
-+            this.save(savedStack);
-+            MinecraftServer.getServer().dataConverterManager.a(DataConverterTypes.ITEM_INSTANCE, savedStack); // PAIL: convert
-+            this.load(savedStack);
-+        }
-+    }
-+
-     private void F() {
-+        if (this.g && this == ItemStack.a) throw new AssertionError("TRAP"); // CraftBukkit
-         this.g = this.isEmpty();
-     }
- 
--    public ItemStack(NBTTagCompound nbttagcompound) {
-+    // CraftBukkit - break into own method
-+    public void load(NBTTagCompound nbttagcompound) {
-         this.item = Item.b(nbttagcompound.getString("id"));
-         this.count = nbttagcompound.getByte("Count");
--        this.damage = Math.max(0, nbttagcompound.getShort("Damage"));
-+        // CraftBukkit start - Route through setData for filtering
-+        // this.damage = Math.max(0, nbttagcompound.getShort("Damage"));
-+        this.setData(nbttagcompound.getShort("Damage"));
-+        // CraftBukkit end
-+
-         if (nbttagcompound.hasKeyOfType("tag", 10)) {
--            this.tag = nbttagcompound.getCompound("tag");
-+            // CraftBukkit start - make defensive copy as this data may be coming from the save thread
-+            this.tag = (NBTTagCompound) nbttagcompound.getCompound("tag").clone();
-             if (this.item != null) {
--                this.item.a(nbttagcompound);
-+                this.item.a(this.tag);
-+                // CraftBukkit end
-             }
-         }
-+    }
- 
-+    public ItemStack(NBTTagCompound nbttagcompound) {
-+        this.load(nbttagcompound);
-+        // CraftBukkit end
-         this.F();
-     }
- 
-@@ -94,11 +149,138 @@
-     }
- 
-     public EnumInteractionResult placeItem(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-+        // CraftBukkit start - handle all block place event logic here
-+        int oldData = this.getData();
-+        int oldCount = this.getCount();
-+
-+        if (!(this.getItem() instanceof ItemBucket)) { // if not bucket
-+            world.captureBlockStates = true;
-+            // special case bonemeal
-+            if (this.getItem() instanceof ItemDye && this.getData() == 15) {
-+                Block block = world.getType(blockposition).getBlock();
-+                if (block == Blocks.SAPLING || block instanceof BlockMushroom) {
-+                    world.captureTreeGeneration = true;
-+                }
-+            }
-+        }
-         EnumInteractionResult enuminteractionresult = this.getItem().a(entityhuman, world, blockposition, enumhand, enumdirection, f, f1, f2);
-+        int newData = this.getData();
-+        int newCount = this.getCount();
-+        this.setCount(oldCount);
-+        this.setData(oldData);
-+        world.captureBlockStates = false;
-+        if (enuminteractionresult == EnumInteractionResult.SUCCESS && world.captureTreeGeneration && world.capturedBlockStates.size() > 0) {
-+            world.captureTreeGeneration = false;
-+            Location location = new Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            TreeType treeType = BlockSapling.treeType;
-+            BlockSapling.treeType = null;
-+            List<BlockState> blocks = (List<BlockState>) world.capturedBlockStates.clone();
-+            world.capturedBlockStates.clear();
-+            StructureGrowEvent event = null;
-+            if (treeType != null) {
-+                boolean isBonemeal = getItem() == Items.DYE && oldData == 15;
-+                event = new StructureGrowEvent(location, treeType, isBonemeal, (Player) entityhuman.getBukkitEntity(), blocks);
-+                org.bukkit.Bukkit.getPluginManager().callEvent(event);
-+            }
-+            if (event == null || !event.isCancelled()) {
-+                // Change the stack to its new contents if it hasn't been tampered with.
-+                if (this.getCount() == oldCount && this.getData() == oldData) {
-+                    this.setData(newData);
-+                    this.setCount(newCount);
-+                }
-+                for (BlockState blockstate : blocks) {
-+                    blockstate.update(true);
-+                }
-+            }
-+
-+            return enuminteractionresult;
-+        }
-+        world.captureTreeGeneration = false;
- 
-         if (enuminteractionresult == EnumInteractionResult.SUCCESS) {
--            entityhuman.b(StatisticList.b(this.item));
-+            org.bukkit.event.block.BlockPlaceEvent placeEvent = null;
-+            List<BlockState> blocks = (List<BlockState>) world.capturedBlockStates.clone();
-+            world.capturedBlockStates.clear();
-+            if (blocks.size() > 1) {
-+                placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockMultiPlaceEvent(world, entityhuman, enumhand, blocks, blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            } else if (blocks.size() == 1) {
-+                placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(world, entityhuman, enumhand, blocks.get(0), blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+            }
-+
-+            if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
-+                enuminteractionresult = EnumInteractionResult.FAIL; // cancel placement
-+                // PAIL: Remove this when MC-99075 fixed
-+                placeEvent.getPlayer().updateInventory();
-+                // revert back all captured blocks
-+                for (BlockState blockstate : blocks) {
-+                    blockstate.update(true, false);
-+                }
-+            } else {
-+                // Change the stack to its new contents if it hasn't been tampered with.
-+                if (this.getCount() == oldCount && this.getData() == oldData) {
-+                    this.setData(newData);
-+                    this.setCount(newCount);
-+                }
-+
-+                for (Map.Entry<BlockPosition, TileEntity> e : world.capturedTileEntities.entrySet()) {
-+                    world.setTileEntity(e.getKey(), e.getValue());
-+                }
-+
-+                for (BlockState blockstate : blocks) {
-+                    int x = blockstate.getX();
-+                    int y = blockstate.getY();
-+                    int z = blockstate.getZ();
-+                    int updateFlag = ((CraftBlockState) blockstate).getFlag();
-+                    org.bukkit.Material mat = blockstate.getType();
-+                    Block oldBlock = CraftMagicNumbers.getBlock(mat);
-+                    BlockPosition newblockposition = new BlockPosition(x, y, z);
-+                    IBlockData block = world.getType(newblockposition);
-+
-+                    if (!(block.getBlock() instanceof BlockTileEntity)) { // Containers get placed automatically
-+                        block.getBlock().onPlace(world, newblockposition, block);
-+                    }
-+
-+                    world.notifyAndUpdatePhysics(newblockposition, null, oldBlock.getBlockData(), block, updateFlag); // send null chunk as chunk.k() returns false by this point
-+                }
-+
-+                // Special case juke boxes as they update their tile entity. Copied from ItemRecord.
-+                // PAIL: checkme on updates.
-+                if (this.item instanceof ItemRecord) {
-+                    ((BlockJukeBox) Blocks.JUKEBOX).a(world, blockposition, world.getType(blockposition), this);
-+                    world.a((EntityHuman) null, 1010, blockposition, Item.getId(this.item));
-+                    this.subtract(1);
-+                    entityhuman.b(StatisticList.Z);
-+                }
-+
-+                if (this.item == Items.SKULL) { // Special case skulls to allow wither spawns to be cancelled
-+                    BlockPosition bp = blockposition;
-+                    if (!world.getType(blockposition).getBlock().a(world, blockposition)) {
-+                        if (!world.getType(blockposition).getMaterial().isBuildable()) {
-+                            bp = null;
-+                        } else {
-+                            bp = bp.shift(enumdirection);
-+                        }
-+                    }
-+                    if (bp != null) {
-+                        TileEntity te = world.getTileEntity(bp);
-+                        if (te instanceof TileEntitySkull) {
-+                            Blocks.SKULL.a(world, bp, (TileEntitySkull) te);
-+                        }
-+                    }
-+                }
-+
-+                // SPIGOT-1288 - play sound stripped from ItemBlock
-+                if (this.item instanceof ItemBlock) {
-+                    SoundEffectType soundeffecttype = ((ItemBlock) this.item).getBlock().getStepSound();
-+                    world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
-+                }
-+
-+                entityhuman.b(StatisticList.b(this.item));
-+            }
-         }
-+        world.capturedTileEntities.clear();
-+        world.capturedBlockStates.clear();
-+        // CraftBukkit end
- 
-         return enuminteractionresult;
-     }
-@@ -122,7 +304,7 @@
-         nbttagcompound.setByte("Count", (byte) this.count);
-         nbttagcompound.setShort("Damage", (short) this.damage);
-         if (this.tag != null) {
--            nbttagcompound.set("tag", this.tag);
-+            nbttagcompound.set("tag", this.tag.clone()); // CraftBukkit - make defensive copy, data is going to another thread
-         }
- 
-         return nbttagcompound;
-@@ -157,11 +339,30 @@
-     }
- 
-     public void setData(int i) {
-+        // CraftBukkit start - Filter out data for items that shouldn't have it
-+        // The crafting system uses this value for a special purpose so we have to allow it
-+        if (i == 32767) {
-+            this.damage = i;
-+            return;
-+        }
-+
-+        // Is this a block?
-+        if (CraftMagicNumbers.getBlock(CraftMagicNumbers.getId(this.getItem())) != Blocks.AIR) {
-+            // If vanilla doesn't use data on it don't allow any
-+            if (!(this.usesData() || this.getItem().usesDurability())) {
-+                i = 0;
-+            }
-+        }
-+
-+        // Filter invalid plant data
-+        if (CraftMagicNumbers.getBlock(CraftMagicNumbers.getId(this.getItem())) == Blocks.DOUBLE_PLANT && (i > 5 || i < 0)) {
-+            i = 0;
-+        }
-+        // CraftBukkit end
-         this.damage = i;
-         if (this.damage < 0) {
--            this.damage = 0;
-+            // this.damage = 0; // CraftBukkit - remove this.
-         }
--
-     }
- 
-     public int k() {
-@@ -202,6 +403,11 @@
-             if (this.f()) {
-                 if (this.isDamaged(i, entityliving.getRandom(), entityliving instanceof EntityPlayer ? (EntityPlayer) entityliving : null)) {
-                     entityliving.b(this);
-+                    // CraftBukkit start - Check for item breaking
-+                    if (this.count == 1 && entityliving instanceof EntityHuman) {
-+                        org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerItemBreakEvent((EntityHuman) entityliving, this);
-+                    }
-+                    // CraftBukkit end
-                     this.subtract(1);
-                     if (entityliving instanceof EntityHuman) {
-                         EntityHuman entityhuman = (EntityHuman) entityliving;
-@@ -243,7 +449,7 @@
-     }
- 
-     public ItemStack cloneItemStack() {
--        ItemStack itemstack = new ItemStack(this.item, this.count, this.damage);
-+        ItemStack itemstack = new ItemStack(this.item, this.count, this.damage, false); // CraftBukkit
- 
-         itemstack.d(this.D());
-         if (this.tag != null) {
-@@ -513,6 +719,12 @@
-         nbttaglist.add(nbttagcompound);
-     }
- 
-+    @Deprecated
-+    public void setItem(Item item) {
-+        this.item = item;
-+        this.setData(this.getData()); // CraftBukkit - Set data again to ensure it is filtered properly
-+    }
-+
-     public IChatBaseComponent C() {
-         ChatComponentText chatcomponenttext = new ChatComponentText(this.getName());
- 
diff --git a/nms-patches/ItemWaterLily.patch b/nms-patches/ItemWaterLily.patch
deleted file mode 100644
index 65b3ab6..0000000
--- a/nms-patches/ItemWaterLily.patch
+++ /dev/null
@@ -1,18 +0,0 @@
---- a/net/minecraft/server/ItemWaterLily.java
-+++ b/net/minecraft/server/ItemWaterLily.java
-@@ -24,7 +24,15 @@
-                 IBlockData iblockdata = world.getType(blockposition);
- 
-                 if (iblockdata.getMaterial() == Material.WATER && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0 && world.isEmpty(blockposition1)) {
-+                    // CraftBukkit start - special case for handling block placement with water lilies
-+                    org.bukkit.block.BlockState blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
-                     world.setTypeAndData(blockposition1, Blocks.WATERLILY.getBlockData(), 11);
-+                    org.bukkit.event.block.BlockPlaceEvent placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(world, entityhuman, enumhand, blockstate, blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+                    if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
-+                        blockstate.update(true, false);
-+                        return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
-+                    }
-+                    // CraftBukkit end
-                     if (entityhuman instanceof EntityPlayer) {
-                         CriterionTriggers.x.a((EntityPlayer) entityhuman, blockposition1, itemstack);
-                     }
diff --git a/nms-patches/ItemWorldMap.patch b/nms-patches/ItemWorldMap.patch
deleted file mode 100644
index 8705b25..0000000
--- a/nms-patches/ItemWorldMap.patch
+++ /dev/null
@@ -1,111 +0,0 @@
---- a/net/minecraft/server/ItemWorldMap.java
-+++ b/net/minecraft/server/ItemWorldMap.java
-@@ -5,6 +5,11 @@
- import com.google.common.collect.Multisets;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.Bukkit;
-+import org.bukkit.event.server.MapInitializeEvent;
-+// CraftBukkit end
-+
- public class ItemWorldMap extends ItemWorldMapBase {
- 
-     protected ItemWorldMap() {
-@@ -12,41 +17,50 @@
-     }
- 
-     public static ItemStack a(World world, double d0, double d1, byte b0, boolean flag, boolean flag1) {
--        ItemStack itemstack = new ItemStack(Items.FILLED_MAP, 1, world.b("map"));
-+        World worldMain = world.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
-+        ItemStack itemstack = new ItemStack(Items.FILLED_MAP, 1, worldMain.b("map")); // CraftBukkit - use primary world for maps
-         String s = "map_" + itemstack.getData();
-         WorldMap worldmap = new WorldMap(s);
- 
--        world.a(s, (PersistentBase) worldmap);
-+        worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit
-         worldmap.scale = b0;
-         worldmap.a(d0, d1, worldmap.scale);
--        worldmap.map = (byte) world.worldProvider.getDimensionManager().getDimensionID();
-+        worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - use bukkit dimension
-         worldmap.track = flag;
-         worldmap.unlimitedTracking = flag1;
-         worldmap.c();
-+        org.bukkit.craftbukkit.event.CraftEventFactory.callEvent(new org.bukkit.event.server.MapInitializeEvent(worldmap.mapView)); // CraftBukkit
-         return itemstack;
-     }
- 
-     @Nullable
-     public WorldMap getSavedMap(ItemStack itemstack, World world) {
-+        World worldMain = world.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
-         String s = "map_" + itemstack.getData();
--        WorldMap worldmap = (WorldMap) world.a(WorldMap.class, s);
-+        WorldMap worldmap = (WorldMap) worldMain.a(WorldMap.class, s); // CraftBukkit - use primary world for maps
- 
-         if (worldmap == null && !world.isClientSide) {
--            itemstack.setData(world.b("map"));
-+            itemstack.setData(worldMain.b("map")); // CraftBukkit - use primary world for maps
-             s = "map_" + itemstack.getData();
-             worldmap = new WorldMap(s);
-             worldmap.scale = 3;
-             worldmap.a((double) world.getWorldData().b(), (double) world.getWorldData().d(), worldmap.scale);
--            worldmap.map = (byte) world.worldProvider.getDimensionManager().getDimensionID();
-+            worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - fixes Bukkit multiworld maps
-             worldmap.c();
--            world.a(s, (PersistentBase) worldmap);
-+            worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit - use primary world for maps
-+
-+            // CraftBukkit start
-+            MapInitializeEvent event = new MapInitializeEvent(worldmap.mapView);
-+            Bukkit.getServer().getPluginManager().callEvent(event);
-+            // CraftBukkit end
-         }
- 
-         return worldmap;
-     }
- 
-     public void a(World world, Entity entity, WorldMap worldmap) {
--        if (world.worldProvider.getDimensionManager().getDimensionID() == worldmap.map && entity instanceof EntityHuman) {
-+        // CraftBukkit - world.worldProvider -> ((WorldServer) world)
-+        if (((WorldServer) world).dimension == worldmap.map && entity instanceof EntityHuman) {
-             int i = 1 << worldmap.scale;
-             int j = worldmap.centerX;
-             int k = worldmap.centerZ;
-@@ -309,6 +323,7 @@
-     protected static void a(ItemStack itemstack, World world, int i) {
-         WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, world);
- 
-+        world = world.getServer().getServer().worlds.get(0); // CraftBukkit - use primary world for maps
-         itemstack.setData(world.b("map"));
-         WorldMap worldmap1 = new WorldMap("map_" + itemstack.getData());
- 
-@@ -319,6 +334,10 @@
-             worldmap1.map = worldmap.map;
-             worldmap1.c();
-             world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
-+            // CraftBukkit start
-+            MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
-+            Bukkit.getServer().getPluginManager().callEvent(event);
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -326,6 +345,7 @@
-     protected static void b(ItemStack itemstack, World world) {
-         WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, world);
- 
-+        world = world.getServer().getServer().worlds.get(0); // CraftBukkit - use primary world for maps
-         itemstack.setData(world.b("map"));
-         WorldMap worldmap1 = new WorldMap("map_" + itemstack.getData());
- 
-@@ -337,6 +357,10 @@
-             worldmap1.map = worldmap.map;
-             worldmap1.c();
-             world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
-+            // CraftBukkit start
-+            MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
-+            Bukkit.getServer().getPluginManager().callEvent(event);
-+            // CraftBukkit end
-         }
- 
-     }
diff --git a/nms-patches/JsonList.patch b/nms-patches/JsonList.patch
deleted file mode 100644
index 9cdf691..0000000
--- a/nms-patches/JsonList.patch
+++ /dev/null
@@ -1,47 +0,0 @@
---- a/net/minecraft/server/JsonList.java
-+++ b/net/minecraft/server/JsonList.java
-@@ -84,7 +84,7 @@
- 
-     public V get(K k0) {
-         this.h();
--        return (JsonListEntry) this.d.get(this.a(k0));
-+        return (V) this.d.get(this.a(k0)); // CraftBukkit - fix decompile error
-     }
- 
-     public void remove(K k0) {
-@@ -102,6 +102,12 @@
-         return (String[]) this.d.keySet().toArray(new String[this.d.size()]);
-     }
- 
-+    // CraftBukkit start
-+    public Collection<V> getValues() {
-+        return this.d.values();
-+    }
-+    // CraftBukkit end
-+
-     public boolean isEmpty() {
-         return this.d.size() < 1;
-     }
-@@ -178,7 +184,7 @@
-                     JsonListEntry jsonlistentry = (JsonListEntry) iterator.next();
- 
-                     if (jsonlistentry.getKey() != null) {
--                        this.d.put(this.a(jsonlistentry.getKey()), jsonlistentry);
-+                        this.d.put(this.a((K) jsonlistentry.getKey()), (V) jsonlistentry); // CraftBukkit - fix decompile error
-                     }
-                 }
-             }
-@@ -207,11 +213,11 @@
-             }
-         }
- 
--        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
-+        public JsonElement serialize(JsonListEntry<K> object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - fix decompile error
-             return this.a((JsonListEntry) object, type, jsonserializationcontext);
-         }
- 
--        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
-+        public JsonListEntry<K> deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - fix decompile error
-             return this.a(jsonelement, type, jsondeserializationcontext);
-         }
- 
diff --git a/nms-patches/LoginListener.patch b/nms-patches/LoginListener.patch
deleted file mode 100644
index 789331f..0000000
--- a/nms-patches/LoginListener.patch
+++ /dev/null
@@ -1,137 +0,0 @@
---- a/net/minecraft/server/LoginListener.java
-+++ b/net/minecraft/server/LoginListener.java
-@@ -22,6 +22,12 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.util.Waitable;
-+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
-+import org.bukkit.event.player.PlayerPreLoginEvent;
-+// CraftBukkit end
-+
- public class LoginListener implements PacketLoginInListener, ITickable {
- 
-     private static final AtomicInteger b = new AtomicInteger(0);
-@@ -36,6 +42,7 @@
-     private final String j;
-     private SecretKey loginKey;
-     private EntityPlayer l;
-+    public String hostname = ""; // CraftBukkit - add field
- 
-     public LoginListener(MinecraftServer minecraftserver, NetworkManager networkmanager) {
-         this.g = LoginListener.EnumProtocolState.HELLO;
-@@ -64,6 +71,20 @@
- 
-     }
- 
-+    // CraftBukkit start
-+    @Deprecated
-+    public void disconnect(String s) {
-+        try {
-+            IChatBaseComponent ichatbasecomponent = new ChatComponentText(s);
-+            LoginListener.c.info("Disconnecting {}: {}", this.c(), s);
-+            this.networkManager.sendPacket(new PacketLoginOutDisconnect(ichatbasecomponent));
-+            this.networkManager.close(ichatbasecomponent);
-+        } catch (Exception exception) {
-+            LoginListener.c.error("Error whilst disconnecting player", exception);
-+        }
-+    }
-+    // CraftBukkit end
-+
-     public void disconnect(IChatBaseComponent ichatbasecomponent) {
-         try {
-             LoginListener.c.info("Disconnecting {}: {}", this.c(), ichatbasecomponent.toPlainText());
-@@ -80,10 +101,12 @@
-             this.i = this.a(this.i);
-         }
- 
--        String s = this.server.getPlayerList().attemptLogin(this.networkManager.getSocketAddress(), this.i);
-+        // CraftBukkit start - fire PlayerLoginEvent
-+        EntityPlayer s = this.server.getPlayerList().attemptLogin(this, this.i, hostname);
- 
--        if (s != null) {
--            this.disconnect(new ChatMessage(s, new Object[0]));
-+        if (s == null) {
-+            // this.disconnect(new ChatMessage(s, new Object[0]));
-+            // CraftBukkit end
-         } else {
-             this.g = LoginListener.EnumProtocolState.ACCEPTED;
-             if (this.server.aG() >= 0 && !this.networkManager.isLocal()) {
-@@ -92,7 +115,7 @@
-                         LoginListener.this.networkManager.setCompressionLevel(LoginListener.this.server.aG());
-                     }
- 
--                    public void operationComplete(Future future) throws Exception {
-+                    public void operationComplete(ChannelFuture future) throws Exception { // CraftBukkit - fix decompile error
-                         this.a((ChannelFuture) future);
-                     }
-                 }, new GenericFutureListener[0]);
-@@ -103,9 +126,9 @@
- 
-             if (entityplayer != null) {
-                 this.g = LoginListener.EnumProtocolState.DELAY_ACCEPT;
--                this.l = this.server.getPlayerList().processLogin(this.i);
-+                this.l = this.server.getPlayerList().processLogin(this.i, s); // CraftBukkit - add player reference
-             } else {
--                this.server.getPlayerList().a(this.networkManager, this.server.getPlayerList().processLogin(this.i));
-+                this.server.getPlayerList().a(this.networkManager, this.server.getPlayerList().processLogin(this.i, s)); // CraftBukkit - add player reference
-             }
-         }
- 
-@@ -150,6 +173,43 @@
- 
-                         LoginListener.this.i = LoginListener.this.server.az().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, this.a());
-                         if (LoginListener.this.i != null) {
-+                            // CraftBukkit start - fire PlayerPreLoginEvent
-+                            if (!networkManager.isConnected()) {
-+                                return;
-+                            }
-+
-+                            String playerName = i.getName();
-+                            java.net.InetAddress address = ((java.net.InetSocketAddress) networkManager.getSocketAddress()).getAddress();
-+                            java.util.UUID uniqueId = i.getId();
-+                            final org.bukkit.craftbukkit.CraftServer server = LoginListener.this.server.server;
-+
-+                            AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
-+                            server.getPluginManager().callEvent(asyncEvent);
-+
-+                            if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
-+                                final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
-+                                if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
-+                                    event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
-+                                }
-+                                Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
-+                                    @Override
-+                                    protected PlayerPreLoginEvent.Result evaluate() {
-+                                        server.getPluginManager().callEvent(event);
-+                                        return event.getResult();
-+                                    }};
-+
-+                                LoginListener.this.server.processQueue.add(waitable);
-+                                if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
-+                                    disconnect(event.getKickMessage());
-+                                    return;
-+                                }
-+                            } else {
-+                                if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
-+                                    disconnect(asyncEvent.getKickMessage());
-+                                    return;
-+                                }
-+                            }
-+                            // CraftBukkit end
-                             LoginListener.c.info("UUID of player {} is {}", LoginListener.this.i.getName(), LoginListener.this.i.getId());
-                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
-                         } else if (LoginListener.this.server.R()) {
-@@ -169,6 +229,11 @@
-                             LoginListener.this.disconnect(new ChatMessage("multiplayer.disconnect.authservers_down", new Object[0]));
-                             LoginListener.c.error("Couldn\'t verify username because servers are unavailable");
-                         }
-+                        // CraftBukkit start - catch all exceptions
-+                    } catch (Exception exception) {
-+                        disconnect("Failed to verify username!");
-+                        server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
-+                        // CraftBukkit end
-                     }
- 
-                 }
diff --git a/nms-patches/MerchantRecipe.patch b/nms-patches/MerchantRecipe.patch
deleted file mode 100644
index 176a59b..0000000
--- a/nms-patches/MerchantRecipe.patch
+++ /dev/null
@@ -1,29 +0,0 @@
---- a/net/minecraft/server/MerchantRecipe.java
-+++ b/net/minecraft/server/MerchantRecipe.java
-@@ -1,5 +1,7 @@
- package net.minecraft.server;
- 
-+import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe; // CraftBukkit
-+
- public class MerchantRecipe {
- 
-     public ItemStack buyingItem1;
-@@ -8,6 +10,18 @@
-     public int uses;
-     public int maxUses;
-     public boolean rewardExp;
-+    // CraftBukkit start
-+    private CraftMerchantRecipe bukkitHandle;
-+
-+    public CraftMerchantRecipe asBukkit() {
-+        return (bukkitHandle == null) ? bukkitHandle = new CraftMerchantRecipe(this) : bukkitHandle;
-+    }
-+
-+    public MerchantRecipe(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int i, int j, CraftMerchantRecipe bukkit) {
-+        this(itemstack, itemstack1, itemstack2, i, j);
-+        this.bukkitHandle = bukkit;
-+    }
-+    // CraftBukkit end
- 
-     public MerchantRecipe(NBTTagCompound nbttagcompound) {
-         this.buyingItem1 = ItemStack.a;
diff --git a/nms-patches/MethodProfiler.patch b/nms-patches/MethodProfiler.patch
deleted file mode 100644
index b608e64..0000000
--- a/nms-patches/MethodProfiler.patch
+++ /dev/null
@@ -1,72 +0,0 @@
---- a/net/minecraft/server/MethodProfiler.java
-+++ b/net/minecraft/server/MethodProfiler.java
-@@ -13,6 +13,7 @@
- 
- public class MethodProfiler {
- 
-+    public static final boolean ENABLED = Boolean.getBoolean("enableDebugMethodProfiler"); // CraftBukkit - disable unless specified in JVM arguments
-     private static final Logger b = LogManager.getLogger();
-     private final List<String> c = Lists.newArrayList();
-     private final List<Long> d = Lists.newArrayList();
-@@ -23,12 +24,14 @@
-     public MethodProfiler() {}
- 
-     public void a() {
-+        if (!ENABLED) return;  // CraftBukkit
-         this.f.clear();
-         this.e = "";
-         this.c.clear();
-     }
- 
-     public void a(String s) {
-+        if (!ENABLED) return;  // CraftBukkit
-         if (this.a) {
-             if (!this.e.isEmpty()) {
-                 this.e = this.e + ".";
-@@ -41,12 +44,14 @@
-     }
- 
-     public void a(Supplier<String> supplier) {
-+        if (!ENABLED) return;  // CraftBukkit
-         if (this.a) {
-             this.a((String) supplier.get());
-         }
-     }
- 
-     public void b() {
-+        if (!ENABLED) return;  // CraftBukkit
-         if (this.a) {
-             long i = System.nanoTime();
-             long j = ((Long) this.d.remove(this.d.size() - 1)).longValue();
-@@ -69,7 +74,7 @@
-     }
- 
-     public List<MethodProfiler.ProfilerInfo> b(String s) {
--        if (!this.a) {
-+        if (!ENABLED || !this.a) {  // CraftBukkit
-             return Collections.emptyList();
-         } else {
-             long i = this.f.containsKey("root") ? ((Long) this.f.get("root")).longValue() : 0L;
-@@ -135,11 +140,13 @@
-     }
- 
-     public void c(String s) {
-+        if (!ENABLED) return;  // CraftBukkit
-         this.b();
-         this.a(s);
-     }
- 
-     public String c() {
-+        if (!ENABLED) return "[DISABLED]";  // CraftBukkit
-         return this.c.isEmpty() ? "[UNKNOWN]" : (String) this.c.get(this.c.size() - 1);
-     }
- 
-@@ -159,7 +166,7 @@
-             return methodprofiler_profilerinfo.a < this.a ? -1 : (methodprofiler_profilerinfo.a > this.a ? 1 : methodprofiler_profilerinfo.c.compareTo(this.c));
-         }
- 
--        public int compareTo(Object object) {
-+        public int compareTo(MethodProfiler.ProfilerInfo object) { // CraftBukkit: decompile error
-             return this.a((MethodProfiler.ProfilerInfo) object);
-         }
-     }
diff --git a/nms-patches/MinecraftServer.patch b/nms-patches/MinecraftServer.patch
deleted file mode 100644
index 1493d7e..0000000
--- a/nms-patches/MinecraftServer.patch
+++ /dev/null
@@ -1,716 +0,0 @@
---- a/net/minecraft/server/MinecraftServer.java
-+++ b/net/minecraft/server/MinecraftServer.java
-@@ -41,6 +41,13 @@
- import org.apache.commons.lang3.Validate;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
-+// CraftBukkit start
-+import jline.console.ConsoleReader;
-+import joptsimple.OptionSet;
-+import org.bukkit.Bukkit;
-+import org.bukkit.craftbukkit.CraftServer;
-+import org.bukkit.craftbukkit.Main;
-+// CraftBukkit end
- 
- public abstract class MinecraftServer implements ICommandListener, Runnable, IAsyncTaskHandler, IMojangStatistics {
- 
-@@ -98,19 +105,61 @@
-     private Thread serverThread;
-     private long ab = aw();
- 
--    public MinecraftServer(File file, Proxy proxy, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
-+    // CraftBukkit start
-+    public List<WorldServer> worlds = new ArrayList<WorldServer>();
-+    public org.bukkit.craftbukkit.CraftServer server;
-+    public OptionSet options;
-+    public org.bukkit.command.ConsoleCommandSender console;
-+    public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
-+    public ConsoleReader reader;
-+    public static int currentTick = (int) (System.currentTimeMillis() / 50);
-+    public final Thread primaryThread;
-+    public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
-+    public int autosavePeriod;
-+    // CraftBukkit end
-+
-+    public MinecraftServer(OptionSet options, Proxy proxy, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
-         this.e = proxy;
-         this.V = yggdrasilauthenticationservice;
-         this.W = minecraftsessionservice;
-         this.X = gameprofilerepository;
-         this.Y = usercache;
--        this.universe = file;
-+        // this.universe = file; // CraftBukkit
-         this.p = new ServerConnection(this);
-         this.b = this.i();
--        this.convertable = new WorldLoaderServer(file, dataconvertermanager);
-+        // this.convertable = new WorldLoaderServer(file); // CraftBukkit - moved to DedicatedServer.init
-         this.dataConverterManager = dataconvertermanager;
-+        // CraftBukkit start
-+        this.options = options;
-+        // Try to see if we're actually running in a terminal, disable jline if not
-+        if (System.console() == null && System.getProperty("jline.terminal") == null) {
-+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
-+            Main.useJline = false;
-+        }
-+
-+        try {
-+            reader = new ConsoleReader(System.in, System.out);
-+            reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
-+        } catch (Throwable e) {
-+            try {
-+                // Try again with jline disabled for Windows users without C++ 2008 Redistributable
-+                System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
-+                System.setProperty("user.language", "en");
-+                Main.useJline = false;
-+                reader = new ConsoleReader(System.in, System.out);
-+                reader.setExpandEvents(false);
-+            } catch (IOException ex) {
-+                LOGGER.warn((String) null, ex);
-+            }
-+        }
-+        Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
-+
-+        this.serverThread = primaryThread = new Thread(this, "Server thread"); // Moved from main
-     }
- 
-+    public abstract PropertyManager getPropertyManager();
-+    // CraftBukkit end
-+
-     protected CommandDispatcher i() {
-         return new CommandDispatcher(this);
-     }
-@@ -148,6 +197,7 @@
-         this.a(s);
-         this.b("menu.loadingLevel");
-         this.worldServer = new WorldServer[3];
-+        /* CraftBukkit start - Remove ticktime arrays and worldsettings
-         this.i = new long[this.worldServer.length][100];
-         IDataManager idatamanager = this.convertable.a(s, true);
- 
-@@ -171,36 +221,108 @@
-             worlddata.a(s1);
-             worldsettings = new WorldSettings(worlddata);
-         }
-+        */
-+        int worldCount = 3;
- 
--        for (int j = 0; j < this.worldServer.length; ++j) {
--            byte b0 = 0;
-+        for (int j = 0; j < worldCount; ++j) {
-+            WorldServer world;
-+            byte dimension = 0;
- 
-             if (j == 1) {
--                b0 = -1;
-+                if (getAllowNether()) {
-+                    dimension = -1;
-+                } else {
-+                    continue;
-+                }
-             }
- 
-             if (j == 2) {
--                b0 = 1;
-+                if (server.getAllowEnd()) {
-+                    dimension = 1;
-+                } else {
-+                    continue;
-+                }
-             }
- 
-+            String worldType = org.bukkit.World.Environment.getEnvironment(dimension).toString().toLowerCase();
-+            String name = (dimension == 0) ? s : s + "_" + worldType;
-+
-+            org.bukkit.generator.ChunkGenerator gen = this.server.getGenerator(name);
-+            WorldSettings worldsettings = new WorldSettings(i, this.getGamemode(), this.getGenerateStructures(), this.isHardcore(), worldtype);
-+            worldsettings.setGeneratorSettings(s2);
-+
-             if (j == 0) {
-+                IDataManager idatamanager = new ServerNBTManager(server.getWorldContainer(), s1, true, this.dataConverterManager);
-+                WorldData worlddata = idatamanager.getWorldData();
-+                if (worlddata == null) {
-+                    worlddata = new WorldData(worldsettings, s1);
-+                }
-+                worlddata.checkName(s1); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
-                 if (this.V()) {
--                    this.worldServer[j] = (WorldServer) (new DemoWorldServer(this, idatamanager, worlddata, b0, this.methodProfiler)).b();
-+                    world = (WorldServer) (new DemoWorldServer(this, idatamanager, worlddata, dimension, this.methodProfiler)).b();
-                 } else {
--                    this.worldServer[j] = (WorldServer) (new WorldServer(this, idatamanager, worlddata, b0, this.methodProfiler)).b();
-+                    world = (WorldServer) (new WorldServer(this, idatamanager, worlddata, dimension, this.methodProfiler, org.bukkit.World.Environment.getEnvironment(dimension), gen)).b();
-                 }
- 
--                this.worldServer[j].a(worldsettings);
-+                world.a(worldsettings);
-+                this.server.scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(this, world.getScoreboard());
-             } else {
--                this.worldServer[j] = (WorldServer) (new SecondaryWorldServer(this, idatamanager, b0, this.worldServer[0], this.methodProfiler)).b();
-+                String dim = "DIM" + dimension;
-+
-+                File newWorld = new File(new File(name), dim);
-+                File oldWorld = new File(new File(s), dim);
-+
-+                if ((!newWorld.isDirectory()) && (oldWorld.isDirectory())) {
-+                    MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder required ----");
-+                    MinecraftServer.LOGGER.info("Unfortunately due to the way that Minecraft implemented multiworld support in 1.6, Bukkit requires that you move your " + worldType + " folder to a new location in order to operate correctly.");
-+                    MinecraftServer.LOGGER.info("We will move this folder for you, but it will mean that you need to move it back should you wish to stop using Bukkit in the future.");
-+                    MinecraftServer.LOGGER.info("Attempting to move " + oldWorld + " to " + newWorld + "...");
-+
-+                    if (newWorld.exists()) {
-+                        MinecraftServer.LOGGER.warn("A file or folder already exists at " + newWorld + "!");
-+                        MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder failed ----");
-+                    } else if (newWorld.getParentFile().mkdirs()) {
-+                        if (oldWorld.renameTo(newWorld)) {
-+                            MinecraftServer.LOGGER.info("Success! To restore " + worldType + " in the future, simply move " + newWorld + " to " + oldWorld);
-+                            // Migrate world data too.
-+                            try {
-+                                com.google.common.io.Files.copy(new File(new File(s), "level.dat"), new File(new File(name), "level.dat"));
-+                                org.apache.commons.io.FileUtils.copyDirectory(new File(new File(s), "data"), new File(new File(name), "data"));
-+                            } catch (IOException exception) {
-+                                MinecraftServer.LOGGER.warn("Unable to migrate world data.");
-+                            }
-+                            MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder complete ----");
-+                        } else {
-+                            MinecraftServer.LOGGER.warn("Could not move folder " + oldWorld + " to " + newWorld + "!");
-+                            MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder failed ----");
-+                        }
-+                    } else {
-+                        MinecraftServer.LOGGER.warn("Could not create path for " + newWorld + "!");
-+                        MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder failed ----");
-+                    }
-+                }
-+
-+                IDataManager idatamanager = new ServerNBTManager(server.getWorldContainer(), name, true, this.dataConverterManager);
-+                // world =, b0 to dimension, s1 to name, added Environment and gen
-+                WorldData worlddata = idatamanager.getWorldData();
-+                if (worlddata == null) {
-+                    worlddata = new WorldData(worldsettings, name);
-+                }
-+                worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
-+                world = (WorldServer) new SecondaryWorldServer(this, idatamanager, dimension, this.worlds.get(0), this.methodProfiler, worlddata, org.bukkit.World.Environment.getEnvironment(dimension), gen).b();
-             }
- 
--            this.worldServer[j].addIWorldAccess(new WorldManager(this, this.worldServer[j]));
-+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getWorld()));
-+
-+            world.addIWorldAccess(new WorldManager(this, world));
-             if (!this.R()) {
--                this.worldServer[j].getWorldData().setGameType(this.getGamemode());
-+                world.getWorldData().setGameType(this.getGamemode());
-             }
--        }
- 
-+            worlds.add(world);
-+            getPlayerList().setPlayerFileData(worlds.toArray(new WorldServer[worlds.size()]));
-+        }
-+        // CraftBukkit end
-         this.v.setPlayerFileData(this.worldServer);
-         this.a(this.getDifficulty());
-         this.l();
-@@ -216,25 +338,38 @@
-         this.b("menu.generatingTerrain");
-         boolean flag4 = false;
- 
--        MinecraftServer.LOGGER.info("Preparing start region for level 0");
--        WorldServer worldserver = this.worldServer[0];
--        BlockPosition blockposition = worldserver.getSpawn();
--        long j = aw();
--
--        for (int k = -192; k <= 192 && this.isRunning(); k += 16) {
--            for (int l = -192; l <= 192 && this.isRunning(); l += 16) {
--                long i1 = aw();
--
--                if (i1 - j > 1000L) {
--                    this.a_("Preparing spawn area", i * 100 / 625);
--                    j = i1;
--                }
-+        // CraftBukkit start - fire WorldLoadEvent and handle whether or not to keep the spawn in memory
-+        for (int m = 0; m < worlds.size(); m++) {
-+            WorldServer worldserver = this.worlds.get(m);
-+            MinecraftServer.LOGGER.info("Preparing start region for level " + m + " (Seed: " + worldserver.getSeed() + ")");
-+
-+            if (!worldserver.getWorld().getKeepSpawnInMemory()) {
-+                continue;
-+            }
-+
-+            BlockPosition blockposition = worldserver.getSpawn();
-+            long j = aw();
-+            i = 0;
-+
-+            for (int k = -192; k <= 192 && this.isRunning(); k += 16) {
-+                for (int l = -192; l <= 192 && this.isRunning(); l += 16) {
-+                    long i1 = aw();
-+
-+                    if (i1 - j > 1000L) {
-+                        this.a_("Preparing spawn area", i * 100 / 625);
-+                        j = i1;
-+                    }
- 
--                ++i;
--                worldserver.getChunkProviderServer().getChunkAt(blockposition.getX() + k >> 4, blockposition.getZ() + l >> 4);
-+                    ++i;
-+                    worldserver.getChunkProviderServer().getChunkAt(blockposition.getX() + k >> 4, blockposition.getZ() + l >> 4);
-+                }
-             }
-         }
- 
-+        for (WorldServer world : this.worlds) {
-+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(world.getWorld()));
-+        }
-+        // CraftBukkit end
-         this.t();
-     }
- 
-@@ -274,14 +409,17 @@
-     protected void t() {
-         this.f = null;
-         this.g = 0;
-+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD); // CraftBukkit
-     }
- 
-     protected void saveChunks(boolean flag) {
-         WorldServer[] aworldserver = this.worldServer;
-         int i = aworldserver.length;
- 
--        for (int j = 0; j < i; ++j) {
--            WorldServer worldserver = aworldserver[j];
-+        // CraftBukkit start
-+        for (int j = 0; j < worlds.size(); ++j) {
-+            WorldServer worldserver = worlds.get(j);
-+            // CraftBukkit end
- 
-             if (worldserver != null) {
-                 if (!flag) {
-@@ -290,6 +428,7 @@
- 
-                 try {
-                     worldserver.save(true, (IProgressUpdate) null);
-+                    worldserver.saveLevel(); // CraftBukkit
-                 } catch (ExceptionWorldConflict exceptionworldconflict) {
-                     MinecraftServer.LOGGER.warn(exceptionworldconflict.getMessage());
-                 }
-@@ -298,8 +437,24 @@
- 
-     }
- 
--    protected void stop() {
-+    // CraftBukkit start
-+    private boolean hasStopped = false;
-+    private final Object stopLock = new Object();
-+    // CraftBukkit end
-+
-+    public void stop() throws ExceptionWorldConflict { // CraftBukkit - added throws
-+        // CraftBukkit start - prevent double stopping on multiple threads
-+        synchronized(stopLock) {
-+            if (hasStopped) return;
-+            hasStopped = true;
-+        }
-+        // CraftBukkit end
-         MinecraftServer.LOGGER.info("Stopping server");
-+        // CraftBukkit start
-+        if (this.server != null) {
-+            this.server.disablePlugins();
-+        }
-+        // CraftBukkit end
-         if (this.an() != null) {
-             this.an().b();
-         }
-@@ -308,6 +463,7 @@
-             MinecraftServer.LOGGER.info("Saving players");
-             this.v.savePlayers();
-             this.v.u();
-+            try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
-         }
- 
-         if (this.worldServer != null) {
-@@ -329,12 +485,14 @@
-             aworldserver = this.worldServer;
-             i = aworldserver.length;
- 
-+            /* CraftBukkit start - Handled in saveChunks
-             for (j = 0; j < i; ++j) {
-                 worldserver = aworldserver[j];
-                 if (worldserver != null) {
-                     worldserver.saveLevel();
-                 }
-             }
-+            // CraftBukkit end */
-         }
- 
-         if (this.m.d()) {
-@@ -374,6 +532,7 @@
-                     long k = j - this.ab;
- 
-                     if (k > 2000L && this.ab - this.R >= 15000L) {
-+                        if (server.getWarnOnOverload()) // CraftBukkit
-                         MinecraftServer.LOGGER.warn("Can\'t keep up! Did the system time change, or is the server overloaded? Running {}ms behind, skipping {} tick(s)", Long.valueOf(k), Long.valueOf(k / 50L));
-                         k = 2000L;
-                         this.R = this.ab;
-@@ -386,11 +545,12 @@
- 
-                     i += k;
-                     this.ab = j;
--                    if (this.worldServer[0].everyoneDeeplySleeping()) {
-+                    if (this.worlds.get(0).everyoneDeeplySleeping()) { // CraftBukkit
-                         this.C();
-                         i = 0L;
-                     } else {
-                         while (i > 50L) {
-+                            MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
-                             i -= 50L;
-                             this.C();
-                         }
-@@ -428,6 +588,12 @@
-             } catch (Throwable throwable1) {
-                 MinecraftServer.LOGGER.error("Exception stopping the server", throwable1);
-             } finally {
-+                // CraftBukkit start - Restore terminal to original settings
-+                try {
-+                    reader.getTerminal().restore();
-+                } catch (Exception ignored) {
-+                }
-+                // CraftBukkit end
-                 this.B();
-             }
- 
-@@ -471,7 +637,7 @@
- 
-     public void B() {}
- 
--    protected void C() {
-+    protected void C() throws ExceptionWorldConflict { // CraftBukkit - added throws
-         long i = System.nanoTime();
- 
-         ++this.ticks;
-@@ -497,7 +663,7 @@
-             this.q.b().a(agameprofile);
-         }
- 
--        if (this.ticks % 900 == 0) {
-+        if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
-             this.methodProfiler.a("save");
-             this.v.savePlayers();
-             this.saveChunks(true);
-@@ -521,6 +687,7 @@
-     }
- 
-     public void D() {
-+        this.server.getScheduler().mainThreadHeartbeat(this.ticks); // CraftBukkit
-         this.methodProfiler.a("jobs");
-         Queue queue = this.j;
- 
-@@ -532,22 +699,40 @@
- 
-         this.methodProfiler.c("levels");
- 
-+        // CraftBukkit start
-+        // Run tasks that are waiting on processing
-+        while (!processQueue.isEmpty()) {
-+            processQueue.remove().run();
-+        }
-+
-+        org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
-+
-+        // Send time updates to everyone, it will get the right time from the world the player is in.
-+        if (this.ticks % 20 == 0) {
-+            for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
-+                EntityPlayer entityplayer = (EntityPlayer) this.getPlayerList().players.get(i);
-+                entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
-+            }
-+        }
-+
-         int i;
- 
--        for (i = 0; i < this.worldServer.length; ++i) {
-+        for (i = 0; i < this.worlds.size(); ++i) { // CraftBukkit
-             long j = System.nanoTime();
- 
--            if (i == 0 || this.getAllowNether()) {
--                WorldServer worldserver = this.worldServer[i];
-+            // if (i == 0 || this.getAllowNether()) {
-+                WorldServer worldserver = this.worlds.get(i);
- 
-                 this.methodProfiler.a(() -> {
-                     return worldserver.getWorldData().getName();
-                 });
-+                /* Drop global time updates
-                 if (this.ticks % 20 == 0) {
-                     this.methodProfiler.a("timeSync");
-                     this.v.a((Packet) (new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean("doDaylightCycle"))), worldserver.worldProvider.getDimensionManager().getDimensionID());
-                     this.methodProfiler.b();
-                 }
-+                // CraftBukkit end */
- 
-                 this.methodProfiler.a("tick");
- 
-@@ -574,9 +759,9 @@
-                 worldserver.getTracker().updatePlayers();
-                 this.methodProfiler.b();
-                 this.methodProfiler.b();
--            }
-+            // } // CraftBukkit
- 
--            this.i[i][this.ticks % 100] = System.nanoTime() - j;
-+            // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
-         }
- 
-         this.methodProfiler.c("connection");
-@@ -602,10 +787,11 @@
-         this.o.add(itickable);
-     }
- 
--    public static void main(String[] astring) {
-+    public static void main(final OptionSet options) { // CraftBukkit - replaces main(String[] astring)
-         DispenserRegistry.c();
- 
-         try {
-+            /* CraftBukkit start - Replace everything
-             boolean flag = true;
-             String s = null;
-             String s1 = ".";
-@@ -650,13 +836,16 @@
-                     ++j;
-                 }
-             }
-+            */ // CraftBukkit end
- 
-+            String s1 = "."; // PAIL?
-             YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
-             MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
-             GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
-             UserCache usercache = new UserCache(gameprofilerepository, new File(s1, MinecraftServer.a.getName()));
--            final DedicatedServer dedicatedserver = new DedicatedServer(new File(s1), DataConverterRegistry.a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache);
-+            final DedicatedServer dedicatedserver = new DedicatedServer(options, DataConverterRegistry.a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache);
- 
-+            /* CraftBukkit start
-             if (s != null) {
-                 dedicatedserver.i(s);
-             }
-@@ -687,6 +876,25 @@
-                     dedicatedserver.stop();
-                 }
-             });
-+            */
-+
-+            if (options.has("port")) {
-+                int port = (Integer) options.valueOf("port");
-+                if (port > 0) {
-+                    dedicatedserver.setPort(port);
-+                }
-+            }
-+
-+            if (options.has("universe")) {
-+                dedicatedserver.universe = (File) options.valueOf("universe");
-+            }
-+
-+            if (options.has("world")) {
-+                dedicatedserver.setWorld((String) options.valueOf("world"));
-+            }
-+
-+            dedicatedserver.primaryThread.start();
-+            // CraftBukkit end
-         } catch (Exception exception) {
-             MinecraftServer.LOGGER.fatal("Failed to start the minecraft server", exception);
-         }
-@@ -694,8 +902,10 @@
-     }
- 
-     public void F() {
-+        /* CraftBukkit start - prevent abuse
-         this.serverThread = new Thread(this, "Server thread");
-         this.serverThread.start();
-+        // CraftBukkit end */
-     }
- 
-     public File d(String s) {
-@@ -711,7 +921,14 @@
-     }
- 
-     public WorldServer getWorldServer(int i) {
--        return i == -1 ? this.worldServer[1] : (i == 1 ? this.worldServer[2] : this.worldServer[0]);
-+        // CraftBukkit start
-+        for (WorldServer world : worlds) {
-+            if (world.dimension == i) {
-+                return world;
-+            }
-+        }
-+        return worlds.get(0);
-+        // CraftBukkit end
-     }
- 
-     public String getVersion() {
-@@ -735,7 +952,7 @@
-     }
- 
-     public boolean isDebugging() {
--        return false;
-+        return this.getPropertyManager().getBoolean("debug", false); // CraftBukkit - don't hardcode
-     }
- 
-     public void g(String s) {
-@@ -750,7 +967,7 @@
-     }
- 
-     public String getServerModName() {
--        return "vanilla";
-+        return server.getName(); // CraftBukkit - cb > vanilla!
-     }
- 
-     public CrashReport b(CrashReport crashreport) {
-@@ -779,6 +996,7 @@
-     }
- 
-     public List<String> tabCompleteCommand(ICommandListener icommandlistener, String s, @Nullable BlockPosition blockposition, boolean flag) {
-+        /* CraftBukkit start - Allow tab-completion of Bukkit commands
-         ArrayList arraylist = Lists.newArrayList();
-         boolean flag1 = s.startsWith("/");
- 
-@@ -821,10 +1039,13 @@
- 
-             return arraylist;
-         }
-+        */
-+        return server.tabComplete(icommandlistener, s, blockposition, flag);
-+        // CraftBukkit end
-     }
- 
-     public boolean M() {
--        return this.universe != null;
-+        return true; // CraftBukkit
-     }
- 
-     public String getName() {
-@@ -880,11 +1101,13 @@
-     }
- 
-     public void a(EnumDifficulty enumdifficulty) {
--        WorldServer[] aworldserver = this.worldServer;
--        int i = aworldserver.length;
-+        // CraftBukkit start
-+        // WorldServer[] aworldserver = this.worldServer;
-+        int i = this.worlds.size();
- 
-         for (int j = 0; j < i; ++j) {
--            WorldServer worldserver = aworldserver[j];
-+            WorldServer worldserver = this.worlds.get(j);
-+            // CraftBukkit end
- 
-             if (worldserver != null) {
-                 if (worldserver.getWorldData().isHardcore()) {
-@@ -951,13 +1174,11 @@
-         int i = 0;
- 
-         if (this.worldServer != null) {
--            WorldServer[] aworldserver = this.worldServer;
--            int j = aworldserver.length;
--
--            for (int k = 0; k < j; ++k) {
--                WorldServer worldserver = aworldserver[k];
--
-+            // CraftBukkit start
-+            for (int j = 0; j < this.worlds.size(); ++j) {
-+                WorldServer worldserver = this.worlds.get(j);
-                 if (worldserver != null) {
-+                    // CraftBukkit end
-                     WorldData worlddata = worldserver.getWorldData();
- 
-                     mojangstatisticsgenerator.a("world[" + i + "][dimension]", Integer.valueOf(worldserver.worldProvider.getDimensionManager().getDimensionID()));
-@@ -990,7 +1211,7 @@
-     public abstract boolean aa();
- 
-     public boolean getOnlineMode() {
--        return this.onlineMode;
-+        return server.getOnlineMode(); // CraftBukkit
-     }
- 
-     public void setOnlineMode(boolean flag) {
-@@ -1070,13 +1291,9 @@
-     }
- 
-     public void setGamemode(EnumGamemode enumgamemode) {
--        WorldServer[] aworldserver = this.worldServer;
--        int i = aworldserver.length;
--
--        for (int j = 0; j < i; ++j) {
--            WorldServer worldserver = aworldserver[j];
--
--            worldserver.getWorldData().setGameType(enumgamemode);
-+        // CraftBukkit start
-+        for (int i = 0; i < this.worlds.size(); ++i) {
-+            worlds.get(i).getWorldData().setGameType(enumgamemode);
-         }
- 
-     }
-@@ -1100,7 +1317,7 @@
-     }
- 
-     public World getWorld() {
--        return this.worldServer[0];
-+        return this.worlds.get(0); // CraftBukkit
-     }
- 
-     public int getSpawnProtection() {
-@@ -1160,8 +1377,10 @@
-         WorldServer[] aworldserver = this.worldServer;
-         int i = aworldserver.length;
- 
--        for (int j = 0; j < i; ++j) {
--            WorldServer worldserver = aworldserver[j];
-+        // CraftBukkit start
-+        for (int j = 0; j < worlds.size(); ++j) {
-+            WorldServer worldserver = worlds.get(j);
-+            // CraftBukkit end
- 
-             if (worldserver != null) {
-                 Entity entity = worldserver.getEntity(uuid);
-@@ -1176,7 +1395,7 @@
-     }
- 
-     public boolean getSendCommandFeedback() {
--        return this.worldServer[0].getGameRules().getBoolean("sendCommandFeedback");
-+        return worlds.get(0).getGameRules().getBoolean("sendCommandFeedback");
-     }
- 
-     public MinecraftServer C_() {
-@@ -1189,7 +1408,7 @@
- 
-     public <V> ListenableFuture<V> a(Callable<V> callable) {
-         Validate.notNull(callable);
--        if (!this.isMainThread() && !this.isStopped()) {
-+        if (!this.isMainThread()) { // CraftBukkit && !this.isStopped()) {
-             ListenableFutureTask listenablefuturetask = ListenableFutureTask.create(callable);
-             Queue queue = this.j;
- 
-@@ -1232,17 +1451,17 @@
-     }
- 
-     public AdvancementDataWorld getAdvancementData() {
--        return this.worldServer[0].z();
-+        return this.worlds.get(0).z(); // CraftBukkit
-     }
- 
-     public CustomFunctionData aL() {
--        return this.worldServer[0].A();
-+        return this.worlds.get(0).A(); // CraftBukkit
-     }
- 
-     public void reload() {
-         if (this.isMainThread()) {
-             this.getPlayerList().savePlayers();
--            this.worldServer[0].getLootTableRegistry().reload();
-+            this.worlds.get(0).getLootTableRegistry().reload(); // CraftBukkit
-             this.getAdvancementData().reload();
-             this.aL().f();
-             this.getPlayerList().reload();
-@@ -1251,4 +1470,11 @@
-         }
- 
-     }
-+
-+    // CraftBukkit start
-+    @Deprecated
-+    public static MinecraftServer getServer() {
-+        return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/MobEffectList.patch b/nms-patches/MobEffectList.patch
deleted file mode 100644
index cfe1bc3..0000000
--- a/nms-patches/MobEffectList.patch
+++ /dev/null
@@ -1,85 +0,0 @@
---- a/net/minecraft/server/MobEffectList.java
-+++ b/net/minecraft/server/MobEffectList.java
-@@ -7,6 +7,11 @@
- import java.util.Map.Entry;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
-+// CraftBukkit end
-+
- public class MobEffectList {
- 
-     public static final RegistryMaterials<MinecraftKey, MobEffectList> REGISTRY = new RegistryMaterials();
-@@ -24,7 +29,7 @@
-     }
- 
-     public static int getId(MobEffectList mobeffectlist) {
--        return MobEffectList.REGISTRY.a((Object) mobeffectlist);
-+        return MobEffectList.REGISTRY.a(mobeffectlist); // CraftBukkit - decompile error
-     }
- 
-     @Nullable
-@@ -51,11 +56,11 @@
-     public void tick(EntityLiving entityliving, int i) {
-         if (this == MobEffects.REGENERATION) {
-             if (entityliving.getHealth() < entityliving.getMaxHealth()) {
--                entityliving.heal(1.0F);
-+                entityliving.heal(1.0F, RegainReason.MAGIC_REGEN); // CraftBukkit
-             }
-         } else if (this == MobEffects.POISON) {
-             if (entityliving.getHealth() > 1.0F) {
--                entityliving.damageEntity(DamageSource.MAGIC, 1.0F);
-+                entityliving.damageEntity(CraftEventFactory.POISON, 1.0F);  // CraftBukkit - DamageSource.MAGIC -> CraftEventFactory.POISON
-             }
-         } else if (this == MobEffects.WITHER) {
-             entityliving.damageEntity(DamageSource.WITHER, 1.0F);
-@@ -63,14 +68,25 @@
-             ((EntityHuman) entityliving).applyExhaustion(0.005F * (float) (i + 1));
-         } else if (this == MobEffects.SATURATION && entityliving instanceof EntityHuman) {
-             if (!entityliving.world.isClientSide) {
--                ((EntityHuman) entityliving).getFoodData().eat(i + 1, 1.0F);
-+                // CraftBukkit start
-+                EntityHuman entityhuman = (EntityHuman) entityliving;
-+                int oldFoodLevel = entityhuman.getFoodData().foodLevel;
-+
-+                org.bukkit.event.entity.FoodLevelChangeEvent event = CraftEventFactory.callFoodLevelChangeEvent(entityhuman, i + 1 + oldFoodLevel);
-+
-+                if (!event.isCancelled()) {
-+                    entityhuman.getFoodData().eat(event.getFoodLevel() - oldFoodLevel, 1.0F);
-+                }
-+
-+                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutUpdateHealth(((EntityPlayer) entityhuman).getBukkitEntity().getScaledHealth(), entityhuman.getFoodData().foodLevel, entityhuman.getFoodData().saturationLevel));
-+                // CraftBukkit end
-             }
-         } else if ((this != MobEffects.HEAL || entityliving.cc()) && (this != MobEffects.HARM || !entityliving.cc())) {
-             if (this == MobEffects.HARM && !entityliving.cc() || this == MobEffects.HEAL && entityliving.cc()) {
-                 entityliving.damageEntity(DamageSource.MAGIC, (float) (6 << i));
-             }
-         } else {
--            entityliving.heal((float) Math.max(4 << i, 0));
-+            entityliving.heal((float) Math.max(4 << i, 0), RegainReason.MAGIC); // CraftBukkit
-         }
- 
-     }
-@@ -89,7 +105,7 @@
-             }
-         } else {
-             j = (int) (d0 * (double) (4 << i) + 0.5D);
--            entityliving.heal((float) j);
-+            entityliving.heal((float) j, RegainReason.MAGIC); // CraftBukkit
-         }
- 
-     }
-@@ -208,5 +224,10 @@
-         MobEffectList.REGISTRY.a(25, new MinecraftKey("levitation"), (new MobEffectList(true, 13565951)).c("effect.levitation").b(3, 2));
-         MobEffectList.REGISTRY.a(26, new MinecraftKey("luck"), (new MobEffectList(false, 3381504)).c("effect.luck").b(5, 2).j().a(GenericAttributes.j, "03C3C89D-7037-4B42-869F-B146BCB64D2E", 1.0D, 0));
-         MobEffectList.REGISTRY.a(27, new MinecraftKey("unluck"), (new MobEffectList(true, 12624973)).c("effect.unluck").b(6, 2).a(GenericAttributes.j, "CC5AF142-2BD2-4215-B636-2605AED11727", -1.0D, 0));
-+        // CraftBukkit start
-+        for (Object effect : REGISTRY) {
-+            org.bukkit.potion.PotionEffectType.registerPotionEffectType(new org.bukkit.craftbukkit.potion.CraftPotionEffectType((MobEffectList) effect));
-+        }
-+        // CraftBukkit end
-     }
- }
diff --git a/nms-patches/MobSpawnerAbstract.patch b/nms-patches/MobSpawnerAbstract.patch
deleted file mode 100644
index 0d3b89d..0000000
--- a/nms-patches/MobSpawnerAbstract.patch
+++ /dev/null
@@ -1,19 +0,0 @@
---- a/net/minecraft/server/MobSpawnerAbstract.java
-+++ b/net/minecraft/server/MobSpawnerAbstract.java
-@@ -32,6 +32,7 @@
-     public void setMobName(@Nullable MinecraftKey minecraftkey) {
-         if (minecraftkey != null) {
-             this.spawnData.b().setString("id", minecraftkey.toString());
-+            this.mobs.clear(); // CraftBukkit - SPIGOT-3496, MC-92282
-         }
- 
-     }
-@@ -102,7 +103,7 @@
-                             ((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)), (GroupDataEntity) null);
-                         }
- 
--                        ChunkRegionLoader.a(entity, world);
-+                        ChunkRegionLoader.a(entity, world, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
-                         world.triggerEffect(2004, blockposition, 0);
-                         if (entityinsentient != null) {
-                             entityinsentient.doSpawnEffect();
diff --git a/nms-patches/NameReferencingFileConverter.patch b/nms-patches/NameReferencingFileConverter.patch
deleted file mode 100644
index c7bd0f7..0000000
--- a/nms-patches/NameReferencingFileConverter.patch
+++ /dev/null
@@ -1,99 +0,0 @@
---- a/net/minecraft/server/NameReferencingFileConverter.java
-+++ b/net/minecraft/server/NameReferencingFileConverter.java
-@@ -88,8 +88,9 @@
-             if (gameprofilebanlist.c().exists()) {
-                 try {
-                     gameprofilebanlist.load();
--                } catch (FileNotFoundException filenotfoundexception) {
--                    NameReferencingFileConverter.e.warn("Could not load existing file {}", gameprofilebanlist.c().getName(), filenotfoundexception);
-+                // CraftBukkit start - FileNotFoundException -> IOException, don't print stacktrace
-+                } catch (IOException filenotfoundexception) {
-+                    NameReferencingFileConverter.e.warn("Could not load existing file {}", gameprofilebanlist.c().getName());
-                 }
-             }
- 
-@@ -146,8 +147,9 @@
-             if (ipbanlist.c().exists()) {
-                 try {
-                     ipbanlist.load();
--                } catch (FileNotFoundException filenotfoundexception) {
--                    NameReferencingFileConverter.e.warn("Could not load existing file {}", ipbanlist.c().getName(), filenotfoundexception);
-+                // CraftBukkit start - FileNotFoundException -> IOException, don't print stacktrace
-+                } catch (IOException filenotfoundexception) {
-+                    NameReferencingFileConverter.e.warn("Could not load existing file {}", ipbanlist.c().getName());
-                 }
-             }
- 
-@@ -187,8 +189,9 @@
-             if (oplist.c().exists()) {
-                 try {
-                     oplist.load();
--                } catch (FileNotFoundException filenotfoundexception) {
--                    NameReferencingFileConverter.e.warn("Could not load existing file {}", oplist.c().getName(), filenotfoundexception);
-+                // CraftBukkit start - FileNotFoundException -> IOException, don't print stacktrace
-+                } catch (IOException filenotfoundexception) {
-+                    NameReferencingFileConverter.e.warn("Could not load existing file {}", oplist.c().getName());
-                 }
-             }
- 
-@@ -231,8 +234,9 @@
-             if (whitelist.c().exists()) {
-                 try {
-                     whitelist.load();
--                } catch (FileNotFoundException filenotfoundexception) {
--                    NameReferencingFileConverter.e.warn("Could not load existing file {}", whitelist.c().getName(), filenotfoundexception);
-+                // CraftBukkit start - FileNotFoundException -> IOException, don't print stacktrace
-+                } catch (IOException filenotfoundexception) {
-+                    NameReferencingFileConverter.e.warn("Could not load existing file {}", whitelist.c().getName());
-                 }
-             }
- 
-@@ -350,6 +354,30 @@
-                         File file1 = new File(file2, s + ".dat");
-                         File file3 = new File(file, s1 + ".dat");
- 
-+                        // CraftBukkit start - Use old file name to seed lastKnownName
-+                        NBTTagCompound root = null;
-+
-+                        try {
-+                            root = NBTCompressedStreamTools.a(new java.io.FileInputStream(file1));
-+                        } catch (Exception exception) {
-+                            exception.printStackTrace();
-+                        }
-+
-+                        if (root != null) {
-+                            if (!root.hasKey("bukkit")) {
-+                                root.set("bukkit", new NBTTagCompound());
-+                            }
-+                            NBTTagCompound data = root.getCompound("bukkit");
-+                            data.setString("lastKnownName", s);
-+
-+                            try {
-+                                NBTCompressedStreamTools.a(root, new java.io.FileOutputStream(file2));
-+                            } catch (Exception exception) {
-+                                exception.printStackTrace();
-+                            }
-+                       }
-+                        // CraftBukkit end
-+
-                         NameReferencingFileConverter.b(file);
-                         if (!file1.renameTo(file3)) {
-                             throw new NameReferencingFileConverter.FileConversionException("Could not convert file for " + s, null);
-@@ -358,7 +386,7 @@
- 
-                     private String a(GameProfile gameprofile) {
-                         String s = null;
--                        String[] astring = astring1;
-+                        // String[] astring = astring1; // CraftBukkit - decompile error
-                         int i = astring.length;
- 
-                         for (int j = 0; j < i; ++j) {
-@@ -471,7 +499,7 @@
- 
-     private static File d(PropertyManager propertymanager) {
-         String s = propertymanager.getString("level-name", "world");
--        File file = new File(s);
-+        File file = new File(MinecraftServer.getServer().server.getWorldContainer(), s); // CraftBukkit - Respect container setting
- 
-         return new File(file, "players");
-     }
diff --git a/nms-patches/NetworkManager.patch b/nms-patches/NetworkManager.patch
deleted file mode 100644
index 6e69467..0000000
--- a/nms-patches/NetworkManager.patch
+++ /dev/null
@@ -1,29 +0,0 @@
---- a/net/minecraft/server/NetworkManager.java
-+++ b/net/minecraft/server/NetworkManager.java
-@@ -114,7 +114,7 @@
-     protected void a(ChannelHandlerContext channelhandlercontext, Packet<?> packet) throws Exception {
-         if (this.channel.isOpen()) {
-             try {
--                packet.a(this.m);
-+                ((Packet) packet).a(this.m); // CraftBukkit - decompile error
-             } catch (CancelledPacketHandleException cancelledpackethandleexception) {
-                 ;
-             }
-@@ -236,7 +236,7 @@
- 
-     public void close(IChatBaseComponent ichatbasecomponent) {
-         if (this.channel.isOpen()) {
--            this.channel.close().awaitUninterruptibly();
-+            this.channel.close(); // We can't wait as this may be called from an event loop.
-             this.n = ichatbasecomponent;
-         }
- 
-@@ -313,7 +313,7 @@
-         }
-     }
- 
--    protected void channelRead0(ChannelHandlerContext channelhandlercontext, Object object) throws Exception {
-+    protected void channelRead0(ChannelHandlerContext channelhandlercontext, Packet object) throws Exception { // CraftBukkit - fix decompile error
-         this.a(channelhandlercontext, (Packet) object);
-     }
- 
diff --git a/nms-patches/PacketDataSerializer.patch b/nms-patches/PacketDataSerializer.patch
deleted file mode 100644
index 4348da9..0000000
--- a/nms-patches/PacketDataSerializer.patch
+++ /dev/null
@@ -1,50 +0,0 @@
---- a/net/minecraft/server/PacketDataSerializer.java
-+++ b/net/minecraft/server/PacketDataSerializer.java
-@@ -23,6 +23,8 @@
- import java.util.UUID;
- import javax.annotation.Nullable;
- 
-+import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
-+
- public class PacketDataSerializer extends ByteBuf {
- 
-     private final ByteBuf a;
-@@ -130,7 +132,7 @@
-     }
- 
-     public <T extends Enum<T>> T a(Class<T> oclass) {
--        return ((Enum[]) oclass.getEnumConstants())[this.g()];
-+        return ((T[]) oclass.getEnumConstants())[this.g()]; // CraftBukkit - fix decompile error
-     }
- 
-     public PacketDataSerializer a(Enum<?> oenum) {
-@@ -207,7 +209,7 @@
-         } else {
-             try {
-                 NBTCompressedStreamTools.a(nbttagcompound, (DataOutput) (new ByteBufOutputStream(this)));
--            } catch (IOException ioexception) {
-+            } catch (Exception ioexception) { // CraftBukkit - IOException -> Exception
-                 throw new EncoderException(ioexception);
-             }
-         }
-@@ -234,7 +236,7 @@
-     }
- 
-     public PacketDataSerializer a(ItemStack itemstack) {
--        if (itemstack.isEmpty()) {
-+        if (itemstack.isEmpty() || itemstack.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
-             this.writeShort(-1);
-         } else {
-             this.writeShort(Item.getId(itemstack.getItem()));
-@@ -263,6 +265,11 @@
-             ItemStack itemstack = new ItemStack(Item.getById(short0), b0, short1);
- 
-             itemstack.setTag(this.j());
-+            // CraftBukkit start
-+            if (itemstack.getTag() != null) {
-+                CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack));
-+            }
-+            // CraftBukkit end
-             return itemstack;
-         }
-     }
diff --git a/nms-patches/PacketPlayInCloseWindow.patch b/nms-patches/PacketPlayInCloseWindow.patch
deleted file mode 100644
index c17757e..0000000
--- a/nms-patches/PacketPlayInCloseWindow.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/PacketPlayInCloseWindow.java
-+++ b/net/minecraft/server/PacketPlayInCloseWindow.java
-@@ -8,6 +8,12 @@
- 
-     public PacketPlayInCloseWindow() {}
- 
-+    // CraftBukkit start
-+    public PacketPlayInCloseWindow(int id) {
-+        this.id = id;
-+    }
-+    // CraftBukkit end
-+
-     public void a(PacketListenerPlayIn packetlistenerplayin) {
-         packetlistenerplayin.a(this);
-     }
diff --git a/nms-patches/PacketPlayOutWorldBorder.patch b/nms-patches/PacketPlayOutWorldBorder.patch
deleted file mode 100644
index d37e4ec..0000000
--- a/nms-patches/PacketPlayOutWorldBorder.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/PacketPlayOutWorldBorder.java
-+++ b/net/minecraft/server/PacketPlayOutWorldBorder.java
-@@ -18,8 +18,10 @@
- 
-     public PacketPlayOutWorldBorder(WorldBorder worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction packetplayoutworldborder_enumworldborderaction) {
-         this.a = packetplayoutworldborder_enumworldborderaction;
--        this.c = worldborder.getCenterX();
--        this.d = worldborder.getCenterZ();
-+        // CraftBukkit start - multiply out nether border
-+        this.c = worldborder.getCenterX() * (worldborder.world.worldProvider instanceof WorldProviderHell ? 8 : 1);
-+        this.d = worldborder.getCenterZ() * (worldborder.world.worldProvider instanceof WorldProviderHell ? 8 : 1);
-+        // CraftBukkit end
-         this.f = worldborder.getSize();
-         this.e = worldborder.j();
-         this.g = worldborder.i();
diff --git a/nms-patches/PacketStatusListener.patch b/nms-patches/PacketStatusListener.patch
deleted file mode 100644
index c8a9a90..0000000
--- a/nms-patches/PacketStatusListener.patch
+++ /dev/null
@@ -1,117 +0,0 @@
---- a/net/minecraft/server/PacketStatusListener.java
-+++ b/net/minecraft/server/PacketStatusListener.java
-@@ -1,5 +1,16 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import com.mojang.authlib.GameProfile;
-+import io.netty.channel.ChannelFutureListener;
-+import java.net.InetSocketAddress;
-+import java.util.Iterator;
-+
-+import org.bukkit.craftbukkit.util.CraftIconCache;
-+import org.bukkit.entity.Player;
-+
-+// CraftBukkit end
-+
- public class PacketStatusListener implements PacketStatusInListener {
- 
-     private static final IChatBaseComponent a = new ChatComponentText("Status request has been handled.");
-@@ -19,8 +30,96 @@
-             this.networkManager.close(PacketStatusListener.a);
-         } else {
-             this.d = true;
--            this.networkManager.sendPacket(new PacketStatusOutServerInfo(this.minecraftServer.getServerPing()));
-+            // CraftBukkit start
-+            // this.networkManager.sendPacket(new PacketStatusOutServerInfo(this.minecraftServer.getServerPing()));
-+            final Object[] players = minecraftServer.getPlayerList().players.toArray();
-+            class ServerListPingEvent extends org.bukkit.event.server.ServerListPingEvent {
-+
-+                CraftIconCache icon = minecraftServer.server.getServerIcon();
-+
-+                ServerListPingEvent() {
-+                    super(((InetSocketAddress) networkManager.getSocketAddress()).getAddress(), minecraftServer.getMotd(), minecraftServer.getPlayerList().getMaxPlayers());
-+                }
-+
-+                @Override
-+                public void setServerIcon(org.bukkit.util.CachedServerIcon icon) {
-+                    if (!(icon instanceof CraftIconCache)) {
-+                        throw new IllegalArgumentException(icon + " was not created by " + org.bukkit.craftbukkit.CraftServer.class);
-+                    }
-+                    this.icon = (CraftIconCache) icon;
-+                }
-+
-+                @Override
-+                public Iterator<Player> iterator() throws UnsupportedOperationException {
-+                    return new Iterator<Player>() {
-+                        int i;
-+                        int ret = Integer.MIN_VALUE;
-+                        EntityPlayer player;
-+
-+                        @Override
-+                        public boolean hasNext() {
-+                            if (player != null) {
-+                                return true;
-+                            }
-+                            final Object[] currentPlayers = players;
-+                            for (int length = currentPlayers.length, i = this.i; i < length; i++) {
-+                                final EntityPlayer player = (EntityPlayer) currentPlayers[i];
-+                                if (player != null) {
-+                                    this.i = i + 1;
-+                                    this.player = player;
-+                                    return true;
-+                                }
-+                            }
-+                            return false;
-+                        }
-+
-+                        @Override
-+                        public Player next() {
-+                            if (!hasNext()) {
-+                                throw new java.util.NoSuchElementException();
-+                            }
-+                            final EntityPlayer player = this.player;
-+                            this.player = null;
-+                            this.ret = this.i - 1;
-+                            return player.getBukkitEntity();
-+                        }
-+
-+                        @Override
-+                        public void remove() {
-+                            final Object[] currentPlayers = players;
-+                            final int i = this.ret;
-+                            if (i < 0 || currentPlayers[i] == null) {
-+                                throw new IllegalStateException();
-+                            }
-+                            currentPlayers[i] = null;
-+                        }
-+                    };
-+                }
-+            }
-+
-+            ServerListPingEvent event = new ServerListPingEvent();
-+            this.minecraftServer.server.getPluginManager().callEvent(event);
-+
-+            java.util.List<GameProfile> profiles = new java.util.ArrayList<GameProfile>(players.length);
-+            for (Object player : players) {
-+                if (player != null) {
-+                    profiles.add(((EntityPlayer) player).getProfile());
-+                }
-+            }
-+
-+            ServerPing.ServerPingPlayerSample playerSample = new ServerPing.ServerPingPlayerSample(event.getMaxPlayers(), profiles.size());
-+            playerSample.a(profiles.toArray(new GameProfile[profiles.size()]));
-+
-+            ServerPing ping = new ServerPing();
-+            ping.setFavicon(event.icon.value);
-+            ping.setMOTD(new ChatComponentText(event.getMotd()));
-+            ping.setPlayerSample(playerSample);
-+            int version = minecraftServer.getServerPing().getServerData().getProtocolVersion();
-+            ping.setServerInfo(new ServerPing.ServerData(minecraftServer.getServerModName() + " " + minecraftServer.getVersion(), version));
-+
-+            this.networkManager.sendPacket(new PacketStatusOutServerInfo(ping));
-         }
-+        // CraftBukkit end
-     }
- 
-     public void a(PacketStatusInPing packetstatusinping) {
diff --git a/nms-patches/PathfinderGoalBreakDoor.patch b/nms-patches/PathfinderGoalBreakDoor.patch
deleted file mode 100644
index e51d156..0000000
--- a/nms-patches/PathfinderGoalBreakDoor.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalBreakDoor.java
-+++ b/net/minecraft/server/PathfinderGoalBreakDoor.java
-@@ -63,6 +63,12 @@
-         }
- 
-         if (this.g == 240 && this.a.world.getDifficulty() == EnumDifficulty.HARD) {
-+            // CraftBukkit start
-+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreakDoorEvent(this.a, this.b.getX(), this.b.getY(), this.b.getZ()).isCancelled()) {
-+                this.c();
-+                return;
-+            }
-+            // CraftBukkit end
-             this.a.world.setAir(this.b);
-             this.a.world.triggerEffect(1021, this.b, 0);
-             this.a.world.triggerEffect(2001, this.b, Block.getId(this.c));
diff --git a/nms-patches/PathfinderGoalBreed.patch b/nms-patches/PathfinderGoalBreed.patch
deleted file mode 100644
index 2c16911..0000000
--- a/nms-patches/PathfinderGoalBreed.patch
+++ /dev/null
@@ -1,49 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalBreed.java
-+++ b/net/minecraft/server/PathfinderGoalBreed.java
-@@ -75,11 +75,24 @@
-         EntityAgeable entityageable = this.animal.createChild(this.partner);
- 
-         if (entityageable != null) {
-+            // CraftBukkit start - set persistence for tame animals
-+            if (entityageable instanceof EntityTameableAnimal && ((EntityTameableAnimal) entityageable).isTamed()) {
-+                entityageable.persistent = true;
-+            }
-+            // CraftBukkit end
-             EntityPlayer entityplayer = this.animal.getBreedCause();
- 
-             if (entityplayer == null && this.partner.getBreedCause() != null) {
-                 entityplayer = this.partner.getBreedCause();
-             }
-+            // CraftBukkit start - call EntityBreedEvent
-+            int experience = this.animal.getRandom().nextInt(7) + 1;
-+            org.bukkit.event.entity.EntityBreedEvent entityBreedEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreedEvent(entityageable, animal, partner, entityplayer, this.animal.breedItem, experience);
-+            if (entityBreedEvent.isCancelled()) {
-+                return;
-+            }
-+            experience = entityBreedEvent.getExperience();
-+            // CraftBukkit end
- 
-             if (entityplayer != null) {
-                 entityplayer.b(StatisticList.C);
-@@ -92,7 +105,7 @@
-             this.partner.resetLove();
-             entityageable.setAgeRaw(-24000);
-             entityageable.setPositionRotation(this.animal.locX, this.animal.locY, this.animal.locZ, 0.0F, 0.0F);
--            this.a.addEntity(entityageable);
-+            this.a.addEntity(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
-             Random random = this.animal.getRandom();
- 
-             for (int i = 0; i < 7; ++i) {
-@@ -107,7 +120,11 @@
-             }
- 
-             if (this.a.getGameRules().getBoolean("doMobLoot")) {
--                this.a.addEntity(new EntityExperienceOrb(this.a, this.animal.locX, this.animal.locY, this.animal.locZ, random.nextInt(7) + 1));
-+                // CraftBukkit start - use event experience
-+                if (experience > 0) {
-+                    this.a.addEntity(new EntityExperienceOrb(this.a, this.animal.locX, this.animal.locY, this.animal.locZ, experience));
-+                }
-+                // CraftBukkit end
-             }
- 
-         }
diff --git a/nms-patches/PathfinderGoalDefendVillage.patch b/nms-patches/PathfinderGoalDefendVillage.patch
deleted file mode 100644
index aa468d3..0000000
--- a/nms-patches/PathfinderGoalDefendVillage.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalDefendVillage.java
-+++ b/net/minecraft/server/PathfinderGoalDefendVillage.java
-@@ -32,7 +32,7 @@
-     }
- 
-     public void c() {
--        this.a.setGoalTarget(this.b);
-+        this.a.setGoalTarget(this.b, org.bukkit.event.entity.EntityTargetEvent.TargetReason.DEFEND_VILLAGE, true); // CraftBukkit - reason
-         super.c();
-     }
- }
diff --git a/nms-patches/PathfinderGoalEatTile.patch b/nms-patches/PathfinderGoalEatTile.patch
deleted file mode 100644
index f3d98e5..0000000
--- a/nms-patches/PathfinderGoalEatTile.patch
+++ /dev/null
@@ -1,34 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalEatTile.java
-+++ b/net/minecraft/server/PathfinderGoalEatTile.java
-@@ -3,6 +3,11 @@
- import com.google.common.base.Predicate;
- import com.google.common.base.Predicates;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.Material;
-+// CraftBukkit end
-+
- public class PathfinderGoalEatTile extends PathfinderGoal {
- 
-     private static final Predicate<IBlockData> b = BlockStatePredicate.a((Block) Blocks.TALLGRASS).a(BlockLongGrass.TYPE, Predicates.equalTo(BlockLongGrass.EnumTallGrassType.GRASS));
-@@ -50,7 +55,8 @@
-             BlockPosition blockposition = new BlockPosition(this.c.locX, this.c.locY, this.c.locZ);
- 
-             if (PathfinderGoalEatTile.b.apply(this.d.getType(blockposition))) {
--                if (this.d.getGameRules().getBoolean("mobGriefing")) {
-+                // CraftBukkit
-+                if (!CraftEventFactory.callEntityChangeBlockEvent(this.c, this.c.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), Material.AIR, !this.d.getGameRules().getBoolean("mobGriefing")).isCancelled()) {
-                     this.d.setAir(blockposition, false);
-                 }
- 
-@@ -59,7 +65,8 @@
-                 BlockPosition blockposition1 = blockposition.down();
- 
-                 if (this.d.getType(blockposition1).getBlock() == Blocks.GRASS) {
--                    if (this.d.getGameRules().getBoolean("mobGriefing")) {
-+                    // CraftBukkit
-+                    if (!CraftEventFactory.callEntityChangeBlockEvent(this.c, this.c.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), Material.AIR, !this.d.getGameRules().getBoolean("mobGriefing")).isCancelled()) {
-                         this.d.triggerEffect(2001, blockposition1, Block.getId(Blocks.GRASS));
-                         this.d.setTypeAndData(blockposition1, Blocks.DIRT.getBlockData(), 2);
-                     }
diff --git a/nms-patches/PathfinderGoalFollowOwner.patch b/nms-patches/PathfinderGoalFollowOwner.patch
deleted file mode 100644
index 039f15a..0000000
--- a/nms-patches/PathfinderGoalFollowOwner.patch
+++ /dev/null
@@ -1,34 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalFollowOwner.java
-+++ b/net/minecraft/server/PathfinderGoalFollowOwner.java
-@@ -1,5 +1,11 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.entity.CraftEntity;
-+import org.bukkit.event.entity.EntityTeleportEvent;
-+// CraftBukkit end
-+
- public class PathfinderGoalFollowOwner extends PathfinderGoal {
- 
-     private final EntityTameableAnimal d;
-@@ -73,7 +79,18 @@
-                             for (int l = 0; l <= 4; ++l) {
-                                 for (int i1 = 0; i1 <= 4; ++i1) {
-                                     if ((l < 1 || i1 < 1 || l > 3 || i1 > 3) && this.a(i, j, k, l, i1)) {
--                                        this.d.setPositionRotation((double) ((float) (i + l) + 0.5F), (double) k, (double) ((float) (j + i1) + 0.5F), this.d.yaw, this.d.pitch);
-+                                        // CraftBukkit start
-+                                        CraftEntity entity = this.d.getBukkitEntity();
-+                                        Location to = new Location(entity.getWorld(), (double) ((float) (i + l) + 0.5F), (double) k, (double) ((float) (j + i1) + 0.5F), this.d.yaw, this.d.pitch);
-+                                        EntityTeleportEvent event = new EntityTeleportEvent(entity, entity.getLocation(), to);
-+                                        this.d.world.getServer().getPluginManager().callEvent(event);
-+                                        if (event.isCancelled()) {
-+                                            return;
-+                                        }
-+                                        to = event.getTo();
-+
-+                                        this.d.setPositionRotation(to.getX(), to.getY(), to.getZ(), to.getYaw(), to.getPitch());
-+                                        // CraftBukkit end
-                                         this.g.p();
-                                         return;
-                                     }
diff --git a/nms-patches/PathfinderGoalHorseTrap.patch b/nms-patches/PathfinderGoalHorseTrap.patch
deleted file mode 100644
index 0aa10ae..0000000
--- a/nms-patches/PathfinderGoalHorseTrap.patch
+++ /dev/null
@@ -1,37 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalHorseTrap.java
-+++ b/net/minecraft/server/PathfinderGoalHorseTrap.java
-@@ -21,13 +21,14 @@
-         this.a.world.strikeLightning(new EntityLightning(this.a.world, this.a.locX, this.a.locY, this.a.locZ, true));
-         EntitySkeleton entityskeleton = this.a(difficultydamagescaler, this.a);
- 
--        entityskeleton.startRiding(this.a);
-+        if (entityskeleton != null) entityskeleton.startRiding(this.a); // CraftBukkit
- 
-         for (int i = 0; i < 3; ++i) {
-             EntityHorseAbstract entityhorseabstract = this.a(difficultydamagescaler);
-+            if (entityhorseabstract == null) continue; // CraftBukkit
-             EntitySkeleton entityskeleton1 = this.a(difficultydamagescaler, entityhorseabstract);
- 
--            entityskeleton1.startRiding(entityhorseabstract);
-+            if (entityskeleton1 != null) entityskeleton1.startRiding(entityhorseabstract); // CraftBukkit
-             entityhorseabstract.f(this.a.getRandom().nextGaussian() * 0.5D, 0.0D, this.a.getRandom().nextGaussian() * 0.5D);
-         }
- 
-@@ -42,7 +43,7 @@
-         entityhorseskeleton.cW();
-         entityhorseskeleton.setTamed(true);
-         entityhorseskeleton.setAgeRaw(0);
--        entityhorseskeleton.world.addEntity(entityhorseskeleton);
-+        if (!entityhorseskeleton.world.addEntity(entityhorseskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.TRAP)) return null; // CraftBukkit
-         return entityhorseskeleton;
-     }
- 
-@@ -59,7 +60,7 @@
- 
-         entityskeleton.setSlot(EnumItemSlot.MAINHAND, EnchantmentManager.a(entityskeleton.getRandom(), entityskeleton.getItemInMainHand(), (int) (5.0F + difficultydamagescaler.d() * (float) entityskeleton.getRandom().nextInt(18)), false));
-         entityskeleton.setSlot(EnumItemSlot.HEAD, EnchantmentManager.a(entityskeleton.getRandom(), entityskeleton.getEquipment(EnumItemSlot.HEAD), (int) (5.0F + difficultydamagescaler.d() * (float) entityskeleton.getRandom().nextInt(18)), false));
--        entityskeleton.world.addEntity(entityskeleton);
-+        if (!entityskeleton.world.addEntity(entityskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.JOCKEY)) return null; // CraftBukkit
-         return entityskeleton;
-     }
- }
diff --git a/nms-patches/PathfinderGoalHurtByTarget.patch b/nms-patches/PathfinderGoalHurtByTarget.patch
deleted file mode 100644
index bd1581b..0000000
--- a/nms-patches/PathfinderGoalHurtByTarget.patch
+++ /dev/null
@@ -1,19 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalHurtByTarget.java
-+++ b/net/minecraft/server/PathfinderGoalHurtByTarget.java
-@@ -24,7 +24,7 @@
-     }
- 
-     public void c() {
--        this.e.setGoalTarget(this.e.getLastDamager());
-+        this.e.setGoalTarget(this.e.getLastDamager(), org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY, true); // CraftBukkit - reason
-         this.g = this.e.getGoalTarget();
-         this.b = this.e.bT();
-         this.h = 300;
-@@ -66,6 +66,6 @@
-     }
- 
-     protected void a(EntityCreature entitycreature, EntityLiving entityliving) {
--        entitycreature.setGoalTarget(entityliving);
-+        entitycreature.setGoalTarget(entityliving, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_NEARBY_ENTITY, true); // CraftBukkit - reason
-     }
- }
diff --git a/nms-patches/PathfinderGoalMakeLove.patch b/nms-patches/PathfinderGoalMakeLove.patch
deleted file mode 100644
index d7269cd..0000000
--- a/nms-patches/PathfinderGoalMakeLove.patch
+++ /dev/null
@@ -1,23 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalMakeLove.java
-+++ b/net/minecraft/server/PathfinderGoalMakeLove.java
-@@ -80,6 +80,11 @@
- 
-     private void i() {
-         EntityVillager entityvillager = this.b.b((EntityAgeable) this.c);
-+        // CraftBukkit start - call EntityBreedEvent
-+        if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreedEvent(entityvillager, this.b, this.c, null, null, 0).isCancelled()) {
-+            return;
-+        }
-+        // CraftBukkit end
- 
-         this.c.setAgeRaw(6000);
-         this.b.setAgeRaw(6000);
-@@ -87,7 +92,7 @@
-         this.b.s(false);
-         entityvillager.setAgeRaw(-24000);
-         entityvillager.setPositionRotation(this.b.locX, this.b.locY, this.b.locZ, 0.0F, 0.0F);
--        this.d.addEntity(entityvillager);
-+        this.d.addEntity(entityvillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
-         this.d.broadcastEntityEffect(entityvillager, (byte) 12);
-     }
- }
diff --git a/nms-patches/PathfinderGoalNearestAttackableTarget.patch b/nms-patches/PathfinderGoalNearestAttackableTarget.patch
deleted file mode 100644
index d1ceb69..0000000
--- a/nms-patches/PathfinderGoalNearestAttackableTarget.patch
+++ /dev/null
@@ -1,56 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
-+++ b/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
-@@ -35,7 +35,7 @@
-             }
- 
-             public boolean apply(@Nullable Object object) {
--                return this.a((EntityLiving) object);
-+                return this.a((T) object); // CraftBukkit - fix decompile error
-             }
-         };
-     }
-@@ -50,11 +50,11 @@
-                 return false;
-             } else {
-                 Collections.sort(list, this.b);
--                this.d = (EntityLiving) list.get(0);
-+                this.d = (T) list.get(0); // CraftBukkit - fix decompile error
-                 return true;
-             }
-         } else {
--            this.d = this.e.world.a(this.e.locX, this.e.locY + (double) this.e.getHeadHeight(), this.e.locZ, this.i(), this.i(), new Function() {
-+            this.d = (T) this.e.world.a(this.e.locX, this.e.locY + (double) this.e.getHeadHeight(), this.e.locZ, this.i(), this.i(), new Function<EntityHuman, Double>() { // CraftBukkit - fix decompile error
-                 @Nullable
-                 public Double a(@Nullable EntityHuman entityhuman) {
-                     ItemStack itemstack = entityhuman.getEquipment(EnumItemSlot.HEAD);
-@@ -74,10 +74,10 @@
-                 }
- 
-                 @Nullable
--                public Object apply(@Nullable Object object) {
-+                public Double apply(@Nullable EntityHuman object) { // CraftBukkit - fix decompile error
-                     return this.a((EntityHuman) object);
-                 }
--            }, this.c);
-+            }, (Predicate<EntityHuman>) this.c); // CraftBukkit - fix decompile error
-             return this.d != null;
-         }
-     }
-@@ -87,7 +87,7 @@
-     }
- 
-     public void c() {
--        this.e.setGoalTarget(this.d);
-+        this.e.setGoalTarget(this.d, d instanceof EntityPlayer ? org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER : org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_ENTITY, true); // Craftbukkit - reason
-         super.c();
-     }
- 
-@@ -106,7 +106,7 @@
-             return d0 < d1 ? -1 : (d0 > d1 ? 1 : 0);
-         }
- 
--        public int compare(Object object, Object object1) {
-+        public int compare(Entity object, Entity object1) { // CraftBukkit - fix decompile error
-             return this.a((Entity) object, (Entity) object1);
-         }
-     }
diff --git a/nms-patches/PathfinderGoalNearestAttackableTargetInsentient.patch b/nms-patches/PathfinderGoalNearestAttackableTargetInsentient.patch
deleted file mode 100644
index 9dad5d7..0000000
--- a/nms-patches/PathfinderGoalNearestAttackableTargetInsentient.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
-+++ b/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
-@@ -69,7 +69,7 @@
-     }
- 
-     public void c() {
--        this.b.setGoalTarget(this.e);
-+        this.b.setGoalTarget(this.e, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_ENTITY, true); // CraftBukkit - reason
-         super.c();
-     }
- 
diff --git a/nms-patches/PathfinderGoalOwnerHurtByTarget.patch b/nms-patches/PathfinderGoalOwnerHurtByTarget.patch
deleted file mode 100644
index 5d62045..0000000
--- a/nms-patches/PathfinderGoalOwnerHurtByTarget.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalOwnerHurtByTarget.java
-+++ b/net/minecraft/server/PathfinderGoalOwnerHurtByTarget.java
-@@ -30,7 +30,7 @@
-     }
- 
-     public void c() {
--        this.e.setGoalTarget(this.b);
-+        this.e.setGoalTarget(this.b, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_OWNER, true); // CraftBukkit - reason
-         EntityLiving entityliving = this.a.getOwner();
- 
-         if (entityliving != null) {
diff --git a/nms-patches/PathfinderGoalOwnerHurtTarget.patch b/nms-patches/PathfinderGoalOwnerHurtTarget.patch
deleted file mode 100644
index a837933..0000000
--- a/nms-patches/PathfinderGoalOwnerHurtTarget.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalOwnerHurtTarget.java
-+++ b/net/minecraft/server/PathfinderGoalOwnerHurtTarget.java
-@@ -30,7 +30,7 @@
-     }
- 
-     public void c() {
--        this.e.setGoalTarget(this.b);
-+        this.e.setGoalTarget(this.b, org.bukkit.event.entity.EntityTargetEvent.TargetReason.OWNER_ATTACKED_TARGET, true); // CraftBukkit - reason
-         EntityLiving entityliving = this.a.getOwner();
- 
-         if (entityliving != null) {
diff --git a/nms-patches/PathfinderGoalPanic.patch b/nms-patches/PathfinderGoalPanic.patch
deleted file mode 100644
index f599048..0000000
--- a/nms-patches/PathfinderGoalPanic.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalPanic.java
-+++ b/net/minecraft/server/PathfinderGoalPanic.java
-@@ -53,6 +53,12 @@
-     }
- 
-     public boolean b() {
-+        // CraftBukkit start - introduce a temporary timeout hack until this is fixed properly
-+        if ((this.a.ticksLived - this.a.hurtTimestamp) > 100) {
-+            this.a.b((EntityLiving) null);
-+            return false;
-+        }
-+        // CraftBukkit end
-         return !this.a.getNavigation().o();
-     }
- 
diff --git a/nms-patches/PathfinderGoalSit.patch b/nms-patches/PathfinderGoalSit.patch
deleted file mode 100644
index 80597cf..0000000
--- a/nms-patches/PathfinderGoalSit.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalSit.java
-+++ b/net/minecraft/server/PathfinderGoalSit.java
-@@ -12,7 +12,7 @@
- 
-     public boolean a() {
-         if (!this.entity.isTamed()) {
--            return false;
-+            return this.willSit && this.entity.getGoalTarget() == null; // CraftBukkit - Allow sitting for wild animals
-         } else if (this.entity.isInWater()) {
-             return false;
-         } else if (!this.entity.onGround) {
diff --git a/nms-patches/PathfinderGoalTame.patch b/nms-patches/PathfinderGoalTame.patch
deleted file mode 100644
index 8026e5b..0000000
--- a/nms-patches/PathfinderGoalTame.patch
+++ /dev/null
@@ -1,12 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalTame.java
-+++ b/net/minecraft/server/PathfinderGoalTame.java
-@@ -51,7 +51,8 @@
-                 int i = this.entity.getTemper();
-                 int j = this.entity.getMaxDomestication();
- 
--                if (j > 0 && this.entity.getRandom().nextInt(j) < i) {
-+                // CraftBukkit - fire EntityTameEvent
-+                if (j > 0 && this.entity.getRandom().nextInt(j) < i && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this.entity, ((org.bukkit.craftbukkit.entity.CraftHumanEntity) this.entity.getBukkitEntity().getPassenger()).getHandle()).isCancelled()) {
-                     this.entity.h((EntityHuman) entity);
-                     return;
-                 }
diff --git a/nms-patches/PathfinderGoalTarget.patch b/nms-patches/PathfinderGoalTarget.patch
deleted file mode 100644
index acab152..0000000
--- a/nms-patches/PathfinderGoalTarget.patch
+++ /dev/null
@@ -1,28 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalTarget.java
-+++ b/net/minecraft/server/PathfinderGoalTarget.java
-@@ -1,6 +1,7 @@
- package net.minecraft.server;
- 
- import javax.annotation.Nullable;
-+import org.bukkit.event.entity.EntityTargetEvent; // CraftBukkit
- 
- public abstract class PathfinderGoalTarget extends PathfinderGoal {
- 
-@@ -58,7 +59,7 @@
-                     if (entityliving instanceof EntityHuman && ((EntityHuman) entityliving).abilities.isInvulnerable) {
-                         return false;
-                     } else {
--                        this.e.setGoalTarget(entityliving);
-+                        this.e.setGoalTarget(entityliving, EntityTargetEvent.TargetReason.CLOSEST_ENTITY, true); // CraftBukkit
-                         return true;
-                     }
-                 }
-@@ -79,7 +80,7 @@
-     }
- 
-     public void d() {
--        this.e.setGoalTarget((EntityLiving) null);
-+        this.e.setGoalTarget((EntityLiving) null, EntityTargetEvent.TargetReason.FORGOT_TARGET, true); // CraftBukkit
-         this.g = null;
-     }
- 
diff --git a/nms-patches/PathfinderGoalTargetNearestPlayer.patch b/nms-patches/PathfinderGoalTargetNearestPlayer.patch
deleted file mode 100644
index 0b3f534..0000000
--- a/nms-patches/PathfinderGoalTargetNearestPlayer.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
-+++ b/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
-@@ -92,7 +92,7 @@
-     }
- 
-     public void c() {
--        this.b.setGoalTarget(this.e);
-+        this.b.setGoalTarget(this.e, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit - added reason
-         super.c();
-     }
- 
diff --git a/nms-patches/PathfinderGoalTempt.patch b/nms-patches/PathfinderGoalTempt.patch
deleted file mode 100644
index ec9ecd2..0000000
--- a/nms-patches/PathfinderGoalTempt.patch
+++ /dev/null
@@ -1,43 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalTempt.java
-+++ b/net/minecraft/server/PathfinderGoalTempt.java
-@@ -2,6 +2,12 @@
- 
- import com.google.common.collect.Sets;
- import java.util.Set;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.entity.EntityTargetEvent;
-+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
-+// CraftBukkit end
- 
- public class PathfinderGoalTempt extends PathfinderGoal {
- 
-@@ -12,7 +18,7 @@
-     private double e;
-     private double f;
-     private double g;
--    private EntityHuman target;
-+    private EntityLiving target; // CraftBukkit
-     private int i;
-     private boolean j;
-     private final Set<Item> k;
-@@ -39,7 +45,17 @@
-             return false;
-         } else {
-             this.target = this.a.world.findNearbyPlayer(this.a, 10.0D);
--            return this.target == null ? false : this.a(this.target.getItemInMainHand()) || this.a(this.target.getItemInOffHand());
-+            // CraftBukkit start
-+            boolean tempt = this.target == null ? false : this.a(this.target.getItemInMainHand()) || this.a(this.target.getItemInOffHand());
-+            if (tempt) {
-+                EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(this.a, this.target, EntityTargetEvent.TargetReason.TEMPT);
-+                if (event.isCancelled()) {
-+                    return false;
-+                }
-+                this.target = (event.getTarget() == null) ? null : ((CraftLivingEntity) event.getTarget()).getHandle();
-+            }
-+            return tempt;
-+            // CraftBukkit end
-         }
-     }
- 
diff --git a/nms-patches/PathfinderGoalVillagerFarm.patch b/nms-patches/PathfinderGoalVillagerFarm.patch
deleted file mode 100644
index 2600cea..0000000
--- a/nms-patches/PathfinderGoalVillagerFarm.patch
+++ /dev/null
@@ -1,48 +0,0 @@
---- a/net/minecraft/server/PathfinderGoalVillagerFarm.java
-+++ b/net/minecraft/server/PathfinderGoalVillagerFarm.java
-@@ -40,7 +40,11 @@
-             Block block = iblockdata.getBlock();
- 
-             if (this.f == 0 && block instanceof BlockCrops && ((BlockCrops) block).z(iblockdata)) {
--                world.setAir(blockposition, true);
-+                // CraftBukkit start
-+                if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.c, blockposition, Blocks.AIR, 0).isCancelled()) {
-+                    world.setAir(blockposition, true);
-+                }
-+                // CraftBukkit end
-             } else if (this.f == 1 && iblockdata.getMaterial() == Material.AIR) {
-                 InventorySubcontainer inventorysubcontainer = this.c.dq();
- 
-@@ -49,19 +53,28 @@
-                     boolean flag = false;
- 
-                     if (!itemstack.isEmpty()) {
-+                        // CraftBukkit start
-+                        Block planted = null;
-                         if (itemstack.getItem() == Items.WHEAT_SEEDS) {
--                            world.setTypeAndData(blockposition, Blocks.WHEAT.getBlockData(), 3);
-+                            planted = Blocks.WHEAT;
-                             flag = true;
-                         } else if (itemstack.getItem() == Items.POTATO) {
--                            world.setTypeAndData(blockposition, Blocks.POTATOES.getBlockData(), 3);
-+                            planted = Blocks.POTATOES;
-                             flag = true;
-                         } else if (itemstack.getItem() == Items.CARROT) {
--                            world.setTypeAndData(blockposition, Blocks.CARROTS.getBlockData(), 3);
-+                            planted = Blocks.CARROTS;
-                             flag = true;
-                         } else if (itemstack.getItem() == Items.BEETROOT_SEEDS) {
--                            world.setTypeAndData(blockposition, Blocks.BEETROOT.getBlockData(), 3);
-+                            planted = Blocks.BEETROOT;
-                             flag = true;
-                         }
-+
-+                        if (planted != null && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.c, blockposition, planted, 0).isCancelled()) {
-+                            world.setTypeAndData(blockposition, planted.getBlockData(), 3);
-+                        } else {
-+                            flag = false;
-+                        }
-+                        // CraftBukkit end
-                     }
- 
-                     if (flag) {
diff --git a/nms-patches/PlayerChunk.patch b/nms-patches/PlayerChunk.patch
deleted file mode 100644
index 2dc8864..0000000
--- a/nms-patches/PlayerChunk.patch
+++ /dev/null
@@ -1,107 +0,0 @@
---- a/net/minecraft/server/PlayerChunk.java
-+++ b/net/minecraft/server/PlayerChunk.java
-@@ -8,32 +8,48 @@
- import javax.annotation.Nullable;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
-+// CraftBukkit Start
-+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
-+// CraftBukkit end
- 
- public class PlayerChunk {
- 
-     private static final Logger a = LogManager.getLogger();
-     private final PlayerChunkMap playerChunkMap;
--    private final List<EntityPlayer> c = Lists.newArrayList();
-+    public final List<EntityPlayer> c = Lists.newArrayList(); // CraftBukkit - public
-     private final ChunkCoordIntPair location;
-     private final short[] dirtyBlocks = new short[64];
-     @Nullable
--    private Chunk chunk;
-+    public Chunk chunk; // CraftBukkit - public
-     private int dirtyCount;
-     private int h;
-     private long i;
-     private boolean done;
- 
-+    // CraftBukkit start - add fields
-+    private boolean loadInProgress = false;
-+    private Runnable loadedRunnable = new Runnable() {
-+        public void run() {
-+            loadInProgress = false;
-+            PlayerChunk.this.chunk = PlayerChunk.this.playerChunkMap.getWorld().getChunkProviderServer().getOrLoadChunkAt(location.x, location.z);
-+        }
-+    };
-+    // CraftBukkit end
-+
-     public PlayerChunk(PlayerChunkMap playerchunkmap, int i, int j) {
-         this.playerChunkMap = playerchunkmap;
-         this.location = new ChunkCoordIntPair(i, j);
--        this.chunk = playerchunkmap.getWorld().getChunkProviderServer().getOrLoadChunkAt(i, j);
-+        // CraftBukkit start
-+        loadInProgress = true;
-+        this.chunk = playerchunkmap.getWorld().getChunkProviderServer().getChunkAt(i, j, loadedRunnable, false);
-+        // CraftBukkit end
-     }
- 
-     public ChunkCoordIntPair a() {
-         return this.location;
-     }
- 
--    public void a(EntityPlayer entityplayer) {
-+    public void a(final EntityPlayer entityplayer) { // CraftBukkit - added final to argument
-         if (this.c.contains(entityplayer)) {
-             PlayerChunk.a.debug("Failed to add player. {} already is in chunk {}, {}", entityplayer, Integer.valueOf(this.location.x), Integer.valueOf(this.location.z));
-         } else {
-@@ -42,15 +58,32 @@
-             }
- 
-             this.c.add(entityplayer);
-+            // CraftBukkit start - use async chunk io
-+            // if (this.done) {
-+            //     this.sendChunk(entityplayer);
-+            // }
-             if (this.done) {
-                 this.sendChunk(entityplayer);
-             }
-+            // CraftBukkit end
- 
-         }
-     }
- 
-     public void b(EntityPlayer entityplayer) {
-         if (this.c.contains(entityplayer)) {
-+            // CraftBukkit start - If we haven't loaded yet don't load the chunk just so we can clean it up
-+            if (!this.done) {
-+                this.c.remove(entityplayer);
-+
-+                if (this.c.isEmpty()) {
-+                    ChunkIOExecutor.dropQueuedChunkLoad(this.playerChunkMap.getWorld(), this.location.x, this.location.z, this.loadedRunnable);
-+                    this.playerChunkMap.b(this);
-+                }
-+
-+                return;
-+            }
-+            // CraftBukkit end
-             if (this.done) {
-                 entityplayer.playerConnection.sendPacket(new PacketPlayOutUnloadChunk(this.location.x, this.location.z));
-             }
-@@ -67,11 +100,18 @@
-         if (this.chunk != null) {
-             return true;
-         } else {
-+            /* CraftBukkit start
-             if (flag) {
-                 this.chunk = this.playerChunkMap.getWorld().getChunkProviderServer().getChunkAt(this.location.x, this.location.z);
-             } else {
-                 this.chunk = this.playerChunkMap.getWorld().getChunkProviderServer().getOrLoadChunkAt(this.location.x, this.location.z);
-             }
-+            */
-+            if (!loadInProgress) {
-+                loadInProgress = true;
-+                this.chunk = playerChunkMap.getWorld().getChunkProviderServer().getChunkAt(this.location.x, this.location.z, loadedRunnable, flag);
-+            }
-+            // CraftBukkit end
- 
-             return this.chunk != null;
-         }
diff --git a/nms-patches/PlayerChunkMap.patch b/nms-patches/PlayerChunkMap.patch
deleted file mode 100644
index 37c4c47..0000000
--- a/nms-patches/PlayerChunkMap.patch
+++ /dev/null
@@ -1,152 +0,0 @@
---- a/net/minecraft/server/PlayerChunkMap.java
-+++ b/net/minecraft/server/PlayerChunkMap.java
-@@ -15,6 +15,10 @@
- import java.util.Set;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import java.util.LinkedList;
-+// CraftBukkit end
-+
- public class PlayerChunkMap {
- 
-     private static final Predicate<EntityPlayer> a = new Predicate() {
-@@ -46,6 +50,7 @@
-     private long k;
-     private boolean l = true;
-     private boolean m = true;
-+    private boolean wasNotEmpty; // CraftBukkit - add field
- 
-     public PlayerChunkMap(WorldServer worldserver) {
-         this.world = worldserver;
-@@ -169,7 +174,11 @@
-                             break;
-                         }
-                     }
-+                // CraftBukkit start - SPIGOT-2891: remove once chunk has been provided
-+                } else {
-+                    iterator1.remove();
-                 }
-+                // CraftBukkit end
-             }
-         }
- 
-@@ -231,6 +240,16 @@
-         return playerchunk;
-     }
- 
-+    // CraftBukkit start - add method
-+    public final boolean isChunkInUse(int x, int z) {
-+        PlayerChunk pi = getChunk(x, z);
-+        if (pi != null) {
-+            return (pi.c.size() > 0);
-+        }
-+        return false;
-+    }
-+    // CraftBukkit end
-+
-     public void flagDirty(BlockPosition blockposition) {
-         int i = blockposition.getX() >> 4;
-         int j = blockposition.getZ() >> 4;
-@@ -249,12 +268,22 @@
-         entityplayer.d = entityplayer.locX;
-         entityplayer.e = entityplayer.locZ;
- 
-+
-+        // CraftBukkit start - Load nearby chunks first
-+        List<ChunkCoordIntPair> chunkList = new LinkedList<ChunkCoordIntPair>();
-+
-         for (int k = i - this.j; k <= i + this.j; ++k) {
-             for (int l = j - this.j; l <= j + this.j; ++l) {
--                this.c(k, l).a(entityplayer);
-+                chunkList.add(new ChunkCoordIntPair(k, l));
-             }
-         }
- 
-+        Collections.sort(chunkList, new ChunkCoordComparator(entityplayer));
-+        for (ChunkCoordIntPair pair : chunkList) {
-+            this.c(pair.x, pair.z).a(entityplayer);
-+        }
-+        // CraftBukkit end
-+
-         this.managedPlayers.add(entityplayer);
-         this.e();
-     }
-@@ -298,11 +327,14 @@
-             int j1 = i - k;
-             int k1 = j - l;
- 
-+            List<ChunkCoordIntPair> chunksToLoad = new LinkedList<ChunkCoordIntPair>(); // CraftBukkit
-+
-             if (j1 != 0 || k1 != 0) {
-                 for (int l1 = i - i1; l1 <= i + i1; ++l1) {
-                     for (int i2 = j - i1; i2 <= j + i1; ++i2) {
-                         if (!this.a(l1, i2, k, l, i1)) {
--                            this.c(l1, i2).a(entityplayer);
-+                            // this.c(l1, i2).a(entityplayer);
-+                            chunksToLoad.add(new ChunkCoordIntPair(l1, i2)); // CraftBukkit
-                         }
- 
-                         if (!this.a(l1 - j1, i2 - k1, i, j, i1)) {
-@@ -318,6 +350,13 @@
-                 entityplayer.d = entityplayer.locX;
-                 entityplayer.e = entityplayer.locZ;
-                 this.e();
-+
-+                // CraftBukkit start - send nearest chunks first
-+                Collections.sort(chunksToLoad, new ChunkCoordComparator(entityplayer));
-+                for (ChunkCoordIntPair pair : chunksToLoad) {
-+                    this.c(pair.x, pair.z).a(entityplayer);
-+                }
-+                // CraftBukkit end
-             }
-         }
-     }
-@@ -402,4 +441,47 @@
-         }
- 
-     }
-+
-+    // CraftBukkit start - Sorter to load nearby chunks first
-+    private static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair> {
-+        private int x;
-+        private int z;
-+
-+        public ChunkCoordComparator (EntityPlayer entityplayer) {
-+            x = (int) entityplayer.locX >> 4;
-+            z = (int) entityplayer.locZ >> 4;
-+        }
-+
-+        public int compare(ChunkCoordIntPair a, ChunkCoordIntPair b) {
-+            if (a.equals(b)) {
-+                return 0;
-+            }
-+
-+            // Subtract current position to set center point
-+            int ax = a.x - this.x;
-+            int az = a.z - this.z;
-+            int bx = b.x - this.x;
-+            int bz = b.z - this.z;
-+
-+            int result = ((ax - bx) * (ax + bx)) + ((az - bz) * (az + bz));
-+            if (result != 0) {
-+                return result;
-+            }
-+
-+            if (ax < 0) {
-+                if (bx < 0) {
-+                    return bz - az;
-+                } else {
-+                    return -1;
-+                }
-+            } else {
-+                if (bx < 0) {
-+                    return 1;
-+                } else {
-+                    return az - bz;
-+                }
-+            }
-+        }
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/PlayerConnection.patch b/nms-patches/PlayerConnection.patch
deleted file mode 100644
index fa397aa..0000000
--- a/nms-patches/PlayerConnection.patch
+++ /dev/null
@@ -1,1693 +0,0 @@
---- a/net/minecraft/server/PlayerConnection.java
-+++ b/net/minecraft/server/PlayerConnection.java
-@@ -15,6 +15,49 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import java.util.HashSet;
-+import java.util.concurrent.ExecutionException;
-+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.entity.CraftPlayer;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.craftbukkit.util.CraftChatMessage;
-+import org.bukkit.craftbukkit.util.LazyPlayerSet;
-+import org.bukkit.craftbukkit.util.Waitable;
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.Event;
-+import org.bukkit.event.block.Action;
-+import org.bukkit.event.block.SignChangeEvent;
-+import org.bukkit.event.inventory.ClickType;
-+import org.bukkit.event.inventory.CraftItemEvent;
-+import org.bukkit.event.inventory.InventoryAction;
-+import org.bukkit.event.inventory.InventoryClickEvent;
-+import org.bukkit.event.inventory.InventoryCreativeEvent;
-+import org.bukkit.event.inventory.InventoryType.SlotType;
-+import org.bukkit.event.player.AsyncPlayerChatEvent;
-+import org.bukkit.event.player.PlayerAnimationEvent;
-+import org.bukkit.event.player.PlayerChatEvent;
-+import org.bukkit.event.player.PlayerCommandPreprocessEvent;
-+import org.bukkit.event.player.PlayerInteractAtEntityEvent;
-+import org.bukkit.event.player.PlayerInteractEntityEvent;
-+import org.bukkit.event.player.PlayerItemHeldEvent;
-+import org.bukkit.event.player.PlayerKickEvent;
-+import org.bukkit.event.player.PlayerMoveEvent;
-+import org.bukkit.event.player.PlayerResourcePackStatusEvent;
-+import org.bukkit.event.player.PlayerSwapHandItemsEvent;
-+import org.bukkit.event.player.PlayerTeleportEvent;
-+import org.bukkit.event.player.PlayerToggleFlightEvent;
-+import org.bukkit.event.player.PlayerToggleSneakEvent;
-+import org.bukkit.event.player.PlayerToggleSprintEvent;
-+import org.bukkit.inventory.CraftingInventory;
-+import org.bukkit.inventory.EquipmentSlot;
-+import org.bukkit.inventory.InventoryView;
-+import org.bukkit.util.NumberConversions;
-+// CraftBukkit end
-+
- public class PlayerConnection implements PacketListenerPlayIn, ITickable {
- 
-     private static final Logger LOGGER = LogManager.getLogger();
-@@ -25,7 +68,10 @@
-     private int f;
-     private long g;
-     private long h;
--    private int chatThrottle;
-+    // CraftBukkit start - multithreaded fields
-+    private volatile int chatThrottle;
-+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle");
-+    // CraftBukkit end
-     private int j;
-     private final IntHashMap<Short> k = new IntHashMap();
-     private double l;
-@@ -58,7 +104,34 @@
-         networkmanager.setPacketListener(this);
-         this.player = entityplayer;
-         entityplayer.playerConnection = this;
-+
-+        // CraftBukkit start - add fields and methods
-+        this.server = minecraftserver.server;
-+    }
-+
-+    private final org.bukkit.craftbukkit.CraftServer server;
-+    private boolean processedDisconnect;
-+    private int lastTick = MinecraftServer.currentTick;
-+    private int allowedPlayerTicks = 1;
-+    private int lastDropTick = MinecraftServer.currentTick;
-+    private int lastBookTick  = MinecraftServer.currentTick;
-+    private int dropCount = 0;
-+    private static final int SURVIVAL_PLACE_DISTANCE_SQUARED = 6 * 6;
-+    private static final int CREATIVE_PLACE_DISTANCE_SQUARED = 7 * 7;
-+
-+    // Get position of last block hit for BlockDamageLevel.STOPPED
-+    private double lastPosX = Double.MAX_VALUE;
-+    private double lastPosY = Double.MAX_VALUE;
-+    private double lastPosZ = Double.MAX_VALUE;
-+    private float lastPitch = Float.MAX_VALUE;
-+    private float lastYaw = Float.MAX_VALUE;
-+    private boolean justTeleported = false;
-+
-+    public CraftPlayer getPlayer() {
-+        return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
-     }
-+    private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 55, 59, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
-+    // CraftBukkit end
- 
-     public void e() {
-         this.syncPosition();
-@@ -110,15 +183,21 @@
-         }
- 
-         this.minecraftServer.methodProfiler.b();
-+        // CraftBukkit start
-+        for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
-+        /* Use thread-safe field access instead
-         if (this.chatThrottle > 0) {
-             --this.chatThrottle;
-         }
-+        */
-+        // CraftBukkit end
- 
-         if (this.j > 0) {
-             --this.j;
-         }
- 
-         if (this.player.J() > 0L && this.minecraftServer.getIdleTimeout() > 0 && MinecraftServer.aw() - this.player.J() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
-+            this.player.resetIdleTimer(); // CraftBukkit - SPIGOT-854
-             this.disconnect(new ChatMessage("multiplayer.disconnect.idling", new Object[0]));
-         }
- 
-@@ -137,18 +216,48 @@
-         return this.networkManager;
-     }
- 
--    public void disconnect(final IChatBaseComponent ichatbasecomponent) {
--        this.networkManager.sendPacket(new PacketPlayOutKickDisconnect(ichatbasecomponent), new GenericFutureListener() {
--            public void operationComplete(Future<? super Void> future) throws Exception {
--                PlayerConnection.this.networkManager.close(ichatbasecomponent);
-+    // CraftBukkit start
-+    @Deprecated
-+    public void disconnect(IChatBaseComponent ichatbasecomponent) {
-+        disconnect(CraftChatMessage.fromComponent(ichatbasecomponent, EnumChatFormat.WHITE));
-+    }
-+    // CraftBukkit end
-+
-+    public void disconnect(String s) {
-+        // CraftBukkit start - fire PlayerKickEvent
-+        if (this.processedDisconnect) {
-+            return;
-+        }
-+        String leaveMessage = EnumChatFormat.YELLOW + this.player.getName() + " left the game.";
-+
-+        PlayerKickEvent event = new PlayerKickEvent(this.server.getPlayer(this.player), s, leaveMessage);
-+
-+        if (this.server.getServer().isRunning()) {
-+            this.server.getPluginManager().callEvent(event);
-+        }
-+
-+        if (event.isCancelled()) {
-+            // Do not kick the player
-+            return;
-+        }
-+        // Send the possibly modified leave message
-+        s = event.getReason();
-+        // CraftBukkit end
-+        final ChatComponentText chatcomponenttext = new ChatComponentText(s);
-+
-+        this.networkManager.sendPacket(new PacketPlayOutKickDisconnect(chatcomponenttext), new GenericFutureListener() {
-+            public void operationComplete(Future future) throws Exception { // CraftBukkit - decompile error
-+                PlayerConnection.this.networkManager.close(chatcomponenttext);
-             }
-         }, new GenericFutureListener[0]);
-+        this.a(chatcomponenttext); // CraftBukkit - fire quit instantly
-         this.networkManager.stopReading();
--        Futures.getUnchecked(this.minecraftServer.postToMainThread(new Runnable() {
-+        // CraftBukkit - Don't wait
-+        this.minecraftServer.postToMainThread(new Runnable() {
-             public void run() {
-                 PlayerConnection.this.networkManager.handleDisconnection();
-             }
--        }));
-+        });
-     }
- 
-     public void a(PacketPlayInSteerVehicle packetplayinsteervehicle) {
-@@ -187,7 +296,34 @@
-                 double d9 = entity.motX * entity.motX + entity.motY * entity.motY + entity.motZ * entity.motZ;
-                 double d10 = d6 * d6 + d7 * d7 + d8 * d8;
- 
--                if (d10 - d9 > 100.0D && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))) {
-+
-+                // CraftBukkit start - handle custom speeds and skipped ticks
-+                this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
-+                this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
-+                this.lastTick = (int) (System.currentTimeMillis() / 50);
-+
-+                ++this.receivedMovePackets;
-+                int i = this.receivedMovePackets - this.processedMovePackets;
-+                if (i > Math.max(this.allowedPlayerTicks, 5)) {
-+                    PlayerConnection.LOGGER.debug(this.player.getName() + " is sending move packets too frequently (" + i + " packets since last tick)");
-+                    i = 1;
-+                }
-+
-+                if (d10 > 0) {
-+                    allowedPlayerTicks -= 1;
-+                } else {
-+                    allowedPlayerTicks = 20;
-+                }
-+                float speed;
-+                if (player.abilities.isFlying) {
-+                    speed = player.abilities.flySpeed * 20f;
-+                } else {
-+                    speed = player.abilities.walkSpeed * 10f;
-+                }
-+                speed *= 2f; // TODO: Get the speed of the vehicle instead of the player
-+
-+                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (10.0F * (float) i * speed), 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))) {
-+                // CraftBukkit end
-                     PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getName(), this.player.getName(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8));
-                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
-                     return;
-@@ -225,6 +361,62 @@
-                     return;
-                 }
- 
-+                // CraftBukkit start - fire PlayerMoveEvent
-+                Player player = this.getPlayer();
-+                Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
-+                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
-+
-+                // If the packet contains movement information then we update the To location with the correct XYZ.
-+                to.setX(packetplayinvehiclemove.getX());
-+                to.setY(packetplayinvehiclemove.getY());
-+                to.setZ(packetplayinvehiclemove.getZ());
-+
-+
-+                // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
-+                to.setYaw(packetplayinvehiclemove.getYaw());
-+                to.setPitch(packetplayinvehiclemove.getPitch());
-+
-+                // Prevent 40 event-calls for less than a single pixel of movement >.>
-+                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
-+                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
-+
-+                if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isFrozen()) {
-+                    this.lastPosX = to.getX();
-+                    this.lastPosY = to.getY();
-+                    this.lastPosZ = to.getZ();
-+                    this.lastYaw = to.getYaw();
-+                    this.lastPitch = to.getPitch();
-+
-+                    // Skip the first time we do this
-+                    if (from.getX() != Double.MAX_VALUE) {
-+                        Location oldTo = to.clone();
-+                        PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
-+                        this.server.getPluginManager().callEvent(event);
-+
-+                        // If the event is cancelled we move the player back to their old location.
-+                        if (event.isCancelled()) {
-+                            teleport(from);
-+                            return;
-+                        }
-+
-+                        // If a Plugin has changed the To destination then we teleport the Player
-+                        // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
-+                        // We only do this if the Event was not cancelled.
-+                        if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
-+                            this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
-+                            return;
-+                        }
-+
-+                        // Check to see if the Players Location has some how changed during the call of the event.
-+                        // This can happen due to a plugin teleporting the player instead of using .setTo()
-+                        if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
-+                            this.justTeleported = false;
-+                            return;
-+                        }
-+                    }
-+                }
-+                // CraftBukkit end
-+
-                 this.minecraftServer.getPlayerList().d(this.player);
-                 this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
-                 this.D = d11 >= -0.03125D && !this.minecraftServer.getAllowFlight() && !worldserver.c(entity.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D));
-@@ -283,7 +475,7 @@
-         } else {
-             WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
- 
--            if (!this.player.viewingCredits) {
-+            if (!this.player.viewingCredits && !this.player.isFrozen()) { // CraftBukkit
-                 if (this.e == 0) {
-                     this.syncPosition();
-                 }
-@@ -293,13 +485,21 @@
-                         this.A = this.e;
-                         this.a(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
-                     }
--
-+                    this.allowedPlayerTicks = 20; // CraftBukkit
-                 } else {
-                     this.A = this.e;
-                     if (this.player.isPassenger()) {
-                         this.player.setLocation(this.player.locX, this.player.locY, this.player.locZ, packetplayinflying.a(this.player.yaw), packetplayinflying.b(this.player.pitch));
-                         this.minecraftServer.getPlayerList().d(this.player);
-+                        this.allowedPlayerTicks = 20; // CraftBukkit
-                     } else {
-+                        // CraftBukkit - Make sure the move is valid but then reset it for plugins to modify
-+                        double prevX = player.locX;
-+                        double prevY = player.locY;
-+                        double prevZ = player.locZ;
-+                        float prevYaw = player.yaw;
-+                        float prevPitch = player.pitch;
-+                        // CraftBukkit end
-                         double d0 = this.player.locX;
-                         double d1 = this.player.locY;
-                         double d2 = this.player.locZ;
-@@ -324,15 +524,33 @@
-                             ++this.receivedMovePackets;
-                             int i = this.receivedMovePackets - this.processedMovePackets;
- 
--                            if (i > 5) {
-+                            // CraftBukkit start - handle custom speeds and skipped ticks
-+                            this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
-+                            this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
-+                            this.lastTick = (int) (System.currentTimeMillis() / 50);
-+
-+                            if (i > Math.max(this.allowedPlayerTicks, 5)) {
-                                 PlayerConnection.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getName(), Integer.valueOf(i));
-                                 i = 1;
-                             }
- 
-+                            if (packetplayinflying.hasLook || d11 > 0) {
-+                                allowedPlayerTicks -= 1;
-+                            } else {
-+                                allowedPlayerTicks = 20;
-+                            }
-+                            float speed;
-+                            if (player.abilities.isFlying) {
-+                                speed = player.abilities.flySpeed * 20f;
-+                            } else {
-+                                speed = player.abilities.walkSpeed * 10f;
-+                            }
-+
-                             if (!this.player.L() && (!this.player.x().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.cP())) {
-                                 float f2 = this.player.cP() ? 300.0F : 100.0F;
- 
--                                if (d11 - d10 > (double) (f2 * (float) i) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))) {
-+                                if (d11 - d10 > Math.max(f2, Math.pow((double) (10.0F * (float) i * speed), 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))) {
-+                                // CraftBukkit end
-                                     PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getName(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9));
-                                     this.a(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch);
-                                     return;
-@@ -378,6 +596,69 @@
-                                 }
-                             }
- 
-+                            // CraftBukkit start - fire PlayerMoveEvent
-+                            // Rest to old location first
-+                            this.player.setLocation(prevX, prevY, prevZ, prevYaw, prevPitch);
-+
-+                            Player player = this.getPlayer();
-+                            Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
-+                            Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
-+
-+                            // If the packet contains movement information then we update the To location with the correct XYZ.
-+                            if (packetplayinflying.hasPos) {
-+                                to.setX(packetplayinflying.x);
-+                                to.setY(packetplayinflying.y);
-+                                to.setZ(packetplayinflying.z);
-+                            }
-+
-+                            // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
-+                            if (packetplayinflying.hasLook) {
-+                                to.setYaw(packetplayinflying.yaw);
-+                                to.setPitch(packetplayinflying.pitch);
-+                            }
-+
-+                            // Prevent 40 event-calls for less than a single pixel of movement >.>
-+                            double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
-+                            float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
-+
-+                            if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isFrozen()) {
-+                                this.lastPosX = to.getX();
-+                                this.lastPosY = to.getY();
-+                                this.lastPosZ = to.getZ();
-+                                this.lastYaw = to.getYaw();
-+                                this.lastPitch = to.getPitch();
-+
-+                                // Skip the first time we do this
-+                                if (from.getX() != Double.MAX_VALUE) {
-+                                    Location oldTo = to.clone();
-+                                    PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
-+                                    this.server.getPluginManager().callEvent(event);
-+
-+                                    // If the event is cancelled we move the player back to their old location.
-+                                    if (event.isCancelled()) {
-+                                        teleport(from);
-+                                        return;
-+                                    }
-+
-+                                    // If a Plugin has changed the To destination then we teleport the Player
-+                                    // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
-+                                    // We only do this if the Event was not cancelled.
-+                                    if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
-+                                        this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
-+                                        return;
-+                                    }
-+
-+                                    // Check to see if the Players Location has some how changed during the call of the event.
-+                                    // This can happen due to a plugin teleporting the player instead of using .setTo()
-+                                    if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
-+                                        this.justTeleported = false;
-+                                        return;
-+                                    }
-+                                }
-+                            }
-+                            this.player.setLocation(d4, d5, d6, f, f1); // Copied from above
-+                            // CraftBukkit end
-+
-                             this.B = d12 >= -0.03125D;
-                             this.B &= !this.minecraftServer.getAllowFlight() && !this.player.abilities.canFly;
-                             this.B &= !this.player.hasEffect(MobEffects.LEVITATION) && !this.player.cP() && !worldserver.c(this.player.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D));
-@@ -395,10 +676,76 @@
-     }
- 
-     public void a(double d0, double d1, double d2, float f, float f1) {
--        this.a(d0, d1, d2, f, f1, Collections.emptySet());
-+        this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
-+    }
-+
-+    // CraftBukkit start - Delegate to teleport(Location)
-+    public void a(double d0, double d1, double d2, float f, float f1, PlayerTeleportEvent.TeleportCause cause) {
-+        this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet(), cause);
-     }
- 
-     public void a(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
-+        this.a(d0, d1, d2, f, f1, set, PlayerTeleportEvent.TeleportCause.UNKNOWN);
-+    }
-+
-+    public void a(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set, PlayerTeleportEvent.TeleportCause cause) {
-+        Player player = this.getPlayer();
-+        Location from = player.getLocation();
-+
-+        double x = d0;
-+        double y = d1;
-+        double z = d2;
-+        float yaw = f;
-+        float pitch = f1;
-+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X)) {
-+            x += from.getX();
-+        }
-+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y)) {
-+            y += from.getY();
-+        }
-+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z)) {
-+            z += from.getZ();
-+        }
-+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y_ROT)) {
-+            yaw += from.getYaw();
-+        }
-+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X_ROT)) {
-+            pitch += from.getPitch();
-+        }
-+
-+
-+        Location to = new Location(this.getPlayer().getWorld(), x, y, z, yaw, pitch);
-+        PlayerTeleportEvent event = new PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
-+        this.server.getPluginManager().callEvent(event);
-+
-+        if (event.isCancelled() || !to.equals(event.getTo())) {
-+            set.clear(); // Can't relative teleport
-+            to = event.isCancelled() ? event.getFrom() : event.getTo();
-+            d0 = to.getX();
-+            d1 = to.getY();
-+            d2 = to.getZ();
-+            f = to.getYaw();
-+            f1 = to.getPitch();
-+        }
-+
-+        this.internalTeleport(d0, d1, d2, f, f1, set);
-+    }
-+
-+    public void teleport(Location dest) {
-+        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
-+    }
-+
-+    private void internalTeleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
-+        // CraftBukkit start
-+        if (Float.isNaN(f)) {
-+            f = 0;
-+        }
-+        if (Float.isNaN(f1)) {
-+            f1 = 0;
-+        }
-+
-+        this.justTeleported = true;
-+        // CraftBukkit end
-         double d3 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X) ? this.player.locX : 0.0D;
-         double d4 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y) ? this.player.locY : 0.0D;
-         double d5 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z) ? this.player.locZ : 0.0D;
-@@ -415,6 +762,14 @@
-             f3 = f1 + this.player.pitch;
-         }
- 
-+        // CraftBukkit start - update last location
-+        this.lastPosX = this.teleportPos.x;
-+        this.lastPosY = this.teleportPos.y;
-+        this.lastPosZ = this.teleportPos.z;
-+        this.lastYaw = f2;
-+        this.lastPitch = f3;
-+        // CraftBukkit end
-+
-         if (++this.teleportAwait == Integer.MAX_VALUE) {
-             this.teleportAwait = 0;
-         }
-@@ -426,6 +781,7 @@
- 
-     public void a(PacketPlayInBlockDig packetplayinblockdig) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinblockdig, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
-         BlockPosition blockposition = packetplayinblockdig.a();
- 
-@@ -435,7 +791,15 @@
-             if (!this.player.isSpectator()) {
-                 ItemStack itemstack = this.player.b(EnumHand.OFF_HAND);
- 
--                this.player.a(EnumHand.OFF_HAND, this.player.b(EnumHand.MAIN_HAND));
-+                // CraftBukkit start
-+                PlayerSwapHandItemsEvent swapItemsEvent = new PlayerSwapHandItemsEvent(getPlayer(), CraftItemStack.asBukkitCopy(itemstack), CraftItemStack.asBukkitCopy(this.player.b(EnumHand.MAIN_HAND)));
-+                this.server.getPluginManager().callEvent(swapItemsEvent);
-+                if (swapItemsEvent.isCancelled()) {
-+                    return;
-+                }
-+                itemstack = CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem());
-+                this.player.a(EnumHand.OFF_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getOffHandItem()));
-+                // CraftBukkit end
-                 this.player.a(EnumHand.MAIN_HAND, itemstack);
-             }
- 
-@@ -443,6 +807,21 @@
- 
-         case DROP_ITEM:
-             if (!this.player.isSpectator()) {
-+                // limit how quickly items can be dropped
-+                // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
-+                if (this.lastDropTick != MinecraftServer.currentTick) {
-+                    this.dropCount = 0;
-+                    this.lastDropTick = MinecraftServer.currentTick;
-+                } else {
-+                    // Else we increment the drop count and check the amount.
-+                    this.dropCount++;
-+                    if (this.dropCount >= 20) {
-+                        LOGGER.warn(this.player.getName() + " dropped their items too quickly!");
-+                        this.disconnect("You dropped your items too quickly (Hacking?)");
-+                        return;
-+                    }
-+                }
-+                // CraftBukkit end
-                 this.player.a(false);
-             }
- 
-@@ -476,7 +855,15 @@
-                     if (!this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
-                         this.player.playerInteractManager.a(blockposition, packetplayinblockdig.b());
-                     } else {
-+                        // CraftBukkit start - fire PlayerInteractEvent
-+                        CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, packetplayinblockdig.b(), this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
-                         this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
-+                        // Update any tile entity data for this block
-+                        TileEntity tileentity = worldserver.getTileEntity(blockposition);
-+                        if (tileentity != null) {
-+                            this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
-+                        }
-+                        // CraftBukkit end
-                     }
-                 } else {
-                     if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK) {
-@@ -496,10 +883,12 @@
-         default:
-             throw new IllegalArgumentException("Invalid player action");
-         }
-+        // CraftBukkit end
-     }
- 
-     public void a(PacketPlayInUseItem packetplayinuseitem) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinuseitem, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
-         EnumHand enumhand = packetplayinuseitem.c();
-         ItemStack itemstack = this.player.b(enumhand);
-@@ -513,6 +902,13 @@
-             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
-             this.player.playerConnection.sendPacket(new PacketPlayOutChat(chatmessage, ChatMessageType.GAME_INFO));
-         } else if (this.teleportPos == null && this.player.d((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && !this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
-+            // CraftBukkit start - Check if we can actually do something over this large a distance
-+            Location eyeLoc = this.getPlayer().getEyeLocation();
-+            double reachDistance = NumberConversions.square(eyeLoc.getX() - blockposition.getX()) + NumberConversions.square(eyeLoc.getY() - blockposition.getY()) + NumberConversions.square(eyeLoc.getZ() - blockposition.getZ());
-+            if (reachDistance > (this.getPlayer().getGameMode() == org.bukkit.GameMode.CREATIVE ? CREATIVE_PLACE_DISTANCE_SQUARED : SURVIVAL_PLACE_DISTANCE_SQUARED)) {
-+                return;
-+            }
-+            // CraftBukkit end
-             this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand, blockposition, enumdirection, packetplayinuseitem.d(), packetplayinuseitem.e(), packetplayinuseitem.f());
-         }
- 
-@@ -522,13 +918,52 @@
- 
-     public void a(PacketPlayInBlockPlace packetplayinblockplace) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinblockplace, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
-         EnumHand enumhand = packetplayinblockplace.a();
-         ItemStack itemstack = this.player.b(enumhand);
- 
-         this.player.resetIdleTimer();
-         if (!itemstack.isEmpty()) {
--            this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand);
-+            // CraftBukkit start
-+            // Raytrace to look for 'rogue armswings'
-+            float f1 = this.player.pitch;
-+            float f2 = this.player.yaw;
-+            double d0 = this.player.locX;
-+            double d1 = this.player.locY + (double) this.player.getHeadHeight();
-+            double d2 = this.player.locZ;
-+            Vec3D vec3d = new Vec3D(d0, d1, d2);
-+
-+            float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
-+            float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
-+            float f5 = -MathHelper.cos(-f1 * 0.017453292F);
-+            float f6 = MathHelper.sin(-f1 * 0.017453292F);
-+            float f7 = f4 * f5;
-+            float f8 = f3 * f5;
-+            double d3 = player.playerInteractManager.getGameMode()== EnumGamemode.CREATIVE ? 5.0D : 4.5D;
-+            Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
-+            MovingObjectPosition movingobjectposition = this.player.world.rayTrace(vec3d, vec3d1, false);
-+
-+            boolean cancelled;
-+            if (movingobjectposition == null || movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-+                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack, enumhand);
-+                cancelled = event.useItemInHand() == Event.Result.DENY;
-+            } else {
-+                if (player.playerInteractManager.firedInteract) {
-+                    player.playerInteractManager.firedInteract = false;
-+                    cancelled = player.playerInteractManager.interactResult;
-+                } else {
-+                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, true, enumhand);
-+                    cancelled = event.useItemInHand() == Event.Result.DENY;
-+                }
-+            }
-+
-+            if (cancelled) {
-+                this.player.getBukkitEntity().updateInventory(); // SPIGOT-2524
-+            } else {
-+                this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand);
-+            }
-+            // CraftBukkit end
-         }
-     }
- 
-@@ -539,8 +974,8 @@
-             WorldServer[] aworldserver = this.minecraftServer.worldServer;
-             int i = aworldserver.length;
- 
--            for (int j = 0; j < i; ++j) {
--                WorldServer worldserver = aworldserver[j];
-+            // CraftBukkit - use the worlds array list
-+            for (WorldServer worldserver : minecraftServer.worlds) {
- 
-                 if (worldserver != null) {
-                     entity = packetplayinspectate.a(worldserver);
-@@ -553,6 +988,8 @@
-             if (entity != null) {
-                 this.player.setSpectatorTarget(this.player);
-                 this.player.stopRiding();
-+
-+                /* CraftBukkit start - replace with bukkit handling for multi-world
-                 if (entity.world == this.player.world) {
-                     this.player.enderTeleportTo(entity.locX, entity.locY, entity.locZ);
-                 } else {
-@@ -578,12 +1015,20 @@
-                     this.minecraftServer.getPlayerList().b(this.player, worldserver2);
-                     this.minecraftServer.getPlayerList().updateClient(this.player);
-                 }
-+                */
-+                this.player.getBukkitEntity().teleport(entity.getBukkitEntity(), PlayerTeleportEvent.TeleportCause.SPECTATE);
-+                // CraftBukkit end
-             }
-         }
- 
-     }
- 
--    public void a(PacketPlayInResourcePackStatus packetplayinresourcepackstatus) {}
-+    // CraftBukkit start
-+    public void a(PacketPlayInResourcePackStatus packetplayinresourcepackstatus) {
-+        PlayerConnectionUtils.ensureMainThread(packetplayinresourcepackstatus, this, this.player.x());
-+        this.server.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getPlayer(), PlayerResourcePackStatusEvent.Status.values()[packetplayinresourcepackstatus.status.ordinal()]));
-+    }
-+    // CraftBukkit end
- 
-     public void a(PacketPlayInBoatMove packetplayinboatmove) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinboatmove, this, this.player.x());
-@@ -596,14 +1041,29 @@
-     }
- 
-     public void a(IChatBaseComponent ichatbasecomponent) {
-+        // CraftBukkit start - Rarely it would send a disconnect line twice
-+        if (this.processedDisconnect) {
-+            return;
-+        } else {
-+            this.processedDisconnect = true;
-+        }
-+        // CraftBukkit end
-         PlayerConnection.LOGGER.info("{} lost connection: {}", this.player.getName(), ichatbasecomponent.toPlainText());
-+        // CraftBukkit start - Replace vanilla quit message handling with our own.
-+        /*
-         this.minecraftServer.aD();
-         ChatMessage chatmessage = new ChatMessage("multiplayer.player.left", new Object[] { this.player.getScoreboardDisplayName()});
- 
-         chatmessage.getChatModifier().setColor(EnumChatFormat.YELLOW);
-         this.minecraftServer.getPlayerList().sendMessage(chatmessage);
-+        */
-+
-         this.player.s();
--        this.minecraftServer.getPlayerList().disconnect(this.player);
-+        String quitMessage = this.minecraftServer.getPlayerList().disconnect(this.player);
-+        if ((quitMessage != null) && (quitMessage.length() > 0)) {
-+            this.minecraftServer.getPlayerList().sendMessage(CraftChatMessage.fromString(quitMessage));
-+        }
-+        // CraftBukkit end
-         if (this.minecraftServer.R() && this.player.getName().equals(this.minecraftServer.Q())) {
-             PlayerConnection.LOGGER.info("Stopping singleplayer server as player logged out");
-             this.minecraftServer.safeShutdown();
-@@ -625,6 +1085,15 @@
-             }
-         }
- 
-+        // CraftBukkit start
-+        if (packet == null) {
-+            return;
-+        } else if (packet instanceof PacketPlayOutSpawnPosition) {
-+            PacketPlayOutSpawnPosition packet6 = (PacketPlayOutSpawnPosition) packet;
-+            this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(), packet6.position.getY(), packet6.position.getZ());
-+        }
-+        // CraftBukkit end
-+
-         try {
-             this.networkManager.sendPacket(packet);
-         } catch (Throwable throwable) {
-@@ -646,17 +1115,32 @@
- 
-     public void a(PacketPlayInHeldItemSlot packetplayinhelditemslot) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinhelditemslot, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         if (packetplayinhelditemslot.a() >= 0 && packetplayinhelditemslot.a() < PlayerInventory.getHotbarSize()) {
-+            PlayerItemHeldEvent event = new PlayerItemHeldEvent(this.getPlayer(), this.player.inventory.itemInHandIndex, packetplayinhelditemslot.a());
-+            this.server.getPluginManager().callEvent(event);
-+            if (event.isCancelled()) {
-+                this.sendPacket(new PacketPlayOutHeldItemSlot(this.player.inventory.itemInHandIndex));
-+                this.player.resetIdleTimer();
-+                return;
-+            }
-+            // CraftBukkit end
-             this.player.inventory.itemInHandIndex = packetplayinhelditemslot.a();
-             this.player.resetIdleTimer();
-         } else {
-             PlayerConnection.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName());
-+            this.disconnect("Nope!"); // CraftBukkit
-         }
-     }
- 
-     public void a(PacketPlayInChat packetplayinchat) {
--        PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.x());
--        if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) {
-+        // CraftBukkit start - async chat
-+        boolean isSync = packetplayinchat.a().startsWith("/");
-+        if (packetplayinchat.a().startsWith("/")) {
-+            PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.x());
-+        }
-+        // CraftBukkit end
-+        if (this.player.dead || this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) { // CraftBukkit - dead men tell no tales
-             ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
- 
-             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
-@@ -669,39 +1153,249 @@
- 
-             for (int i = 0; i < s.length(); ++i) {
-                 if (!SharedConstants.isAllowedChatCharacter(s.charAt(i))) {
--                    this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters", new Object[0]));
-+                    // CraftBukkit start - threadsafety
-+                    if (!isSync) {
-+                        Waitable waitable = new Waitable() {
-+                            @Override
-+                            protected Object evaluate() {
-+                                PlayerConnection.this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters", new Object[0]));
-+                                return null;
-+                            }
-+                        };
-+
-+                        this.minecraftServer.processQueue.add(waitable);
-+
-+                        try {
-+                            waitable.get();
-+                        } catch (InterruptedException e) {
-+                            Thread.currentThread().interrupt();
-+                        } catch (ExecutionException e) {
-+                            throw new RuntimeException(e);
-+                        }
-+                    } else {
-+                        this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters", new Object[0]));
-+                    }
-+                    // CraftBukkit end
-                     return;
-                 }
-             }
- 
--            if (s.startsWith("/")) {
--                this.handleCommand(s);
-+            // CraftBukkit start
-+            if (isSync) {
-+                try {
-+                    this.minecraftServer.server.playerCommandState = true;
-+                    this.handleCommand(s);
-+                } finally {
-+                    this.minecraftServer.server.playerCommandState = false;
-+                }
-+            } else if (s.isEmpty()) {
-+                LOGGER.warn(this.player.getName() + " tried to send an empty message");
-+            } else if (getPlayer().isConversing()) {
-+                getPlayer().acceptConversationInput(s);
-+            } else if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
-+                ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
-+
-+                chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
-+                this.sendPacket(new PacketPlayOutChat(chatmessage));
-+            } else if (true) {
-+                this.chat(s, true);
-+                // CraftBukkit end - the below is for reference. :)
-             } else {
-                 ChatMessage chatmessage1 = new ChatMessage("chat.type.text", new Object[] { this.player.getScoreboardDisplayName(), s});
- 
-                 this.minecraftServer.getPlayerList().sendMessage(chatmessage1, false);
-             }
- 
--            this.chatThrottle += 20;
--            if (this.chatThrottle > 200 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
--                this.disconnect(new ChatMessage("disconnect.spam", new Object[0]));
-+            // CraftBukkit start - replaced with thread safe throttle
-+            // this.chatThrottle += 20;
-+            if (chatSpamField.addAndGet(this, 20) > 200 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
-+                if (!isSync) {
-+                    Waitable waitable = new Waitable() {
-+                        @Override
-+                        protected Object evaluate() {
-+                            PlayerConnection.this.disconnect(new ChatMessage("disconnect.spam", new Object[0]));
-+                            return null;
-+                        }
-+                    };
-+
-+                    this.minecraftServer.processQueue.add(waitable);
-+
-+                    try {
-+                        waitable.get();
-+                    } catch (InterruptedException e) {
-+                        Thread.currentThread().interrupt();
-+                    } catch (ExecutionException e) {
-+                        throw new RuntimeException(e);
-+                    }
-+                } else {
-+                    this.disconnect(new ChatMessage("disconnect.spam", new Object[0]));
-+                }
-+                // CraftBukkit end
-             }
- 
-         }
-     }
- 
-+    // CraftBukkit start - add method
-+    public void chat(String s, boolean async) {
-+        if (s.isEmpty() || this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) {
-+            return;
-+        }
-+
-+        if (!async && s.startsWith("/")) {
-+            this.handleCommand(s);
-+        } else if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM) {
-+            // Do nothing, this is coming from a plugin
-+        } else {
-+            Player player = this.getPlayer();
-+            AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(minecraftServer));
-+            this.server.getPluginManager().callEvent(event);
-+
-+            if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
-+                // Evil plugins still listening to deprecated event
-+                final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
-+                queueEvent.setCancelled(event.isCancelled());
-+                Waitable waitable = new Waitable() {
-+                    @Override
-+                    protected Object evaluate() {
-+                        org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
-+
-+                        if (queueEvent.isCancelled()) {
-+                            return null;
-+                        }
-+
-+                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
-+                        PlayerConnection.this.minecraftServer.console.sendMessage(message);
-+                        if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
-+                            for (Object player : PlayerConnection.this.minecraftServer.getPlayerList().players) {
-+                                ((EntityPlayer) player).sendMessage(CraftChatMessage.fromString(message));
-+                            }
-+                        } else {
-+                            for (Player player : queueEvent.getRecipients()) {
-+                                player.sendMessage(message);
-+                            }
-+                        }
-+                        return null;
-+                    }};
-+                if (async) {
-+                    minecraftServer.processQueue.add(waitable);
-+                } else {
-+                    waitable.run();
-+                }
-+                try {
-+                    waitable.get();
-+                } catch (InterruptedException e) {
-+                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
-+                } catch (ExecutionException e) {
-+                    throw new RuntimeException("Exception processing chat event", e.getCause());
-+                }
-+            } else {
-+                if (event.isCancelled()) {
-+                    return;
-+                }
-+
-+                s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
-+                minecraftServer.console.sendMessage(s);
-+                if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
-+                    for (Object recipient : minecraftServer.getPlayerList().players) {
-+                        ((EntityPlayer) recipient).sendMessage(CraftChatMessage.fromString(s));
-+                    }
-+                } else {
-+                    for (Player recipient : event.getRecipients()) {
-+                        recipient.sendMessage(s);
-+                    }
-+                }
-+            }
-+        }
-+    }
-+    // CraftBukkit end
-+
-     private void handleCommand(String s) {
--        this.minecraftServer.getCommandHandler().a(this.player, s);
-+       // CraftBukkit start - whole method
-+        this.LOGGER.info(this.player.getName() + " issued server command: " + s);
-+
-+        CraftPlayer player = this.getPlayer();
-+
-+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(minecraftServer));
-+        this.server.getPluginManager().callEvent(event);
-+
-+        if (event.isCancelled()) {
-+            return;
-+        }
-+
-+        try {
-+            if (this.server.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
-+                return;
-+            }
-+        } catch (org.bukkit.command.CommandException ex) {
-+            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
-+            java.util.logging.Logger.getLogger(PlayerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
-+            return;
-+        }
-+        // this.minecraftServer.getCommandHandler().a(this.player, s);
-+        // CraftBukkit end
-     }
- 
-     public void a(PacketPlayInArmAnimation packetplayinarmanimation) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinarmanimation, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         this.player.resetIdleTimer();
-+        // CraftBukkit start - Raytrace to look for 'rogue armswings'
-+        float f1 = this.player.pitch;
-+        float f2 = this.player.yaw;
-+        double d0 = this.player.locX;
-+        double d1 = this.player.locY + (double) this.player.getHeadHeight();
-+        double d2 = this.player.locZ;
-+        Vec3D vec3d = new Vec3D(d0, d1, d2);
-+
-+        float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
-+        float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
-+        float f5 = -MathHelper.cos(-f1 * 0.017453292F);
-+        float f6 = MathHelper.sin(-f1 * 0.017453292F);
-+        float f7 = f4 * f5;
-+        float f8 = f3 * f5;
-+        double d3 = player.playerInteractManager.getGameMode()== EnumGamemode.CREATIVE ? 5.0D : 4.5D;
-+        Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
-+        MovingObjectPosition movingobjectposition = this.player.world.rayTrace(vec3d, vec3d1, false);
-+
-+        if (movingobjectposition == null || movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-+            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
-+        }
-+
-+        // Arm swing animation
-+        PlayerAnimationEvent event = new PlayerAnimationEvent(this.getPlayer());
-+        this.server.getPluginManager().callEvent(event);
-+
-+        if (event.isCancelled()) return;
-+        // CraftBukkit end
-         this.player.a(packetplayinarmanimation.a());
-     }
- 
-     public void a(PacketPlayInEntityAction packetplayinentityaction) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinentityaction, this, this.player.x());
-+        // CraftBukkit start
-+        if (this.player.dead) return;
-+        switch (packetplayinentityaction.b()) {
-+            case START_SNEAKING:
-+            case STOP_SNEAKING:
-+                PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getPlayer(), packetplayinentityaction.b() == PacketPlayInEntityAction.EnumPlayerAction.START_SNEAKING);
-+                this.server.getPluginManager().callEvent(event);
-+
-+                if (event.isCancelled()) {
-+                    return;
-+                }
-+                break;
-+            case START_SPRINTING:
-+            case STOP_SPRINTING:
-+                PlayerToggleSprintEvent e2 = new PlayerToggleSprintEvent(this.getPlayer(), packetplayinentityaction.b() == PacketPlayInEntityAction.EnumPlayerAction.START_SPRINTING);
-+                this.server.getPluginManager().callEvent(e2);
-+
-+                if (e2.isCancelled()) {
-+                    return;
-+                }
-+                break;
-+        }
-+        // CraftBukkit end
-         this.player.resetIdleTimer();
-         IJumpable ijumpable;
- 
-@@ -773,6 +1467,7 @@
- 
-     public void a(PacketPlayInUseEntity packetplayinuseentity) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinuseentity, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
-         Entity entity = packetplayinuseentity.a((World) worldserver);
- 
-@@ -788,20 +1483,68 @@
-             if (this.player.h(entity) < d0) {
-                 EnumHand enumhand;
- 
-+                ItemStack itemInHand = this.player.b(packetplayinuseentity.b() == null ? EnumHand.MAIN_HAND : packetplayinuseentity.b()); // CraftBukkit
-+
-+                if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT
-+                        || packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-+                    // CraftBukkit start
-+                    boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient;
-+                    Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
-+                    PlayerInteractEntityEvent event;
-+                    if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
-+                        event = new PlayerInteractEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), (packetplayinuseentity.b() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
-+                    } else {
-+                        Vec3D target = packetplayinuseentity.c();
-+                        event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.x, target.y, target.z), (packetplayinuseentity.b() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
-+                    }
-+                    this.server.getPluginManager().callEvent(event);
-+
-+                    if (triggerLeashUpdate && (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != Items.LEAD)) {
-+                        // Refresh the current leash state
-+                        this.sendPacket(new PacketPlayOutAttachEntity(entity, ((EntityInsentient) entity).getLeashHolder()));
-+                    }
-+
-+                    if (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != origItem) {
-+                        // Refresh the current entity metadata
-+                        this.sendPacket(new PacketPlayOutEntityMetadata(entity.getId(), entity.datawatcher, true));
-+                    }
-+
-+                    if (event.isCancelled()) {
-+                        return;
-+                    }
-+                    // CraftBukkit end
-+                }
-+
-                 if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
-                     enumhand = packetplayinuseentity.b();
-                     this.player.a(entity, enumhand);
-+                    // CraftBukkit start
-+                    if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
-+                        this.player.updateInventory(this.player.activeContainer);
-+                    }
-+                    // CraftBukkit end
-                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-                     enumhand = packetplayinuseentity.b();
-                     entity.a(this.player, packetplayinuseentity.c(), enumhand);
-+                    // CraftBukkit start
-+                    if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
-+                        this.player.updateInventory(this.player.activeContainer);
-+                    }
-+                    // CraftBukkit end
-                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
--                    if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || entity == this.player) {
-+                    if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || (entity == this.player && !player.isSpectator())) { // CraftBukkit
-                         this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_entity_attacked", new Object[0]));
-                         this.minecraftServer.warning("Player " + this.player.getName() + " tried to attack an invalid entity");
-                         return;
-                     }
- 
-                     this.player.attack(entity);
-+
-+                    // CraftBukkit start
-+                    if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
-+                        this.player.updateInventory(this.player.activeContainer);
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
-         }
-@@ -817,7 +1560,8 @@
-         case PERFORM_RESPAWN:
-             if (this.player.viewingCredits) {
-                 this.player.viewingCredits = false;
--                this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
-+                // this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
-+                this.minecraftServer.getPlayerList().changeDimension(this.player, 0, PlayerTeleportEvent.TeleportCause.END_PORTAL); // CraftBukkit - reroute logic through custom portal management
-                 CriterionTriggers.u.a(this.player, DimensionManager.THE_END, DimensionManager.OVERWORLD);
-             } else {
-                 if (this.player.getHealth() > 0.0F) {
-@@ -840,14 +1584,20 @@
- 
-     public void a(PacketPlayInCloseWindow packetplayinclosewindow) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinclosewindow, this, this.player.x());
-+
-+        if (this.player.isFrozen()) return; // CraftBukkit
-+        CraftEventFactory.handleInventoryCloseEvent(this.player); // CraftBukkit
-+
-         this.player.r();
-     }
- 
-     public void a(PacketPlayInWindowClick packetplayinwindowclick) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinwindowclick, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         this.player.resetIdleTimer();
--        if (this.player.activeContainer.windowId == packetplayinwindowclick.a() && this.player.activeContainer.c(this.player)) {
--            if (this.player.isSpectator()) {
-+        if (this.player.activeContainer.windowId == packetplayinwindowclick.a() && this.player.activeContainer.c(this.player) && this.player.activeContainer.a(this.player)) { // CraftBukkit
-+            boolean cancelled = this.player.isSpectator(); // CraftBukkit - see below if
-+            if (false/*this.player.isSpectator()*/) { // CraftBukkit
-                 NonNullList nonnulllist = NonNullList.a();
- 
-                 for (int i = 0; i < this.player.activeContainer.c.size(); ++i) {
-@@ -856,8 +1606,274 @@
- 
-                 this.player.a(this.player.activeContainer, nonnulllist);
-             } else {
--                ItemStack itemstack = this.player.activeContainer.a(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
-+                // CraftBukkit start - Call InventoryClickEvent
-+                if (packetplayinwindowclick.b() < -1 && packetplayinwindowclick.b() != -999) {
-+                    return;
-+                }
-+
-+                InventoryView inventory = this.player.activeContainer.getBukkitView();
-+                SlotType type = CraftInventoryView.getSlotType(inventory, packetplayinwindowclick.b());
-+
-+                InventoryClickEvent event;
-+                ClickType click = ClickType.UNKNOWN;
-+                InventoryAction action = InventoryAction.UNKNOWN;
-+
-+                ItemStack itemstack = ItemStack.a;
-+
-+                switch (packetplayinwindowclick.f()) {
-+                    case PICKUP:
-+                        if (packetplayinwindowclick.c() == 0) {
-+                            click = ClickType.LEFT;
-+                        } else if (packetplayinwindowclick.c() == 1) {
-+                            click = ClickType.RIGHT;
-+                        }
-+                        if (packetplayinwindowclick.c() == 0 || packetplayinwindowclick.c() == 1) {
-+                            action = InventoryAction.NOTHING; // Don't want to repeat ourselves
-+                            if (packetplayinwindowclick.b() == -999) {
-+                                if (!player.inventory.getCarried().isEmpty()) {
-+                                    action = packetplayinwindowclick.c() == 0 ? InventoryAction.DROP_ALL_CURSOR : InventoryAction.DROP_ONE_CURSOR;
-+                                }
-+                            } else if (packetplayinwindowclick.b() < 0)  {
-+                                action = InventoryAction.NOTHING;
-+                            } else {
-+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
-+                                if (slot != null) {
-+                                    ItemStack clickedItem = slot.getItem();
-+                                    ItemStack cursor = player.inventory.getCarried();
-+                                    if (clickedItem.isEmpty()) {
-+                                        if (!cursor.isEmpty()) {
-+                                            action = packetplayinwindowclick.c() == 0 ? InventoryAction.PLACE_ALL : InventoryAction.PLACE_ONE;
-+                                        }
-+                                    } else if (slot.isAllowed(player)) {
-+                                        if (cursor.isEmpty()) {
-+                                            action = packetplayinwindowclick.c() == 0 ? InventoryAction.PICKUP_ALL : InventoryAction.PICKUP_HALF;
-+                                        } else if (slot.isAllowed(cursor)) {
-+                                            if (clickedItem.doMaterialsMatch(cursor) && ItemStack.equals(clickedItem, cursor)) {
-+                                                int toPlace = packetplayinwindowclick.c() == 0 ? cursor.getCount() : 1;
-+                                                toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.getCount());
-+                                                toPlace = Math.min(toPlace, slot.inventory.getMaxStackSize() - clickedItem.getCount());
-+                                                if (toPlace == 1) {
-+                                                    action = InventoryAction.PLACE_ONE;
-+                                                } else if (toPlace == cursor.getCount()) {
-+                                                    action = InventoryAction.PLACE_ALL;
-+                                                } else if (toPlace < 0) {
-+                                                    action = toPlace != -1 ? InventoryAction.PICKUP_SOME : InventoryAction.PICKUP_ONE; // this happens with oversized stacks
-+                                                } else if (toPlace != 0) {
-+                                                    action = InventoryAction.PLACE_SOME;
-+                                                }
-+                                            } else if (cursor.getCount() <= slot.getMaxStackSize()) {
-+                                                action = InventoryAction.SWAP_WITH_CURSOR;
-+                                            }
-+                                        } else if (cursor.getItem() == clickedItem.getItem() && (!cursor.usesData() || cursor.getData() == clickedItem.getData()) && ItemStack.equals(cursor, clickedItem)) {
-+                                            if (clickedItem.getCount() >= 0) {
-+                                                if (clickedItem.getCount() + cursor.getCount() <= cursor.getMaxStackSize()) {
-+                                                    // As of 1.5, this is result slots only
-+                                                    action = InventoryAction.PICKUP_ALL;
-+                                                }
-+                                            }
-+                                        }
-+                                    }
-+                                }
-+                            }
-+                        }
-+                        break;
-+                    // TODO check on updates
-+                    case QUICK_MOVE:
-+                        if (packetplayinwindowclick.c() == 0) {
-+                            click = ClickType.SHIFT_LEFT;
-+                        } else if (packetplayinwindowclick.c() == 1) {
-+                            click = ClickType.SHIFT_RIGHT;
-+                        }
-+                        if (packetplayinwindowclick.c() == 0 || packetplayinwindowclick.c() == 1) {
-+                            if (packetplayinwindowclick.b() < 0) {
-+                                action = InventoryAction.NOTHING;
-+                            } else {
-+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
-+                                if (slot != null && slot.isAllowed(this.player) && slot.hasItem()) {
-+                                    action = InventoryAction.MOVE_TO_OTHER_INVENTORY;
-+                                } else {
-+                                    action = InventoryAction.NOTHING;
-+                                }
-+                            }
-+                        }
-+                        break;
-+                    case SWAP:
-+                        if (packetplayinwindowclick.c() >= 0 && packetplayinwindowclick.c() < 9) {
-+                            click = ClickType.NUMBER_KEY;
-+                            Slot clickedSlot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
-+                            if (clickedSlot.isAllowed(player)) {
-+                                ItemStack hotbar = this.player.inventory.getItem(packetplayinwindowclick.c());
-+                                boolean canCleanSwap = hotbar.isEmpty() || (clickedSlot.inventory == player.inventory && clickedSlot.isAllowed(hotbar)); // the slot will accept the hotbar item
-+                                if (clickedSlot.hasItem()) {
-+                                    if (canCleanSwap) {
-+                                        action = InventoryAction.HOTBAR_SWAP;
-+                                    } else {
-+                                        action = InventoryAction.HOTBAR_MOVE_AND_READD;
-+                                    }
-+                                } else if (!clickedSlot.hasItem() && !hotbar.isEmpty() && clickedSlot.isAllowed(hotbar)) {
-+                                    action = InventoryAction.HOTBAR_SWAP;
-+                                } else {
-+                                    action = InventoryAction.NOTHING;
-+                                }
-+                            } else {
-+                                action = InventoryAction.NOTHING;
-+                            }
-+                        }
-+                        break;
-+                    case CLONE:
-+                        if (packetplayinwindowclick.c() == 2) {
-+                            click = ClickType.MIDDLE;
-+                            if (packetplayinwindowclick.b() == -999) {
-+                                action = InventoryAction.NOTHING;
-+                            } else {
-+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
-+                                if (slot != null && slot.hasItem() && player.abilities.canInstantlyBuild && player.inventory.getCarried().isEmpty()) {
-+                                    action = InventoryAction.CLONE_STACK;
-+                                } else {
-+                                    action = InventoryAction.NOTHING;
-+                                }
-+                            }
-+                        } else {
-+                            click = ClickType.UNKNOWN;
-+                            action = InventoryAction.UNKNOWN;
-+                        }
-+                        break;
-+                    case THROW:
-+                        if (packetplayinwindowclick.b() >= 0) {
-+                            if (packetplayinwindowclick.c() == 0) {
-+                                click = ClickType.DROP;
-+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
-+                                if (slot != null && slot.hasItem() && slot.isAllowed(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.getItemOf(Blocks.AIR)) {
-+                                    action = InventoryAction.DROP_ONE_SLOT;
-+                                } else {
-+                                    action = InventoryAction.NOTHING;
-+                                }
-+                            } else if (packetplayinwindowclick.c() == 1) {
-+                                click = ClickType.CONTROL_DROP;
-+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
-+                                if (slot != null && slot.hasItem() && slot.isAllowed(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.getItemOf(Blocks.AIR)) {
-+                                    action = InventoryAction.DROP_ALL_SLOT;
-+                                } else {
-+                                    action = InventoryAction.NOTHING;
-+                                }
-+                            }
-+                        } else {
-+                            // Sane default (because this happens when they are holding nothing. Don't ask why.)
-+                            click = ClickType.LEFT;
-+                            if (packetplayinwindowclick.c() == 1) {
-+                                click = ClickType.RIGHT;
-+                            }
-+                            action = InventoryAction.NOTHING;
-+                        }
-+                        break;
-+                    case QUICK_CRAFT:
-+                        itemstack = this.player.activeContainer.a(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
-+                        break;
-+                    case PICKUP_ALL:
-+                        click = ClickType.DOUBLE_CLICK;
-+                        action = InventoryAction.NOTHING;
-+                        if (packetplayinwindowclick.b() >= 0 && !this.player.inventory.getCarried().isEmpty()) {
-+                            ItemStack cursor = this.player.inventory.getCarried();
-+                            action = InventoryAction.NOTHING;
-+                            // Quick check for if we have any of the item
-+                            if (inventory.getTopInventory().contains(org.bukkit.Material.getMaterial(Item.getId(cursor.getItem()))) || inventory.getBottomInventory().contains(org.bukkit.Material.getMaterial(Item.getId(cursor.getItem())))) {
-+                                action = InventoryAction.COLLECT_TO_CURSOR;
-+                            }
-+                        }
-+                        break;
-+                    default:
-+                        break;
-+                }
-+
-+                if (packetplayinwindowclick.f() != InventoryClickType.QUICK_CRAFT) {
-+                    if (click == ClickType.NUMBER_KEY) {
-+                        event = new InventoryClickEvent(inventory, type, packetplayinwindowclick.b(), click, action, packetplayinwindowclick.c());
-+                    } else {
-+                        event = new InventoryClickEvent(inventory, type, packetplayinwindowclick.b(), click, action);
-+                    }
-+
-+                    org.bukkit.inventory.Inventory top = inventory.getTopInventory();
-+                    if (packetplayinwindowclick.b() == 0 && top instanceof CraftingInventory) {
-+                        org.bukkit.inventory.Recipe recipe = ((CraftingInventory) top).getRecipe();
-+                        if (recipe != null) {
-+                            if (click == ClickType.NUMBER_KEY) {
-+                                event = new CraftItemEvent(recipe, inventory, type, packetplayinwindowclick.b(), click, action, packetplayinwindowclick.c());
-+                            } else {
-+                                event = new CraftItemEvent(recipe, inventory, type, packetplayinwindowclick.b(), click, action);
-+                            }
-+                        }
-+                    }
-+
-+                    event.setCancelled(cancelled);
-+                    Container oldContainer = this.player.activeContainer; // SPIGOT-1224
-+                    server.getPluginManager().callEvent(event);
-+                    if (this.player.activeContainer != oldContainer) {
-+                        return;
-+                    }
-+
-+                    switch (event.getResult()) {
-+                        case ALLOW:
-+                        case DEFAULT:
-+                            itemstack = this.player.activeContainer.a(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
-+                            break;
-+                        case DENY:
-+                            /* Needs enum constructor in InventoryAction
-+                            if (action.modifiesOtherSlots()) {
-+
-+                            } else {
-+                                if (action.modifiesCursor()) {
-+                                    this.player.playerConnection.sendPacket(new Packet103SetSlot(-1, -1, this.player.inventory.getCarried()));
-+                                }
-+                                if (action.modifiesClicked()) {
-+                                    this.player.playerConnection.sendPacket(new Packet103SetSlot(this.player.activeContainer.windowId, packet102windowclick.slot, this.player.activeContainer.getSlot(packet102windowclick.slot).getItem()));
-+                                }
-+                            }*/
-+                            switch (action) {
-+                                // Modified other slots
-+                                case PICKUP_ALL:
-+                                case MOVE_TO_OTHER_INVENTORY:
-+                                case HOTBAR_MOVE_AND_READD:
-+                                case HOTBAR_SWAP:
-+                                case COLLECT_TO_CURSOR:
-+                                case UNKNOWN:
-+                                    this.player.updateInventory(this.player.activeContainer);
-+                                    break;
-+                                // Modified cursor and clicked
-+                                case PICKUP_SOME:
-+                                case PICKUP_HALF:
-+                                case PICKUP_ONE:
-+                                case PLACE_ALL:
-+                                case PLACE_SOME:
-+                                case PLACE_ONE:
-+                                case SWAP_WITH_CURSOR:
-+                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.player.inventory.getCarried()));
-+                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, packetplayinwindowclick.b(), this.player.activeContainer.getSlot(packetplayinwindowclick.b()).getItem()));
-+                                    break;
-+                                // Modified clicked only
-+                                case DROP_ALL_SLOT:
-+                                case DROP_ONE_SLOT:
-+                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, packetplayinwindowclick.b(), this.player.activeContainer.getSlot(packetplayinwindowclick.b()).getItem()));
-+                                    break;
-+                                // Modified cursor only
-+                                case DROP_ALL_CURSOR:
-+                                case DROP_ONE_CURSOR:
-+                                case CLONE_STACK:
-+                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.player.inventory.getCarried()));
-+                                    break;
-+                                // Nothing
-+                                case NOTHING:
-+                                    break;
-+                            }
-+                            return;
-+                    }
- 
-+                    if (event instanceof CraftItemEvent) {
-+                        // Need to update the inventory on crafting to
-+                        // correctly support custom recipes
-+                        player.updateInventory(player.activeContainer);
-+                    }
-+                }
-+                // CraftBukkit end
-                 if (ItemStack.matches(packetplayinwindowclick.e(), itemstack)) {
-                     this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.a(), packetplayinwindowclick.d(), true));
-                     this.player.f = true;
-@@ -894,6 +1910,7 @@
- 
-     public void a(PacketPlayInEnchantItem packetplayinenchantitem) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinenchantitem, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         this.player.resetIdleTimer();
-         if (this.player.activeContainer.windowId == packetplayinenchantitem.a() && this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
-             this.player.activeContainer.a(this.player, packetplayinenchantitem.b());
-@@ -927,7 +1944,45 @@
-             }
- 
-             boolean flag1 = packetplayinsetcreativeslot.a() >= 1 && packetplayinsetcreativeslot.a() <= 45;
--            boolean flag2 = itemstack.isEmpty() || itemstack.getData() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty();
-+            // CraftBukkit - Add invalidItems check
-+            boolean flag2 = itemstack.isEmpty() || itemstack.getData() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty() && !invalidItems.contains(Item.getId(itemstack.getItem()));
-+            if (flag || (flag1 && !ItemStack.matches(this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem(), packetplayinsetcreativeslot.getItemStack()))) { // Insist on valid slot
-+                // CraftBukkit start - Call click event
-+                InventoryView inventory = this.player.defaultContainer.getBukkitView();
-+                org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(packetplayinsetcreativeslot.getItemStack());
-+
-+                SlotType type = SlotType.QUICKBAR;
-+                if (flag) {
-+                    type = SlotType.OUTSIDE;
-+                } else if (packetplayinsetcreativeslot.a() < 36) {
-+                    if (packetplayinsetcreativeslot.a() >= 5 && packetplayinsetcreativeslot.a() < 9) {
-+                        type = SlotType.ARMOR;
-+                    } else {
-+                        type = SlotType.CONTAINER;
-+                    }
-+                }
-+                InventoryCreativeEvent event = new InventoryCreativeEvent(inventory, type, flag ? -999 : packetplayinsetcreativeslot.a(), item);
-+                server.getPluginManager().callEvent(event);
-+
-+                itemstack = CraftItemStack.asNMSCopy(event.getCursor());
-+
-+                switch (event.getResult()) {
-+                case ALLOW:
-+                    // Plugin cleared the id / stacksize checks
-+                    flag2 = true;
-+                    break;
-+                case DEFAULT:
-+                    break;
-+                case DENY:
-+                    // Reset the slot
-+                    if (packetplayinsetcreativeslot.a() >= 0) {
-+                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.defaultContainer.windowId, packetplayinsetcreativeslot.a(), this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem()));
-+                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, ItemStack.a));
-+                    }
-+                    return;
-+                }
-+            }
-+            // CraftBukkit end
- 
-             if (flag1 && flag2) {
-                 if (itemstack.isEmpty()) {
-@@ -951,6 +2006,7 @@
- 
-     public void a(PacketPlayInTransaction packetplayintransaction) {
-         PlayerConnectionUtils.ensureMainThread(packetplayintransaction, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         Short oshort = (Short) this.k.get(this.player.activeContainer.windowId);
- 
-         if (oshort != null && packetplayintransaction.b() == oshort.shortValue() && this.player.activeContainer.windowId == packetplayintransaction.a() && !this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
-@@ -961,6 +2017,7 @@
- 
-     public void a(PacketPlayInUpdateSign packetplayinupdatesign) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinupdatesign, this, this.player.x());
-+        if (this.player.isFrozen()) return; // CraftBukkit
-         this.player.resetIdleTimer();
-         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
-         BlockPosition blockposition = packetplayinupdatesign.a();
-@@ -977,14 +2034,30 @@
- 
-             if (!tileentitysign.a() || tileentitysign.e() != this.player) {
-                 this.minecraftServer.warning("Player " + this.player.getName() + " just tried to change non-editable sign");
-+                this.sendPacket(tileentity.getUpdatePacket()); // CraftBukkit
-                 return;
-             }
- 
-             String[] astring = packetplayinupdatesign.b();
- 
-+            // CraftBukkit start
-+            Player player = this.server.getPlayer(this.player);
-+            int x = packetplayinupdatesign.a().getX();
-+            int y = packetplayinupdatesign.a().getY();
-+            int z = packetplayinupdatesign.a().getZ();
-+            String[] lines = new String[4];
-+
-             for (int i = 0; i < astring.length; ++i) {
--                tileentitysign.lines[i] = new ChatComponentText(EnumChatFormat.a(astring[i]));
-+                lines[i] = EnumChatFormat.a(new ChatComponentText(EnumChatFormat.a(astring[i])).toPlainText());
-             }
-+            SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
-+            this.server.getPluginManager().callEvent(event);
-+
-+            if (!event.isCancelled()) {
-+                System.arraycopy(org.bukkit.craftbukkit.block.CraftSign.sanitizeLines(event.getLines()), 0, tileentitysign.lines, 0, 4);
-+                tileentitysign.isEditable = false;
-+             }
-+            // CraftBukkit end
- 
-             tileentitysign.update();
-             worldserver.notify(blockposition, iblockdata, iblockdata, 3);
-@@ -1007,11 +2080,27 @@
- 
-     public void a(PacketPlayInAbilities packetplayinabilities) {
-         PlayerConnectionUtils.ensureMainThread(packetplayinabilities, this, this.player.x());
--        this.player.abilities.isFlying = packetplayinabilities.isFlying() && this.player.abilities.canFly;
-+        // CraftBukkit start
-+        if (this.player.abilities.canFly && this.player.abilities.isFlying != packetplayinabilities.isFlying()) {
-+            PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(this.server.getPlayer(this.player), packetplayinabilities.isFlying());
-+            this.server.getPluginManager().callEvent(event);
-+            if (!event.isCancelled()) {
-+                this.player.abilities.isFlying = packetplayinabilities.isFlying(); // Actually set the player's flying status
-+            } else {
-+                this.player.updateAbilities(); // Tell the player their ability was reverted
-+            }
-+        }
-+        // CraftBukkit end
-     }
- 
-     public void a(PacketPlayInTabComplete packetplayintabcomplete) {
-         PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.x());
-+        // CraftBukkit start
-+        if (chatSpamField.addAndGet(this, 10) > 500 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
-+            this.disconnect(new ChatMessage("disconnect.spam", new Object[0]));
-+            return;
-+        }
-+        // CraftBukkit end
-         ArrayList arraylist = Lists.newArrayList();
-         Iterator iterator = this.minecraftServer.tabCompleteCommand(this.player, packetplayintabcomplete.a(), packetplayintabcomplete.b(), packetplayintabcomplete.c()).iterator();
- 
-@@ -1037,6 +2126,13 @@
-         ItemStack itemstack1;
- 
-         if ("MC|BEdit".equals(s)) {
-+            // CraftBukkit start
-+            if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
-+                this.disconnect("Book edited too quickly!");
-+                return;
-+            }
-+            this.lastBookTick = MinecraftServer.currentTick;
-+            // CraftBukkit end
-             packetdataserializer = packetplayincustompayload.b();
- 
-             try {
-@@ -1055,15 +2151,25 @@
-                 }
- 
-                 if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
-+                    itemstack1 = new ItemStack(Items.WRITABLE_BOOK); // CraftBukkit
-                     itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
-+                    CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
-                 }
-             } catch (Exception exception) {
-                 PlayerConnection.LOGGER.error("Couldn\'t handle book info", exception);
-+                this.disconnect("Invalid book data!"); // CraftBukkit
-             }
-         } else {
-             String s1;
- 
-             if ("MC|BSign".equals(s)) {
-+                // CraftBukkit start
-+                if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
-+                    this.disconnect("Book edited too quickly!");
-+                    return;
-+                }
-+                this.lastBookTick = MinecraftServer.currentTick;
-+                // CraftBukkit end
-                 packetdataserializer = packetplayincustompayload.b();
- 
-                 try {
-@@ -1097,10 +2203,11 @@
-                         }
- 
-                         itemstack2.a("pages", (NBTBase) nbttaglist);
--                        this.player.setSlot(EnumItemSlot.MAINHAND, itemstack2);
-+                        CraftEventFactory.handleEditBookEvent(player, itemstack2); // CraftBukkit
-                     }
-                 } catch (Exception exception1) {
-                     PlayerConnection.LOGGER.error("Couldn\'t sign book", exception1);
-+                    this.disconnect("Invalid book data!"); // CraftBukkit
-                 }
-             } else if ("MC|TrSel".equals(s)) {
-                 try {
-@@ -1112,6 +2219,7 @@
-                     }
-                 } catch (Exception exception2) {
-                     PlayerConnection.LOGGER.error("Couldn\'t select trade", exception2);
-+                    this.disconnect("Invalid trade data!"); // CraftBukkit
-                 }
-             } else {
-                 TileEntity tileentity;
-@@ -1161,6 +2269,7 @@
-                         }
-                     } catch (Exception exception3) {
-                         PlayerConnection.LOGGER.error("Couldn\'t set command block", exception3);
-+                        this.disconnect("Invalid command data!"); // CraftBukkit
-                     }
-                 } else if ("MC|AutoCmd".equals(s)) {
-                     if (!this.minecraftServer.getEnableCommandBlock()) {
-@@ -1228,6 +2337,7 @@
-                         }
-                     } catch (Exception exception4) {
-                         PlayerConnection.LOGGER.error("Couldn\'t set command block", exception4);
-+                        this.disconnect("Invalid command data!"); // CraftBukkit
-                     }
-                 } else {
-                     int k;
-@@ -1251,6 +2361,7 @@
-                                 }
-                             } catch (Exception exception5) {
-                                 PlayerConnection.LOGGER.error("Couldn\'t set beacon", exception5);
-+                                this.disconnect("Invalid beacon data!"); // CraftBukkit
-                             }
-                         }
-                     } else if ("MC|ItemName".equals(s)) {
-@@ -1337,6 +2448,7 @@
-                             }
-                         } catch (Exception exception6) {
-                             PlayerConnection.LOGGER.error("Couldn\'t set structure block", exception6);
-+                            this.disconnect("Invalid structure data!"); // CraftBukkit
-                         }
-                     } else if ("MC|PickItem".equals(s)) {
-                         packetdataserializer = packetplayincustompayload.b();
-@@ -1349,11 +2461,49 @@
-                             this.player.playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(this.player.inventory.itemInHandIndex));
-                         } catch (Exception exception7) {
-                             PlayerConnection.LOGGER.error("Couldn\'t pick item", exception7);
-+                            this.disconnect("Invalid pick item!"); // CraftBukkit
-                         }
-                     }
-+                    // CraftBukkit start
-+                    else if (packetplayincustompayload.a().equals("REGISTER")) {
-+                        try {
-+                            String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-+                            for (String channel : channels.split("\0")) {
-+                                getPlayer().addChannel(channel);
-+                            }
-+                        } catch (Exception ex) {
-+                            PlayerConnection.LOGGER.error("Couldn\'t register custom payload", ex);
-+                            this.disconnect("Invalid payload REGISTER!");
-+                        }
-+                    } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
-+                        try {
-+                            String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-+                            for (String channel : channels.split("\0")) {
-+                                getPlayer().removeChannel(channel);
-+                            }
-+                        } catch (Exception ex) {
-+                            PlayerConnection.LOGGER.error("Couldn\'t unregister custom payload", ex);
-+                            this.disconnect("Invalid payload UNREGISTER!");
-+                        }
-+                    } else {
-+                        try {
-+                            byte[] data = new byte[packetplayincustompayload.b().readableBytes()];
-+                            packetplayincustompayload.b().readBytes(data);
-+                            server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), packetplayincustompayload.a(), data);
-+                        } catch (Exception ex) {
-+                            PlayerConnection.LOGGER.error("Couldn\'t dispatch custom payload", ex);
-+                            this.disconnect("Invalid custom payload!");
-+                        }
-+                    }
-+                    // CraftBukkit end
-                 }
-             }
-         }
- 
-     }
-+
-+    // CraftBukkit start - Add "isDisconnected" method
-+    public final boolean isDisconnected() {
-+        return !this.player.joining && !this.networkManager.isConnected();
-+    }
- }
diff --git a/nms-patches/PlayerInteractManager.patch b/nms-patches/PlayerInteractManager.patch
deleted file mode 100644
index 319bef8..0000000
--- a/nms-patches/PlayerInteractManager.patch
+++ /dev/null
@@ -1,377 +0,0 @@
---- a/net/minecraft/server/PlayerInteractManager.java
-+++ b/net/minecraft/server/PlayerInteractManager.java
-@@ -1,5 +1,14 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import java.util.ArrayList;
-+import org.bukkit.event.block.BlockBreakEvent;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.event.Event;
-+import org.bukkit.event.block.Action;
-+import org.bukkit.event.player.PlayerInteractEvent;
-+// CraftBukkit end
-+
- public class PlayerInteractManager {
- 
-     public World world;
-@@ -26,7 +35,7 @@
-         this.gamemode = enumgamemode;
-         enumgamemode.a(this.player.abilities);
-         this.player.updateAbilities();
--        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[] { this.player}));
-+        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[] { this.player}), this.player); // CraftBukkit
-         this.world.everyoneSleeping();
-     }
- 
-@@ -51,7 +60,7 @@
-     }
- 
-     public void a() {
--        ++this.currentTick;
-+        this.currentTick = MinecraftServer.currentTick; // CraftBukkit;
-         float f;
-         int i;
- 
-@@ -96,6 +105,19 @@
-     }
- 
-     public void a(BlockPosition blockposition, EnumDirection enumdirection) {
-+        // CraftBukkit start
-+        PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
-+        if (event.isCancelled()) {
-+            // Let the client know the block still exists
-+            ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-+            // Update any tile entity data for this block
-+            TileEntity tileentity = this.world.getTileEntity(blockposition);
-+            if (tileentity != null) {
-+                this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
-+            }
-+            return;
-+        }
-+        // CraftBukkit end
-         if (this.isCreative()) {
-             if (!this.world.douseFire((EntityHuman) null, blockposition, enumdirection)) {
-                 this.breakBlock(blockposition);
-@@ -123,14 +145,48 @@
-                 }
-             }
- 
--            this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
-+            // this.world.douseFire((EntityHuman) null, blockposition, enumdirection); // CraftBukkit - Moved down
-             this.lastDigTick = this.currentTick;
-             float f = 1.0F;
- 
--            if (iblockdata.getMaterial() != Material.AIR) {
-+            // CraftBukkit start - Swings at air do *NOT* exist.
-+            if (event.useInteractedBlock() == Event.Result.DENY) {
-+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
-+                IBlockData data = this.world.getType(blockposition);
-+                if (block == Blocks.WOODEN_DOOR) {
-+                    // For some reason *BOTH* the bottom/top part have to be marked updated.
-+                    boolean bottom = data.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
-+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
-+                } else if (block == Blocks.TRAPDOOR) {
-+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-+                }
-+            } else if (iblockdata.getMaterial() != Material.AIR) {
-                 block.attack(this.world, blockposition, this.player);
-                 f = iblockdata.a((EntityHuman) this.player, this.player.world, blockposition);
-+                // Allow fire punching to be blocked
-+                this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
-+            }
-+
-+            if (event.useItemInHand() == Event.Result.DENY) {
-+                // If we 'insta destroyed' then the client needs to be informed.
-+                if (f > 1.0f) {
-+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-+                }
-+                return;
-+            }
-+            org.bukkit.event.block.BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.player, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.player.inventory.getItemInHand(), f >= 1.0f);
-+
-+            if (blockEvent.isCancelled()) {
-+                // Let the client know the block still exists
-+                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-+                return;
-+            }
-+
-+            if (blockEvent.getInstaBreak()) {
-+                f = 2.0f;
-             }
-+            // CraftBukkit end
- 
-             if (iblockdata.getMaterial() != Material.AIR && f >= 1.0F) {
-                 this.breakBlock(blockposition);
-@@ -148,6 +204,7 @@
- 
-     public void a(BlockPosition blockposition) {
-         if (blockposition.equals(this.f)) {
-+            this.currentTick = MinecraftServer.currentTick; // CraftBukkit
-             int i = this.currentTick - this.lastDigTick;
-             IBlockData iblockdata = this.world.getType(blockposition);
- 
-@@ -165,6 +222,10 @@
-                     this.j = this.lastDigTick;
-                 }
-             }
-+        // CraftBukkit start - Force block reset to client
-+        } else {
-+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -188,13 +249,86 @@
-     }
- 
-     public boolean breakBlock(BlockPosition blockposition) {
--        if (this.gamemode.isCreative() && !this.player.getItemInMainHand().isEmpty() && this.player.getItemInMainHand().getItem() instanceof ItemSword) {
-+        // CraftBukkit start - fire BlockBreakEvent
-+        BlockBreakEvent event = null;
-+
-+        if (this.player instanceof EntityPlayer) {
-+            org.bukkit.block.Block block = this.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-+
-+            // Sword + Creative mode pre-cancel
-+            boolean isSwordNoBreak = this.gamemode.isCreative() && !this.player.getItemInMainHand().isEmpty() && this.player.getItemInMainHand().getItem() instanceof ItemSword;
-+
-+            // Tell client the block is gone immediately then process events
-+            // Don't tell the client if its a creative sword break because its not broken!
-+            if (world.getTileEntity(blockposition) == null && !isSwordNoBreak) {
-+                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
-+                packet.block = Blocks.AIR.getBlockData();
-+                ((EntityPlayer) this.player).playerConnection.sendPacket(packet);
-+            }
-+
-+            event = new BlockBreakEvent(block, this.player.getBukkitEntity());
-+
-+            // Sword + Creative mode pre-cancel
-+            event.setCancelled(isSwordNoBreak);
-+
-+            // Calculate default block experience
-+            IBlockData nmsData = this.world.getType(blockposition);
-+            Block nmsBlock = nmsData.getBlock();
-+
-+            ItemStack itemstack = this.player.getEquipment(EnumItemSlot.MAINHAND);
-+
-+            if (nmsBlock != null && !event.isCancelled() && !this.isCreative() && this.player.hasBlock(nmsBlock.getBlockData())) {
-+                // Copied from block.a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack)
-+                // PAIL: checkme each update
-+                if (!(nmsBlock.o() && EnchantmentManager.getEnchantmentLevel(Enchantments.SILK_TOUCH, itemstack) > 0)) {
-+                    int bonusLevel = EnchantmentManager.getEnchantmentLevel(Enchantments.LOOT_BONUS_BLOCKS, itemstack);
-+
-+                    event.setExpToDrop(nmsBlock.getExpDrop(this.world, nmsData, bonusLevel));
-+                }
-+            }
-+
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                if (isSwordNoBreak) {
-+                    return false;
-+                }
-+                // Let the client know the block still exists
-+                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-+                // Send other half of the door
-+                if (nmsBlock instanceof BlockDoor) {
-+                    boolean bottom = nmsData.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
-+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, bottom ? blockposition.up() : blockposition.down()));
-+                }
-+                // Update any tile entity data for this block
-+                TileEntity tileentity = this.world.getTileEntity(blockposition);
-+                if (tileentity != null) {
-+                    this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
-+                }
-+                return false;
-+            }
-+        }
-+        if (false && this.gamemode.isCreative() && !this.player.getItemInMainHand().isEmpty() && this.player.getItemInMainHand().getItem() instanceof ItemSword) { // CraftBukkit - false
-             return false;
-         } else {
-             IBlockData iblockdata = this.world.getType(blockposition);
-+            if (iblockdata.getBlock() == Blocks.AIR) return false; // CraftBukkit - A plugin set block to air without cancelling
-             TileEntity tileentity = this.world.getTileEntity(blockposition);
-             Block block = iblockdata.getBlock();
- 
-+            // CraftBukkit start - Special case skulls, their item data comes from a tile entity (Also check if block should drop items)
-+            if (iblockdata.getBlock() == Blocks.SKULL && !this.isCreative() && event.isDropItems()) {
-+                iblockdata.getBlock().dropNaturally(world, blockposition, iblockdata, 1.0F, 0);
-+                return this.c(blockposition);
-+            }
-+
-+            // And shulker boxes too for duplication on cancel reasons (Also check if block should drop items)
-+            if (iblockdata.getBlock() instanceof BlockShulkerBox && event.isDropItems()) {
-+                iblockdata.getBlock().dropNaturally(world, blockposition, iblockdata, 1.0F, 0);
-+                return this.c(blockposition);
-+            }
-+            // CraftBukkit end
-+
-             if ((block instanceof BlockCommand || block instanceof BlockStructure) && !this.player.isCreativeAndOp()) {
-                 this.world.notify(blockposition, iblockdata, iblockdata, 3);
-                 return false;
-@@ -218,7 +352,16 @@
-                 }
- 
-                 this.world.a(this.player, 2001, blockposition, Block.getCombinedId(iblockdata));
-+                // CraftBukkit start
-+                world.captureDrops = new ArrayList<>();
-                 boolean flag = this.c(blockposition);
-+                if (event.isDropItems()) {
-+                    for (EntityItem item : world.captureDrops) {
-+                        world.addEntity(item);
-+                    }
-+                }
-+                world.captureDrops = null;
-+                // CraftBukkit end
- 
-                 if (this.isCreative()) {
-                     this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-@@ -231,11 +374,19 @@
-                         itemstack1.a(this.world, iblockdata, blockposition, this.player);
-                     }
- 
--                    if (flag && flag1) {
-+                    // CraftBukkit start - Check if block should drop items
-+                    if (flag && flag1 && event.isDropItems()) {
-                         iblockdata.getBlock().a(this.world, this.player, blockposition, iblockdata, tileentity, itemstack2);
-                     }
-+                    // CraftBukkit end
-                 }
- 
-+                // CraftBukkit start - Drop event experience
-+                if (flag && event != null) {
-+                    iblockdata.getBlock().dropExperience(this.world, blockposition, event.getExpToDrop());
-+                }
-+                // CraftBukkit end
-+
-                 return flag;
-             }
-         }
-@@ -278,63 +429,90 @@
-         }
-     }
- 
-+    // CraftBukkit start - whole method
-+    public boolean interactResult = false;
-+    public boolean firedInteract = false;
-     public EnumInteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
--        if (this.gamemode == EnumGamemode.SPECTATOR) {
--            TileEntity tileentity = world.getTileEntity(blockposition);
-+        IBlockData blockdata = world.getType(blockposition);
-+        EnumInteractionResult enuminteractionresult = EnumInteractionResult.FAIL;
-+        if (blockdata.getBlock() != Blocks.AIR) {
-+            boolean cancelledBlock = false;
-+
-+            if (this.gamemode == EnumGamemode.SPECTATOR) {
-+                TileEntity tileentity = world.getTileEntity(blockposition);
-+                cancelledBlock = !(tileentity instanceof ITileInventory || tileentity instanceof IInventory);
-+            }
- 
--            if (tileentity instanceof ITileInventory) {
--                Block block = world.getType(blockposition).getBlock();
--                ITileInventory itileinventory = (ITileInventory) tileentity;
-+            if (entityhuman.getCooldownTracker().a(itemstack.getItem())) {
-+                cancelledBlock = true;
-+            }
- 
--                if (itileinventory instanceof TileEntityChest && block instanceof BlockChest) {
--                    itileinventory = ((BlockChest) block).getInventory(world, blockposition);
--                }
-+            if (itemstack.getItem() instanceof ItemBlock && !entityhuman.isCreativeAndOp()) {
-+                Block block1 = ((ItemBlock) itemstack.getItem()).getBlock();
- 
--                if (itileinventory != null) {
--                    entityhuman.openContainer(itileinventory);
--                    return EnumInteractionResult.SUCCESS;
-+                if (block1 instanceof BlockCommand || block1 instanceof BlockStructure) {
-+                    cancelledBlock = true;
-                 }
--            } else if (tileentity instanceof IInventory) {
--                entityhuman.openContainer((IInventory) tileentity);
--                return EnumInteractionResult.SUCCESS;
-             }
- 
--            return EnumInteractionResult.PASS;
--        } else {
--            if (!entityhuman.isSneaking() || entityhuman.getItemInMainHand().isEmpty() && entityhuman.getItemInOffHand().isEmpty()) {
--                IBlockData iblockdata = world.getType(blockposition);
-+            PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(entityhuman, Action.RIGHT_CLICK_BLOCK, blockposition, enumdirection, itemstack, cancelledBlock, enumhand);
-+            firedInteract = true;
-+            interactResult = event.useItemInHand() == Event.Result.DENY;
-+
-+            if (event.useInteractedBlock() == Event.Result.DENY) {
-+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
-+                if (blockdata.getBlock() instanceof BlockDoor) {
-+                    boolean bottom = blockdata.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
-+                    ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, bottom ? blockposition.up() : blockposition.down()));
-+                } else if (blockdata.getBlock() instanceof BlockCake) {
-+                    ((EntityPlayer) entityhuman).getBukkitEntity().sendHealthUpdate(); // SPIGOT-1341 - reset health for cake
-+                }
-+                ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory(); // SPIGOT-2867
-+                enuminteractionresult = (event.useItemInHand() != Event.Result.ALLOW) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
-+            } else if (this.gamemode == EnumGamemode.SPECTATOR) {
-+                TileEntity tileentity = world.getTileEntity(blockposition);
- 
--                if (iblockdata.getBlock().interact(world, blockposition, iblockdata, entityhuman, enumhand, enumdirection, f, f1, f2)) {
-+                if (tileentity instanceof ITileInventory) {
-+                    Block block = world.getType(blockposition).getBlock();
-+                    ITileInventory itileinventory = (ITileInventory) tileentity;
-+
-+                    if (itileinventory instanceof TileEntityChest && block instanceof BlockChest) {
-+                        itileinventory = ((BlockChest) block).getInventory(world, blockposition);
-+                    }
-+
-+                    if (itileinventory != null) {
-+                        entityhuman.openContainer(itileinventory);
-+                        return EnumInteractionResult.SUCCESS;
-+                    }
-+                } else if (tileentity instanceof IInventory) {
-+                    entityhuman.openContainer((IInventory) tileentity);
-                     return EnumInteractionResult.SUCCESS;
-                 }
--            }
- 
--            if (itemstack.isEmpty()) {
--                return EnumInteractionResult.PASS;
--            } else if (entityhuman.getCooldownTracker().a(itemstack.getItem())) {
-                 return EnumInteractionResult.PASS;
-             } else {
--                if (itemstack.getItem() instanceof ItemBlock && !entityhuman.isCreativeAndOp()) {
--                    Block block1 = ((ItemBlock) itemstack.getItem()).getBlock();
-+                if (!entityhuman.isSneaking() || entityhuman.getItemInMainHand().isEmpty() && entityhuman.getItemInOffHand().isEmpty()) {
-+                    IBlockData iblockdata = world.getType(blockposition);
- 
--                    if (block1 instanceof BlockCommand || block1 instanceof BlockStructure) {
--                        return EnumInteractionResult.FAIL;
--                    }
-+                    enuminteractionresult = iblockdata.getBlock().interact(world, blockposition, iblockdata, entityhuman, enumhand, enumdirection, f, f1, f2) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
-                 }
-+            }
- 
--                if (this.isCreative()) {
--                    int i = itemstack.getData();
--                    int j = itemstack.getCount();
--                    EnumInteractionResult enuminteractionresult = itemstack.placeItem(entityhuman, world, blockposition, enumhand, enumdirection, f, f1, f2);
-+            if (!itemstack.isEmpty() && enuminteractionresult != EnumInteractionResult.SUCCESS && !interactResult) { // add !interactResult SPIGOT-764
-+                int i = itemstack.getData();
-+                int j = itemstack.getCount();
-+
-+                enuminteractionresult = itemstack.placeItem(entityhuman, world, blockposition, enumhand, enumdirection, f, f1, f2);
- 
-+                // The item count should not decrement in Creative mode.
-+                if (this.isCreative()) {
-                     itemstack.setData(i);
-                     itemstack.setCount(j);
--                    return enuminteractionresult;
--                } else {
--                    return itemstack.placeItem(entityhuman, world, blockposition, enumhand, enumdirection, f, f1, f2);
-                 }
-             }
-         }
-+        return enuminteractionresult;
-+        // CraftBukkit end
-     }
- 
-     public void a(WorldServer worldserver) {
diff --git a/nms-patches/PlayerInventory.patch b/nms-patches/PlayerInventory.patch
deleted file mode 100644
index 2b4f94a..0000000
--- a/nms-patches/PlayerInventory.patch
+++ /dev/null
@@ -1,113 +0,0 @@
---- a/net/minecraft/server/PlayerInventory.java
-+++ b/net/minecraft/server/PlayerInventory.java
-@@ -5,6 +5,15 @@
- import java.util.List;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import java.util.ArrayList;
-+import java.util.List;
-+import org.bukkit.Location;
-+
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+// CraftBukkit end
-+
- public class PlayerInventory implements IInventory {
- 
-     public final NonNullList<ItemStack> items;
-@@ -16,6 +25,49 @@
-     private ItemStack carried;
-     private int h;
- 
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        List<ItemStack> combined = new ArrayList<ItemStack>(items.size() + armor.size() + extraSlots.size());
-+        for (List<net.minecraft.server.ItemStack> sub : this.f) {
-+            combined.addAll(sub);
-+        }
-+
-+        return combined;
-+    }
-+
-+    public List<ItemStack> getArmorContents() {
-+        return this.armor;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public org.bukkit.inventory.InventoryHolder getOwner() {
-+        return this.player.getBukkitEntity();
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+
-+    @Override
-+    public Location getLocation() {
-+        return player.getBukkitEntity().getLocation();
-+    }
-+    // CraftBukkit end
-+
-     public PlayerInventory(EntityHuman entityhuman) {
-         this.items = NonNullList.a(36, ItemStack.a);
-         this.armor = NonNullList.a(4, ItemStack.a);
-@@ -41,6 +93,23 @@
-         return itemstack.getItem() == itemstack1.getItem() && (!itemstack.usesData() || itemstack.getData() == itemstack1.getData()) && ItemStack.equals(itemstack, itemstack1);
-     }
- 
-+    // CraftBukkit start - Watch method above! :D
-+    public int canHold(ItemStack itemstack) {
-+        int remains = itemstack.getCount();
-+        for (int i = 0; i < this.items.size(); ++i) {
-+            ItemStack itemstack1 = this.getItem(i);
-+            if (itemstack1.isEmpty()) return itemstack.getCount();
-+
-+            // Taken from firstPartial(ItemStack)
-+            if (!itemstack1.isEmpty() && itemstack1.getItem() == itemstack.getItem() && itemstack1.isStackable() && itemstack1.getCount() < itemstack1.getMaxStackSize() && itemstack1.getCount() < this.getMaxStackSize() && (!itemstack1.usesData() || itemstack1.getData() == itemstack.getData()) && ItemStack.equals(itemstack1, itemstack)) {
-+                remains -= (itemstack1.getMaxStackSize() < this.getMaxStackSize() ? itemstack1.getMaxStackSize() : this.getMaxStackSize()) - itemstack1.getCount();
-+            }
-+            if (remains <= 0) return itemstack.getCount();
-+        }
-+        return itemstack.getCount() - remains;
-+    }
-+    // CraftBukkit end
-+
-     public int getFirstEmptySlotIndex() {
-         for (int i = 0; i < this.items.size(); ++i) {
-             if (((ItemStack) this.items.get(i)).isEmpty()) {
-@@ -524,7 +593,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return maxStack; // CraftBukkit
-     }
- 
-     public boolean b(IBlockData iblockdata) {
-@@ -580,6 +649,11 @@
-     }
- 
-     public ItemStack getCarried() {
-+        // CraftBukkit start
-+        if (this.carried.isEmpty()) {
-+            this.setCarried(ItemStack.a);
-+        }
-+        // CraftBukkit end
-         return this.carried;
-     }
- 
diff --git a/nms-patches/PlayerList.patch b/nms-patches/PlayerList.patch
deleted file mode 100644
index 36adb55..0000000
--- a/nms-patches/PlayerList.patch
+++ /dev/null
@@ -1,1025 +0,0 @@
---- a/net/minecraft/server/PlayerList.java
-+++ b/net/minecraft/server/PlayerList.java
-@@ -19,6 +19,29 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import com.google.common.base.Predicate;
-+import com.google.common.collect.Iterables;
-+
-+import org.bukkit.craftbukkit.CraftServer;
-+import org.bukkit.craftbukkit.CraftWorld;
-+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
-+
-+import org.bukkit.Bukkit;
-+import org.bukkit.Location;
-+import org.bukkit.TravelAgent;
-+import org.bukkit.craftbukkit.util.CraftChatMessage;
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.player.PlayerChangedWorldEvent;
-+import org.bukkit.event.player.PlayerPortalEvent;
-+import org.bukkit.event.player.PlayerJoinEvent;
-+import org.bukkit.event.player.PlayerLoginEvent;
-+import org.bukkit.event.player.PlayerQuitEvent;
-+import org.bukkit.event.player.PlayerRespawnEvent;
-+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
-+import org.bukkit.util.Vector;
-+// CraftBukkit end
-+
- public abstract class PlayerList {
- 
-     public static final File a = new File("banned-players.json");
-@@ -28,14 +51,16 @@
-     private static final Logger f = LogManager.getLogger();
-     private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
-     private final MinecraftServer server;
--    public final List<EntityPlayer> players = Lists.newArrayList();
-+    public final List<EntityPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
-     private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
-     private final GameProfileBanList k;
-     private final IpBanList l;
-     private final OpList operators;
-     private final WhiteList whitelist;
--    private final Map<UUID, ServerStatisticManager> o;
--    private final Map<UUID, AdvancementDataPlayer> p;
-+    // CraftBukkit start
-+    // private final Map<UUID, ServerStatisticManager> o;
-+    // private final Map<UUID, AdvancementDataPlayer> p;
-+    // CraftBukkit end
-     public IPlayerFileData playerFileData;
-     private boolean hasWhitelist;
-     protected int maxPlayers;
-@@ -44,13 +69,23 @@
-     private boolean u;
-     private int v;
- 
-+    // CraftBukkit start
-+    private CraftServer cserver;
-+
-     public PlayerList(MinecraftServer minecraftserver) {
-+        this.cserver = minecraftserver.server = new CraftServer(minecraftserver, this);
-+        minecraftserver.console = org.bukkit.craftbukkit.command.ColouredConsoleSender.getInstance();
-+        minecraftserver.reader.addCompleter(new org.bukkit.craftbukkit.command.ConsoleCommandCompleter(minecraftserver.server));
-+        // CraftBukkit end
-+
-         this.k = new GameProfileBanList(PlayerList.a);
-         this.l = new IpBanList(PlayerList.b);
-         this.operators = new OpList(PlayerList.c);
-         this.whitelist = new WhiteList(PlayerList.d);
--        this.o = Maps.newHashMap();
--        this.p = Maps.newHashMap();
-+        // CraftBukkit start
-+        // this.o = Maps.newHashMap();
-+        // this.p = Maps.newHashMap();
-+        // CraftBukkit end
-         this.server = minecraftserver;
-         this.k.a(false);
-         this.l.a(false);
-@@ -65,6 +100,12 @@
- 
-         usercache.a(gameprofile);
-         NBTTagCompound nbttagcompound = this.a(entityplayer);
-+        // CraftBukkit start - Better rename detection
-+        if (nbttagcompound != null && nbttagcompound.hasKey("bukkit")) {
-+            NBTTagCompound bukkit = nbttagcompound.getCompound("bukkit");
-+            s = bukkit.hasKeyOfType("lastKnownName", 8) ? bukkit.getString("lastKnownName") : s;
-+        }
-+        // CraftBukkit end
- 
-         entityplayer.spawnIn(this.server.getWorldServer(entityplayer.dimension));
-         entityplayer.playerInteractManager.a((WorldServer) entityplayer.world);
-@@ -74,7 +115,8 @@
-             s1 = networkmanager.getSocketAddress().toString();
-         }
- 
--        PlayerList.f.info("{}[{}] logged in with entity id {} at ({}, {}, {})", entityplayer.getName(), s1, Integer.valueOf(entityplayer.getId()), Double.valueOf(entityplayer.locX), Double.valueOf(entityplayer.locY), Double.valueOf(entityplayer.locZ));
-+        // CraftBukkit - Moved message to after join
-+        // PlayerList.f.info("{}[{}] logged in with entity id {} at ({}, {}, {})", entityplayer.getName(), s1, Integer.valueOf(entityplayer.getId()), Double.valueOf(entityplayer.locX), Double.valueOf(entityplayer.locY), Double.valueOf(entityplayer.locZ));
-         WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
-         WorldData worlddata = worldserver.getWorldData();
- 
-@@ -82,6 +124,7 @@
-         PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
- 
-         playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimensionManager().getDimensionID(), worldserver.getDifficulty(), this.getMaxPlayers(), worlddata.getType(), worldserver.getGameRules().getBoolean("reducedDebugInfo")));
-+        entityplayer.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
-         playerconnection.sendPacket(new PacketPlayOutCustomPayload("MC|Brand", (new PacketDataSerializer(Unpooled.buffer())).a(this.getServer().getServerModName())));
-         playerconnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
-         playerconnection.sendPacket(new PacketPlayOutAbilities(entityplayer.abilities));
-@@ -91,17 +134,23 @@
-         entityplayer.F().a(entityplayer);
-         this.sendScoreboard((ScoreboardServer) worldserver.getScoreboard(), entityplayer);
-         this.server.aD();
--        ChatMessage chatmessage;
-+        // CraftBukkit start - login message is handled in the event
-+        // ChatMessage chatmessage;
- 
-+        String joinMessage;
-         if (entityplayer.getName().equalsIgnoreCase(s)) {
--            chatmessage = new ChatMessage("multiplayer.player.joined", new Object[] { entityplayer.getScoreboardDisplayName()});
-+            // chatmessage = new ChatMessage("multiplayer.player.joined", new Object[] { entityplayer.getScoreboardDisplayName()});
-+            joinMessage = "\u00A7e" + LocaleI18n.a("multiplayer.player.joined", entityplayer.getName());
-         } else {
--            chatmessage = new ChatMessage("multiplayer.player.joined.renamed", new Object[] { entityplayer.getScoreboardDisplayName(), s});
-+            // chatmessage = new ChatMessage("multiplayer.player.joined.renamed", new Object[] { entityplayer.getScoreboardDisplayName(), s});
-+            joinMessage = "\u00A7e" + LocaleI18n.a("multiplayer.player.joined.renamed", entityplayer.getName(), s);
-         }
- 
--        chatmessage.getChatModifier().setColor(EnumChatFormat.YELLOW);
--        this.sendMessage(chatmessage);
--        this.onPlayerJoin(entityplayer);
-+        // chatmessage.getChatModifier().setColor(EnumChatFormat.YELLOW);
-+        // this.sendMessage(chatmessage);
-+        this.onPlayerJoin(entityplayer, joinMessage);
-+        // CraftBukkit end
-+        worldserver = server.getWorldServer(entityplayer.dimension);  // CraftBukkit - Update in case join event changed it
-         playerconnection.a(entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
-         this.b(entityplayer, worldserver);
-         if (!this.server.getResourcePack().isEmpty()) {
-@@ -153,6 +202,8 @@
-         }
- 
-         entityplayer.syncInventory();
-+        // CraftBukkit - Moved from above, added world
-+        PlayerList.f.info(entityplayer.getName() + "[" + s1 + "] logged in with entity id " + entityplayer.getId() + " at ([" + entityplayer.world.worldData.getName() + "]" + entityplayer.locX + ", " + entityplayer.locY + ", " + entityplayer.locZ + ")");
-     }
- 
-     public void sendScoreboard(ScoreboardServer scoreboardserver, EntityPlayer entityplayer) {
-@@ -185,26 +236,27 @@
-     }
- 
-     public void setPlayerFileData(WorldServer[] aworldserver) {
-+        if (playerFileData != null) return; // CraftBukkit
-         this.playerFileData = aworldserver[0].getDataManager().getPlayerFileData();
-         aworldserver[0].getWorldBorder().a(new IWorldBorderListener() {
-             public void a(WorldBorder worldborder, double d0) {
--                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_SIZE));
-+                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_SIZE), worldborder.world);
-             }
- 
-             public void a(WorldBorder worldborder, double d0, double d1, long i) {
--                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.LERP_SIZE));
-+                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.LERP_SIZE), worldborder.world);
-             }
- 
-             public void a(WorldBorder worldborder, double d0, double d1) {
--                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_CENTER));
-+                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_CENTER), worldborder.world);
-             }
- 
-             public void a(WorldBorder worldborder, int i) {
--                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_TIME));
-+                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_TIME), worldborder.world);
-             }
- 
-             public void b(WorldBorder worldborder, int i) {
--                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_BLOCKS));
-+                PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_BLOCKS), worldborder.world);
-             }
- 
-             public void b(WorldBorder worldborder, double d0) {}
-@@ -237,7 +289,7 @@
- 
-     @Nullable
-     public NBTTagCompound a(EntityPlayer entityplayer) {
--        NBTTagCompound nbttagcompound = this.server.worldServer[0].getWorldData().h();
-+        NBTTagCompound nbttagcompound = this.server.worlds.get(0).getWorldData().h(); // CraftBukkit
-         NBTTagCompound nbttagcompound1;
- 
-         if (entityplayer.getName().equals(this.server.Q()) && nbttagcompound != null) {
-@@ -253,13 +305,13 @@
- 
-     protected void savePlayerFile(EntityPlayer entityplayer) {
-         this.playerFileData.save(entityplayer);
--        ServerStatisticManager serverstatisticmanager = (ServerStatisticManager) this.o.get(entityplayer.getUniqueID());
-+        ServerStatisticManager serverstatisticmanager = (ServerStatisticManager) entityplayer.getStatisticManager(); // CraftBukkit
- 
-         if (serverstatisticmanager != null) {
-             serverstatisticmanager.b();
-         }
- 
--        AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) this.p.get(entityplayer.getUniqueID());
-+        AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
- 
-         if (advancementdataplayer != null) {
-             advancementdataplayer.c();
-@@ -267,28 +319,73 @@
- 
-     }
- 
--    public void onPlayerJoin(EntityPlayer entityplayer) {
-+    public void onPlayerJoin(EntityPlayer entityplayer, String joinMessage) { // CraftBukkit added param
-         this.players.add(entityplayer);
-         this.j.put(entityplayer.getUniqueID(), entityplayer);
--        this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer}));
-+        // this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer})); // CraftBukkit - replaced with loop below
-         WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
- 
-+        // CraftBukkit start
-+        PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(cserver.getPlayer(entityplayer), joinMessage);
-+        cserver.getPluginManager().callEvent(playerJoinEvent);
-+
-+        joinMessage = playerJoinEvent.getJoinMessage();
-+
-+        if (joinMessage != null && joinMessage.length() > 0) {
-+            for (IChatBaseComponent line : org.bukkit.craftbukkit.util.CraftChatMessage.fromString(joinMessage)) {
-+                server.getPlayerList().sendAll(new PacketPlayOutChat(line));
-+            }
-+        }
-+
-+        ChunkIOExecutor.adjustPoolSize(getPlayerCount());
-+        // CraftBukkit end
-+
-+        // CraftBukkit start - sendAll above replaced with this loop
-+        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer);
-+
-         for (int i = 0; i < this.players.size(); ++i) {
--            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { (EntityPlayer) this.players.get(i)}));
-+            EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
-+
-+            if (entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
-+                entityplayer1.playerConnection.sendPacket(packet);
-+            }
-+
-+            if (!entityplayer.getBukkitEntity().canSee(entityplayer1.getBukkitEntity())) {
-+                continue;
-+            }
-+
-+            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer1}));
-         }
-+        entityplayer.sentListPacket = true;
-+        // CraftBukkit end
- 
--        worldserver.addEntity(entityplayer);
--        this.a(entityplayer, (WorldServer) null);
-+        // CraftBukkit start - Only add if the player wasn't moved in the event
-+        if (entityplayer.world == worldserver && !worldserver.players.contains(entityplayer)) {
-+            worldserver.addEntity(entityplayer);
-+            this.a(entityplayer, (WorldServer) null);
-+        }
-+        // CraftBukkit end
-     }
- 
-     public void d(EntityPlayer entityplayer) {
-         entityplayer.x().getPlayerChunkMap().movePlayer(entityplayer);
-     }
- 
--    public void disconnect(EntityPlayer entityplayer) {
-+    public String disconnect(EntityPlayer entityplayer) { // CraftBukkit - return string
-         WorldServer worldserver = entityplayer.x();
- 
-         entityplayer.b(StatisticList.f);
-+
-+        // CraftBukkit start - Quitting must be before we do final save of data, in case plugins need to modify it
-+        org.bukkit.craftbukkit.event.CraftEventFactory.handleInventoryCloseEvent(entityplayer);
-+
-+        PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(cserver.getPlayer(entityplayer), "\u00A7e" + entityplayer.getName() + " left the game");
-+        cserver.getPluginManager().callEvent(playerQuitEvent);
-+        entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
-+
-+        entityplayer.playerTick();// SPIGOT-924
-+        // CraftBukkit end
-+
-         this.savePlayerFile(entityplayer);
-         if (entityplayer.isPassenger()) {
-             Entity entity = entityplayer.getVehicle();
-@@ -318,17 +415,67 @@
- 
-         if (entityplayer1 == entityplayer) {
-             this.j.remove(uuid);
--            this.o.remove(uuid);
--            this.p.remove(uuid);
-+            // CraftBukkit start
-+            // this.o.remove(uuid);
-+            // this.p.remove(uuid);
-+            // CraftBukkit end
-         }
- 
--        this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, new EntityPlayer[] { entityplayer}));
-+        // CraftBukkit start
-+        //  this.sendAll(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER, new EntityPlayer[] { entityplayer}));
-+        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, entityplayer);
-+        for (int i = 0; i < players.size(); i++) {
-+            EntityPlayer entityplayer2 = (EntityPlayer) this.players.get(i);
-+
-+            if (entityplayer2.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
-+                entityplayer2.playerConnection.sendPacket(packet);
-+            } else {
-+                entityplayer2.getBukkitEntity().removeDisconnectingPlayer(entityplayer.getBukkitEntity());
-+            }
-+        }
-+        // This removes the scoreboard (and player reference) for the specific player in the manager
-+        cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
-+        // CraftBukkit end
-+
-+        ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
-+
-+        return playerQuitEvent.getQuitMessage(); // CraftBukkit
-     }
- 
--    public String attemptLogin(SocketAddress socketaddress, GameProfile gameprofile) {
-+    // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
-+    public EntityPlayer attemptLogin(LoginListener loginlistener, GameProfile gameprofile, String hostname) {
-+        // Moved from processLogin
-+        UUID uuid = EntityHuman.a(gameprofile);
-+        ArrayList arraylist = Lists.newArrayList();
-+
-+        EntityPlayer entityplayer;
-+
-+        for (int i = 0; i < this.players.size(); ++i) {
-+            entityplayer = (EntityPlayer) this.players.get(i);
-+            if (entityplayer.getUniqueID().equals(uuid)) {
-+                arraylist.add(entityplayer);
-+            }
-+        }
-+
-+        Iterator iterator = arraylist.iterator();
-+
-+        while (iterator.hasNext()) {
-+            entityplayer = (EntityPlayer) iterator.next();
-+            savePlayerFile(entityplayer); // CraftBukkit - Force the player's inventory to be saved
-+            entityplayer.playerConnection.disconnect(new ChatMessage("multiplayer.disconnect.duplicate_login", new Object[0]));
-+        }
-+
-+        // Instead of kicking then returning, we need to store the kick reason
-+        // in the event, check with plugins to see if it's ok, and THEN kick
-+        // depending on the outcome.
-+        SocketAddress socketaddress = loginlistener.networkManager.getSocketAddress();
-+
-+        EntityPlayer entity = new EntityPlayer(server, server.getWorldServer(0), gameprofile, new PlayerInteractManager(server.getWorldServer(0)));
-+        Player player = entity.getBukkitEntity();
-+        PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((java.net.InetSocketAddress) socketaddress).getAddress());
-         String s;
- 
--        if (this.k.isBanned(gameprofile)) {
-+        if (getProfileBans().isBanned(gameprofile) && !getProfileBans().get(gameprofile).hasExpired()) {
-             GameProfileBanEntry gameprofilebanentry = (GameProfileBanEntry) this.k.get(gameprofile);
- 
-             s = "You are banned from this server!\nReason: " + gameprofilebanentry.getReason();
-@@ -336,10 +483,12 @@
-                 s = s + "\nYour ban will be removed on " + PlayerList.g.format(gameprofilebanentry.getExpires());
-             }
- 
--            return s;
-+            // return s;
-+            event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s);
-         } else if (!this.isWhitelisted(gameprofile)) {
--            return "You are not white-listed on this server!";
--        } else if (this.l.isBanned(socketaddress)) {
-+            // return "You are not white-listed on this server!";
-+            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, "You are not white-listed on this server!");
-+        } else if (getIPBans().isBanned(socketaddress) && !getIPBans().get(socketaddress).hasExpired()) {
-             IpBanEntry ipbanentry = this.l.get(socketaddress);
- 
-             s = "Your IP address is banned from this server!\nReason: " + ipbanentry.getReason();
-@@ -347,13 +496,25 @@
-                 s = s + "\nYour ban will be removed on " + PlayerList.g.format(ipbanentry.getExpires());
-             }
- 
--            return s;
-+            // return s;
-+            event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s);
-         } else {
--            return this.players.size() >= this.maxPlayers && !this.f(gameprofile) ? "The server is full!" : null;
-+            // return this.players.size() >= this.maxPlayers && !this.f(gameprofile) ? "The server is full!" : null;
-+            if (this.players.size() >= this.maxPlayers && !this.f(gameprofile)) {
-+                event.disallow(PlayerLoginEvent.Result.KICK_FULL, "The server is full");
-+            }
-+        }
-+
-+        cserver.getPluginManager().callEvent(event);
-+        if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
-+            loginlistener.disconnect(event.getKickMessage());
-+            return null;
-         }
-+        return entity;
-     }
- 
--    public EntityPlayer processLogin(GameProfile gameprofile) {
-+    public EntityPlayer processLogin(GameProfile gameprofile, EntityPlayer player) { // CraftBukkit - added EntityPlayer
-+        /* CraftBukkit startMoved up
-         UUID uuid = EntityHuman.a(gameprofile);
-         ArrayList arraylist = Lists.newArrayList();
- 
-@@ -388,17 +549,27 @@
-         }
- 
-         return new EntityPlayer(this.server, this.server.getWorldServer(0), gameprofile, (PlayerInteractManager) object);
-+        */
-+        return player;
-+        // CraftBukkit end
-     }
- 
-+    // CraftBukkit start
-     public EntityPlayer moveToWorld(EntityPlayer entityplayer, int i, boolean flag) {
-+        return this.moveToWorld(entityplayer, i, flag, null, true);
-+    }
-+
-+    public EntityPlayer moveToWorld(EntityPlayer entityplayer, int i, boolean flag, Location location, boolean avoidSuffocation) {
-+        entityplayer.stopRiding(); // CraftBukkit
-         entityplayer.x().getTracker().untrackPlayer(entityplayer);
--        entityplayer.x().getTracker().untrackEntity(entityplayer);
-+        // entityplayer.x().getTracker().untrackEntity(entityplayer); // CraftBukkit
-         entityplayer.x().getPlayerChunkMap().removePlayer(entityplayer);
-         this.players.remove(entityplayer);
-         this.server.getWorldServer(entityplayer.dimension).removeEntity(entityplayer);
-         BlockPosition blockposition = entityplayer.getBed();
-         boolean flag1 = entityplayer.isRespawnForced();
- 
-+        /* CraftBukkit start
-         entityplayer.dimension = i;
-         Object object;
- 
-@@ -409,6 +580,11 @@
-         }
- 
-         EntityPlayer entityplayer1 = new EntityPlayer(this.server, this.server.getWorldServer(entityplayer.dimension), entityplayer.getProfile(), (PlayerInteractManager) object);
-+        // */
-+        EntityPlayer entityplayer1 = entityplayer;
-+        org.bukkit.World fromWorld = entityplayer.getBukkitEntity().getWorld();
-+        entityplayer.viewingCredits = false;
-+        // CraftBukkit end
- 
-         entityplayer1.playerConnection = entityplayer.playerConnection;
-         entityplayer1.copyFrom(entityplayer, flag);
-@@ -423,43 +599,163 @@
-             entityplayer1.addScoreboardTag(s);
-         }
- 
--        WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
-+        // WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);  // CraftBukkit - handled later
- 
--        this.a(entityplayer1, entityplayer, worldserver);
-+        // this.a(entityplayer1, entityplayer, worldserver); // CraftBukkit - removed
-         BlockPosition blockposition1;
- 
--        if (blockposition != null) {
--            blockposition1 = EntityHuman.getBed(this.server.getWorldServer(entityplayer.dimension), blockposition, flag1);
--            if (blockposition1 != null) {
--                entityplayer1.setPositionRotation((double) ((float) blockposition1.getX() + 0.5F), (double) ((float) blockposition1.getY() + 0.1F), (double) ((float) blockposition1.getZ() + 0.5F), 0.0F, 0.0F);
--                entityplayer1.setRespawnPosition(blockposition, flag1);
--            } else {
--                entityplayer1.playerConnection.sendPacket(new PacketPlayOutGameStateChange(0, 0.0F));
-+        // CraftBukkit start - fire PlayerRespawnEvent
-+        if (location == null) {
-+            boolean isBedSpawn = false;
-+            CraftWorld cworld = (CraftWorld) this.server.server.getWorld(entityplayer.spawnWorld);
-+            if (cworld != null && blockposition != null) {
-+                blockposition1 = EntityHuman.getBed(cworld.getHandle(), blockposition, flag1);
-+                if (blockposition1 != null) {
-+                    isBedSpawn = true;
-+                    location = new Location(cworld, (double) ((float) blockposition1.getX() + 0.5F), (double) ((float) blockposition1.getY() + 0.1F), (double) ((float) blockposition1.getZ() + 0.5F));
-+                } else {
-+                    entityplayer1.setRespawnPosition(null, true);
-+                    entityplayer1.playerConnection.sendPacket(new PacketPlayOutGameStateChange(0, 0.0F));
-+                }
-+            }
-+
-+            if (location == null) {
-+                cworld = (CraftWorld) this.server.server.getWorlds().get(0);
-+                blockposition = cworld.getHandle().getSpawn();
-+                location = new Location(cworld, (double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.1F), (double) ((float) blockposition.getZ() + 0.5F));
-             }
-+
-+            Player respawnPlayer = cserver.getPlayer(entityplayer1);
-+            PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn);
-+            cserver.getPluginManager().callEvent(respawnEvent);
-+
-+            location = respawnEvent.getRespawnLocation();
-+            entityplayer.reset();
-+        } else {
-+            location.setWorld(server.getWorldServer(i).getWorld());
-         }
-+        WorldServer worldserver = ((CraftWorld) location.getWorld()).getHandle();
-+        entityplayer1.forceSetPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
-+        // CraftBukkit end
- 
-         worldserver.getChunkProviderServer().getChunkAt((int) entityplayer1.locX >> 4, (int) entityplayer1.locZ >> 4);
- 
--        while (!worldserver.getCubes(entityplayer1, entityplayer1.getBoundingBox()).isEmpty() && entityplayer1.locY < 256.0D) {
-+        while (avoidSuffocation && !worldserver.getCubes(entityplayer1, entityplayer1.getBoundingBox()).isEmpty() && entityplayer1.locY < 256.0D) {
-             entityplayer1.setPosition(entityplayer1.locX, entityplayer1.locY + 1.0D, entityplayer1.locZ);
-         }
-+        // CraftBukkit start
-+        byte actualDimension = (byte) (worldserver.getWorld().getEnvironment().getId());
-+        // Force the client to refresh their chunk cache
-+        if (fromWorld.getEnvironment() == worldserver.getWorld().getEnvironment()) {
-+            entityplayer1.playerConnection.sendPacket(new PacketPlayOutRespawn((byte) (actualDimension >= 0 ? -1 : 0), worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer.playerInteractManager.getGameMode()));
-+        }
- 
--        entityplayer1.playerConnection.sendPacket(new PacketPlayOutRespawn(entityplayer1.dimension, entityplayer1.world.getDifficulty(), entityplayer1.world.getWorldData().getType(), entityplayer1.playerInteractManager.getGameMode()));
-+        entityplayer1.playerConnection.sendPacket(new PacketPlayOutRespawn(actualDimension, worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer1.playerInteractManager.getGameMode()));
-+        entityplayer1.spawnIn(worldserver);
-+        entityplayer1.dead = false;
-+        entityplayer1.playerConnection.teleport(new Location(worldserver.getWorld(), entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch));
-+        entityplayer1.setSneaking(false);
-         blockposition1 = worldserver.getSpawn();
--        entityplayer1.playerConnection.a(entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch);
-+        // entityplayer1.playerConnection.a(entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch);
-         entityplayer1.playerConnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition1));
-         entityplayer1.playerConnection.sendPacket(new PacketPlayOutExperience(entityplayer1.exp, entityplayer1.expTotal, entityplayer1.expLevel));
-         this.b(entityplayer1, worldserver);
-         this.f(entityplayer1);
--        worldserver.getPlayerChunkMap().addPlayer(entityplayer1);
--        worldserver.addEntity(entityplayer1);
--        this.players.add(entityplayer1);
--        this.j.put(entityplayer1.getUniqueID(), entityplayer1);
--        entityplayer1.syncInventory();
-+        if (!entityplayer.playerConnection.isDisconnected()) {
-+            worldserver.getPlayerChunkMap().addPlayer(entityplayer1);
-+            worldserver.addEntity(entityplayer1);
-+            this.players.add(entityplayer1);
-+            this.j.put(entityplayer1.getUniqueID(), entityplayer1);
-+        }
-+        // entityplayer1.syncInventory();
-         entityplayer1.setHealth(entityplayer1.getHealth());
-+        // Added from changeDimension
-+        updateClient(entityplayer); // Update health, etc...
-+        entityplayer.updateAbilities();
-+        for (Object o1 : entityplayer.getEffects()) {
-+            MobEffect mobEffect = (MobEffect) o1;
-+            entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer.getId(), mobEffect));
-+        }
-+
-+        // Fire advancement trigger
-+        CriterionTriggers.u.a(entityplayer, ((CraftWorld) fromWorld).getHandle().worldProvider.getDimensionManager(), worldserver.worldProvider.getDimensionManager());
-+        if (((CraftWorld) fromWorld).getHandle().worldProvider.getDimensionManager() == DimensionManager.NETHER && worldserver.worldProvider.getDimensionManager() == DimensionManager.OVERWORLD && entityplayer.Q() != null) {
-+            CriterionTriggers.B.a(entityplayer, entityplayer.Q());
-+        }
-+
-+        // Don't fire on respawn
-+        if (fromWorld != location.getWorld()) {
-+            PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(entityplayer.getBukkitEntity(), fromWorld);
-+            server.server.getPluginManager().callEvent(event);
-+        }
-+
-+        // Save player file again if they were disconnected
-+        if (entityplayer.playerConnection.isDisconnected()) {
-+            this.savePlayerFile(entityplayer);
-+        }
-+        // CraftBukkit end
-         return entityplayer1;
-     }
- 
-+    // CraftBukkit start - Replaced the standard handling of portals with a more customised method.
-+    public void changeDimension(EntityPlayer entityplayer, int i, TeleportCause cause) {
-+        WorldServer exitWorld = null;
-+        if (entityplayer.dimension < CraftWorld.CUSTOM_DIMENSION_OFFSET) { // plugins must specify exit from custom Bukkit worlds
-+            // only target existing worlds (compensate for allow-nether/allow-end as false)
-+            for (WorldServer world : this.server.worlds) {
-+                if (world.dimension == i) {
-+                    exitWorld = world;
-+                }
-+            }
-+        }
-+
-+        Location enter = entityplayer.getBukkitEntity().getLocation();
-+        Location exit = null;
-+        boolean useTravelAgent = false; // don't use agent for custom worlds or return from THE_END
-+        if (exitWorld != null) {
-+            if ((cause == TeleportCause.END_PORTAL) && (i == 0)) {
-+                // THE_END -> NORMAL; use bed if available, otherwise default spawn
-+                exit = ((org.bukkit.craftbukkit.entity.CraftPlayer) entityplayer.getBukkitEntity()).getBedSpawnLocation();
-+                if (exit == null || ((CraftWorld) exit.getWorld()).getHandle().dimension != 0) {
-+                    exit = exitWorld.getWorld().getSpawnLocation();
-+                }
-+            } else {
-+                // NORMAL <-> NETHER or NORMAL -> THE_END
-+                exit = this.calculateTarget(enter, exitWorld);
-+                useTravelAgent = true;
-+            }
-+        }
-+
-+        TravelAgent agent = exit != null ? (TravelAgent) ((CraftWorld) exit.getWorld()).getHandle().getTravelAgent() : org.bukkit.craftbukkit.CraftTravelAgent.DEFAULT; // return arbitrary TA to compensate for implementation dependent plugins
-+        PlayerPortalEvent event = new PlayerPortalEvent(entityplayer.getBukkitEntity(), enter, exit, agent, cause);
-+        event.useTravelAgent(useTravelAgent);
-+        Bukkit.getServer().getPluginManager().callEvent(event);
-+        if (event.isCancelled() || event.getTo() == null) {
-+            return;
-+        }
-+
-+        exit = event.useTravelAgent() ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo();
-+        if (exit == null) {
-+            return;
-+        }
-+        exitWorld = ((CraftWorld) exit.getWorld()).getHandle();
-+
-+        org.bukkit.event.player.PlayerTeleportEvent tpEvent = new org.bukkit.event.player.PlayerTeleportEvent(entityplayer.getBukkitEntity(), enter, exit, cause);
-+        Bukkit.getServer().getPluginManager().callEvent(tpEvent);
-+        if (tpEvent.isCancelled() || tpEvent.getTo() == null) {
-+            return;
-+        }
-+
-+        Vector velocity = entityplayer.getBukkitEntity().getVelocity();
-+        exitWorld.getTravelAgent().adjustExit(entityplayer, exit, velocity);
-+
-+        entityplayer.worldChangeInvuln = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
-+        this.moveToWorld(entityplayer, exitWorld.dimension, true, exit, false); // Vanilla doesn't check for suffocation when handling portals, so neither should we
-+        if (entityplayer.motX != velocity.getX() || entityplayer.motY != velocity.getY() || entityplayer.motZ != velocity.getZ()) {
-+            entityplayer.getBukkitEntity().setVelocity(velocity);
-+        }
-+    }
-+
-     public void f(EntityPlayer entityplayer) {
-         GameProfile gameprofile = entityplayer.getProfile();
-         int i = this.isOp(gameprofile) ? this.operators.a(gameprofile) : 0;
-@@ -498,12 +794,111 @@
-     }
- 
-     public void changeWorld(Entity entity, int i, WorldServer worldserver, WorldServer worldserver1) {
-+        // CraftBukkit start - Split into modular functions
-+        Location exit = calculateTarget(entity.getBukkitEntity().getLocation(), worldserver1);
-+        repositionEntity(entity, exit, true);
-+    }
-+
-+    // Copy of original changeWorld(Entity, int, WorldServer, WorldServer) method with only location calculation logic
-+    public Location calculateTarget(Location enter, World target) {
-+        WorldServer worldserver = ((CraftWorld) enter.getWorld()).getHandle();
-+        WorldServer worldserver1 = ((CraftWorld) target.getWorld()).getHandle();
-+        int i = worldserver.dimension;
-+
-+        double y = enter.getY();
-+        float yaw = enter.getYaw();
-+        float pitch = enter.getPitch();
-+        double d0 = enter.getX();
-+        double d1 = enter.getZ();
-+         double d2 = 8.0D;
-+        /*
-+        double d0 = entity.locX;
-+        double d1 = entity.locZ;
-+        double d2 = 8.0D;
-+        float f = entity.yaw;
-+        */
-+
-+        worldserver.methodProfiler.a("moving");
-+        if (worldserver1.dimension == -1) {
-+            d0 = MathHelper.a(d0 / d2, worldserver1.getWorldBorder().b()+ 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
-+            d1 = MathHelper.a(d1 / d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
-+            /*
-+            entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-+            if (entity.isAlive()) {
-+                worldserver.entityJoinedWorld(entity, false);
-+            }
-+            */
-+        } else if (worldserver1.dimension == 0) {
-+            d0 = MathHelper.a(d0 * d2, worldserver1.getWorldBorder().b() + 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
-+            d1 = MathHelper.a(d1 * d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
-+            /*
-+            entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-+            if (entity.isAlive()) {
-+                worldserver.entityJoinedWorld(entity, false);
-+            }
-+            */
-+        } else {
-+            BlockPosition blockposition;
-+
-+            if (i == 1) {
-+                // use default NORMAL world spawn instead of target
-+                worldserver1 = this.server.worlds.get(0);
-+                blockposition = worldserver1.getSpawn();
-+            } else {
-+                blockposition = worldserver1.getDimensionSpawn();
-+            }
-+
-+            d0 = (double) blockposition.getX();
-+            y = (double) blockposition.getY();
-+            d1 = (double) blockposition.getZ();
-+            /*
-+            entity.setPositionRotation(d0, entity.locY, d1, 90.0F, 0.0F);
-+            if (entity.isAlive()) {
-+                worldserver.entityJoinedWorld(entity, false);
-+            }
-+            */
-+        }
-+
-+        worldserver.methodProfiler.b();
-+        if (i != 1) {
-+            worldserver.methodProfiler.a("placing");
-+            d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
-+            d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
-+            /*
-+            if (entity.isAlive()) {
-+                entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-+                worldserver1.getTravelAgent().a(entity, f);
-+                worldserver1.addEntity(entity);
-+                worldserver1.entityJoinedWorld(entity, false);
-+            }
-+            */
-+
-+            worldserver.methodProfiler.b();
-+        }
-+
-+        // entity.spawnIn(worldserver1);
-+        return new Location(worldserver1.getWorld(), d0, y, d1, yaw, pitch);
-+    }
-+
-+    // copy of original a(Entity, int, WorldServer, WorldServer) method with only entity repositioning logic
-+    public void repositionEntity(Entity entity, Location exit, boolean portal) {
-+        WorldServer worldserver = (WorldServer) entity.world;
-+        WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
-+        int i = worldserver.dimension;
-+
-+        /*
-         double d0 = entity.locX;
-         double d1 = entity.locZ;
-         double d2 = 8.0D;
-         float f = entity.yaw;
-+        */
- 
-         worldserver.methodProfiler.a("moving");
-+        entity.setPositionRotation(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
-+        if (entity.isAlive()) {
-+            worldserver.entityJoinedWorld(entity, false);
-+        }
-+        /*
-         if (entity.dimension == -1) {
-             d0 = MathHelper.a(d0 / 8.0D, worldserver1.getWorldBorder().b() + 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
-             d1 = MathHelper.a(d1 / 8.0D, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
-@@ -522,6 +917,8 @@
-             BlockPosition blockposition;
- 
-             if (i == 1) {
-+                // use default NORMAL world spawn instead of target
-+                worldserver1 = this.server.worlds.get(0);
-                 blockposition = worldserver1.getSpawn();
-             } else {
-                 blockposition = worldserver1.getDimensionSpawn();
-@@ -535,16 +932,27 @@
-                 worldserver.entityJoinedWorld(entity, false);
-             }
-         }
-+        */
- 
-         worldserver.methodProfiler.b();
-         if (i != 1) {
-             worldserver.methodProfiler.a("placing");
-+            /*
-             d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
-             d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
-+            */
-             if (entity.isAlive()) {
--                entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
--                worldserver1.getTravelAgent().a(entity, f);
--                worldserver1.addEntity(entity);
-+                // entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-+                // worldserver1.getTravelAgent().a(entity, f);
-+                if (portal) {
-+                    Vector velocity = entity.getBukkitEntity().getVelocity();
-+                    worldserver1.getTravelAgent().adjustExit(entity, exit, velocity);
-+                    entity.setPositionRotation(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
-+                    if (entity.motX != velocity.getX() || entity.motY != velocity.getY() || entity.motZ != velocity.getZ()) {
-+                        entity.getBukkitEntity().setVelocity(velocity);
-+                    }
-+                }
-+                // worldserver1.addEntity(entity);
-                 worldserver1.entityJoinedWorld(entity, false);
-             }
- 
-@@ -552,11 +960,23 @@
-         }
- 
-         entity.spawnIn(worldserver1);
-+        // CraftBukkit end
-     }
- 
-     public void tick() {
-         if (++this.v > 600) {
--            this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY, this.players));
-+            // CraftBukkit start
-+            for (int i = 0; i < this.players.size(); ++i) {
-+                final EntityPlayer target = (EntityPlayer) this.players.get(i);
-+
-+                target.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY, Iterables.filter(this.players, new Predicate<EntityPlayer>() {
-+                    @Override
-+                    public boolean apply(EntityPlayer input) {
-+                        return target.getBukkitEntity().canSee(input.getBukkitEntity());
-+                    }
-+                })));
-+            }
-+            // CraftBukkit end
-             this.v = 0;
-         }
- 
-@@ -569,6 +989,25 @@
- 
-     }
- 
-+    // CraftBukkit start - add a world/entity limited version
-+    public void sendAll(Packet packet, EntityHuman entityhuman) {
-+        for (int i = 0; i < this.players.size(); ++i) {
-+            EntityPlayer entityplayer =  this.players.get(i);
-+            if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
-+                continue;
-+            }
-+            ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
-+        }
-+    }
-+
-+    public void sendAll(Packet packet, World world) {
-+        for (int i = 0; i < world.players.size(); ++i) {
-+            ((EntityPlayer) world.players.get(i)).playerConnection.sendPacket(packet);
-+        }
-+
-+    }
-+    // CraftBukkit end
-+
-     public void a(Packet<?> packet, int i) {
-         for (int j = 0; j < this.players.size(); ++j) {
-             EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
-@@ -667,11 +1106,23 @@
- 
-         this.operators.add(new OpListEntry(gameprofile, this.server.q(), this.operators.b(gameprofile)));
-         this.b(this.a(gameprofile.getId()), i);
-+        // CraftBukkit start
-+        Player player = server.server.getPlayer(gameprofile.getId());
-+        if (player != null) {
-+           player.recalculatePermissions();
-+        }
-+        // CraftBukkit end
-     }
- 
-     public void removeOp(GameProfile gameprofile) {
-         this.operators.remove(gameprofile);
-         this.b(this.a(gameprofile.getId()), 0);
-+        // CraftBukkit start
-+        Player player = server.server.getPlayer(gameprofile.getId());
-+        if (player != null) {
-+            player.recalculatePermissions();
-+        }
-+        // CraftBukkit end
-     }
- 
-     private void b(EntityPlayer entityplayer, int i) {
-@@ -696,7 +1147,7 @@
-     }
- 
-     public boolean isOp(GameProfile gameprofile) {
--        return this.operators.d(gameprofile) || this.server.R() && this.server.worldServer[0].getWorldData().u() && this.server.Q().equalsIgnoreCase(gameprofile.getName()) || this.u;
-+        return this.operators.d(gameprofile) || this.server.R() && this.server.worlds.get(0).getWorldData().u() && this.server.Q().equalsIgnoreCase(gameprofile.getName()) || this.u; // CraftBukkit
-     }
- 
-     @Nullable
-@@ -720,6 +1171,12 @@
-         for (int j = 0; j < this.players.size(); ++j) {
-             EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
- 
-+            // CraftBukkit start - Test if player receiving packet can see the source of the packet
-+            if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
-+               continue;
-+            }
-+            // CraftBukkit end
-+
-             if (entityplayer != entityhuman && entityplayer.dimension == i) {
-                 double d4 = d0 - entityplayer.locX;
-                 double d5 = d1 - entityplayer.locY;
-@@ -767,7 +1224,7 @@
-     public void reloadWhitelist() {}
- 
-     public void b(EntityPlayer entityplayer, WorldServer worldserver) {
--        WorldBorder worldborder = this.server.worldServer[0].getWorldBorder();
-+        WorldBorder worldborder = entityplayer.world.getWorldBorder(); // CraftBukkit
- 
-         entityplayer.playerConnection.sendPacket(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.INITIALIZE));
-         entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean("doDaylightCycle")));
-@@ -775,16 +1232,21 @@
- 
-         entityplayer.playerConnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition));
-         if (worldserver.isRaining()) {
--            entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(1, 0.0F));
--            entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(7, worldserver.j(1.0F)));
--            entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(8, worldserver.h(1.0F)));
-+            // CraftBukkit start - handle player weather
-+            // entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(1, 0.0F));
-+            // entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(7, worldserver.j(1.0F)));
-+            // entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(8, worldserver.h(1.0F)));
-+            entityplayer.setPlayerWeather(org.bukkit.WeatherType.DOWNFALL, false);
-+            entityplayer.updateWeather(-worldserver.o, worldserver.o, -worldserver.q, worldserver.q);
-+            // CraftBukkit end
-         }
- 
-     }
- 
-     public void updateClient(EntityPlayer entityplayer) {
-         entityplayer.updateInventory(entityplayer.defaultContainer);
--        entityplayer.triggerHealthUpdate();
-+        // entityplayer.triggerHealthUpdate();
-+        entityplayer.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
-         entityplayer.playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
-     }
- 
-@@ -797,7 +1259,7 @@
-     }
- 
-     public String[] getSeenPlayers() {
--        return this.server.worldServer[0].getDataManager().getPlayerFileData().getSeenPlayers();
-+        return this.server.worlds.get(0).getDataManager().getPlayerFileData().getSeenPlayers(); // CraftBukkit
-     }
- 
-     public boolean getHasWhitelist() {
-@@ -846,26 +1308,39 @@
-     }
- 
-     public void u() {
--        for (int i = 0; i < this.players.size(); ++i) {
--            ((EntityPlayer) this.players.get(i)).playerConnection.disconnect(new ChatMessage("multiplayer.disconnect.server_shutdown", new Object[0]));
-+        // CraftBukkit start - disconnect safely
-+        for (EntityPlayer player : this.players) {
-+            player.playerConnection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
-         }
-+        // CraftBukkit end
- 
-     }
- 
-+    // CraftBukkit start
-+    public void sendMessage(IChatBaseComponent[] iChatBaseComponents) {
-+        for (IChatBaseComponent component : iChatBaseComponents) {
-+            sendMessage(component, true);
-+        }
-+    }
-+    // CraftBukkit end
-+
-     public void sendMessage(IChatBaseComponent ichatbasecomponent, boolean flag) {
-         this.server.sendMessage(ichatbasecomponent);
-         ChatMessageType chatmessagetype = flag ? ChatMessageType.SYSTEM : ChatMessageType.CHAT;
- 
--        this.sendAll(new PacketPlayOutChat(ichatbasecomponent, chatmessagetype));
-+        // CraftBukkit start - we run this through our processor first so we can get web links etc
-+        this.sendAll(new PacketPlayOutChat(CraftChatMessage.fixComponent(ichatbasecomponent), chatmessagetype));
-+        // CraftBukkit end
-     }
- 
-     public void sendMessage(IChatBaseComponent ichatbasecomponent) {
-         this.sendMessage(ichatbasecomponent, true);
-     }
- 
--    public ServerStatisticManager getStatisticManager(EntityHuman entityhuman) {
-+    public ServerStatisticManager getStatisticManager(EntityPlayer entityhuman) {
-         UUID uuid = entityhuman.getUniqueID();
--        ServerStatisticManager serverstatisticmanager = uuid == null ? null : (ServerStatisticManager) this.o.get(uuid);
-+        ServerStatisticManager serverstatisticmanager = uuid == null ? null : (ServerStatisticManager) entityhuman.getStatisticManager();
-+        // CraftBukkit end
- 
-         if (serverstatisticmanager == null) {
-             File file = new File(this.server.getWorldServer(0).getDataManager().getDirectory(), "stats");
-@@ -881,7 +1356,7 @@
- 
-             serverstatisticmanager = new ServerStatisticManager(this.server, file1);
-             serverstatisticmanager.a();
--            this.o.put(uuid, serverstatisticmanager);
-+            // this.o.put(uuid, serverstatisticmanager); // CraftBukkit
-         }
- 
-         return serverstatisticmanager;
-@@ -889,14 +1364,14 @@
- 
-     public AdvancementDataPlayer h(EntityPlayer entityplayer) {
-         UUID uuid = entityplayer.getUniqueID();
--        AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) this.p.get(uuid);
-+        AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
- 
-         if (advancementdataplayer == null) {
-             File file = new File(this.server.getWorldServer(0).getDataManager().getDirectory(), "advancements");
-             File file1 = new File(file, uuid + ".json");
- 
-             advancementdataplayer = new AdvancementDataPlayer(this.server, file1, entityplayer);
--            this.p.put(uuid, advancementdataplayer);
-+            // this.p.put(uuid, advancementdataplayer); // CraftBukkit
-         }
- 
-         advancementdataplayer.a(entityplayer);
-@@ -909,8 +1384,10 @@
-             WorldServer[] aworldserver = this.server.worldServer;
-             int j = aworldserver.length;
- 
--            for (int k = 0; k < j; ++k) {
--                WorldServer worldserver = aworldserver[k];
-+            // CraftBukkit start
-+            for (int k = 0; k < server.worlds.size(); ++k) {
-+                WorldServer worldserver = server.worlds.get(0);
-+                // CraftBukkit end
- 
-                 if (worldserver != null) {
-                     worldserver.getPlayerChunkMap().a(i);
-@@ -934,13 +1411,20 @@
-     }
- 
-     public void reload() {
--        Iterator iterator = this.p.values().iterator();
-+        // CraftBukkit start
-+        /*Iterator iterator = this.p.values().iterator();
- 
-         while (iterator.hasNext()) {
-             AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) iterator.next();
- 
-             advancementdataplayer.b();
-+        }*/
-+
-+        for (EntityPlayer player : players) {
-+            player.getAdvancementData().b();
-+            player.getAdvancementData().b(player); // CraftBukkit - trigger immediate flush of advancements
-         }
-+        // CraftBukkit end
- 
-     }
- }
diff --git a/nms-patches/PortalTravelAgent.patch b/nms-patches/PortalTravelAgent.patch
deleted file mode 100644
index 0c1c4e7..0000000
--- a/nms-patches/PortalTravelAgent.patch
+++ /dev/null
@@ -1,288 +0,0 @@
---- a/net/minecraft/server/PortalTravelAgent.java
-+++ b/net/minecraft/server/PortalTravelAgent.java
-@@ -4,6 +4,11 @@
- import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
- import it.unimi.dsi.fastutil.objects.ObjectIterator;
- import java.util.Random;
-+// CraftBukkit start
-+import org.bukkit.Location;
-+import org.bukkit.event.entity.EntityPortalExitEvent;
-+import org.bukkit.util.Vector;
-+// CraftBukkit end
- 
- public class PortalTravelAgent {
- 
-@@ -26,8 +31,21 @@
-             int i = MathHelper.floor(entity.locX);
-             int j = MathHelper.floor(entity.locY) - 1;
-             int k = MathHelper.floor(entity.locZ);
--            boolean flag = true;
--            boolean flag1 = false;
-+            // CraftBukkit start - Modularize end portal creation
-+            BlockPosition created = this.createEndPortal(entity.locX, entity.locY, entity.locZ);
-+            entity.setPositionRotation((double) created.getX(), (double) created.getY(), (double) created.getZ(), entity.yaw, 0.0F);
-+            entity.motX = entity.motY = entity.motZ = 0.0D;
-+        }
-+    }
-+
-+    // Split out from original a(Entity, double, double, double, float) method in order to enable being called from createPortal
-+    private BlockPosition createEndPortal(double x, double y, double z) {
-+            int i = MathHelper.floor(x);
-+            int j = MathHelper.floor(y) - 1;
-+            int k = MathHelper.floor(z);
-+            // CraftBukkit end
-+            byte b0 = 1;
-+            byte b1 = 0;
- 
-             for (int l = -2; l <= 2; ++l) {
-                 for (int i1 = -2; i1 <= 2; ++i1) {
-@@ -42,18 +60,63 @@
-                 }
-             }
- 
--            entity.setPositionRotation((double) i, (double) j, (double) k, entity.yaw, 0.0F);
--            entity.motX = 0.0D;
--            entity.motY = 0.0D;
--            entity.motZ = 0.0D;
-+        // CraftBukkit start
-+        return new BlockPosition(i, k, k);
-+    }
-+
-+    // use logic based on creation to verify end portal
-+    private BlockPosition findEndPortal(BlockPosition portal) {
-+        int i = portal.getX();
-+        int j = portal.getY() - 1;
-+        int k = portal.getZ();
-+        byte b0 = 1;
-+        byte b1 = 0;
-+
-+        for (int l = -2; l <= 2; ++l) {
-+            for (int i1 = -2; i1 <= 2; ++i1) {
-+                for (int j1 = -1; j1 < 3; ++j1) {
-+                    int k1 = i + i1 * b0 + l * b1;
-+                    int l1 = j + j1;
-+                    int i2 = k + i1 * b1 - l * b0;
-+                    boolean flag = j1 < 0;
-+
-+                    if (this.world.getType(new BlockPosition(k1, l1, i2)).getBlock() != (flag ? Blocks.OBSIDIAN : Blocks.AIR)) {
-+                        return null;
-+                    }
-+                }
-+            }
-         }
-+        return new BlockPosition(i, j, k);
-     }
-+    // CraftBukkit end
- 
-     public boolean b(Entity entity, float f) {
--        boolean flag = true;
-+        // CraftBukkit start - Modularize portal search process and entity teleportation
-+        BlockPosition found = this.findPortal(entity.locX, entity.locY, entity.locZ, 128);
-+        if (found == null) {
-+            return false;
-+        }
-+
-+        Location exit = new Location(this.world.getWorld(), found.getX(), found.getY(), found.getZ(), f, entity.pitch);
-+        Vector velocity = entity.getBukkitEntity().getVelocity();
-+        this.adjustExit(entity, exit, velocity);
-+        entity.setPositionRotation(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
-+        if (entity.motX != velocity.getX() || entity.motY != velocity.getY() || entity.motZ != velocity.getZ()) {
-+            entity.getBukkitEntity().setVelocity(velocity);
-+        }
-+        return true;
-+    }
-+
-+    public BlockPosition findPortal(double x, double y, double z, int radius) {
-+        if (this.world.getWorld().getEnvironment() == org.bukkit.World.Environment.THE_END) {
-+            return this.findEndPortal(this.world.worldProvider.h());
-+        }
-+        // CraftBukkit end
-         double d0 = -1.0D;
--        int i = MathHelper.floor(entity.locX);
--        int j = MathHelper.floor(entity.locZ);
-+        // CraftBukkit start
-+        int i = MathHelper.floor(x);
-+        int j = MathHelper.floor(z);
-+        // CraftBukkit end
-         boolean flag1 = true;
-         Object object = BlockPosition.ZERO;
-         long k = ChunkCoordIntPair.a(i, j);
-@@ -66,12 +129,12 @@
-             portaltravelagent_chunkcoordinatesportal.b = this.world.getTime();
-             flag1 = false;
-         } else {
--            BlockPosition blockposition = new BlockPosition(entity);
-+            BlockPosition blockposition = new BlockPosition(x, y, z); // CraftBukkit
- 
--            for (int l = -128; l <= 128; ++l) {
-+            for (int l = -radius; l <= radius; ++l) {
-                 BlockPosition blockposition1;
- 
--                for (int i1 = -128; i1 <= 128; ++i1) {
-+                for (int i1 = -radius; i1 <= radius; ++i1) {
-                     for (BlockPosition blockposition2 = blockposition.a(l, this.world.ab() - 1 - blockposition.getY(), i1); blockposition2.getY() >= 0; blockposition2 = blockposition1) {
-                         blockposition1 = blockposition2.down();
-                         if (this.world.getType(blockposition2).getBlock() == Blocks.PORTAL) {
-@@ -95,6 +158,29 @@
-             if (flag1) {
-                 this.c.put(k, new PortalTravelAgent.ChunkCoordinatesPortal((BlockPosition) object, this.world.getTime()));
-             }
-+            // CraftBukkit start - Move entity teleportation logic into exit
-+            return (BlockPosition) object;
-+        } else {
-+            return null;
-+        }
-+    }
-+
-+    // Entity repositioning logic split out from original b method and combined with repositioning logic for The End from original a method
-+    public void adjustExit(Entity entity, Location position, Vector velocity) {
-+        Location from = position.clone();
-+        Vector before = velocity.clone();
-+        BlockPosition object = new BlockPosition(position.getBlockX(), position.getBlockY(), position.getBlockZ());
-+        float f = position.getYaw();
-+
-+        if (this.world.getWorld().getEnvironment() == org.bukkit.World.Environment.THE_END || entity.getBukkitEntity().getWorld().getEnvironment() == org.bukkit.World.Environment.THE_END || entity.getPortalOffset() == null) {
-+            // entity.setPositionRotation((double) i, (double) j, (double) k, entity.yaw, 0.0F);
-+            // entity.motX = entity.motY = entity.motZ = 0.0D;
-+            position.setPitch(0.0F);
-+            velocity.setX(0);
-+            velocity.setY(0);
-+            velocity.setZ(0);
-+        } else {
-+            // CraftBukkit end
- 
-             double d2 = (double) ((BlockPosition) object).getX() + 0.5D;
-             double d3 = (double) ((BlockPosition) object).getZ() + 0.5D;
-@@ -132,30 +218,59 @@
-                 f4 = 1.0F;
-             }
- 
--            double d6 = entity.motX;
--            double d7 = entity.motZ;
--
--            entity.motX = d6 * (double) f1 + d7 * (double) f4;
--            entity.motZ = d6 * (double) f3 + d7 * (double) f2;
--            entity.yaw = f - (float) (entity.getPortalDirection().opposite().get2DRotationValue() * 90) + (float) (shapedetector_shapedetectorcollection.getFacing().get2DRotationValue() * 90);
--            if (entity instanceof EntityPlayer) {
--                ((EntityPlayer) entity).playerConnection.a(d2, d5, d3, entity.yaw, entity.pitch);
--            } else {
--                entity.setPositionRotation(d2, d5, d3, entity.yaw, entity.pitch);
--            }
--
--            return true;
-+            // CraftBukkit start
-+            double d6 = velocity.getX();
-+            double d7 = velocity.getZ();
-+            // CraftBukkit end
-+
-+            // CraftBukkit start - Adjust position and velocity instances instead of entity
-+            velocity.setX(d6 * (double) f1 + d7 * (double) f4);
-+            velocity.setZ(d6 * (double) f3 + d7 * (double) f2);
-+            f = f - (float) (entity.getPortalDirection().opposite().get2DRotationValue() * 90) + (float) (shapedetector_shapedetectorcollection.getFacing().get2DRotationValue() * 90);
-+            // entity.setPositionRotation(d2, d5, d3, entity.yaw, entity.pitch);
-+            position.setX(d2);
-+            position.setY(d5);
-+            position.setZ(d3);
-+            position.setYaw(f);
-+        }
-+        EntityPortalExitEvent event = new EntityPortalExitEvent(entity.getBukkitEntity(), from, position, before, velocity);
-+        this.world.getServer().getPluginManager().callEvent(event);
-+        Location to = event.getTo();
-+        if (event.isCancelled() || to == null || !entity.isAlive()) {
-+            position.setX(from.getX());
-+            position.setY(from.getY());
-+            position.setZ(from.getZ());
-+            position.setYaw(from.getYaw());
-+            position.setPitch(from.getPitch());
-+            velocity.copy(before);
-         } else {
--            return false;
-+            position.setX(to.getX());
-+            position.setY(to.getY());
-+            position.setZ(to.getZ());
-+            position.setYaw(to.getYaw());
-+            position.setPitch(to.getPitch());
-+            velocity.copy(event.getAfter()); // event.getAfter() will never be null, as setAfter() will cause an NPE if null is passed in
-         }
-+        // CraftBukkit end
-     }
- 
-     public boolean a(Entity entity) {
--        boolean flag = true;
-+        // CraftBukkit start - Allow for portal creation to be based on coordinates instead of entity
-+        return this.createPortal(entity.locX, entity.locY, entity.locZ, 16);
-+    }
-+
-+    public boolean createPortal(double x, double y, double z, int b0) {
-+        if (this.world.getWorld().getEnvironment() == org.bukkit.World.Environment.THE_END) {
-+            createEndPortal(x, y, z);
-+            return true;
-+        }
-+        // CraftBukkit end
-         double d0 = -1.0D;
--        int i = MathHelper.floor(entity.locX);
--        int j = MathHelper.floor(entity.locY);
--        int k = MathHelper.floor(entity.locZ);
-+        // CraftBukkit start
-+        int i = MathHelper.floor(x);
-+        int j = MathHelper.floor(y);
-+        int k = MathHelper.floor(z);
-+        // CraftBukkit end
-         int l = i;
-         int i1 = j;
-         int j1 = k;
-@@ -180,10 +295,10 @@
-         double d4;
- 
-         for (i2 = i - 16; i2 <= i + 16; ++i2) {
--            d1 = (double) i2 + 0.5D - entity.locX;
-+            d1 = (double) i2 + 0.5D - x; // CraftBukkit
- 
-             for (j2 = k - 16; j2 <= k + 16; ++j2) {
--                d2 = (double) j2 + 0.5D - entity.locZ;
-+                d2 = (double) j2 + 0.5D - z; // CraftBukkit
- 
-                 label271:
-                 for (k2 = this.world.ab() - 1; k2 >= 0; --k2) {
-@@ -215,7 +330,7 @@
-                                 }
-                             }
- 
--                            d3 = (double) k2 + 0.5D - entity.locY;
-+                            d3 = (double) k2 + 0.5D - y; // CraftBukkit
-                             d4 = d1 * d1 + d3 * d3 + d2 * d2;
-                             if (d0 < 0.0D || d4 < d0) {
-                                 d0 = d4;
-@@ -232,10 +347,10 @@
- 
-         if (d0 < 0.0D) {
-             for (i2 = i - 16; i2 <= i + 16; ++i2) {
--                d1 = (double) i2 + 0.5D - entity.locX;
-+                d1 = (double) i2 + 0.5D - x; // CraftBukkit
- 
-                 for (j2 = k - 16; j2 <= k + 16; ++j2) {
--                    d2 = (double) j2 + 0.5D - entity.locZ;
-+                    d2 = (double) j2 + 0.5D - z; // CraftBukkit
- 
-                     label219:
-                     for (k2 = this.world.ab() - 1; k2 >= 0; --k2) {
-@@ -260,7 +375,7 @@
-                                     }
-                                 }
- 
--                                d3 = (double) k2 + 0.5D - entity.locY;
-+                                d3 = (double) k2 + 0.5D - y; // CraftBukkit
-                                 d4 = d1 * d1 + d3 * d3 + d2 * d2;
-                                 if (d0 < 0.0D || d4 < d0) {
-                                     d0 = d4;
-@@ -359,5 +474,10 @@
-             super(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-             this.b = i;
-         }
-+
-+        @Override
-+        public int compareTo(BaseBlockPosition o) {
-+            return this.l(o);
-+        }
-     }
- }
diff --git a/nms-patches/PropertyManager.patch b/nms-patches/PropertyManager.patch
deleted file mode 100644
index c312cda..0000000
--- a/nms-patches/PropertyManager.patch
+++ /dev/null
@@ -1,93 +0,0 @@
---- a/net/minecraft/server/PropertyManager.java
-+++ b/net/minecraft/server/PropertyManager.java
-@@ -8,6 +8,8 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+import joptsimple.OptionSet; // CraftBukkit
-+
- public class PropertyManager {
- 
-     private static final Logger a = LogManager.getLogger();
-@@ -42,6 +44,24 @@
- 
-     }
- 
-+    // CraftBukkit start
-+    private OptionSet options = null;
-+
-+    public PropertyManager(final OptionSet options) {
-+        this((File) options.valueOf("config"));
-+
-+        this.options = options;
-+    }
-+
-+    private <T> T getOverride(String name, T value) {
-+        if ((this.options != null) && (this.options.has(name))) {
-+            return (T) this.options.valueOf(name);
-+        }
-+
-+        return value;
-+    }
-+    // CraftBukkit end
-+
-     public void a() {
-         PropertyManager.a.info("Generating new properties file");
-         this.savePropertiesFile();
-@@ -51,6 +71,12 @@
-         FileOutputStream fileoutputstream = null;
- 
-         try {
-+            // CraftBukkit start - Don't attempt writing to file if it's read only
-+            if (this.file.exists() && !this.file.canWrite()) {
-+                return;
-+            }
-+            // CraftBukkit end
-+
-             fileoutputstream = new FileOutputStream(this.file);
-             this.properties.store(fileoutputstream, "Minecraft server properties");
-         } catch (Exception exception) {
-@@ -80,36 +106,36 @@
-             this.savePropertiesFile();
-         }
- 
--        return this.properties.getProperty(s, s1);
-+        return getOverride(s, this.properties.getProperty(s, s1)); // CraftBukkit
-     }
- 
-     public int getInt(String s, int i) {
-         try {
--            return Integer.parseInt(this.getString(s, "" + i));
-+            return getOverride(s, Integer.parseInt(this.getString(s, "" + i))); // CraftBukkit
-         } catch (Exception exception) {
-             this.properties.setProperty(s, "" + i);
-             this.savePropertiesFile();
--            return i;
-+            return getOverride(s, i); // CraftBukkit
-         }
-     }
- 
-     public long getLong(String s, long i) {
-         try {
--            return Long.parseLong(this.getString(s, "" + i));
-+            return getOverride(s, Long.parseLong(this.getString(s, "" + i))); // CraftBukkit
-         } catch (Exception exception) {
-             this.properties.setProperty(s, "" + i);
-             this.savePropertiesFile();
--            return i;
-+            return getOverride(s, i); // CraftBukkit
-         }
-     }
- 
-     public boolean getBoolean(String s, boolean flag) {
-         try {
--            return Boolean.parseBoolean(this.getString(s, "" + flag));
-+            return getOverride(s, Boolean.parseBoolean(this.getString(s, "" + flag))); //CraftBukkit
-         } catch (Exception exception) {
-             this.properties.setProperty(s, "" + flag);
-             this.savePropertiesFile();
--            return flag;
-+            return getOverride(s, flag); // CraftBukkit
-         }
-     }
- 
diff --git a/nms-patches/RecipeArmorDye.patch b/nms-patches/RecipeArmorDye.patch
deleted file mode 100644
index 02407e6..0000000
--- a/nms-patches/RecipeArmorDye.patch
+++ /dev/null
@@ -1,18 +0,0 @@
---- a/net/minecraft/server/RecipeArmorDye.java
-+++ b/net/minecraft/server/RecipeArmorDye.java
-@@ -3,9 +3,13 @@
- import com.google.common.collect.Lists;
- import java.util.ArrayList;
- 
--public class RecipeArmorDye implements IRecipe {
-+public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
- 
--    public RecipeArmorDye() {}
-+    // CraftBukkit start - Delegate to new parent class with bogus info
-+    public RecipeArmorDye() {
-+        super("", new ItemStack(Items.LEATHER_HELMET, 0, 0), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.DYE)));
-+    }
-+    // CraftBukkit end
- 
-     public boolean a(InventoryCrafting inventorycrafting, World world) {
-         ItemStack itemstack = ItemStack.a;
diff --git a/nms-patches/RecipeBookClone.patch b/nms-patches/RecipeBookClone.patch
deleted file mode 100644
index d5417aa..0000000
--- a/nms-patches/RecipeBookClone.patch
+++ /dev/null
@@ -1,16 +0,0 @@
---- a/net/minecraft/server/RecipeBookClone.java
-+++ b/net/minecraft/server/RecipeBookClone.java
-@@ -1,8 +1,11 @@
- package net.minecraft.server;
- 
--public class RecipeBookClone implements IRecipe {
-+public class RecipeBookClone extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
- 
--    public RecipeBookClone() {}
-+    public RecipeBookClone() {
-+        super("", new ItemStack(Items.WRITTEN_BOOK, 0, -1), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.WRITABLE_BOOK)));
-+    }
-+    // CraftBukkit end
- 
-     public boolean a(InventoryCrafting inventorycrafting, World world) {
-         int i = 0;
diff --git a/nms-patches/RecipeFireworks.patch b/nms-patches/RecipeFireworks.patch
deleted file mode 100644
index 43478e0..0000000
--- a/nms-patches/RecipeFireworks.patch
+++ /dev/null
@@ -1,20 +0,0 @@
---- a/net/minecraft/server/RecipeFireworks.java
-+++ b/net/minecraft/server/RecipeFireworks.java
-@@ -3,13 +3,16 @@
- import com.google.common.collect.Lists;
- import java.util.ArrayList;
- 
--public class RecipeFireworks implements IRecipe {
-+public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
- 
-     private ItemStack a;
- 
-+    // CraftBukkit start - Delegate to new parent class with bogus info
-     public RecipeFireworks() {
-+        super("", new ItemStack(Items.FIREWORKS, 0, 0), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.GUNPOWDER)));
-         this.a = ItemStack.a;
-     }
-+    // CraftBukkit end
- 
-     public boolean a(InventoryCrafting inventorycrafting, World world) {
-         this.a = ItemStack.a;
diff --git a/nms-patches/RecipeMapClone.patch b/nms-patches/RecipeMapClone.patch
deleted file mode 100644
index 0405727..0000000
--- a/nms-patches/RecipeMapClone.patch
+++ /dev/null
@@ -1,17 +0,0 @@
---- a/net/minecraft/server/RecipeMapClone.java
-+++ b/net/minecraft/server/RecipeMapClone.java
-@@ -1,8 +1,12 @@
- package net.minecraft.server;
- 
--public class RecipeMapClone implements IRecipe {
-+public class RecipeMapClone extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
- 
--    public RecipeMapClone() {}
-+    // CraftBukkit start - Delegate to new parent class
-+    public RecipeMapClone() {
-+        super("", new ItemStack(Items.MAP, 0, -1), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.MAP)));
-+    }
-+    // CraftBukkit end
- 
-     public boolean a(InventoryCrafting inventorycrafting, World world) {
-         int i = 0;
diff --git a/nms-patches/RecipeRepair.patch b/nms-patches/RecipeRepair.patch
deleted file mode 100644
index 7deebd5..0000000
--- a/nms-patches/RecipeRepair.patch
+++ /dev/null
@@ -1,38 +0,0 @@
---- a/net/minecraft/server/RecipeRepair.java
-+++ b/net/minecraft/server/RecipeRepair.java
-@@ -3,9 +3,13 @@
- import com.google.common.collect.Lists;
- import java.util.ArrayList;
- 
--public class RecipeRepair implements IRecipe {
-+public class RecipeRepair extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
- 
--    public RecipeRepair() {}
-+    // CraftBukkit start - Delegate to new parent class
-+    public RecipeRepair() {
-+        super("", new ItemStack(Items.LEATHER_HELMET), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.LEATHER_HELMET)));
-+    }
-+    // CraftBukkit end
- 
-     public boolean a(InventoryCrafting inventorycrafting, World world) {
-         ArrayList arraylist = Lists.newArrayList();
-@@ -62,7 +66,18 @@
-                     i1 = 0;
-                 }
- 
--                return new ItemStack(itemstack2.getItem(), 1, i1);
-+                // CraftBukkit start - Construct a dummy repair recipe
-+                ItemStack result = new ItemStack(itemstack.getItem(), 1, i1);
-+                NonNullList<RecipeItemStack> ingredients = NonNullList.a();
-+                ingredients.add(RecipeItemStack.a(new ItemStack[]{itemstack2.cloneItemStack()}));
-+                ingredients.add(RecipeItemStack.a(new ItemStack[]{itemstack.cloneItemStack()}));
-+                ShapelessRecipes recipe = new ShapelessRecipes("", result.cloneItemStack(), ingredients);
-+                recipe.key = new MinecraftKey("repairitem");
-+                inventorycrafting.currentRecipe = recipe;
-+                result = org.bukkit.craftbukkit.event.CraftEventFactory.callPreCraftEvent(inventorycrafting, result, inventorycrafting.container.getBukkitView(), true);
-+                return result;
-+                // return new ItemStack(itemstack2.getItem(), 1, i1);
-+                // CraftBukkit end
-             }
-         }
- 
diff --git a/nms-patches/RecipeShulkerBox.patch b/nms-patches/RecipeShulkerBox.patch
deleted file mode 100644
index f3eab88..0000000
--- a/nms-patches/RecipeShulkerBox.patch
+++ /dev/null
@@ -1,20 +0,0 @@
---- a/net/minecraft/server/RecipeShulkerBox.java
-+++ b/net/minecraft/server/RecipeShulkerBox.java
-@@ -1,8 +1,15 @@
- package net.minecraft.server;
- 
--public class RecipeShulkerBox {    public static class Dye implements IRecipe {
-+// CraftBukkit - decompile weirdness
-+public class RecipeShulkerBox {
- 
--        public Dye() {}
-+    public static class Dye extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
-+
-+        // CraftBukkit start - Delegate to new parent class with bogus info
-+        public Dye() {
-+            super("", new ItemStack(Blocks.WHITE_SHULKER_BOX, 0, 0), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.DYE)));
-+        }
-+        // CraftBukkit end
- 
-         public boolean a(InventoryCrafting inventorycrafting, World world) {
-             int i = 0;
diff --git a/nms-patches/RecipeTippedArrow.patch b/nms-patches/RecipeTippedArrow.patch
deleted file mode 100644
index 04840d4..0000000
--- a/nms-patches/RecipeTippedArrow.patch
+++ /dev/null
@@ -1,22 +0,0 @@
---- a/net/minecraft/server/RecipeTippedArrow.java
-+++ b/net/minecraft/server/RecipeTippedArrow.java
-@@ -2,9 +2,17 @@
- 
- import java.util.Collection;
- 
--public class RecipeTippedArrow implements IRecipe {
-+public class RecipeTippedArrow extends ShapedRecipes implements IRecipe { // CraftBukkit
- 
--    public RecipeTippedArrow() {}
-+    // CraftBukkit start
-+    public RecipeTippedArrow() {
-+        super("", 3, 3, NonNullList.a(RecipeItemStack.a,
-+                RecipeItemStack.a(Items.ARROW), RecipeItemStack.a(Items.ARROW), RecipeItemStack.a(Items.ARROW),
-+                RecipeItemStack.a(Items.ARROW), RecipeItemStack.a(Items.LINGERING_POTION), RecipeItemStack.a(Items.ARROW),
-+                RecipeItemStack.a(Items.ARROW), RecipeItemStack.a(Items.ARROW), RecipeItemStack.a(Items.ARROW)),
-+                new ItemStack(Items.TIPPED_ARROW, 8));
-+    }
-+    // CraftBukkit end
- 
-     public boolean a(InventoryCrafting inventorycrafting, World world) {
-         if (inventorycrafting.j() == 3 && inventorycrafting.i() == 3) {
diff --git a/nms-patches/RecipesBanner.patch b/nms-patches/RecipesBanner.patch
deleted file mode 100644
index 293911a..0000000
--- a/nms-patches/RecipesBanner.patch
+++ /dev/null
@@ -1,37 +0,0 @@
---- a/net/minecraft/server/RecipesBanner.java
-+++ b/net/minecraft/server/RecipesBanner.java
-@@ -2,9 +2,16 @@
- 
- import javax.annotation.Nullable;
- 
--public class RecipesBanner {    public static class AddRecipe implements IRecipe {
-+// CraftBukkit - decompile weirdness
-+public class RecipesBanner {
- 
--        public AddRecipe() {}
-+    public static class AddRecipe extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
-+
-+        // CraftBukkit start - Delegate to new parent class with bogus info
-+        public AddRecipe() {
-+            super("", new ItemStack(Items.BANNER, 0, 0), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.BANNER)));
-+        }
-+        // CraftBukkit end
- 
-         public boolean a(InventoryCrafting inventorycrafting, World world) {
-             boolean flag = false;
-@@ -186,9 +193,13 @@
-         }
-     }
- 
--    public static class DuplicateRecipe implements IRecipe {
-+    public static class DuplicateRecipe extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
- 
--        public DuplicateRecipe() {}
-+        // CraftBukkit start - Delegate to new parent class with bogus info
-+        public DuplicateRecipe() {
-+            super("", new ItemStack(Items.BANNER, 0, 0), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.DYE)));
-+        }
-+        // CraftBukkit end
- 
-         public boolean a(InventoryCrafting inventorycrafting, World world) {
-             ItemStack itemstack = ItemStack.a;
diff --git a/nms-patches/RecipesFurnace.patch b/nms-patches/RecipesFurnace.patch
deleted file mode 100644
index ccc7b33..0000000
--- a/nms-patches/RecipesFurnace.patch
+++ /dev/null
@@ -1,80 +0,0 @@
---- a/net/minecraft/server/RecipesFurnace.java
-+++ b/net/minecraft/server/RecipesFurnace.java
-@@ -8,8 +8,10 @@
- public class RecipesFurnace {
- 
-     private static final RecipesFurnace a = new RecipesFurnace();
--    public final Map<ItemStack, ItemStack> recipes = Maps.newHashMap();
-+    public Map<ItemStack, ItemStack> recipes = Maps.newHashMap();
-     private final Map<ItemStack, Float> experience = Maps.newHashMap();
-+    public Map<ItemStack,ItemStack> customRecipes = Maps.newHashMap(); // CraftBukkit - add field
-+    public Map<ItemStack,Float> customExperience = Maps.newHashMap(); // CraftBukkit - add field
- 
-     public static RecipesFurnace getInstance() {
-         return RecipesFurnace.a;
-@@ -94,6 +96,13 @@
-         this.a(new ItemStack(Blocks.STAINED_HARDENED_CLAY, 1, EnumColor.BLACK.getColorIndex()), new ItemStack(Blocks.dQ), 0.1F);
-     }
- 
-+    // CraftBukkit start - add method
-+    public void registerRecipe(ItemStack itemstack, ItemStack itemstack1, float f) {
-+        this.customRecipes.put(itemstack, itemstack1);
-+        this.customExperience.put(itemstack, f);
-+    }
-+    // CraftBukkit end
-+
-     public void registerRecipe(Block block, ItemStack itemstack, float f) {
-         this.a(Item.getItemOf(block), itemstack, f);
-     }
-@@ -108,13 +117,23 @@
-     }
- 
-     public ItemStack getResult(ItemStack itemstack) {
--        Iterator iterator = this.recipes.entrySet().iterator();
-+        // CraftBukkit start - initialize to customRecipes
-+        boolean vanilla = false;
-+        Iterator<Entry<ItemStack, ItemStack>> iterator = this.customRecipes.entrySet().iterator();
-+        // CraftBukkit end
- 
-         Entry entry;
- 
-         do {
-             if (!iterator.hasNext()) {
--                return ItemStack.a;
-+                // CraftBukkit start - fall back to vanilla recipes
-+                if (!vanilla && !this.recipes.isEmpty()) {
-+                    iterator = this.recipes.entrySet().iterator();
-+                    vanilla = true;
-+                } else {
-+                    return ItemStack.a;
-+                }
-+                // CraftBukkit end
-             }
- 
-             entry = (Entry) iterator.next();
-@@ -132,13 +151,23 @@
-     }
- 
-     public float b(ItemStack itemstack) {
--        Iterator iterator = this.experience.entrySet().iterator();
-+        // CraftBukkit start - initialize to customRecipes
-+        boolean vanilla = false;
-+        Iterator<Entry<ItemStack, Float>> iterator = this.customExperience.entrySet().iterator();
-+        // CraftBukkit end
- 
-         Entry entry;
- 
-         do {
-             if (!iterator.hasNext()) {
--                return 0.0F;
-+                // CraftBukkit start - fall back to vanilla recipes
-+                if (!vanilla && !this.experience.isEmpty()) {
-+                    iterator = this.experience.entrySet().iterator();
-+                    vanilla = true;
-+                } else {
-+                    return 0.0F;
-+                }
-+                // CraftBukkit end
-             }
- 
-             entry = (Entry) iterator.next();
diff --git a/nms-patches/RecipiesShield.patch b/nms-patches/RecipiesShield.patch
deleted file mode 100644
index bfdd5ea..0000000
--- a/nms-patches/RecipiesShield.patch
+++ /dev/null
@@ -1,20 +0,0 @@
---- a/net/minecraft/server/RecipiesShield.java
-+++ b/net/minecraft/server/RecipiesShield.java
-@@ -1,8 +1,15 @@
- package net.minecraft.server;
- 
--public class RecipiesShield {    public static class Decoration implements IRecipe {
-+// CraftBukkit - decompile weirdness
-+public class RecipiesShield {
- 
--        public Decoration() {}
-+    public static class Decoration extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
-+
-+        // CraftBukkit start - Delegate to new parent class with bogus info
-+        public Decoration() {
-+            super("", new ItemStack(Items.SHIELD, 0, 0), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.BANNER)));
-+        }
-+        // CraftBukkit end
- 
-         public boolean a(InventoryCrafting inventorycrafting, World world) {
-             ItemStack itemstack = ItemStack.a;
diff --git a/nms-patches/RegionFileCache.patch b/nms-patches/RegionFileCache.patch
deleted file mode 100644
index 84697d7..0000000
--- a/nms-patches/RegionFileCache.patch
+++ /dev/null
@@ -1,34 +0,0 @@
---- a/net/minecraft/server/RegionFileCache.java
-+++ b/net/minecraft/server/RegionFileCache.java
-@@ -74,17 +74,27 @@
-         RegionFileCache.a.clear();
-     }
- 
--    public static DataInputStream d(File file, int i, int j) {
-+    // CraftBukkit start - call sites hoisted for synchronization
-+    public static synchronized NBTTagCompound d(File file, int i, int j) throws IOException {
-         RegionFile regionfile = a(file, i, j);
- 
--        return regionfile.a(i & 31, j & 31);
-+        DataInputStream datainputstream = regionfile.a(i & 31, j & 31);
-+
-+        if (datainputstream == null) {
-+            return null;
-+        }
-+
-+        return NBTCompressedStreamTools.a(datainputstream);
-     }
- 
--    public static DataOutputStream e(File file, int i, int j) {
-+    public static synchronized void e(File file, int i, int j, NBTTagCompound nbttagcompound) throws IOException {
-         RegionFile regionfile = a(file, i, j);
- 
--        return regionfile.b(i & 31, j & 31);
-+        DataOutputStream dataoutputstream = regionfile.b(i & 31, j & 31);
-+        NBTCompressedStreamTools.a(nbttagcompound, (java.io.DataOutput) dataoutputstream);
-+        dataoutputstream.close();
-     }
-+    // CraftBukkit end
- 
-     public static synchronized boolean chunkExists(File file, int i, int j) {
-         RegionFile regionfile = b(file, i, j);
diff --git a/nms-patches/RemoteControlCommandListener.patch b/nms-patches/RemoteControlCommandListener.patch
deleted file mode 100644
index 22369f8..0000000
--- a/nms-patches/RemoteControlCommandListener.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/RemoteControlCommandListener.java
-+++ b/net/minecraft/server/RemoteControlCommandListener.java
-@@ -21,6 +21,12 @@
-         return "Rcon";
-     }
- 
-+    // CraftBukkit start - Send a String
-+    public void sendMessage(String message) {
-+        this.a.append(message);
-+    }
-+    // CraftBukkit end
-+
-     public void sendMessage(IChatBaseComponent ichatbasecomponent) {
-         this.a.append(ichatbasecomponent.toPlainText());
-     }
diff --git a/nms-patches/ScoreboardServer.patch b/nms-patches/ScoreboardServer.patch
deleted file mode 100644
index 36e6f5e..0000000
--- a/nms-patches/ScoreboardServer.patch
+++ /dev/null
@@ -1,126 +0,0 @@
---- a/net/minecraft/server/ScoreboardServer.java
-+++ b/net/minecraft/server/ScoreboardServer.java
-@@ -21,7 +21,7 @@
-     public void handleScoreChanged(ScoreboardScore scoreboardscore) {
-         super.handleScoreChanged(scoreboardscore);
-         if (this.b.contains(scoreboardscore.getObjective())) {
--            this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardScore(scoreboardscore));
-+            this.sendAll(new PacketPlayOutScoreboardScore(scoreboardscore));
-         }
- 
-         this.b();
-@@ -29,13 +29,13 @@
- 
-     public void handlePlayerRemoved(String s) {
-         super.handlePlayerRemoved(s);
--        this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardScore(s));
-+        this.sendAll(new PacketPlayOutScoreboardScore(s));
-         this.b();
-     }
- 
-     public void a(String s, ScoreboardObjective scoreboardobjective) {
-         super.a(s, scoreboardobjective);
--        this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardScore(s, scoreboardobjective));
-+        this.sendAll(new PacketPlayOutScoreboardScore(s, scoreboardobjective));
-         this.b();
-     }
- 
-@@ -45,7 +45,7 @@
-         super.setDisplaySlot(i, scoreboardobjective);
-         if (scoreboardobjective1 != scoreboardobjective && scoreboardobjective1 != null) {
-             if (this.h(scoreboardobjective1) > 0) {
--                this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardDisplayObjective(i, scoreboardobjective));
-+                this.sendAll(new PacketPlayOutScoreboardDisplayObjective(i, scoreboardobjective));
-             } else {
-                 this.g(scoreboardobjective1);
-             }
-@@ -53,7 +53,7 @@
- 
-         if (scoreboardobjective != null) {
-             if (this.b.contains(scoreboardobjective)) {
--                this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardDisplayObjective(i, scoreboardobjective));
-+                this.sendAll(new PacketPlayOutScoreboardDisplayObjective(i, scoreboardobjective));
-             } else {
-                 this.e(scoreboardobjective);
-             }
-@@ -66,7 +66,7 @@
-         if (super.addPlayerToTeam(s, s1)) {
-             ScoreboardTeam scoreboardteam = this.getTeam(s1);
- 
--            this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 3));
-+            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 3));
-             this.b();
-             return true;
-         } else {
-@@ -76,7 +76,7 @@
- 
-     public void removePlayerFromTeam(String s, ScoreboardTeam scoreboardteam) {
-         super.removePlayerFromTeam(s, scoreboardteam);
--        this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 4));
-+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 4));
-         this.b();
-     }
- 
-@@ -88,7 +88,7 @@
-     public void handleObjectiveChanged(ScoreboardObjective scoreboardobjective) {
-         super.handleObjectiveChanged(scoreboardobjective);
-         if (this.b.contains(scoreboardobjective)) {
--            this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardObjective(scoreboardobjective, 2));
-+            this.sendAll(new PacketPlayOutScoreboardObjective(scoreboardobjective, 2));
-         }
- 
-         this.b();
-@@ -105,19 +105,19 @@
- 
-     public void handleTeamAdded(ScoreboardTeam scoreboardteam) {
-         super.handleTeamAdded(scoreboardteam);
--        this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, 0));
-+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, 0));
-         this.b();
-     }
- 
-     public void handleTeamChanged(ScoreboardTeam scoreboardteam) {
-         super.handleTeamChanged(scoreboardteam);
--        this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, 2));
-+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, 2));
-         this.b();
-     }
- 
-     public void handleTeamRemoved(ScoreboardTeam scoreboardteam) {
-         super.handleTeamRemoved(scoreboardteam);
--        this.a.getPlayerList().sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, 1));
-+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, 1));
-         this.b();
-     }
- 
-@@ -166,6 +166,7 @@
- 
-         while (iterator.hasNext()) {
-             EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-+            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this) continue; // CraftBukkit - Only players on this board
-             Iterator iterator1 = list.iterator();
- 
-             while (iterator1.hasNext()) {
-@@ -198,6 +199,7 @@
- 
-         while (iterator.hasNext()) {
-             EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-+            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this) continue; // CraftBukkit - Only players on this board
-             Iterator iterator1 = list.iterator();
- 
-             while (iterator1.hasNext()) {
-@@ -221,4 +223,14 @@
- 
-         return i;
-     }
-+
-+    // CraftBukkit start - Send to players
-+    private void sendAll(Packet packet) {
-+        for (EntityPlayer entityplayer : (List<EntityPlayer>) this.a.getPlayerList().players) {
-+            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() == this) {
-+                entityplayer.playerConnection.sendPacket(packet);
-+            }
-+        }
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/SecondaryWorldServer.patch b/nms-patches/SecondaryWorldServer.patch
deleted file mode 100644
index f05e64b..0000000
--- a/nms-patches/SecondaryWorldServer.patch
+++ /dev/null
@@ -1,38 +0,0 @@
---- a/net/minecraft/server/SecondaryWorldServer.java
-+++ b/net/minecraft/server/SecondaryWorldServer.java
-@@ -4,9 +4,12 @@
- 
-     private final WorldServer a;
- 
--    public SecondaryWorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, int i, WorldServer worldserver, MethodProfiler methodprofiler) {
--        super(minecraftserver, idatamanager, new SecondaryWorldData(worldserver.getWorldData()), i, methodprofiler);
-+    // CraftBukkit start - Add WorldData, Environment and ChunkGenerator arguments
-+    public SecondaryWorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, int i, WorldServer worldserver, MethodProfiler methodprofiler, WorldData worldData, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
-+        super(minecraftserver, idatamanager, worldData, i, methodprofiler, env, gen);
-+        // CraftBukkit end
-         this.a = worldserver;
-+        /* CraftBukkit start
-         worldserver.getWorldBorder().a(new IWorldBorderListener() {
-             public void a(WorldBorder worldborder, double d0) {
-                 SecondaryWorldServer.this.getWorldBorder().setSize(d0);
-@@ -36,9 +39,10 @@
-                 SecondaryWorldServer.this.getWorldBorder().setDamageBuffer(d0);
-             }
-         });
-+        // CraftBukkit end */
-     }
- 
--    protected void a() {}
-+    // protected void a() {} // CraftBukkit
- 
-     public World b() {
-         this.worldMaps = this.a.Z();
-@@ -56,7 +60,7 @@
-             this.villages.a((World) this);
-         }
- 
--        return this;
-+        return super.b(); // CraftBukkit
-     }
- 
-     public void c() {
diff --git a/nms-patches/ShapedRecipes.patch b/nms-patches/ShapedRecipes.patch
deleted file mode 100644
index e5c8474..0000000
--- a/nms-patches/ShapedRecipes.patch
+++ /dev/null
@@ -1,92 +0,0 @@
---- a/net/minecraft/server/ShapedRecipes.java
-+++ b/net/minecraft/server/ShapedRecipes.java
-@@ -14,6 +14,10 @@
- import java.util.Map;
- import java.util.Map.Entry;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
-+// CraftBukkit end
- 
- public class ShapedRecipes implements IRecipe {
- 
-@@ -22,6 +26,14 @@
-     private final NonNullList<RecipeItemStack> items;
-     private final ItemStack result;
-     private final String e;
-+    // CraftBukkit start
-+    public MinecraftKey key;
-+
-+    @Override
-+    public void setKey(MinecraftKey key) {
-+        this.key = key;
-+    }
-+    // CraftBukkit end
- 
-     public ShapedRecipes(String s, int i, int j, NonNullList<RecipeItemStack> nonnulllist, ItemStack itemstack) {
-         this.e = s;
-@@ -31,6 +43,63 @@
-         this.result = itemstack;
-     }
- 
-+    // CraftBukkit start
-+    public org.bukkit.inventory.ShapedRecipe toBukkitRecipe() {
-+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
-+        CraftShapedRecipe recipe = new CraftShapedRecipe(result, this);
-+        switch (this.height) {
-+        case 1:
-+            switch (this.width) {
-+            case 1:
-+                recipe.shape("a");
-+                break;
-+            case 2:
-+                recipe.shape("ab");
-+                break;
-+            case 3:
-+                recipe.shape("abc");
-+                break;
-+            }
-+            break;
-+        case 2:
-+            switch (this.width) {
-+            case 1:
-+                recipe.shape("a","b");
-+                break;
-+            case 2:
-+                recipe.shape("ab","cd");
-+                break;
-+            case 3:
-+                recipe.shape("abc","def");
-+                break;
-+            }
-+            break;
-+        case 3:
-+            switch (this.width) {
-+            case 1:
-+                recipe.shape("a","b","c");
-+                break;
-+            case 2:
-+                recipe.shape("ab","cd","ef");
-+                break;
-+            case 3:
-+                recipe.shape("abc","def","ghi");
-+                break;
-+            }
-+            break;
-+        }
-+        char c = 'a';
-+        for (RecipeItemStack list : this.items) {
-+            if (list != null && list.choices.length > 0) {
-+                net.minecraft.server.ItemStack stack = list.choices[0];
-+                recipe.setIngredient(c, org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(stack.getItem()), (list.choices.length) > 1 ? 32767 : stack.getData());
-+            }
-+            c++;
-+        }
-+        return recipe;
-+    }
-+    // CraftBukkit end
-+
-     public ItemStack b() {
-         return this.result;
-     }
diff --git a/nms-patches/ShapelessRecipes.patch b/nms-patches/ShapelessRecipes.patch
deleted file mode 100644
index d91e17c..0000000
--- a/nms-patches/ShapelessRecipes.patch
+++ /dev/null
@@ -1,49 +0,0 @@
---- a/net/minecraft/server/ShapelessRecipes.java
-+++ b/net/minecraft/server/ShapelessRecipes.java
-@@ -6,12 +6,24 @@
- import com.google.gson.JsonParseException;
- import java.util.ArrayList;
- import java.util.Iterator;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.craftbukkit.inventory.CraftShapelessRecipe;
-+// CraftBukkit end
- 
- public class ShapelessRecipes implements IRecipe {
- 
-     private final ItemStack result;
-     private final NonNullList<RecipeItemStack> ingredients;
-     private final String c;
-+    // CraftBukkit start
-+    public MinecraftKey key;
-+
-+    @Override
-+    public void setKey(MinecraftKey key) {
-+        this.key = key;
-+    }
-+    // CraftBukkit end
- 
-     public ShapelessRecipes(String s, ItemStack itemstack, NonNullList<RecipeItemStack> nonnulllist) {
-         this.c = s;
-@@ -19,6 +31,21 @@
-         this.ingredients = nonnulllist;
-     }
- 
-+    // CraftBukkit start
-+    @SuppressWarnings("unchecked")
-+    public org.bukkit.inventory.ShapelessRecipe toBukkitRecipe() {
-+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
-+        CraftShapelessRecipe recipe = new CraftShapelessRecipe(result, this);
-+        for (RecipeItemStack list : this.ingredients) {
-+            if (list != null) {
-+                net.minecraft.server.ItemStack stack = list.choices[0];
-+                recipe.addIngredient(org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(stack.getItem()), (list.choices.length) > 1 ? 32767 : stack.getData());
-+            }
-+        }
-+        return recipe;
-+    }
-+    // CraftBukkit end
-+
-     public ItemStack b() {
-         return this.result;
-     }
diff --git a/nms-patches/SlotFurnaceResult.patch b/nms-patches/SlotFurnaceResult.patch
deleted file mode 100644
index bcc110d..0000000
--- a/nms-patches/SlotFurnaceResult.patch
+++ /dev/null
@@ -1,32 +0,0 @@
---- a/net/minecraft/server/SlotFurnaceResult.java
-+++ b/net/minecraft/server/SlotFurnaceResult.java
-@@ -1,5 +1,10 @@
- package net.minecraft.server;
- 
-+// CraftBukkit start
-+import org.bukkit.entity.Player;
-+import org.bukkit.event.inventory.FurnaceExtractEvent;
-+// CraftBukkit end
-+
- public class SlotFurnaceResult extends Slot {
- 
-     private final EntityHuman a;
-@@ -51,6 +56,18 @@
-                 i = j;
-             }
- 
-+            // CraftBukkit start - fire FurnaceExtractEvent
-+            Player player = (Player) a.getBukkitEntity();
-+            TileEntityFurnace furnace = ((TileEntityFurnace) this.inventory);
-+            org.bukkit.block.Block block = a.world.getWorld().getBlockAt(furnace.position.getX(), furnace.position.getY(), furnace.position.getZ());
-+
-+            if (b != 0) {
-+                FurnaceExtractEvent event = new FurnaceExtractEvent(player, block, org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(itemstack.getItem()), b, i);
-+                a.world.getServer().getPluginManager().callEvent(event);
-+                i = event.getExpToDrop();
-+            }
-+            // CraftBukkit end
-+
-             while (i > 0) {
-                 j = EntityExperienceOrb.getOrbValue(i);
-                 i -= j;
diff --git a/nms-patches/SpawnerCreature.patch b/nms-patches/SpawnerCreature.patch
deleted file mode 100644
index ce90948..0000000
--- a/nms-patches/SpawnerCreature.patch
+++ /dev/null
@@ -1,111 +0,0 @@
---- a/net/minecraft/server/SpawnerCreature.java
-+++ b/net/minecraft/server/SpawnerCreature.java
-@@ -6,10 +6,16 @@
- import java.util.Random;
- import java.util.Set;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.util.LongHash;
-+import org.bukkit.craftbukkit.util.LongHashSet;
-+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-+// CraftBukkit end
-+
- public final class SpawnerCreature {
- 
-     private static final int a = (int) Math.pow(17.0D, 2.0D);
--    private final Set<ChunkCoordIntPair> b = Sets.newHashSet();
-+    private final LongHashSet b = new LongHashSet(); // CraftBukkit
- 
-     public SpawnerCreature() {}
- 
-@@ -38,13 +44,16 @@
-                             boolean flag4 = i1 == -8 || i1 == 8 || k == -8 || k == 8;
-                             ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i1 + l, k + j);
- 
--                            if (!this.b.contains(chunkcoordintpair)) {
-+                            // CraftBukkit start - use LongHash and LongHashSet
-+                            long chunkCoords = LongHash.toLong(chunkcoordintpair.x, chunkcoordintpair.z);
-+                            if (!this.b.contains(chunkCoords)) {
-                                 ++i;
-                                 if (!flag4 && worldserver.getWorldBorder().isInBounds(chunkcoordintpair)) {
-                                     PlayerChunk playerchunk = worldserver.getPlayerChunkMap().getChunk(chunkcoordintpair.x, chunkcoordintpair.z);
- 
-                                     if (playerchunk != null && playerchunk.e()) {
--                                        this.b.add(chunkcoordintpair);
-+                                        this.b.add(chunkCoords);
-+                                        // CraftBukkit end
-                                     }
-                                 }
-                             }
-@@ -62,9 +71,31 @@
-             for (int k1 = 0; k1 < j; ++k1) {
-                 EnumCreatureType enumcreaturetype = aenumcreaturetype[k1];
- 
-+               // CraftBukkit start - Use per-world spawn limits
-+                int limit = enumcreaturetype.b();
-+                switch (enumcreaturetype) {
-+                    case MONSTER:
-+                        limit = worldserver.getWorld().getMonsterSpawnLimit();
-+                        break;
-+                    case CREATURE:
-+                        limit = worldserver.getWorld().getAnimalSpawnLimit();
-+                        break;
-+                    case WATER_CREATURE:
-+                        limit = worldserver.getWorld().getWaterAnimalSpawnLimit();
-+                        break;
-+                    case AMBIENT:
-+                        limit = worldserver.getWorld().getAmbientSpawnLimit();
-+                        break;
-+                }
-+
-+                if (limit == 0) {
-+                    continue;
-+                }
-+                // CraftBukkit end
-+
-                 if ((!enumcreaturetype.d() || flag1) && (enumcreaturetype.d() || flag) && (!enumcreaturetype.e() || flag2)) {
-                     k = worldserver.a(enumcreaturetype.a());
--                    int l1 = enumcreaturetype.b() * i / SpawnerCreature.a;
-+                    int l1 = limit * i / a; // CraftBukkit - use per-world limits
- 
-                     if (k <= l1) {
-                         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
-@@ -72,8 +103,10 @@
- 
-                         label120:
-                         while (iterator1.hasNext()) {
--                            ChunkCoordIntPair chunkcoordintpair1 = (ChunkCoordIntPair) iterator1.next();
--                            BlockPosition blockposition1 = getRandomPosition(worldserver, chunkcoordintpair1.x, chunkcoordintpair1.z);
-+                            // CraftBukkit start = use LongHash and LongObjectHashMap
-+                            long key = ((Long) iterator1.next()).longValue();
-+                            BlockPosition blockposition1 = getRandomPosition(worldserver, LongHash.msw(key), LongHash.lsw(key));
-+                            // CraftBukkit
-                             int i2 = blockposition1.getX();
-                             int j2 = blockposition1.getY();
-                             int k2 = blockposition1.getZ();
-@@ -125,8 +158,11 @@
-                                                         if (entityinsentient.P() && entityinsentient.canSpawn()) {
-                                                             groupdataentity = entityinsentient.prepare(worldserver.D(new BlockPosition(entityinsentient)), groupdataentity);
-                                                             if (entityinsentient.canSpawn()) {
--                                                                ++l2;
--                                                                worldserver.addEntity(entityinsentient);
-+                                                                // CraftBukkit start
-+                                                                if (worldserver.addEntity(entityinsentient, SpawnReason.NATURAL)) {
-+                                                                    ++l2;
-+                                                                }
-+                                                                // CraftBukkit end
-                                                             } else {
-                                                                 entityinsentient.die();
-                                                             }
-@@ -226,8 +262,10 @@
-                             }
- 
-                             entityinsentient.setPositionRotation((double) ((float) j1 + 0.5F), (double) blockposition.getY(), (double) ((float) k1 + 0.5F), random.nextFloat() * 360.0F, 0.0F);
--                            world.addEntity(entityinsentient);
-+                            // CraftBukkit start - Added a reason for spawning this creature, moved entityinsentient.prepare(groupdataentity) up
-                             groupdataentity = entityinsentient.prepare(world.D(new BlockPosition(entityinsentient)), groupdataentity);
-+                            world.addEntity(entityinsentient, SpawnReason.CHUNK_GEN);
-+                            // CraftBukkit end
-                             flag = true;
-                         }
- 
diff --git a/nms-patches/StatisticManager.patch b/nms-patches/StatisticManager.patch
deleted file mode 100644
index 93e6895..0000000
--- a/nms-patches/StatisticManager.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/StatisticManager.java
-+++ b/net/minecraft/server/StatisticManager.java
-@@ -10,6 +10,12 @@
-     public StatisticManager() {}
- 
-     public void b(EntityHuman entityhuman, Statistic statistic, int i) {
-+        // CraftBukkit start - fire Statistic events
-+        org.bukkit.event.Cancellable cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.handleStatisticsIncrease(entityhuman, statistic, this.getStatisticValue(statistic), i);
-+        if (cancellable != null && cancellable.isCancelled()) {
-+            return;
-+        }
-+        // CraftBukkit end
-         this.setStatistic(entityhuman, statistic, this.getStatisticValue(statistic) + i);
-     }
- 
diff --git a/nms-patches/TileEntity.patch b/nms-patches/TileEntity.patch
deleted file mode 100644
index 6ebe08e..0000000
--- a/nms-patches/TileEntity.patch
+++ /dev/null
@@ -1,25 +0,0 @@
---- a/net/minecraft/server/TileEntity.java
-+++ b/net/minecraft/server/TileEntity.java
-@@ -4,6 +4,8 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+import org.bukkit.inventory.InventoryHolder; // CraftBukkit
-+
- public abstract class TileEntity {
- 
-     private static final Logger a = LogManager.getLogger();
-@@ -251,4 +253,13 @@
-         a("shulker_box", TileEntityShulkerBox.class);
-         a("bed", TileEntityBed.class);
-     }
-+
-+    // CraftBukkit start - add method
-+    public InventoryHolder getOwner() {
-+        if (world == null) return null;
-+        org.bukkit.block.BlockState state = world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()).getState();
-+        if (state instanceof InventoryHolder) return (InventoryHolder) state;
-+        return null;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/TileEntityBanner.patch b/nms-patches/TileEntityBanner.patch
deleted file mode 100644
index c9294ee..0000000
--- a/nms-patches/TileEntityBanner.patch
+++ /dev/null
@@ -1,26 +0,0 @@
---- a/net/minecraft/server/TileEntityBanner.java
-+++ b/net/minecraft/server/TileEntityBanner.java
-@@ -23,6 +23,11 @@
- 
-         if (nbttagcompound != null && nbttagcompound.hasKeyOfType("Patterns", 9)) {
-             this.patterns = nbttagcompound.getList("Patterns", 10).d();
-+            // CraftBukkit start
-+            while (this.patterns.size() > 20) {
-+                this.patterns.remove(20);
-+            }
-+            // CraftBukkit end
-         }
- 
-         this.color = flag ? d(itemstack) : ItemBanner.c(itemstack);
-@@ -67,6 +72,11 @@
- 
-         this.color = EnumColor.fromInvColorIndex(nbttagcompound.getInt("Base"));
-         this.patterns = nbttagcompound.getList("Patterns", 10);
-+        // CraftBukkit start
-+        while (this.patterns.size() > 20) {
-+            this.patterns.remove(20);
-+        }
-+        // CraftBukkit end
-         this.i = null;
-         this.j = null;
-         this.k = null;
diff --git a/nms-patches/TileEntityBeacon.patch b/nms-patches/TileEntityBeacon.patch
deleted file mode 100644
index ccb0c5a..0000000
--- a/nms-patches/TileEntityBeacon.patch
+++ /dev/null
@@ -1,144 +0,0 @@
---- a/net/minecraft/server/TileEntityBeacon.java
-+++ b/net/minecraft/server/TileEntityBeacon.java
-@@ -9,6 +9,13 @@
- import java.util.Set;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
-+import org.bukkit.entity.HumanEntity;
-+import org.bukkit.potion.PotionEffect;
-+// CraftBukkit end
-+
- public class TileEntityBeacon extends TileEntityContainer implements ITickable, IWorldInventory {
- 
-     public static final MobEffectList[][] a = new MobEffectList[][] { { MobEffects.FASTER_MOVEMENT, MobEffects.FASTER_DIG}, { MobEffects.RESISTANCE, MobEffects.JUMP}, { MobEffects.INCREASE_DAMAGE}, { MobEffects.REGENERATION}};
-@@ -22,6 +29,38 @@
-     public MobEffectList secondaryEffect;
-     private ItemStack inventorySlot;
-     private String o;
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        return Arrays.asList(this.inventorySlot);
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+
-+    public PotionEffect getPrimaryEffect() {
-+        return (this.primaryEffect != null) ? CraftPotionUtil.toBukkit(new MobEffect(this.primaryEffect, getLevel(), getAmplification(), true, true)) : null;
-+    }
-+
-+    public PotionEffect getSecondaryEffect() {
-+        return (hasSecondaryEffect()) ? CraftPotionUtil.toBukkit(new MobEffect(this.secondaryEffect, getLevel(), getAmplification(), true, true)) : null;
-+    }
-+    // CraftBukkit end
- 
-     public TileEntityBeacon() {
-         this.inventorySlot = ItemStack.a;
-@@ -42,41 +81,79 @@
- 
-     }
- 
--    private void E() {
--        if (this.j && this.levels > 0 && !this.world.isClientSide && this.primaryEffect != null) {
--            double d0 = (double) (this.levels * 10 + 10);
-+    // CraftBukkit start - split into components
-+    private byte getAmplification() {
-+        {
-             byte b0 = 0;
- 
-             if (this.levels >= 4 && this.primaryEffect == this.secondaryEffect) {
-                 b0 = 1;
-             }
- 
-+            return b0;
-+        }
-+    }
-+
-+    private int getLevel() {
-+        {
-             int i = (9 + this.levels * 2) * 20;
-+            return i;
-+        }
-+    }
-+
-+    public List getHumansInRange() {
-+        {
-+            double d0 = (double) (this.levels * 10 + 10);
-+
-             int j = this.position.getX();
-             int k = this.position.getY();
-             int l = this.position.getZ();
-             AxisAlignedBB axisalignedbb = (new AxisAlignedBB((double) j, (double) k, (double) l, (double) (j + 1), (double) (k + 1), (double) (l + 1))).g(d0).b(0.0D, (double) this.world.getHeight(), 0.0D);
-             List list = this.world.a(EntityHuman.class, axisalignedbb);
-+
-+            return list;
-+        }
-+    }
-+
-+    private void applyEffect(List list, MobEffectList effects, int i, int b0) {
-+        {
-             Iterator iterator = list.iterator();
- 
-             EntityHuman entityhuman;
- 
-             while (iterator.hasNext()) {
-                 entityhuman = (EntityHuman) iterator.next();
--                entityhuman.addEffect(new MobEffect(this.primaryEffect, i, b0, true, true));
-+                entityhuman.addEffect(new MobEffect(effects, i, b0, true, true));
-             }
-+        }
-+    }
- 
-+    private boolean hasSecondaryEffect() {
-+        {
-             if (this.levels >= 4 && this.primaryEffect != this.secondaryEffect && this.secondaryEffect != null) {
--                iterator = list.iterator();
-+                return true;
-+            }
-+
-+            return false;
-+        }
-+    }
-+
-+    private void E() {
-+        if (this.j && this.levels > 0 && !this.world.isClientSide && this.primaryEffect != null) {
-+            byte b0 = getAmplification();
-+
-+            int i = getLevel();
-+            List list = getHumansInRange();
-+
-+            applyEffect(list, this.primaryEffect, i, b0);
- 
--                while (iterator.hasNext()) {
--                    entityhuman = (EntityHuman) iterator.next();
--                    entityhuman.addEffect(new MobEffect(this.secondaryEffect, i, 0, true, true));
--                }
-+            if (hasSecondaryEffect()) {
-+                applyEffect(list, this.secondaryEffect, i, 0);
-             }
-         }
- 
-     }
-+    // CraftBukkit end
- 
-     private void F() {
-         int i = this.position.getX();
diff --git a/nms-patches/TileEntityBrewingStand.patch b/nms-patches/TileEntityBrewingStand.patch
deleted file mode 100644
index fe3d21e..0000000
--- a/nms-patches/TileEntityBrewingStand.patch
+++ /dev/null
@@ -1,116 +0,0 @@
---- a/net/minecraft/server/TileEntityBrewingStand.java
-+++ b/net/minecraft/server/TileEntityBrewingStand.java
-@@ -3,6 +3,16 @@
- import java.util.Arrays;
- import java.util.Iterator;
- 
-+// CraftBukkit start
-+import java.util.List;
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.entity.HumanEntity;
-+import org.bukkit.event.inventory.BrewEvent;
-+import org.bukkit.event.inventory.BrewingStandFuelEvent;
-+import org.bukkit.inventory.InventoryHolder;
-+// CraftBukkit end
-+
- public class TileEntityBrewingStand extends TileEntityContainer implements ITickable, IWorldInventory {
- 
-     private static final int[] a = new int[] { 3};
-@@ -14,6 +24,31 @@
-     private Item k;
-     private String l;
-     private int fuelLevel;
-+    // CraftBukkit start - add fields and methods
-+    private int lastTick = MinecraftServer.currentTick;
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = 64;
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+    // CraftBukkit end
- 
-     public TileEntityBrewingStand() {
-         this.items = NonNullList.a(5, ItemStack.a);
-@@ -55,8 +90,19 @@
-         ItemStack itemstack = (ItemStack) this.items.get(4);
- 
-         if (this.fuelLevel <= 0 && itemstack.getItem() == Items.BLAZE_POWDER) {
--            this.fuelLevel = 20;
--            itemstack.subtract(1);
-+            // CraftBukkit start
-+            BrewingStandFuelEvent event = new BrewingStandFuelEvent(world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), CraftItemStack.asCraftMirror(itemstack), 20);
-+            this.world.getServer().getPluginManager().callEvent(event);
-+
-+            if (event.isCancelled()) {
-+                return;
-+            }
-+
-+            this.fuelLevel = event.getFuelPower(); // PAIL fuelLevel
-+            if (this.fuelLevel > 0 && event.isConsuming()) {
-+                itemstack.subtract(1);
-+            }
-+            // CraftBukkit end
-             this.update();
-         }
- 
-@@ -64,9 +110,14 @@
-         boolean flag1 = this.brewTime > 0;
-         ItemStack itemstack1 = (ItemStack) this.items.get(3);
- 
-+        // CraftBukkit start - Use wall time instead of ticks for brewing
-+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
-+        this.lastTick = MinecraftServer.currentTick;
-+
-         if (flag1) {
--            --this.brewTime;
--            boolean flag2 = this.brewTime == 0;
-+            this.brewTime -= elapsedTicks;
-+            boolean flag2 = this.brewTime <= 0; // == -> <=
-+            // CraftBukkit end
- 
-             if (flag2 && flag) {
-                 this.p();
-@@ -140,6 +191,16 @@
- 
-     private void p() {
-         ItemStack itemstack = (ItemStack) this.items.get(3);
-+        // CraftBukkit start
-+        InventoryHolder owner = this.getOwner();
-+        if (owner != null) {
-+            BrewEvent event = new BrewEvent(world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), (org.bukkit.inventory.BrewerInventory) owner.getInventory(), this.fuelLevel);
-+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
-+            if (event.isCancelled()) {
-+                return;
-+            }
-+        }
-+        // CraftBukkit end
- 
-         for (int i = 0; i < 3; ++i) {
-             this.items.set(i, PotionBrewer.d(itemstack, (ItemStack) this.items.get(i)));
-@@ -210,7 +271,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return this.maxStack; // CraftBukkit
-     }
- 
-     public boolean a(EntityHuman entityhuman) {
diff --git a/nms-patches/TileEntityChest.patch b/nms-patches/TileEntityChest.patch
deleted file mode 100644
index c302cf6..0000000
--- a/nms-patches/TileEntityChest.patch
+++ /dev/null
@@ -1,110 +0,0 @@
---- a/net/minecraft/server/TileEntityChest.java
-+++ b/net/minecraft/server/TileEntityChest.java
-@@ -3,6 +3,10 @@
- import java.util.Iterator;
- import java.util.List;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+// CraftBukkit end
- 
- public class TileEntityChest extends TileEntityLootable implements ITickable {
- 
-@@ -18,6 +22,31 @@
-     private int q;
-     private BlockChest.Type r;
- 
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+    // CraftBukkit end
-+
-     public TileEntityChest() {
-         this.items = NonNullList.a(27, ItemStack.a);
-     }
-@@ -82,7 +111,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return maxStack; // CraftBukkit
-     }
- 
-     public void invalidateBlockCache() {
-@@ -258,9 +287,21 @@
-             if (this.l < 0) {
-                 this.l = 0;
-             }
-+            int oldPower = Math.max(0, Math.min(15, this.l)); // CraftBukkit - Get power before new viewer is added
- 
-             ++this.l;
-+            if (this.world == null) return; // CraftBukkit
-             this.world.playBlockAction(this.position, this.getBlock(), 1, this.l);
-+
-+            // CraftBukkit start - Call redstone event
-+            if (this.getBlock() == Blocks.TRAPPED_CHEST) {
-+                int newPower = Math.max(0, Math.min(15, this.l));
-+
-+                if (oldPower != newPower) {
-+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, position.getX(), position.getY(), position.getZ(), oldPower, newPower);
-+                }
-+            }
-+            // CraftBukkit end
-             this.world.applyPhysics(this.position, this.getBlock(), false);
-             if (this.p() == BlockChest.Type.TRAP) {
-                 this.world.applyPhysics(this.position.down(), this.getBlock(), false);
-@@ -271,12 +312,21 @@
- 
-     public void closeContainer(EntityHuman entityhuman) {
-         if (!entityhuman.isSpectator() && this.getBlock() instanceof BlockChest) {
-+            int oldPower = Math.max(0, Math.min(15, this.l)); // CraftBukkit - Get power before new viewer is added
-             --this.l;
-             this.world.playBlockAction(this.position, this.getBlock(), 1, this.l);
-             this.world.applyPhysics(this.position, this.getBlock(), false);
-+
-+            // CraftBukkit start - Call redstone event
-             if (this.p() == BlockChest.Type.TRAP) {
-+                int newPower = Math.max(0, Math.min(15, this.l));
-+
-+                if (oldPower != newPower) {
-+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, position.getX(), position.getY(), position.getZ(), oldPower, newPower);
-+                }
-                 this.world.applyPhysics(this.position.down(), this.getBlock(), false);
-             }
-+            // CraftBukkit end
-         }
- 
-     }
-@@ -311,4 +361,11 @@
-     protected NonNullList<ItemStack> q() {
-         return this.items;
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public boolean isFilteredNBT() {
-+        return true;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/TileEntityCommand.patch b/nms-patches/TileEntityCommand.patch
deleted file mode 100644
index c31a6b8..0000000
--- a/nms-patches/TileEntityCommand.patch
+++ /dev/null
@@ -1,12 +0,0 @@
---- a/net/minecraft/server/TileEntityCommand.java
-+++ b/net/minecraft/server/TileEntityCommand.java
-@@ -9,6 +9,9 @@
-     private boolean g;
-     private boolean h;
-     private final CommandBlockListenerAbstract i = new CommandBlockListenerAbstract() {
-+        {
-+            sender = new org.bukkit.craftbukkit.command.CraftBlockCommandSender(this); // CraftBukkit - add sender
-+        }
-         public BlockPosition getChunkCoordinates() {
-             return TileEntityCommand.this.position;
-         }
diff --git a/nms-patches/TileEntityContainer.patch b/nms-patches/TileEntityContainer.patch
deleted file mode 100644
index e49e2ca..0000000
--- a/nms-patches/TileEntityContainer.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/TileEntityContainer.java
-+++ b/net/minecraft/server/TileEntityContainer.java
-@@ -37,4 +37,12 @@
-     public IChatBaseComponent getScoreboardDisplayName() {
-         return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
-     }
-+
-+    // CraftBukkit start
-+    @Override
-+    public org.bukkit.Location getLocation() {
-+        if (world == null) return null;
-+        return new org.bukkit.Location(world.getWorld(), position.getX(), position.getY(), position.getZ());
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/TileEntityDispenser.patch b/nms-patches/TileEntityDispenser.patch
deleted file mode 100644
index 3414c8a..0000000
--- a/nms-patches/TileEntityDispenser.patch
+++ /dev/null
@@ -1,55 +0,0 @@
---- a/net/minecraft/server/TileEntityDispenser.java
-+++ b/net/minecraft/server/TileEntityDispenser.java
-@@ -2,12 +2,43 @@
- 
- import java.util.Iterator;
- import java.util.Random;
-+// CraftBukkit start
-+import java.util.List;
-+
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+// CraftBukkit end
- 
- public class TileEntityDispenser extends TileEntityLootable {
- 
-     private static final Random a = new Random();
-     private NonNullList<ItemStack> items;
- 
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+    // CraftBukkit end
-+
-     public TileEntityDispenser() {
-         this.items = NonNullList.a(9, ItemStack.a);
-     }
-@@ -92,7 +123,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return maxStack; // CraftBukkit
-     }
- 
-     public String getContainerName() {
diff --git a/nms-patches/TileEntityEndGateway.patch b/nms-patches/TileEntityEndGateway.patch
deleted file mode 100644
index 7fc375f..0000000
--- a/nms-patches/TileEntityEndGateway.patch
+++ /dev/null
@@ -1,42 +0,0 @@
---- a/net/minecraft/server/TileEntityEndGateway.java
-+++ b/net/minecraft/server/TileEntityEndGateway.java
-@@ -6,6 +6,12 @@
- import javax.annotation.Nullable;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
-+// CraftBukkit start
-+import org.bukkit.Bukkit;
-+import org.bukkit.Location;
-+import org.bukkit.craftbukkit.entity.CraftPlayer;
-+import org.bukkit.event.player.PlayerTeleportEvent;
-+// CraftBukkit end
- 
- public class TileEntityEndGateway extends TileEntityEnderPortal implements ITickable {
- 
-@@ -111,6 +117,26 @@
-             if (this.exitPortal != null) {
-                 BlockPosition blockposition = this.exactTeleport ? this.exitPortal : this.j();
- 
-+                // CraftBukkit start - Fire PlayerTeleportEvent
-+                if (entity instanceof EntityPlayer) {
-+                    org.bukkit.craftbukkit.entity.CraftPlayer player = (CraftPlayer) entity.getBukkitEntity();
-+                    org.bukkit.Location location = new Location(world.getWorld(), (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D);
-+                    location.setPitch(player.getLocation().getPitch());
-+                    location.setYaw(player.getLocation().getYaw());
-+
-+                    PlayerTeleportEvent teleEvent = new PlayerTeleportEvent(player, player.getLocation(), location, PlayerTeleportEvent.TeleportCause.END_GATEWAY);
-+                    Bukkit.getPluginManager().callEvent(teleEvent);
-+                    if (teleEvent.isCancelled()) {
-+                        return;
-+                    }
-+
-+                    ((EntityPlayer) entity).playerConnection.teleport(teleEvent.getTo());
-+                    this.h(); // CraftBukkit - call at end of method
-+                    return;
-+
-+                }
-+                // CraftBukkit end
-+
-                 entity.enderTeleportTo((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D);
-             }
- 
diff --git a/nms-patches/TileEntityFurnace.patch b/nms-patches/TileEntityFurnace.patch
deleted file mode 100644
index c3e3211..0000000
--- a/nms-patches/TileEntityFurnace.patch
+++ /dev/null
@@ -1,180 +0,0 @@
---- a/net/minecraft/server/TileEntityFurnace.java
-+++ b/net/minecraft/server/TileEntityFurnace.java
-@@ -1,6 +1,15 @@
- package net.minecraft.server;
- 
- import java.util.Iterator;
-+// CraftBukkit start
-+import java.util.List;
-+
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.entity.HumanEntity;
-+import org.bukkit.event.inventory.FurnaceBurnEvent;
-+import org.bukkit.event.inventory.FurnaceSmeltEvent;
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+// CraftBukkit end
- 
- public class TileEntityFurnace extends TileEntityContainer implements ITickable, IWorldInventory {
- 
-@@ -14,6 +23,32 @@
-     private int cookTimeTotal;
-     private String m;
- 
-+    // CraftBukkit start - add fields and methods
-+    private int lastTick = MinecraftServer.currentTick;
-+    private int maxStack = MAX_STACK;
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+
-+    public List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+    // CraftBukkit end
-+
-     public TileEntityFurnace() {
-         this.items = NonNullList.a(3, ItemStack.a);
-     }
-@@ -119,11 +154,29 @@
-     }
- 
-     public void e() {
--        boolean flag = this.isBurning();
-+        boolean flag = (this.getBlock() == Blocks.LIT_FURNACE); // CraftBukkit - SPIGOT-844 - Check if furnace block is lit using the block instead of burn time
-         boolean flag1 = false;
- 
-+        // CraftBukkit start - Use wall time instead of ticks for cooking
-+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
-+        this.lastTick = MinecraftServer.currentTick;
-+
-+        // CraftBukkit - moved from below - edited for wall time
-+        if (this.isBurning() && this.canBurn()) {
-+            this.cookTime += elapsedTicks;
-+            if (this.cookTime >= this.cookTimeTotal) {
-+                this.cookTime = 0;
-+                this.cookTimeTotal = this.a((ItemStack) this.items.get(0));
-+                this.burn();
-+                flag1 = true;
-+            }
-+        } else {
-+            this.cookTime = 0;
-+        }
-+        // CraftBukkit end
-+
-         if (this.isBurning()) {
--            --this.burnTime;
-+            this.burnTime -= elapsedTicks; // CraftBukkit - use elapsedTicks in place of constant
-         }
- 
-         if (!this.world.isClientSide) {
-@@ -134,10 +187,21 @@
-                     this.cookTime = MathHelper.clamp(this.cookTime - 2, 0, this.cookTimeTotal);
-                 }
-             } else {
--                if (!this.isBurning() && this.canBurn()) {
--                    this.burnTime = fuelTime(itemstack);
--                    this.ticksForCurrentFuel = this.burnTime;
--                    if (this.isBurning()) {
-+                // CraftBukkit start - Handle multiple elapsed ticks
-+                if (this.burnTime <= 0 && this.canBurn()) { // CraftBukkit - == to <=
-+                    CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
-+
-+                    FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(this.world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), fuel, fuelTime(itemstack));
-+                    this.world.getServer().getPluginManager().callEvent(furnaceBurnEvent);
-+
-+                    if (furnaceBurnEvent.isCancelled()) {
-+                        return;
-+                    }
-+
-+                    this.ticksForCurrentFuel = furnaceBurnEvent.getBurnTime();
-+                    this.burnTime += this.ticksForCurrentFuel;
-+                    if (this.burnTime > 0 && furnaceBurnEvent.isBurning()) {
-+                        // CraftBukkit end
-                         flag1 = true;
-                         if (!itemstack.isEmpty()) {
-                             Item item = itemstack.getItem();
-@@ -152,6 +216,7 @@
-                     }
-                 }
- 
-+                /* CraftBukkit start - Moved up
-                 if (this.isBurning() && this.canBurn()) {
-                     ++this.cookTime;
-                     if (this.cookTime == this.cookTimeTotal) {
-@@ -163,11 +228,13 @@
-                 } else {
-                     this.cookTime = 0;
-                 }
-+                */
-             }
- 
-             if (flag != this.isBurning()) {
-                 flag1 = true;
-                 BlockFurnace.a(this.isBurning(), this.world, this.position);
-+                this.invalidateBlockCache(); // CraftBukkit - Invalidate tile entity's cached block type 
-             }
-         }
- 
-@@ -192,7 +259,8 @@
-             } else {
-                 ItemStack itemstack1 = (ItemStack) this.items.get(2);
- 
--                return itemstack1.isEmpty() ? true : (!itemstack1.doMaterialsMatch(itemstack) ? false : (itemstack1.getCount() < this.getMaxStackSize() && itemstack1.getCount() < itemstack1.getMaxStackSize() ? true : itemstack1.getCount() < itemstack.getMaxStackSize()));
-+                // CraftBukkit - consider resultant count instead of current count
-+                return itemstack1.isEmpty() ? true : (!itemstack1.doMaterialsMatch(itemstack) ? false : (itemstack1.getCount() + itemstack.getCount() <= this.getMaxStackSize() && itemstack1.getCount() + itemstack.getCount() < itemstack1.getMaxStackSize() ? true : itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize()));
-             }
-         }
-     }
-@@ -203,11 +271,38 @@
-             ItemStack itemstack1 = RecipesFurnace.getInstance().getResult(itemstack);
-             ItemStack itemstack2 = (ItemStack) this.items.get(2);
- 
-+            // CraftBukkit start - fire FurnaceSmeltEvent
-+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
-+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
-+
-+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), source, result);
-+            this.world.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
-+
-+            if (furnaceSmeltEvent.isCancelled()) {
-+                return;
-+            }
-+
-+            result = furnaceSmeltEvent.getResult();
-+            itemstack1 = CraftItemStack.asNMSCopy(result);
-+
-+            if (!itemstack1.isEmpty()) {
-+                if (itemstack2.isEmpty()) {
-+                    this.items.set(2, itemstack1.cloneItemStack());
-+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
-+                    itemstack2.add(itemstack1.getCount());
-+                } else {
-+                    return;
-+                }
-+            }
-+
-+            /*
-             if (itemstack2.isEmpty()) {
-                 this.items.set(2, itemstack1.cloneItemStack());
-             } else if (itemstack2.getItem() == itemstack1.getItem()) {
-                 itemstack2.add(1);
-             }
-+            */
-+            // CraftBukkit end
- 
-             if (itemstack.getItem() == Item.getItemOf(Blocks.SPONGE) && itemstack.getData() == 1 && !((ItemStack) this.items.get(1)).isEmpty() && ((ItemStack) this.items.get(1)).getItem() == Items.BUCKET) {
-                 this.items.set(1, new ItemStack(Items.WATER_BUCKET));
diff --git a/nms-patches/TileEntityHopper.patch b/nms-patches/TileEntityHopper.patch
deleted file mode 100644
index 17005f2..0000000
--- a/nms-patches/TileEntityHopper.patch
+++ /dev/null
@@ -1,154 +0,0 @@
---- a/net/minecraft/server/TileEntityHopper.java
-+++ b/net/minecraft/server/TileEntityHopper.java
-@@ -4,12 +4,46 @@
- import java.util.List;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.craftbukkit.inventory.CraftItemStack;
-+import org.bukkit.entity.HumanEntity;
-+import org.bukkit.event.inventory.InventoryMoveItemEvent;
-+import org.bukkit.event.inventory.InventoryPickupItemEvent;
-+import org.bukkit.inventory.Inventory;
-+// CraftBukkit end
-+
- public class TileEntityHopper extends TileEntityLootable implements IHopper, ITickable {
- 
-     private NonNullList<ItemStack> items;
-     private int f;
-     private long g;
- 
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        return this.items;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+    // CraftBukkit end
-+
-     public TileEntityHopper() {
-         this.items = NonNullList.a(5, ItemStack.a);
-         this.f = -1;
-@@ -72,7 +106,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return maxStack; // CraftBukkit
-     }
- 
-     public void e() {
-@@ -163,10 +197,35 @@
-                 for (int i = 0; i < this.getSize(); ++i) {
-                     if (!this.getItem(i).isEmpty()) {
-                         ItemStack itemstack = this.getItem(i).cloneItemStack();
--                        ItemStack itemstack1 = addItem(this, iinventory, this.splitStack(i, 1), enumdirection);
-+                        // ItemStack itemstack1 = addItem(this, iinventory, this.splitStack(i, 1), enumdirection);
-+
-+                        // CraftBukkit start - Call event when pushing items into other inventories
-+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, 1));
-+
-+                        Inventory destinationInventory;
-+                        // Have to special case large chests as they work oddly
-+                        if (iinventory instanceof InventoryLargeChest) {
-+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
-+                        } else {
-+                            destinationInventory = iinventory.getOwner().getInventory();
-+                        }
-+
-+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(this.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
-+                        this.getWorld().getServer().getPluginManager().callEvent(event);
-+                        if (event.isCancelled()) {
-+                            this.setItem(i, itemstack);
-+                            this.setCooldown(8); // Delay hopper checks
-+                            return false;
-+                        }
-+                        ItemStack itemstack1 = addItem(this, iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumdirection);
- 
-                         if (itemstack1.isEmpty()) {
--                            iinventory.update();
-+                            if (event.getItem().equals(oitemstack)) {
-+                                iinventory.update();
-+                            } else {
-+                                this.setItem(i, itemstack);
-+                            }
-+                            // CraftBukkit end
-                             return true;
-                         }
- 
-@@ -288,10 +347,41 @@
- 
-         if (!itemstack.isEmpty() && b(iinventory, itemstack, i, enumdirection)) {
-             ItemStack itemstack1 = itemstack.cloneItemStack();
--            ItemStack itemstack2 = addItem(iinventory, ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
-+            // ItemStack itemstack2 = addItem(iinventory, ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
-+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
-+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, 1));
-+
-+            Inventory sourceInventory;
-+            // Have to special case large chests as they work oddly
-+            if (iinventory instanceof InventoryLargeChest) {
-+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
-+            } else {
-+                sourceInventory = iinventory.getOwner().getInventory();
-+            }
-+
-+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), ihopper.getOwner().getInventory(), false);
-+
-+            ihopper.getWorld().getServer().getPluginManager().callEvent(event);
-+            if (event.isCancelled()) {
-+                iinventory.setItem(i, itemstack1);
-+
-+                if (ihopper instanceof TileEntityHopper) {
-+                    ((TileEntityHopper) ihopper).setCooldown(8); // Delay hopper checks
-+                } else if (ihopper instanceof EntityMinecartHopper) {
-+                    ((EntityMinecartHopper) ihopper).setCooldown(4); // Delay hopper minecart checks
-+                }
-+
-+                return false;
-+            }
-+            ItemStack itemstack2 = addItem(iinventory, ihopper, CraftItemStack.asNMSCopy(event.getItem()), null);
- 
-             if (itemstack2.isEmpty()) {
--                iinventory.update();
-+                if (event.getItem().equals(oitemstack)) {
-+                    iinventory.update();
-+                } else {
-+                    iinventory.setItem(i, itemstack1);
-+                }
-+                // CraftBukkit end
-                 return true;
-             }
- 
-@@ -307,6 +397,13 @@
-         if (entityitem == null) {
-             return false;
-         } else {
-+            // CraftBukkit start
-+            InventoryPickupItemEvent event = new InventoryPickupItemEvent(iinventory1.getOwner().getInventory(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
-+            entityitem.world.getServer().getPluginManager().callEvent(event);
-+            if (event.isCancelled()) {
-+                return false;
-+            }
-+            // CraftBukkit end
-             ItemStack itemstack = entityitem.getItemStack().cloneItemStack();
-             ItemStack itemstack1 = addItem(iinventory, iinventory1, itemstack, (EnumDirection) null);
- 
diff --git a/nms-patches/TileEntityNote.patch b/nms-patches/TileEntityNote.patch
deleted file mode 100644
index e0498c3..0000000
--- a/nms-patches/TileEntityNote.patch
+++ /dev/null
@@ -1,16 +0,0 @@
---- a/net/minecraft/server/TileEntityNote.java
-+++ b/net/minecraft/server/TileEntityNote.java
-@@ -70,7 +70,12 @@
-                 b0 = 9;
-             }
- 
--            world.playBlockAction(blockposition, Blocks.NOTEBLOCK, b0, this.note);
-+            // CraftBukkit start
-+            org.bukkit.event.block.NotePlayEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callNotePlayEvent(this.world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), b0, this.note);
-+            if (!event.isCancelled()) {
-+                world.playBlockAction(blockposition, Blocks.NOTEBLOCK, event.getInstrument().getType(), event.getNote().getId());
-+            }
-+            // CraftBukkit end
-         }
-     }
- }
diff --git a/nms-patches/TileEntityShulkerBox.patch b/nms-patches/TileEntityShulkerBox.patch
deleted file mode 100644
index 6af5516..0000000
--- a/nms-patches/TileEntityShulkerBox.patch
+++ /dev/null
@@ -1,54 +0,0 @@
---- a/net/minecraft/server/TileEntityShulkerBox.java
-+++ b/net/minecraft/server/TileEntityShulkerBox.java
-@@ -3,6 +3,10 @@
- import java.util.Iterator;
- import java.util.List;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-+import org.bukkit.entity.HumanEntity;
-+// CraftBukkit end
- 
- public class TileEntityShulkerBox extends TileEntityLootable implements ITickable, IWorldInventory {
- 
-@@ -16,6 +20,31 @@
-     private EnumColor l;
-     private boolean p;
- 
-+    // CraftBukkit start - add fields and methods
-+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
-+    private int maxStack = MAX_STACK;
-+
-+    public List<ItemStack> getContents() {
-+        return this.f;
-+    }
-+
-+    public void onOpen(CraftHumanEntity who) {
-+        transaction.add(who);
-+    }
-+
-+    public void onClose(CraftHumanEntity who) {
-+        transaction.remove(who);
-+    }
-+
-+    public List<HumanEntity> getViewers() {
-+        return transaction;
-+    }
-+
-+    public void setMaxStackSize(int size) {
-+        maxStack = size;
-+    }
-+    // CraftBukkit end
-+
-     public TileEntityShulkerBox() {
-         this((EnumColor) null);
-     }
-@@ -144,7 +173,7 @@
-     }
- 
-     public int getMaxStackSize() {
--        return 64;
-+        return maxStack; // CraftBukkit
-     }
- 
-     public boolean c(int i, int j) {
diff --git a/nms-patches/TileEntitySign.patch b/nms-patches/TileEntitySign.patch
deleted file mode 100644
index 88ab430..0000000
--- a/nms-patches/TileEntitySign.patch
+++ /dev/null
@@ -1,70 +0,0 @@
---- a/net/minecraft/server/TileEntitySign.java
-+++ b/net/minecraft/server/TileEntitySign.java
-@@ -21,6 +21,12 @@
-             nbttagcompound.setString("Text" + (i + 1), s);
-         }
- 
-+        // CraftBukkit start
-+        if (Boolean.getBoolean("convertLegacySigns")) {
-+            nbttagcompound.setBoolean("Bukkit.isConverted", true);
-+        }
-+        // CraftBukkit end
-+
-         this.i.b(nbttagcompound);
-         return nbttagcompound;
-     }
-@@ -58,14 +64,34 @@
-             }
-         };
- 
-+        // CraftBukkit start - Add an option to convert signs correctly
-+        // This is done with a flag instead of all the time because
-+        // we have no way to tell whether a sign is from 1.7.10 or 1.8
-+
-+        boolean oldSign = Boolean.getBoolean("convertLegacySigns") && !nbttagcompound.getBoolean("Bukkit.isConverted");
-+
-         for (int i = 0; i < 4; ++i) {
-             String s = nbttagcompound.getString("Text" + (i + 1));
--            IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s);
-+            if (s != null && s.length() > 2048) {
-+                s = "\"\"";
-+            }
- 
-             try {
--                this.lines[i] = ChatComponentUtils.filterForDisplay(icommandlistener, ichatbasecomponent, (Entity) null);
--            } catch (CommandException commandexception) {
--                this.lines[i] = ichatbasecomponent;
-+                IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s);
-+
-+                if (oldSign) {
-+                    lines[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(s)[0];
-+                    continue;
-+                }
-+                // CraftBukkit end
-+
-+                try {
-+                    this.lines[i] = ChatComponentUtils.filterForDisplay(icommandlistener, ichatbasecomponent, (Entity) null);
-+                } catch (CommandException commandexception) {
-+                    this.lines[i] = ichatbasecomponent;
-+                }
-+            } catch (com.google.gson.JsonParseException jsonparseexception) {
-+                this.lines[i] = new ChatComponentText(s);
-             }
-         }
- 
-@@ -155,7 +181,14 @@
-                 ChatClickable chatclickable = chatmodifier.h();
- 
-                 if (chatclickable.a() == ChatClickable.EnumClickAction.RUN_COMMAND) {
--                    entityhuman.C_().getCommandHandler().a(icommandlistener, chatclickable.b());
-+                    // CraftBukkit start
-+                    // entityhuman.C_().getCommandHandler().a(icommandlistener, chatclickable.b());
-+                    CommandBlockListenerAbstract.executeSafely(icommandlistener, new org.bukkit.craftbukkit.command.ProxiedNativeCommandSender(
-+                            icommandlistener,
-+                            new org.bukkit.craftbukkit.command.CraftBlockCommandSender(icommandlistener),
-+                            entityhuman.getBukkitEntity()
-+                    ), chatclickable.b());
-+                    // CraftBukkit end
-                 }
-             }
-         }
diff --git a/nms-patches/UserCache.patch b/nms-patches/UserCache.patch
deleted file mode 100644
index d04921f..0000000
--- a/nms-patches/UserCache.patch
+++ /dev/null
@@ -1,25 +0,0 @@
---- a/net/minecraft/server/UserCache.java
-+++ b/net/minecraft/server/UserCache.java
-@@ -46,7 +46,7 @@
-     private static boolean c;
-     private final Map<String, UserCache.UserCacheEntry> d = Maps.newHashMap();
-     private final Map<UUID, UserCache.UserCacheEntry> e = Maps.newHashMap();
--    private final Deque<GameProfile> f = Lists.newLinkedList();
-+    private final Deque<GameProfile> f = new java.util.concurrent.LinkedBlockingDeque<GameProfile>(); // CraftBukkit
-     private final GameProfileRepository g;
-     protected final Gson b;
-     private final File h;
-@@ -337,11 +337,11 @@
-             }
-         }
- 
--        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
-+        public JsonElement serialize(UserCacheEntry object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - decompile error
-             return this.a((UserCache.UserCacheEntry) object, type, jsonserializationcontext);
-         }
- 
--        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
-+        public UserCacheEntry deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - decompile error
-             return this.a(jsonelement, type, jsondeserializationcontext);
-         }
- 
diff --git a/nms-patches/Village.patch b/nms-patches/Village.patch
deleted file mode 100644
index a142c50..0000000
--- a/nms-patches/Village.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/Village.java
-+++ b/net/minecraft/server/Village.java
-@@ -64,7 +64,7 @@
-                 EntityIronGolem entityirongolem = new EntityIronGolem(this.a);
- 
-                 entityirongolem.setPosition(vec3d.x, vec3d.y, vec3d.z);
--                this.a.addEntity(entityirongolem);
-+                this.a.addEntity(entityirongolem, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
-                 ++this.l;
-             }
-         }
diff --git a/nms-patches/VillageSiege.patch b/nms-patches/VillageSiege.patch
deleted file mode 100644
index 626a008..0000000
--- a/nms-patches/VillageSiege.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/VillageSiege.java
-+++ b/net/minecraft/server/VillageSiege.java
-@@ -140,7 +140,7 @@
-             }
- 
-             entityzombie.setPositionRotation(vec3d.x, vec3d.y, vec3d.z, this.a.random.nextFloat() * 360.0F, 0.0F);
--            this.a.addEntity(entityzombie);
-+            this.a.addEntity(entityzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_INVASION); // CraftBukkit
-             BlockPosition blockposition = this.f.a();
- 
-             entityzombie.a(blockposition, this.f.b());
diff --git a/nms-patches/World.patch b/nms-patches/World.patch
deleted file mode 100644
index ddda651..0000000
--- a/nms-patches/World.patch
+++ /dev/null
@@ -1,652 +0,0 @@
---- a/net/minecraft/server/World.java
-+++ b/net/minecraft/server/World.java
-@@ -14,6 +14,21 @@
- import java.util.function.Supplier;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import com.google.common.collect.Maps;
-+import java.util.Map;
-+import org.bukkit.Bukkit;
-+import org.bukkit.block.BlockState;
-+import org.bukkit.craftbukkit.CraftServer;
-+import org.bukkit.craftbukkit.CraftWorld;
-+import org.bukkit.craftbukkit.event.CraftEventFactory;
-+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-+import org.bukkit.event.block.BlockCanBuildEvent;
-+import org.bukkit.event.block.BlockPhysicsEvent;
-+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-+import org.bukkit.generator.ChunkGenerator;
-+// CraftBukkit end
-+
- public abstract class World implements IBlockAccess {
- 
-     private int a = 63;
-@@ -59,7 +74,52 @@
-     private final WorldBorder P;
-     int[] J;
- 
--    protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag) {
-+    // CraftBukkit start Added the following
-+    private final CraftWorld world;
-+    public boolean pvpMode;
-+    public boolean keepSpawnInMemory = true;
-+    public ChunkGenerator generator;
-+
-+    public boolean captureBlockStates = false;
-+    public boolean captureTreeGeneration = false;
-+    public ArrayList<BlockState> capturedBlockStates= new ArrayList<BlockState>(){
-+        @Override
-+        public boolean add( BlockState blockState ) {
-+            Iterator<BlockState> blockStateIterator = this.iterator();
-+            while( blockStateIterator.hasNext() ) {
-+                BlockState blockState1 = blockStateIterator.next();
-+                if ( blockState1.getLocation().equals( blockState.getLocation() ) ) {
-+                    return false;
-+                }
-+            }
-+
-+            return super.add( blockState );
-+        }
-+    };
-+    public List<EntityItem> captureDrops;
-+    public long ticksPerAnimalSpawns;
-+    public long ticksPerMonsterSpawns;
-+    public boolean populating;
-+    private int tickPosition;
-+
-+    public CraftWorld getWorld() {
-+        return this.world;
-+    }
-+
-+    public CraftServer getServer() {
-+        return (CraftServer) Bukkit.getServer();
-+    }
-+
-+    public Chunk getChunkIfLoaded(int x, int z) {
-+        return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x, z);
-+    }
-+
-+    protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
-+        this.generator = gen;
-+        this.world = new CraftWorld((WorldServer) this, gen, env);
-+        this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
-+        this.ticksPerMonsterSpawns = this.getServer().getTicksPerMonsterSpawns(); // CraftBukkit
-+        // CraftBukkit end
-         this.u = Lists.newArrayList(new IWorldAccess[] { this.t});
-         this.N = Calendar.getInstance();
-         this.scoreboard = new Scoreboard();
-@@ -72,6 +132,36 @@
-         this.worldProvider = worldprovider;
-         this.isClientSide = flag;
-         this.P = worldprovider.getWorldBorder();
-+        // CraftBukkit start
-+        getWorldBorder().world = (WorldServer) this;
-+        // From PlayerList.setPlayerFileData
-+        getWorldBorder().a(new IWorldBorderListener() {
-+            public void a(WorldBorder worldborder, double d0) {
-+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_SIZE), worldborder.world);
-+            }
-+
-+            public void a(WorldBorder worldborder, double d0, double d1, long i) {
-+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.LERP_SIZE), worldborder.world);
-+            }
-+
-+            public void a(WorldBorder worldborder, double d0, double d1) {
-+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_CENTER), worldborder.world);
-+            }
-+
-+            public void a(WorldBorder worldborder, int i) {
-+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_TIME), worldborder.world);
-+            }
-+
-+            public void b(WorldBorder worldborder, int i) {
-+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_BLOCKS), worldborder.world);
-+            }
-+
-+            public void b(WorldBorder worldborder, double d0) {}
-+
-+            public void c(WorldBorder worldborder, double d0) {}
-+        });
-+        this.getServer().addWorld(this.world);
-+        // CraftBukkit end
-     }
- 
-     public World b() {
-@@ -209,6 +299,27 @@
-     }
- 
-     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
-+        // CraftBukkit start - tree generation
-+        if (this.captureTreeGeneration) {
-+            BlockState blockstate = null;
-+            Iterator<BlockState> it = capturedBlockStates.iterator();
-+            while (it.hasNext()) {
-+                BlockState previous = it.next();
-+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-+                    blockstate = previous;
-+                    it.remove();
-+                    break;
-+                }
-+            }
-+            if (blockstate == null) {
-+                blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
-+            }
-+            blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
-+            blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
-+            this.capturedBlockStates.add(blockstate);
-+            return true;
-+        }
-+        // CraftBukkit end
-         if (this.E(blockposition)) {
-             return false;
-         } else if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
-@@ -216,9 +327,23 @@
-         } else {
-             Chunk chunk = this.getChunkAtWorldCoords(blockposition);
-             Block block = iblockdata.getBlock();
-+
-+            // CraftBukkit start - capture blockstates
-+            BlockState blockstate = null;
-+            if (this.captureBlockStates) {
-+                blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
-+                this.capturedBlockStates.add(blockstate);
-+            }
-+            // CraftBukkit end
-+
-             IBlockData iblockdata1 = chunk.a(blockposition, iblockdata);
- 
-             if (iblockdata1 == null) {
-+                // CraftBukkit start - remove blockstate if failed
-+                if (this.captureBlockStates) {
-+                    this.capturedBlockStates.remove(blockstate);
-+                }
-+                // CraftBukkit end
-                 return false;
-             } else {
-                 if (iblockdata.c() != iblockdata1.c() || iblockdata.d() != iblockdata1.d()) {
-@@ -227,6 +352,7 @@
-                     this.methodProfiler.b();
-                 }
- 
-+                /*
-                 if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && chunk.isReady()) {
-                     this.notify(blockposition, iblockdata1, iblockdata, i);
-                 }
-@@ -239,12 +365,37 @@
-                 } else if (!this.isClientSide && (i & 16) == 0) {
-                     this.c(blockposition, block);
-                 }
-+                */
-+
-+                // CraftBukkit start
-+                if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
-+                    // Modularize client and physic updates
-+                    notifyAndUpdatePhysics(blockposition, chunk, iblockdata1, iblockdata, i);
-+                }
-+                // CraftBukkit end
- 
-                 return true;
-             }
-         }
-     }
- 
-+    // CraftBukkit start - Split off from above in order to directly send client and physic updates
-+    public void notifyAndUpdatePhysics(BlockPosition blockposition, Chunk chunk, IBlockData oldBlock, IBlockData newBlock, int i) {
-+        if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (chunk == null || chunk.isReady())) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
-+            this.notify(blockposition, oldBlock, newBlock, i);
-+        }
-+
-+        if (!this.isClientSide && (i & 1) != 0) {
-+            this.update(blockposition, oldBlock.getBlock(), true);
-+            if (newBlock.n()) {
-+                this.updateAdjacentComparators(blockposition, newBlock.getBlock());
-+            }
-+        } else if (!this.isClientSide && (i & 16) == 0) {
-+            this.c(blockposition, newBlock.getBlock());
-+        }
-+    }
-+    // CraftBukkit end
-+
-     public boolean setAir(BlockPosition blockposition) {
-         return this.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
-     }
-@@ -278,6 +429,11 @@
- 
-     public void update(BlockPosition blockposition, Block block, boolean flag) {
-         if (this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
-+            // CraftBukkit start
-+            if (populating) {
-+                return;
-+            }
-+            // CraftBukkit end
-             this.applyPhysics(blockposition, block, flag);
-         }
- 
-@@ -366,6 +522,17 @@
-             IBlockData iblockdata = this.getType(blockposition);
- 
-             try {
-+                // CraftBukkit start
-+                CraftWorld world = ((WorldServer) this).getWorld();
-+                if (world != null) {
-+                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftMagicNumbers.getId(block));
-+                    this.getServer().getPluginManager().callEvent(event);
-+
-+                    if (event.isCancelled()) {
-+                        return;
-+                    }
-+                }
-+                // CraftBukkit end
-                 iblockdata.doPhysics(this, blockposition, block, blockposition1);
-             } catch (Throwable throwable) {
-                 CrashReport crashreport = CrashReport.a(throwable, "Exception while updating neighbours");
-@@ -583,6 +750,17 @@
-     }
- 
-     public IBlockData getType(BlockPosition blockposition) {
-+        // CraftBukkit start - tree generation
-+        if (captureTreeGeneration) {
-+            Iterator<BlockState> it = capturedBlockStates.iterator();
-+            while (it.hasNext()) {
-+                BlockState previous = it.next();
-+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-+                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
-+                }
-+            }
-+        }
-+        // CraftBukkit end
-         if (this.E(blockposition)) {
-             return Blocks.AIR.getBlockData();
-         } else {
-@@ -788,6 +966,13 @@
-     }
- 
-     public boolean addEntity(Entity entity) {
-+        // CraftBukkit start - Used for entities other than creatures
-+        return addEntity(entity, SpawnReason.DEFAULT);
-+    }
-+
-+    public boolean addEntity(Entity entity, SpawnReason spawnReason) { // Changed signature, added SpawnReason
-+        if (entity == null) return false;
-+        // CraftBukkit end
-         int i = MathHelper.floor(entity.locX / 16.0D);
-         int j = MathHelper.floor(entity.locZ / 16.0D);
-         boolean flag = entity.attachedToPlayer;
-@@ -796,6 +981,37 @@
-             flag = true;
-         }
- 
-+        // CraftBukkit start
-+        org.bukkit.event.Cancellable event = null;
-+        if (entity instanceof EntityLiving && !(entity instanceof EntityPlayer)) {
-+            boolean isAnimal = entity instanceof EntityAnimal || entity instanceof EntityWaterAnimal || entity instanceof EntityGolem;
-+            boolean isMonster = entity instanceof EntityMonster || entity instanceof EntityGhast || entity instanceof EntitySlime;
-+            boolean isNpc = entity instanceof NPC;
-+
-+            if (spawnReason != SpawnReason.CUSTOM) {
-+                if (isAnimal && !allowAnimals || isMonster && !allowMonsters || isNpc && !getServer().getServer().getSpawnNPCs()) {
-+                    entity.dead = true;
-+                    return false;
-+                }
-+            }
-+
-+            event = CraftEventFactory.callCreatureSpawnEvent((EntityLiving) entity, spawnReason);
-+        } else if (entity instanceof EntityItem) {
-+            event = CraftEventFactory.callItemSpawnEvent((EntityItem) entity);
-+        } else if (entity.getBukkitEntity() instanceof org.bukkit.entity.Projectile) {
-+            // Not all projectiles extend EntityProjectile, so check for Bukkit interface instead
-+            event = CraftEventFactory.callProjectileLaunchEvent(entity);
-+        } else if (entity.getBukkitEntity() instanceof org.bukkit.entity.Vehicle){
-+            event = CraftEventFactory.callVehicleCreateEvent(entity);
-+        }
-+
-+        if (event != null && (event.isCancelled() || entity.dead)) {
-+            entity.dead = true;
-+            return false;
-+        }
-+        // CraftBukkit end
-+
-+
-         if (!flag && !this.isChunkLoaded(i, j, false)) {
-             return false;
-         } else {
-@@ -818,6 +1034,7 @@
-             ((IWorldAccess) this.u.get(i)).a(entity);
-         }
- 
-+        entity.valid = true; // CraftBukkit
-     }
- 
-     protected void c(Entity entity) {
-@@ -825,6 +1042,7 @@
-             ((IWorldAccess) this.u.get(i)).b(entity);
-         }
- 
-+        entity.valid = false; // CraftBukkit
-     }
- 
-     public void kill(Entity entity) {
-@@ -860,7 +1078,15 @@
-             this.getChunkAt(i, j).b(entity);
-         }
- 
--        this.entityList.remove(entity);
-+        // CraftBukkit start - Decrement loop variable field if we've already ticked this entity
-+        int index = this.entityList.indexOf(entity);
-+        if (index != -1) {
-+            if (index <= this.tickPosition) {
-+                this.tickPosition--;
-+            }
-+            this.entityList.remove(index);
-+        }
-+        // CraftBukkit end
-         this.c(entity);
-     }
- 
-@@ -977,7 +1203,7 @@
-     }
- 
-     public boolean a(AxisAlignedBB axisalignedbb) {
--        return this.a((Entity) null, axisalignedbb, true, Lists.newArrayList());
-+        return this.a((Entity) null, axisalignedbb, true, Lists.<AxisAlignedBB>newArrayList()); // CraftBukkit - decompile error
-     }
- 
-     public int a(float f) {
-@@ -1047,6 +1273,11 @@
- 
-         for (i = 0; i < this.j.size(); ++i) {
-             entity = (Entity) this.j.get(i);
-+            // CraftBukkit start - Fixed an NPE
-+            if (entity == null) {
-+                continue;
-+            }
-+            // CraftBukkit end
- 
-             try {
-                 ++entity.ticksLived;
-@@ -1095,8 +1326,10 @@
-         CrashReportSystemDetails crashreportsystemdetails1;
-         CrashReport crashreport1;
- 
--        for (i = 0; i < this.entityList.size(); ++i) {
--            entity = (Entity) this.entityList.get(i);
-+        // CraftBukkit start - Use field for loop variable
-+        for (this.tickPosition = 0; this.tickPosition < this.entityList.size(); ++this.tickPosition) {
-+            entity = (Entity) this.entityList.get(this.tickPosition);
-+            // CraftBukkit end
-             Entity entity1 = entity.bJ();
- 
-             if (entity1 != null) {
-@@ -1129,7 +1362,7 @@
-                     this.getChunkAt(j, l).b(entity);
-                 }
- 
--                this.entityList.remove(i--);
-+                this.entityList.remove(this.tickPosition--); // CraftBukkit - Use field for loop variable
-                 this.c(entity);
-             }
- 
-@@ -1138,6 +1371,13 @@
- 
-         this.methodProfiler.c("blockEntities");
-         this.O = true;
-+        // CraftBukkit start - From below, clean up tile entities before ticking them
-+        if (!this.tileEntityListUnload.isEmpty()) {
-+            this.tileEntityListTick.removeAll(this.tileEntityListUnload);
-+            this.tileEntityList.removeAll(this.tileEntityListUnload);
-+            this.tileEntityListUnload.clear();
-+        }
-+        // CraftBukkit end
-         Iterator iterator = this.tileEntityListTick.iterator();
- 
-         while (iterator.hasNext()) {
-@@ -1172,11 +1412,13 @@
-         }
- 
-         this.O = false;
-+        /* CraftBukkit start - Moved up
-         if (!this.tileEntityListUnload.isEmpty()) {
-             this.tileEntityListTick.removeAll(this.tileEntityListUnload);
-             this.tileEntityList.removeAll(this.tileEntityListUnload);
-             this.tileEntityListUnload.clear();
-         }
-+        // CraftBukkit end */
- 
-         this.methodProfiler.c("pendingBlockEntities");
-         if (!this.b.isEmpty()) {
-@@ -1184,9 +1426,11 @@
-                 TileEntity tileentity1 = (TileEntity) this.b.get(i1);
- 
-                 if (!tileentity1.y()) {
-+                    /* CraftBukkit start - Order matters, moved down
-                     if (!this.tileEntityList.contains(tileentity1)) {
-                         this.a(tileentity1);
-                     }
-+                    // CraftBukkit end */
- 
-                     if (this.isLoaded(tileentity1.getPosition())) {
-                         Chunk chunk = this.getChunkAtWorldCoords(tileentity1.getPosition());
-@@ -1194,6 +1438,12 @@
- 
-                         chunk.a(tileentity1.getPosition(), tileentity1);
-                         this.notify(tileentity1.getPosition(), iblockdata, iblockdata, 3);
-+                        // CraftBukkit start
-+                        // From above, don't screw this up - SPIGOT-1746
-+                        if (!this.tileEntityList.contains(tileentity1)) {
-+                            this.a(tileentity1);
-+                        }
-+                        // CraftBukkit end
-                     }
-                 }
-             }
-@@ -1247,15 +1497,13 @@
-         int i;
-         int j;
- 
--        if (!(entity instanceof EntityHuman)) {
--            i = MathHelper.floor(entity.locX);
--            j = MathHelper.floor(entity.locZ);
--            boolean flag1 = true;
--
--            if (flag && !this.isAreaLoaded(i - 32, 0, j - 32, i + 32, 0, j + 32, true)) {
--                return;
--            }
-+        // CraftBukkit start - check if chunks are loaded as done in previous versions
-+        // TODO: Go back to Vanilla behaviour when comfortable
-+        Chunk startingChunk = this.getChunkIfLoaded(MathHelper.floor(entity.locX) >> 4, MathHelper.floor(entity.locZ) >> 4);
-+        if (flag && !(startingChunk != null && startingChunk.areNeighborsLoaded(2))) {
-+            return;
-         }
-+        // CraftBukkit end
- 
-         entity.M = entity.locX;
-         entity.N = entity.locY;
-@@ -1268,6 +1516,7 @@
-                 entity.aE();
-             } else {
-                 entity.B_();
-+                entity.postTick(); // CraftBukkit
-             }
-         }
- 
-@@ -1559,11 +1808,18 @@
-         }
-     }
- 
-+    public Map<BlockPosition, TileEntity> capturedTileEntities = Maps.newHashMap();
-     @Nullable
-     public TileEntity getTileEntity(BlockPosition blockposition) {
-         if (this.E(blockposition)) {
-             return null;
-         } else {
-+            // CraftBukkit start
-+            if (capturedTileEntities.containsKey(blockposition)) {
-+                return capturedTileEntities.get(blockposition);
-+            }
-+            // CraftBukkit end
-+
-             TileEntity tileentity = null;
- 
-             if (this.O) {
-@@ -1598,6 +1854,14 @@
-     public void setTileEntity(BlockPosition blockposition, @Nullable TileEntity tileentity) {
-         if (!this.E(blockposition)) {
-             if (tileentity != null && !tileentity.y()) {
-+            // CraftBukkit start
-+            if (captureBlockStates) {
-+                tileentity.a(this);
-+                tileentity.setPosition(blockposition);
-+                capturedTileEntities.put(blockposition, tileentity);
-+                return;
-+            }
-+            // CraftBukkit end
-                 if (this.O) {
-                     tileentity.setPosition(blockposition);
-                     Iterator iterator = this.b.iterator();
-@@ -1757,6 +2021,14 @@
-                 }
- 
-                 this.o = MathHelper.a(this.o, 0.0F, 1.0F);
-+
-+                // CraftBukkit start
-+                for (int idx = 0; idx < this.players.size(); ++idx) {
-+                    if (((EntityPlayer) this.players.get(idx)).world == this) {
-+                        ((EntityPlayer) this.players.get(idx)).tickWeather();
-+                    }
-+                }
-+                // CraftBukkit end
-             }
-         }
-     }
-@@ -1894,7 +2166,10 @@
-     }
- 
-     public boolean c(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
--        if (!this.areChunksLoaded(blockposition, 17, false)) {
-+        // CraftBukkit start - Use neighbor cache instead of looking up
-+        Chunk chunk = this.getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
-+        if (chunk == null || !chunk.areNeighborsLoaded(1) /*!this.areChunksLoaded(blockposition, 17, false)*/) {
-+            // CraftBukkit end
-             return false;
-         } else {
-             int i = 0;
-@@ -2061,7 +2336,7 @@
-         while (iterator.hasNext()) {
-             Entity entity = (Entity) iterator.next();
- 
--            if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply(entity)) {
-+            if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply((T) entity)) {
-                 arraylist.add(entity);
-             }
-         }
-@@ -2076,7 +2351,7 @@
-         while (iterator.hasNext()) {
-             Entity entity = (Entity) iterator.next();
- 
--            if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply(entity)) {
-+            if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply((T) entity)) { // CraftBukkit - fix decompile error
-                 arraylist.add(entity);
-             }
-         }
-@@ -2125,7 +2400,7 @@
-             }
-         }
- 
--        return entity;
-+        return (T) entity; // CraftBukkit fix decompile error
-     }
- 
-     @Nullable
-@@ -2146,8 +2421,17 @@
- 
-         while (iterator.hasNext()) {
-             Entity entity = (Entity) iterator.next();
-+            // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
-+            if (entity instanceof EntityInsentient) {
-+                EntityInsentient entityinsentient = (EntityInsentient) entity;
-+                if (entityinsentient.isTypeNotPersistent() && entityinsentient.isPersistent()) {
-+                    continue;
-+                }
-+            }
- 
--            if ((!(entity instanceof EntityInsentient) || !((EntityInsentient) entity).isPersistent()) && oclass.isAssignableFrom(entity.getClass())) {
-+            if (oclass.isAssignableFrom(entity.getClass())) {
-+            // if ((!(entity instanceof EntityInsentient) || !((EntityInsentient) entity).isPersistent()) && oclass.isAssignableFrom(entity.getClass())) {
-+                // CraftBukkit end
-                 ++i;
-             }
-         }
-@@ -2156,12 +2440,18 @@
-     }
- 
-     public void a(Collection<Entity> collection) {
--        this.entityList.addAll(collection);
-+        // CraftBukkit start
-+        // this.entityList.addAll(collection);
-         Iterator iterator = collection.iterator();
- 
-         while (iterator.hasNext()) {
-             Entity entity = (Entity) iterator.next();
- 
-+            if (entity == null) {
-+                continue;
-+            }
-+            this.entityList.add(entity);
-+            // CraftBukkit end
-             this.b(entity);
-         }
- 
-@@ -2175,7 +2465,13 @@
-         IBlockData iblockdata = this.getType(blockposition);
-         AxisAlignedBB axisalignedbb = flag ? null : block.getBlockData().d(this, blockposition);
- 
--        return axisalignedbb != Block.k && !this.a(axisalignedbb.a(blockposition), entity) ? false : (iblockdata.getMaterial() == Material.ORIENTABLE && block == Blocks.ANVIL ? true : iblockdata.getMaterial().isReplaceable() && block.canPlace(this, blockposition, enumdirection));
-+        // CraftBukkit start - store default return
-+        boolean defaultReturn = axisalignedbb != Block.k && !this.a(axisalignedbb.a(blockposition), entity) ? false : (iblockdata.getMaterial() == Material.ORIENTABLE && block == Blocks.ANVIL ? true : iblockdata.getMaterial().isReplaceable() && block.canPlace(this, blockposition, enumdirection));
-+        BlockCanBuildEvent event = new BlockCanBuildEvent(this.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftMagicNumbers.getId(block), defaultReturn);
-+        this.getServer().getPluginManager().callEvent(event);
-+
-+        return event.isBuildable();
-+        // CraftBukkit end
-     }
- 
-     public int getSeaLevel() {
-@@ -2285,6 +2581,11 @@
- 
-         for (int i = 0; i < this.players.size(); ++i) {
-             EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
-+            // CraftBukkit start - Fixed an NPE
-+            if (entityhuman1 == null || entityhuman1.dead) {
-+                continue;
-+            }
-+            // CraftBukkit end
- 
-             if (predicate.apply(entityhuman1)) {
-                 double d5 = entityhuman1.d(d0, d1, d2);
-@@ -2453,6 +2754,16 @@
- 
-     public void everyoneSleeping() {}
- 
-+    // CraftBukkit start
-+    // Calls the method that checks to see if players are sleeping
-+    // Called by CraftPlayer.setPermanentSleeping()
-+    public void checkSleepStatus() {
-+        if (!this.isClientSide) {
-+            this.everyoneSleeping();
-+        }
-+    }
-+    // CraftBukkit end
-+
-     public float h(float f) {
-         return (this.p + (this.q - this.p) * f) * this.j(f);
-     }
-@@ -2670,7 +2981,7 @@
-         int l = j * 16 + 8 - blockposition.getZ();
-         boolean flag = true;
- 
--        return k >= -128 && k <= 128 && l >= -128 && l <= 128;
-+        return k >= -128 && k <= 128 && l >= -128 && l <= 128 && this.keepSpawnInMemory; // CraftBukkit - Added 'this.keepSpawnInMemory'
-     }
- 
-     public void a(Packet<?> packet) {
diff --git a/nms-patches/WorldBorder.patch b/nms-patches/WorldBorder.patch
deleted file mode 100644
index 8577053..0000000
--- a/nms-patches/WorldBorder.patch
+++ /dev/null
@@ -1,18 +0,0 @@
---- a/net/minecraft/server/WorldBorder.java
-+++ b/net/minecraft/server/WorldBorder.java
-@@ -18,6 +18,7 @@
-     private double j;
-     private int k;
-     private int l;
-+    public WorldServer world; // CraftBukkit
- 
-     public WorldBorder() {
-         this.e = this.d;
-@@ -177,6 +178,7 @@
-     }
- 
-     public void a(IWorldBorderListener iworldborderlistener) {
-+        if (a.contains(iworldborderlistener)) return; // CraftBukkit
-         this.a.add(iworldborderlistener);
-     }
- 
diff --git a/nms-patches/WorldData.patch b/nms-patches/WorldData.patch
deleted file mode 100644
index d81876a..0000000
--- a/nms-patches/WorldData.patch
+++ /dev/null
@@ -1,82 +0,0 @@
---- a/net/minecraft/server/WorldData.java
-+++ b/net/minecraft/server/WorldData.java
-@@ -5,6 +5,11 @@
- import java.util.Map;
- import java.util.Map.Entry;
- import javax.annotation.Nullable;
-+// CraftBukkit start
-+import org.bukkit.Bukkit;
-+import org.bukkit.event.weather.ThunderChangeEvent;
-+import org.bukkit.event.weather.WeatherChangeEvent;
-+// CraftBukkit end
- 
- public class WorldData {
- 
-@@ -49,6 +54,7 @@
-     private int M;
-     private final Map<DimensionManager, NBTTagCompound> N;
-     private GameRules O;
-+    public WorldServer world; // CraftBukkit
- 
-     protected WorldData() {
-         this.f = WorldType.NORMAL;
-@@ -437,6 +443,16 @@
-     }
- 
-     public void setThundering(boolean flag) {
-+        // CraftBukkit start
-+        org.bukkit.World world = Bukkit.getWorld(getName());
-+        if (world != null) {
-+            ThunderChangeEvent thunder = new ThunderChangeEvent(world, flag);
-+            Bukkit.getServer().getPluginManager().callEvent(thunder);
-+            if (thunder.isCancelled()) {
-+                return;
-+            }
-+        }
-+        // CraftBukkit end
-         this.v = flag;
-     }
- 
-@@ -453,6 +469,16 @@
-     }
- 
-     public void setStorm(boolean flag) {
-+        // CraftBukkit start
-+        org.bukkit.World world = Bukkit.getWorld(getName());
-+        if (world != null) {
-+            WeatherChangeEvent weather = new WeatherChangeEvent(world, flag);
-+            Bukkit.getServer().getPluginManager().callEvent(weather);
-+            if (weather.isCancelled()) {
-+                return;
-+            }
-+        }
-+        // CraftBukkit end
-         this.t = flag;
-     }
- 
-@@ -598,6 +624,12 @@
- 
-     public void setDifficulty(EnumDifficulty enumdifficulty) {
-         this.C = enumdifficulty;
-+        // CraftBukkit start
-+        PacketPlayOutServerDifficulty packet = new PacketPlayOutServerDifficulty(this.getDifficulty(), this.isDifficultyLocked());
-+        for (EntityPlayer player : (java.util.List<EntityPlayer>) (java.util.List) world.players) {
-+            player.playerConnection.sendPacket(packet);
-+        }
-+        // CraftBukkit end
-     }
- 
-     public boolean isDifficultyLocked() {
-@@ -716,4 +748,12 @@
-     public void a(DimensionManager dimensionmanager, NBTTagCompound nbttagcompound) {
-         this.N.put(dimensionmanager, nbttagcompound);
-     }
-+
-+    // CraftBukkit start - Check if the name stored in NBT is the correct one
-+    public void checkName( String name ) {
-+        if ( !this.levelName.equals( name ) ) {
-+            this.levelName = name;
-+        }
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/WorldGenGroundBush.patch b/nms-patches/WorldGenGroundBush.patch
deleted file mode 100644
index bbd0306..0000000
--- a/nms-patches/WorldGenGroundBush.patch
+++ /dev/null
@@ -1,15 +0,0 @@
---- a/net/minecraft/server/WorldGenGroundBush.java
-+++ b/net/minecraft/server/WorldGenGroundBush.java
-@@ -45,7 +45,12 @@
-                     }
-                 }
-             }
-+        // CraftBukkit start - Return false if gen was unsuccessful
-+        } else {
-+            return false;
-         }
-+        // CraftBukkit end
-+
- 
-         return true;
-     }
diff --git a/nms-patches/WorldGenMegaTreeAbstract.patch b/nms-patches/WorldGenMegaTreeAbstract.patch
deleted file mode 100644
index 99dd51e..0000000
--- a/nms-patches/WorldGenMegaTreeAbstract.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/WorldGenMegaTreeAbstract.java
-+++ b/net/minecraft/server/WorldGenMegaTreeAbstract.java
-@@ -42,7 +42,7 @@
- 
-                 for (int k = -b0; k <= b0 && flag; ++k) {
-                     for (int l = -b0; l <= b0 && flag; ++l) {
--                        if (blockposition.getY() + j < 0 || blockposition.getY() + j >= 256 || !this.a(world.getType(blockposition.a(k, j, l)).getBlock())) {
-+                        if (blockposition.getY() + j < 0 || blockposition.getY() + j >= 256 || (!this.a(world.getType(blockposition.a(k, j, l)).getBlock()) && world.getType(blockposition.a(k, j, l)).getBlock() != Blocks.SAPLING)) { // CraftBukkit - ignore our own saplings
-                             flag = false;
-                         }
-                     }
diff --git a/nms-patches/WorldGenRegistration.patch b/nms-patches/WorldGenRegistration.patch
deleted file mode 100644
index 63364bc..0000000
--- a/nms-patches/WorldGenRegistration.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/net/minecraft/server/WorldGenRegistration.java
-+++ b/net/minecraft/server/WorldGenRegistration.java
-@@ -157,7 +157,7 @@
-                         entitywitch.cW();
-                         entitywitch.setPositionRotation((double) i + 0.5D, (double) j, (double) k + 0.5D, 0.0F, 0.0F);
-                         entitywitch.prepare(world.D(new BlockPosition(i, j, k)), (GroupDataEntity) null);
--                        world.addEntity(entitywitch);
-+                        world.addEntity(entitywitch, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
-                     }
-                 }
- 
diff --git a/nms-patches/WorldGenVillagePieces.patch b/nms-patches/WorldGenVillagePieces.patch
deleted file mode 100644
index ca0efd5..0000000
--- a/nms-patches/WorldGenVillagePieces.patch
+++ /dev/null
@@ -1,45 +0,0 @@
---- a/net/minecraft/server/WorldGenVillagePieces.java
-+++ b/net/minecraft/server/WorldGenVillagePieces.java
-@@ -238,10 +238,10 @@
- 
-         protected void a(NBTTagCompound nbttagcompound) {
-             super.a(nbttagcompound);
--            nbttagcompound.setInt("CA", Block.REGISTRY.a((Object) this.a));
--            nbttagcompound.setInt("CB", Block.REGISTRY.a((Object) this.b));
--            nbttagcompound.setInt("CC", Block.REGISTRY.a((Object) this.c));
--            nbttagcompound.setInt("CD", Block.REGISTRY.a((Object) this.d));
-+            nbttagcompound.setInt("CA", Block.REGISTRY.a(this.a));
-+            nbttagcompound.setInt("CB", Block.REGISTRY.a(this.b));
-+            nbttagcompound.setInt("CC", Block.REGISTRY.a(this.c));
-+            nbttagcompound.setInt("CD", Block.REGISTRY.a(this.d));
-         }
- 
-         protected void a(NBTTagCompound nbttagcompound, DefinedStructureManager definedstructuremanager) {
-@@ -371,8 +371,8 @@
- 
-         protected void a(NBTTagCompound nbttagcompound) {
-             super.a(nbttagcompound);
--            nbttagcompound.setInt("CA", Block.REGISTRY.a((Object) this.a));
--            nbttagcompound.setInt("CB", Block.REGISTRY.a((Object) this.b));
-+            nbttagcompound.setInt("CA", Block.REGISTRY.a(this.a));
-+            nbttagcompound.setInt("CB", Block.REGISTRY.a(this.b));
-         }
- 
-         protected void a(NBTTagCompound nbttagcompound, DefinedStructureManager definedstructuremanager) {
-@@ -1672,14 +1672,14 @@
-                         entityzombievillager.prepare(world.D(new BlockPosition(entityzombievillager)), (GroupDataEntity) null);
-                         entityzombievillager.setProfession(this.c(i1, 0));
-                         entityzombievillager.cW();
--                        world.addEntity(entityzombievillager);
-+                        world.addEntity(entityzombievillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
-                     } else {
-                         EntityVillager entityvillager = new EntityVillager(world);
- 
-                         entityvillager.setPositionRotation((double) j1 + 0.5D, (double) k1, (double) l1 + 0.5D, 0.0F, 0.0F);
-                         entityvillager.setProfession(this.c(i1, world.random.nextInt(6)));
-                         entityvillager.a(world.D(new BlockPosition(entityvillager)), (GroupDataEntity) null, false);
--                        world.addEntity(entityvillager);
-+                        world.addEntity(entityvillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
-                     }
-                 }
- 
diff --git a/nms-patches/WorldManager.patch b/nms-patches/WorldManager.patch
deleted file mode 100644
index e1861fd..0000000
--- a/nms-patches/WorldManager.patch
+++ /dev/null
@@ -1,48 +0,0 @@
---- a/net/minecraft/server/WorldManager.java
-+++ b/net/minecraft/server/WorldManager.java
-@@ -35,7 +35,8 @@
-     }
- 
-     public void a(@Nullable EntityHuman entityhuman, SoundEffect soundeffect, SoundCategory soundcategory, double d0, double d1, double d2, float f, float f1) {
--        this.a.getPlayerList().sendPacketNearby(entityhuman, d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.worldProvider.getDimensionManager().getDimensionID(), new PacketPlayOutNamedSoundEffect(soundeffect, soundcategory, d0, d1, d2, f, f1));
-+        // CraftBukkit - this.world.dimension
-+        this.a.getPlayerList().sendPacketNearby(entityhuman, d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.dimension, new PacketPlayOutNamedSoundEffect(soundeffect, soundcategory, d0, d1, d2, f, f1));
-     }
- 
-     public void a(int i, int j, int k, int l, int i1, int j1) {}
-@@ -49,7 +50,8 @@
-     public void a(SoundEffect soundeffect, BlockPosition blockposition) {}
- 
-     public void a(EntityHuman entityhuman, int i, BlockPosition blockposition, int j) {
--        this.a.getPlayerList().sendPacketNearby(entityhuman, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), 64.0D, this.world.worldProvider.getDimensionManager().getDimensionID(), new PacketPlayOutWorldEvent(i, blockposition, j, false));
-+        // CraftBukkit - this.world.dimension
-+        this.a.getPlayerList().sendPacketNearby(entityhuman, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), 64.0D, this.world.dimension, new PacketPlayOutWorldEvent(i, blockposition, j, false));
-     }
- 
-     public void a(int i, BlockPosition blockposition, int j) {
-@@ -59,6 +61,12 @@
-     public void b(int i, BlockPosition blockposition, int j) {
-         Iterator iterator = this.a.getPlayerList().v().iterator();
- 
-+        // CraftBukkit start
-+        EntityHuman entityhuman = null;
-+        Entity entity = world.getEntity(i);
-+        if (entity instanceof EntityHuman) entityhuman = (EntityHuman) entity;
-+        // CraftBukkit end
-+
-         while (iterator.hasNext()) {
-             EntityPlayer entityplayer = (EntityPlayer) iterator.next();
- 
-@@ -67,6 +75,12 @@
-                 double d1 = (double) blockposition.getY() - entityplayer.locY;
-                 double d2 = (double) blockposition.getZ() - entityplayer.locZ;
- 
-+                // CraftBukkit start
-+                if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
-+                    continue;
-+                }
-+                // CraftBukkit end
-+
-                 if (d0 * d0 + d1 * d1 + d2 * d2 < 1024.0D) {
-                     entityplayer.playerConnection.sendPacket(new PacketPlayOutBlockBreakAnimation(i, blockposition, j));
-                 }
diff --git a/nms-patches/WorldMap.patch b/nms-patches/WorldMap.patch
deleted file mode 100644
index 5c8d815..0000000
--- a/nms-patches/WorldMap.patch
+++ /dev/null
@@ -1,123 +0,0 @@
---- a/net/minecraft/server/WorldMap.java
-+++ b/net/minecraft/server/WorldMap.java
-@@ -7,6 +7,14 @@
- import java.util.Map;
- import javax.annotation.Nullable;
- 
-+// CraftBukkit start
-+import java.util.UUID;
-+
-+import org.bukkit.craftbukkit.CraftServer;
-+import org.bukkit.craftbukkit.CraftWorld;
-+import org.bukkit.craftbukkit.map.CraftMapView;
-+// CraftBukkit end
-+
- public class WorldMap extends PersistentBase {
- 
-     public int centerX;
-@@ -20,8 +28,18 @@
-     private final Map<EntityHuman, WorldMap.WorldMapHumanTracker> k = Maps.newHashMap();
-     public Map<String, MapIcon> decorations = Maps.newLinkedHashMap();
- 
-+    // CraftBukkit start
-+    public final CraftMapView mapView;
-+    private CraftServer server;
-+    private UUID uniqueId = null;
-+    // CraftBukkit end
-+
-     public WorldMap(String s) {
-         super(s);
-+        // CraftBukkit start
-+        mapView = new CraftMapView(this);
-+        server = (CraftServer) org.bukkit.Bukkit.getServer();
-+        // CraftBukkit end
-     }
- 
-     public void a(double d0, double d1, int i) {
-@@ -34,7 +52,30 @@
-     }
- 
-     public void a(NBTTagCompound nbttagcompound) {
--        this.map = nbttagcompound.getByte("dimension");
-+        // CraftBukkit start
-+        byte dimension = nbttagcompound.getByte("dimension");
-+
-+        if (dimension >= 10) {
-+            long least = nbttagcompound.getLong("UUIDLeast");
-+            long most = nbttagcompound.getLong("UUIDMost");
-+
-+            if (least != 0L && most != 0L) {
-+                this.uniqueId = new UUID(most, least);
-+
-+                CraftWorld world = (CraftWorld) server.getWorld(this.uniqueId);
-+                // Check if the stored world details are correct.
-+                if (world == null) {
-+                    /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
-+                       This is to prevent them being corrupted with the wrong map data. */
-+                    dimension = 127;
-+                } else {
-+                    dimension = (byte) world.getHandle().dimension;
-+                }
-+            }
-+        }
-+
-+        this.map = dimension;
-+        // CraftBukkit end
-         this.centerX = nbttagcompound.getInt("xCenter");
-         this.centerZ = nbttagcompound.getInt("zCenter");
-         this.scale = nbttagcompound.getByte("scale");
-@@ -76,6 +117,25 @@
-     }
- 
-     public NBTTagCompound b(NBTTagCompound nbttagcompound) {
-+        // CraftBukkit start
-+        if (this.map >= 10) {
-+            if (this.uniqueId == null) {
-+                for (org.bukkit.World world : server.getWorlds()) {
-+                    CraftWorld cWorld = (CraftWorld) world;
-+                    if (cWorld.getHandle().dimension == this.map) {
-+                        this.uniqueId = cWorld.getUID();
-+                        break;
-+                    }
-+                }
-+            }
-+            /* Perform a second check to see if a matching world was found, this is a necessary
-+               change incase Maps are forcefully unlinked from a World and lack a UID.*/
-+            if (this.uniqueId != null) {
-+                nbttagcompound.setLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
-+                nbttagcompound.setLong("UUIDMost", this.uniqueId.getMostSignificantBits());
-+            }
-+        }
-+        // CraftBukkit end
-         nbttagcompound.setByte("dimension", this.map);
-         nbttagcompound.setInt("xCenter", this.centerX);
-         nbttagcompound.setInt("zCenter", this.centerZ);
-@@ -265,12 +325,26 @@
- 
-         @Nullable
-         public Packet<?> a(ItemStack itemstack) {
-+            // CraftBukkit start
-+            org.bukkit.craftbukkit.map.RenderData render = WorldMap.this.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) this.trackee.getBukkitEntity()); // CraftBukkit
-+
-+            java.util.Collection<MapIcon> icons = new java.util.ArrayList<MapIcon>();
-+
-+            for ( org.bukkit.map.MapCursor cursor : render.cursors) {
-+
-+                if (cursor.isVisible()) {
-+                    icons.add(new MapIcon(MapIcon.Type.a(cursor.getRawType()), cursor.getX(), cursor.getY(), cursor.getDirection()));
-+                }
-+            }
-+
-             if (this.d) {
-                 this.d = false;
--                return new PacketPlayOutMap(itemstack.getData(), WorldMap.this.scale, WorldMap.this.track, WorldMap.this.decorations.values(), WorldMap.this.colors, this.e, this.f, this.g + 1 - this.e, this.h + 1 - this.f);
-+                // PAIL: this.e
-+                return new PacketPlayOutMap(itemstack.getData(), WorldMap.this.scale, WorldMap.this.track, icons, render.buffer, this.e, this.f, this.g + 1 - this.e, this.h + 1 - this.f);
-             } else {
--                return this.i++ % 5 == 0 ? new PacketPlayOutMap(itemstack.getData(), WorldMap.this.scale, WorldMap.this.track, WorldMap.this.decorations.values(), WorldMap.this.colors, 0, 0, 0, 0) : null;
-+                return this.i++ % 5 == 0 ? new PacketPlayOutMap(itemstack.getData(), WorldMap.this.scale, WorldMap.this.track, icons, render.buffer, 0, 0, 0, 0) : null;
-             }
-+            // CraftBukkit end
-         }
- 
-         public void a(int i, int j) {
diff --git a/nms-patches/WorldNBTStorage.patch b/nms-patches/WorldNBTStorage.patch
deleted file mode 100644
index c39f4ef..0000000
--- a/nms-patches/WorldNBTStorage.patch
+++ /dev/null
@@ -1,112 +0,0 @@
---- a/net/minecraft/server/WorldNBTStorage.java
-+++ b/net/minecraft/server/WorldNBTStorage.java
-@@ -12,6 +12,11 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import java.util.UUID;
-+import org.bukkit.craftbukkit.entity.CraftPlayer;
-+// CraftBukkit end
-+
- public class WorldNBTStorage implements IDataManager, IPlayerFileData {
- 
-     private static final Logger b = LogManager.getLogger();
-@@ -22,6 +27,7 @@
-     private final String g;
-     private final DefinedStructureManager h;
-     protected final DataConverterManager a;
-+    private UUID uuid = null; // CraftBukkit
- 
-     public WorldNBTStorage(File file, String s, boolean flag, DataConverterManager dataconvertermanager) {
-         this.a = dataconvertermanager;
-@@ -168,12 +174,38 @@
-         }
- 
-         if (nbttagcompound != null) {
-+            // CraftBukkit start
-+            if (entityhuman instanceof EntityPlayer) {
-+                CraftPlayer player = (CraftPlayer) entityhuman.getBukkitEntity();
-+                // Only update first played if it is older than the one we have
-+                long modified = new File(this.playerDir, entityhuman.getUniqueID().toString() + ".dat").lastModified();
-+                if (modified < player.getFirstPlayed()) {
-+                    player.setFirstPlayed(modified);
-+                }
-+            }
-+            // CraftBukkit end
-             entityhuman.f(this.a.a((DataConverterType) DataConverterTypes.PLAYER, nbttagcompound));
-         }
- 
-         return nbttagcompound;
-     }
- 
-+    // CraftBukkit start
-+    public NBTTagCompound getPlayerData(String s) {
-+        try {
-+            File file1 = new File(this.playerDir, s + ".dat");
-+
-+            if (file1.exists()) {
-+                return NBTCompressedStreamTools.a((InputStream) (new FileInputStream(file1)));
-+            }
-+        } catch (Exception exception) {
-+            b.warn("Failed to load player data for " + s);
-+        }
-+
-+        return null;
-+    }
-+    // CraftBukkit end
-+
-     public IPlayerFileData getPlayerFileData() {
-         return this;
-     }
-@@ -203,4 +235,50 @@
-     public DefinedStructureManager h() {
-         return this.h;
-     }
-+
-+    // CraftBukkit start
-+    public UUID getUUID() {
-+        if (uuid != null) return uuid;
-+        File file1 = new File(this.baseDir, "uid.dat");
-+        if (file1.exists()) {
-+            DataInputStream dis = null;
-+            try {
-+                dis = new DataInputStream(new FileInputStream(file1));
-+                return uuid = new UUID(dis.readLong(), dis.readLong());
-+            } catch (IOException ex) {
-+                b.warn("Failed to read " + file1 + ", generating new random UUID", ex);
-+            } finally {
-+                if (dis != null) {
-+                    try {
-+                        dis.close();
-+                    } catch (IOException ex) {
-+                        // NOOP
-+                    }
-+                }
-+            }
-+        }
-+        uuid = UUID.randomUUID();
-+        DataOutputStream dos = null;
-+        try {
-+            dos = new DataOutputStream(new FileOutputStream(file1));
-+            dos.writeLong(uuid.getMostSignificantBits());
-+            dos.writeLong(uuid.getLeastSignificantBits());
-+        } catch (IOException ex) {
-+            b.warn("Failed to write " + file1, ex);
-+        } finally {
-+            if (dos != null) {
-+                try {
-+                    dos.close();
-+                } catch (IOException ex) {
-+                    // NOOP
-+                }
-+            }
-+        }
-+        return uuid;
-+    }
-+
-+    public File getPlayerDir() {
-+        return playerDir;
-+    }
-+    // CraftBukkit end
- }
diff --git a/nms-patches/WorldProviderHell.patch b/nms-patches/WorldProviderHell.patch
deleted file mode 100644
index 3b43b31..0000000
--- a/nms-patches/WorldProviderHell.patch
+++ /dev/null
@@ -1,16 +0,0 @@
---- a/net/minecraft/server/WorldProviderHell.java
-+++ b/net/minecraft/server/WorldProviderHell.java
-@@ -44,11 +44,11 @@
-     public WorldBorder getWorldBorder() {
-         return new WorldBorder() {
-             public double getCenterX() {
--                return super.getCenterX() / 8.0D;
-+                return super.getCenterX(); // CraftBukkit
-             }
- 
-             public double getCenterZ() {
--                return super.getCenterZ() / 8.0D;
-+                return super.getCenterZ(); // CraftBukkit
-             }
-         };
-     }
diff --git a/nms-patches/WorldServer.patch b/nms-patches/WorldServer.patch
deleted file mode 100644
index 57a5ae8..0000000
--- a/nms-patches/WorldServer.patch
+++ /dev/null
@@ -1,691 +0,0 @@
---- a/net/minecraft/server/WorldServer.java
-+++ b/net/minecraft/server/WorldServer.java
-@@ -19,14 +19,26 @@
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- 
-+// CraftBukkit start
-+import java.util.logging.Level;
-+
-+import org.bukkit.WeatherType;
-+import org.bukkit.block.BlockState;
-+import org.bukkit.craftbukkit.util.HashTreeSet;
-+
-+import org.bukkit.event.block.BlockFormEvent;
-+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-+import org.bukkit.event.weather.LightningStrikeEvent;
-+// CraftBukkit end
-+
- public class WorldServer extends World implements IAsyncTaskHandler {
- 
-     private static final Logger a = LogManager.getLogger();
-     private final MinecraftServer server;
-     public EntityTracker tracker;
-     private final PlayerChunkMap manager;
--    private final Set<NextTickListEntry> nextTickListHash = Sets.newHashSet();
--    private final TreeSet<NextTickListEntry> nextTickList = new TreeSet();
-+    // private final Set<NextTickListEntry> nextTickListHash = Sets.newHashSet();
-+    private final HashTreeSet<NextTickListEntry> nextTickList = new HashTreeSet<NextTickListEntry>(); // CraftBukkit - HashTreeSet
-     private final Map<UUID, Entity> entitiesByUUID = Maps.newHashMap();
-     public boolean savingDisabled;
-     private boolean Q;
-@@ -38,14 +50,22 @@
-     private int V;
-     private final List<NextTickListEntry> W = Lists.newArrayList();
- 
--    public WorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, WorldData worlddata, int i, MethodProfiler methodprofiler) {
--        super(idatamanager, worlddata, DimensionManager.a(i).d(), methodprofiler, false);
-+    // CraftBukkit start
-+    public final int dimension;
-+
-+    // Add env and gen to constructor
-+    public WorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, WorldData worlddata, int i, MethodProfiler methodprofiler, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
-+        super(idatamanager, worlddata, DimensionManager.a(env.getId()).d(), methodprofiler, false, gen, env);
-+        this.dimension = i;
-+        this.pvpMode = minecraftserver.getPVP();
-+        worlddata.world = this;
-+        // CraftBukkit end
-         this.server = minecraftserver;
-         this.tracker = new EntityTracker(this);
-         this.manager = new PlayerChunkMap(this);
-         this.worldProvider.a((World) this);
-         this.chunkProvider = this.n();
--        this.portalTravelAgent = new PortalTravelAgent(this);
-+        this.portalTravelAgent = new org.bukkit.craftbukkit.CraftTravelAgent(this); // CraftBukkit
-         this.J();
-         this.K();
-         this.getWorldBorder().a(minecraftserver.aE());
-@@ -64,6 +84,7 @@
-             this.villages.a((World) this);
-         }
- 
-+        if (getServer().getScoreboardManager() == null) { // CraftBukkit
-         this.scoreboard = new ScoreboardServer(this.server);
-         PersistentScoreboard persistentscoreboard = (PersistentScoreboard) this.worldMaps.get(PersistentScoreboard.class, "scoreboard");
- 
-@@ -74,9 +95,21 @@
- 
-         persistentscoreboard.a(this.scoreboard);
-         ((ScoreboardServer) this.scoreboard).a((Runnable) (new RunnableSaveScoreboard(persistentscoreboard)));
-+        // CraftBukkit start
-+        } else {
-+            this.scoreboard = getServer().getScoreboardManager().getMainScoreboard().getHandle();
-+        }
-+        // CraftBukkit end
-+
-         this.B = new LootTableRegistry(new File(new File(this.dataManager.getDirectory(), "data"), "loot_tables"));
--        this.C = new AdvancementDataWorld(new File(new File(this.dataManager.getDirectory(), "data"), "advancements"));
--        this.D = new CustomFunctionData(new File(new File(this.dataManager.getDirectory(), "data"), "functions"), this.server);
-+        // CraftBukkit start
-+        if (this.C == null) {
-+            this.C = new AdvancementDataWorld(new File(new File(this.dataManager.getDirectory(), "data"), "advancements"));
-+        }
-+        if (this.D == null) {
-+            this.D = new CustomFunctionData(new File(new File(this.dataManager.getDirectory(), "data"), "functions"), this.server);
-+        }
-+        // CraftBukkit end
-         this.getWorldBorder().setCenter(this.worldData.B(), this.worldData.C());
-         this.getWorldBorder().setDamageAmount(this.worldData.H());
-         this.getWorldBorder().setDamageBuffer(this.worldData.G());
-@@ -88,9 +121,146 @@
-             this.getWorldBorder().setSize(this.worldData.D());
-         }
- 
-+        // CraftBukkit start
-+        if (generator != null) {
-+            getWorld().getPopulators().addAll(generator.getDefaultPopulators(getWorld()));
-+        }
-+        // CraftBukkit end
-+
-         return this;
-     }
- 
-+    // CraftBukkit start
-+    @Override
-+    public TileEntity getTileEntity(BlockPosition pos) {
-+        TileEntity result = super.getTileEntity(pos);
-+        Block type = getType(pos).getBlock();
-+
-+        if (type == Blocks.CHEST) {
-+            if (!(result instanceof TileEntityChest)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.FURNACE) {
-+            if (!(result instanceof TileEntityFurnace)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.DROPPER) {
-+            if (!(result instanceof TileEntityDropper)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.DISPENSER) {
-+            if (!(result instanceof TileEntityDispenser)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.JUKEBOX) {
-+            if (!(result instanceof BlockJukeBox.TileEntityRecordPlayer)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.NOTEBLOCK) {
-+            if (!(result instanceof TileEntityNote)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.MOB_SPAWNER) {
-+            if (!(result instanceof TileEntityMobSpawner)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if ((type == Blocks.STANDING_SIGN) || (type == Blocks.WALL_SIGN)) {
-+            if (!(result instanceof TileEntitySign)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.ENDER_CHEST) {
-+            if (!(result instanceof TileEntityEnderChest)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.BREWING_STAND) {
-+            if (!(result instanceof TileEntityBrewingStand)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.BEACON) {
-+            if (!(result instanceof TileEntityBeacon)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.HOPPER) {
-+            if (!(result instanceof TileEntityHopper)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.ENCHANTING_TABLE) {
-+            if (!(result instanceof TileEntityEnchantTable)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.END_PORTAL) {
-+            if (!(result instanceof TileEntityEnderPortal)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.SKULL) {
-+            if (!(result instanceof TileEntitySkull)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.DAYLIGHT_DETECTOR || type == Blocks.DAYLIGHT_DETECTOR_INVERTED) {
-+            if (!(result instanceof TileEntityLightDetector)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.POWERED_COMPARATOR || type == Blocks.UNPOWERED_COMPARATOR) {
-+            if (!(result instanceof TileEntityComparator)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.FLOWER_POT) {
-+            if (!(result instanceof TileEntityFlowerPot)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.STANDING_BANNER || type == Blocks.WALL_BANNER) {
-+            if (!(result instanceof TileEntityBanner)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.STRUCTURE_BLOCK) {
-+            if (!(result instanceof TileEntityStructure)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.END_GATEWAY) {
-+            if (!(result instanceof TileEntityEndGateway)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.COMMAND_BLOCK) {
-+            if (!(result instanceof TileEntityCommand)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.STRUCTURE_BLOCK) {
-+            if (!(result instanceof TileEntityStructure)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        } else if (type == Blocks.BED) {
-+            if (!(result instanceof TileEntityBed)) {
-+                result = fixTileEntity(pos, type, result);
-+            }
-+        }
-+
-+        return result;
-+    }
-+
-+    private TileEntity fixTileEntity(BlockPosition pos, Block type, TileEntity found) {
-+        this.getServer().getLogger().log(Level.SEVERE, "Block at {0},{1},{2} is {3} but has {4}" + ". "
-+                + "Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.", new Object[]{pos.getX(), pos.getY(), pos.getZ(), org.bukkit.Material.getMaterial(Block.getId(type)).toString(), found});
-+
-+        if (type instanceof ITileEntity) {
-+            TileEntity replacement = ((ITileEntity) type).a(this, type.toLegacyData(this.getType(pos)));
-+            replacement.world = this;
-+            this.setTileEntity(pos, replacement);
-+            return replacement;
-+        } else {
-+            this.getServer().getLogger().severe("Don't know how to fix for this type... Can't do anything! :(");
-+            return found;
-+        }
-+    }
-+
-+    private boolean canSpawn(int x, int z) {
-+        if (this.generator != null) {
-+            return this.generator.canSpawn(this.getWorld(), x, z);
-+        } else {
-+            return this.worldProvider.canSpawn(x, z);
-+        }
-+    }
-+    // CraftBukkit end
-+
-     public void doTick() {
-         super.doTick();
-         if (this.getWorldData().isHardcore() && this.getDifficulty() != EnumDifficulty.HARD) {
-@@ -109,8 +279,11 @@
-         }
- 
-         this.methodProfiler.a("mobSpawner");
--        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
--            this.spawnerCreature.a(this, this.allowMonsters, this.allowAnimals, this.worldData.getTime() % 400L == 0L);
-+        // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
-+        long time = this.worldData.getTime();
-+        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) {
-+            this.spawnerCreature.a(this, this.allowMonsters && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.allowAnimals && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldData.getTime() % 400L == 0L);
-+            // CraftBukkit end
-         }
- 
-         this.methodProfiler.c("chunkSource");
-@@ -139,6 +312,8 @@
-         this.portalTravelAgent.a(this.getTime());
-         this.methodProfiler.b();
-         this.aq();
-+
-+        this.getWorld().processChunkGC(); // CraftBukkit
-     }
- 
-     @Nullable
-@@ -166,7 +341,7 @@
- 
-                 if (entityhuman.isSpectator()) {
-                     ++i;
--                } else if (entityhuman.isSleeping()) {
-+                } else if (entityhuman.isSleeping() || entityhuman.fauxSleeping) {
-                     ++j;
-                 }
-             }
-@@ -195,25 +370,46 @@
-     }
- 
-     private void c() {
--        this.worldData.setWeatherDuration(0);
-         this.worldData.setStorm(false);
--        this.worldData.setThunderDuration(0);
-+        // CraftBukkit start
-+        // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
-+        // Not that everyone ever manages to get the whole server to sleep at the same time....
-+        if (!this.worldData.hasStorm()) {
-+            this.worldData.setWeatherDuration(0);
-+        }
-+        // CraftBukkit end
-         this.worldData.setThundering(false);
-+        // CraftBukkit start
-+        // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
-+        // Not that everyone ever manages to get the whole server to sleep at the same time....
-+        if (!this.worldData.isThundering()) {
-+            this.worldData.setThunderDuration(0);
-+        }
-+        // CraftBukkit end
-     }
- 
-     public boolean everyoneDeeplySleeping() {
-         if (this.Q && !this.isClientSide) {
-             Iterator iterator = this.players.iterator();
- 
-+            // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
-+            boolean foundActualSleepers = false;
-+
-             EntityHuman entityhuman;
- 
-             do {
-                 if (!iterator.hasNext()) {
--                    return true;
-+                    return foundActualSleepers;
-                 }
- 
-                 entityhuman = (EntityHuman) iterator.next();
--            } while (entityhuman.isSpectator() || entityhuman.isDeeplySleeping());
-+
-+                // CraftBukkit start
-+                if (entityhuman.isDeeplySleeping()) {
-+                    foundActualSleepers = true;
-+                }
-+            } while (!entityhuman.isSpectator() || entityhuman.isDeeplySleeping() || entityhuman.fauxSleeping);
-+            // CraftBukkit end
- 
-             return false;
-         } else {
-@@ -283,7 +479,7 @@
-                             entityhorseskeleton.p(true);
-                             entityhorseskeleton.setAgeRaw(0);
-                             entityhorseskeleton.setPosition((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
--                            this.addEntity(entityhorseskeleton);
-+                            this.addEntity(entityhorseskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
-                             this.strikeLightning(new EntityLightning(this, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), true));
-                         } else {
-                             this.strikeLightning(new EntityLightning(this, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), false));
-@@ -299,11 +495,11 @@
-                     BlockPosition blockposition1 = blockposition.down();
- 
-                     if (this.v(blockposition1)) {
--                        this.setTypeUpdate(blockposition1, Blocks.ICE.getBlockData());
-+                        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition1, Blocks.ICE.getBlockData(), null); // CraftBukkit
-                     }
- 
-                     if (flag && this.f(blockposition, true)) {
--                        this.setTypeUpdate(blockposition, Blocks.SNOW_LAYER.getBlockData());
-+                        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition, Blocks.SNOW_LAYER.getBlockData(), null); // CraftBukkit
-                     }
- 
-                     if (flag && this.getBiome(blockposition1).d()) {
-@@ -378,7 +574,7 @@
-     public boolean b(BlockPosition blockposition, Block block) {
-         NextTickListEntry nextticklistentry = new NextTickListEntry(blockposition, block);
- 
--        return this.nextTickListHash.contains(nextticklistentry);
-+        return this.nextTickList.contains(nextticklistentry); // CraftBukkit
-     }
- 
-     public void a(BlockPosition blockposition, Block block, int i) {
-@@ -412,8 +608,8 @@
-                 nextticklistentry.a(j);
-             }
- 
--            if (!this.nextTickListHash.contains(nextticklistentry)) {
--                this.nextTickListHash.add(nextticklistentry);
-+            // CraftBukkit - use nextTickList
-+            if (!this.nextTickList.contains(nextticklistentry)) {
-                 this.nextTickList.add(nextticklistentry);
-             }
-         }
-@@ -430,15 +626,15 @@
-             nextticklistentry.a((long) i + this.worldData.getTime());
-         }
- 
--        if (!this.nextTickListHash.contains(nextticklistentry)) {
--            this.nextTickListHash.add(nextticklistentry);
-+        // CraftBukkit - use nextTickList
-+        if (!this.nextTickList.contains(nextticklistentry)) {
-             this.nextTickList.add(nextticklistentry);
-         }
- 
-     }
- 
-     public void tickEntities() {
--        if (this.players.isEmpty()) {
-+        if (false && this.players.isEmpty()) { // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
-             if (this.emptyTime++ >= 300) {
-                 return;
-             }
-@@ -508,11 +704,17 @@
-         } else {
-             int i = this.nextTickList.size();
- 
--            if (i != this.nextTickListHash.size()) {
-+            if (false) { // CraftBukkit
-                 throw new IllegalStateException("TickNextTick list out of synch");
-             } else {
-                 if (i > 65536) {
--                    i = 65536;
-+                    // CraftBukkit start - If the server has too much to process over time, try to alleviate that
-+                    if (i > 20 * 65536) {
-+                        i = i / 20;
-+                    } else {
-+                        i = 65536;
-+                    }
-+                    // CraftBukkit end
-                 }
- 
-                 this.methodProfiler.a("cleaning");
-@@ -525,8 +727,9 @@
-                         break;
-                     }
- 
-+                    // CraftBukkit - use nextTickList
-                     this.nextTickList.remove(nextticklistentry);
--                    this.nextTickListHash.remove(nextticklistentry);
-+                    // this.nextTickListHash.remove(nextticklistentry);
-                     this.W.add(nextticklistentry);
-                 }
- 
-@@ -596,7 +799,7 @@
-                 if (blockposition.getX() >= structureboundingbox.a && blockposition.getX() < structureboundingbox.d && blockposition.getZ() >= structureboundingbox.c && blockposition.getZ() < structureboundingbox.f) {
-                     if (flag) {
-                         if (i == 0) {
--                            this.nextTickListHash.remove(nextticklistentry);
-+                            // this.nextTickListHash.remove(nextticklistentry); // CraftBukkit - removed
-                         }
- 
-                         iterator.remove();
-@@ -614,6 +817,7 @@
-         return arraylist;
-     }
- 
-+    /* CraftBukkit start - We prevent spawning in general, so this butchering is not needed
-     public void entityJoinedWorld(Entity entity, boolean flag) {
-         if (!this.getSpawnAnimals() && (entity instanceof EntityAnimal || entity instanceof EntityWaterAnimal)) {
-             entity.die();
-@@ -625,6 +829,7 @@
- 
-         super.entityJoinedWorld(entity, flag);
-     }
-+    // CraftBukkit end */
- 
-     private boolean getSpawnNPCs() {
-         return this.server.getSpawnNPCs();
-@@ -637,7 +842,54 @@
-     protected IChunkProvider n() {
-         IChunkLoader ichunkloader = this.dataManager.createChunkLoader(this.worldProvider);
- 
--        return new ChunkProviderServer(this, ichunkloader, this.worldProvider.getChunkGenerator());
-+        // CraftBukkit start
-+        org.bukkit.craftbukkit.generator.InternalChunkGenerator gen;
-+
-+        if (this.generator != null) {
-+            gen = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, this.getSeed(), this.generator);
-+        } else if (this.worldProvider instanceof WorldProviderHell) {
-+            gen = new org.bukkit.craftbukkit.generator.NetherChunkGenerator(this, this.getSeed());
-+        } else if (this.worldProvider instanceof WorldProviderTheEnd) {
-+            gen = new org.bukkit.craftbukkit.generator.SkyLandsChunkGenerator(this, this.getSeed());
-+        } else {
-+            gen = new org.bukkit.craftbukkit.generator.NormalChunkGenerator(this, this.getSeed());
-+        }
-+
-+        return new ChunkProviderServer(this, ichunkloader, gen);
-+        // CraftBukkit end
-+    }
-+
-+    public List<TileEntity> getTileEntities(int i, int j, int k, int l, int i1, int j1) {
-+        ArrayList arraylist = Lists.newArrayList();
-+
-+        // CraftBukkit start - Get tile entities from chunks instead of world
-+        for (int chunkX = (i >> 4); chunkX <= ((l - 1) >> 4); chunkX++) {
-+            for (int chunkZ = (k >> 4); chunkZ <= ((j1 - 1) >> 4); chunkZ++) {
-+                Chunk chunk = getChunkAt(chunkX, chunkZ);
-+                if (chunk == null) {
-+                    continue;
-+                }
-+                for (Object te : chunk.tileEntities.values()) {
-+                    TileEntity tileentity = (TileEntity) te;
-+                    if ((tileentity.position.getX() >= i) && (tileentity.position.getY() >= j) && (tileentity.position.getZ() >= k) && (tileentity.position.getX() < l) && (tileentity.position.getY() < i1) && (tileentity.position.getZ() < j1)) {
-+                        arraylist.add(tileentity);
-+                    }
-+                }
-+            }
-+        }
-+        /*
-+        for (int k1 = 0; k1 < this.tileEntityList.size(); ++k1) {
-+            TileEntity tileentity = (TileEntity) this.tileEntityList.get(k1);
-+            BlockPosition blockposition = tileentity.getPosition();
-+
-+            if (blockposition.getX() >= i && blockposition.getY() >= j && blockposition.getZ() >= k && blockposition.getX() < l && blockposition.getY() < i1 && blockposition.getZ() < j1) {
-+                arraylist.add(tileentity);
-+            }
-+        }
-+        */
-+        // CraftBukkit end
-+
-+        return arraylist;
-     }
- 
-     public boolean a(EntityHuman entityhuman, BlockPosition blockposition) {
-@@ -699,6 +951,23 @@
-             int j = this.worldProvider.getSeaLevel();
-             int k = 8;
- 
-+            // CraftBukkit start
-+            if (this.generator != null) {
-+                Random rand = new Random(this.getSeed());
-+                org.bukkit.Location spawn = this.generator.getFixedSpawnLocation(((WorldServer) this).getWorld(), rand);
-+
-+                if (spawn != null) {
-+                    if (spawn.getWorld() != ((WorldServer) this).getWorld()) {
-+                        throw new IllegalStateException("Cannot set spawn point for " + this.worldData.getName() + " to be in another world (" + spawn.getWorld().getName() + ")");
-+                    } else {
-+                        this.worldData.setSpawn(new BlockPosition(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()));
-+                        this.isLoading = false;
-+                        return;
-+                    }
-+                }
-+            }
-+            // CraftBukkit end
-+
-             if (blockposition != null) {
-                 i = blockposition.getX();
-                 k = blockposition.getZ();
-@@ -708,7 +977,7 @@
- 
-             int l = 0;
- 
--            while (!this.worldProvider.canSpawn(i, k)) {
-+            while (!this.canSpawn(i, k)) { // CraftBukkit - use our own canSpawn
-                 i += random.nextInt(64) - random.nextInt(64);
-                 k += random.nextInt(64) - random.nextInt(64);
-                 ++l;
-@@ -750,6 +1019,7 @@
-         ChunkProviderServer chunkproviderserver = this.getChunkProviderServer();
- 
-         if (chunkproviderserver.e()) {
-+            org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
-             if (iprogressupdate != null) {
-                 iprogressupdate.a("Saving level");
-             }
-@@ -760,7 +1030,8 @@
-             }
- 
-             chunkproviderserver.a(flag);
--            ArrayList arraylist = Lists.newArrayList(chunkproviderserver.a());
-+            // CraftBukkit - ArrayList -> Collection
-+            Collection arraylist = chunkproviderserver.a();
-             Iterator iterator = arraylist.iterator();
- 
-             while (iterator.hasNext()) {
-@@ -795,6 +1066,12 @@
-             }
-         }
- 
-+        // CraftBukkit start - Save secondary data for nether/end
-+        if (this instanceof SecondaryWorldServer) {
-+            ((SecondaryWorldServer) this).c();
-+        }
-+        // CraftBukkit end
-+
-         this.worldData.a(this.getWorldBorder().getSize());
-         this.worldData.d(this.getWorldBorder().getCenterX());
-         this.worldData.c(this.getWorldBorder().getCenterZ());
-@@ -808,9 +1085,13 @@
-         this.worldMaps.a();
-     }
- 
--    public boolean addEntity(Entity entity) {
--        return this.j(entity) ? super.addEntity(entity) : false;
-+    // CraftBukkit start
-+    public boolean addEntity(Entity entity, SpawnReason spawnReason) { // Changed signature, added SpawnReason
-+        // World.addEntity(Entity) will call this, and we still want to perform
-+        // existing entity checking when it's called with a SpawnReason
-+        return this.j(entity) ? super.addEntity(entity, spawnReason) : false;
-     }
-+    // CraftBukkit end
- 
-     public void a(Collection<Entity> collection) {
-         ArrayList arraylist = Lists.newArrayList(collection);
-@@ -829,7 +1110,7 @@
- 
-     private boolean j(Entity entity) {
-         if (entity.dead) {
--            WorldServer.a.warn("Tried to add entity {} but it was marked as removed already", EntityTypes.a(entity));
-+            // WorldServer.a.warn("Tried to add entity {} but it was marked as removed already", EntityTypes.a(entity)); // CraftBukkit
-             return false;
-         } else {
-             UUID uuid = entity.getUniqueID();
-@@ -841,7 +1122,7 @@
-                     this.f.remove(entity1);
-                 } else {
-                     if (!(entity instanceof EntityHuman)) {
--                        WorldServer.a.warn("Keeping entity {} that already exists with UUID {}", EntityTypes.a(entity1), uuid.toString());
-+                        // WorldServer.a.warn("Keeping entity {} that already exists with UUID {}", EntityTypes.a(entity1), uuid.toString()); // CraftBukkit
-                         return false;
-                     }
- 
-@@ -894,8 +1175,16 @@
-     }
- 
-     public boolean strikeLightning(Entity entity) {
-+        // CraftBukkit start
-+        LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) entity.getBukkitEntity());
-+        this.getServer().getPluginManager().callEvent(lightning);
-+
-+        if (lightning.isCancelled()) {
-+            return false;
-+        }
-+        // CraftBukkit end
-         if (super.strikeLightning(entity)) {
--            this.server.getPlayerList().sendPacketNearby((EntityHuman) null, entity.locX, entity.locY, entity.locZ, 512.0D, this.worldProvider.getDimensionManager().getDimensionID(), new PacketPlayOutSpawnEntityWeather(entity));
-+            this.server.getPlayerList().sendPacketNearby((EntityHuman) null, entity.locX, entity.locY, entity.locZ, 512.0D, dimension, new PacketPlayOutSpawnEntityWeather(entity)); // CraftBukkit - Use dimension
-             return true;
-         } else {
-             return false;
-@@ -911,10 +1200,20 @@
-     }
- 
-     public Explosion createExplosion(@Nullable Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
-+        // CraftBukkit start
-+        Explosion explosion = super.createExplosion(entity, d0, d1, d2, f, flag, flag1);
-+
-+        if (explosion.wasCanceled) {
-+            return explosion;
-+        }
-+
-+        /* Remove
-         Explosion explosion = new Explosion(this, entity, d0, d1, d2, f, flag, flag1);
- 
-         explosion.a();
-         explosion.a(false);
-+        */
-+        // CraftBukkit end - TODO: Check if explosions are still properly implemented
-         if (!flag1) {
-             explosion.clearBlocks();
-         }
-@@ -960,7 +1259,8 @@
-                 BlockActionData blockactiondata = (BlockActionData) iterator.next();
- 
-                 if (this.a(blockactiondata)) {
--                    this.server.getPlayerList().sendPacketNearby((EntityHuman) null, (double) blockactiondata.a().getX(), (double) blockactiondata.a().getY(), (double) blockactiondata.a().getZ(), 64.0D, this.worldProvider.getDimensionManager().getDimensionID(), new PacketPlayOutBlockAction(blockactiondata.a(), blockactiondata.d(), blockactiondata.b(), blockactiondata.c()));
-+                    // CraftBukkit - this.worldProvider.dimension -> this.dimension
-+                    this.server.getPlayerList().sendPacketNearby((EntityHuman) null, (double) blockactiondata.a().getX(), (double) blockactiondata.a().getY(), (double) blockactiondata.a().getZ(), 64.0D, dimension, new PacketPlayOutBlockAction(blockactiondata.a(), blockactiondata.d(), blockactiondata.b(), blockactiondata.c()));
-                 }
-             }
- 
-@@ -983,6 +1283,7 @@
-         boolean flag = this.isRaining();
- 
-         super.t();
-+        /* CraftBukkit start
-         if (this.n != this.o) {
-             this.server.getPlayerList().a((Packet) (new PacketPlayOutGameStateChange(7, this.o)), this.worldProvider.getDimensionManager().getDimensionID());
-         }
-@@ -1001,6 +1302,21 @@
-             this.server.getPlayerList().sendAll(new PacketPlayOutGameStateChange(7, this.o));
-             this.server.getPlayerList().sendAll(new PacketPlayOutGameStateChange(8, this.q));
-         }
-+        // */
-+        if (flag != this.isRaining()) {
-+            // Only send weather packets to those affected
-+            for (int i = 0; i < this.players.size(); ++i) {
-+                if (((EntityPlayer) this.players.get(i)).world == this) {
-+                    ((EntityPlayer) this.players.get(i)).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
-+                }
-+            }
-+        }
-+        for (int i = 0; i < this.players.size(); ++i) {
-+            if (((EntityPlayer) this.players.get(i)).world == this) {
-+                ((EntityPlayer) this.players.get(i)).updateWeather(this.n, this.o, this.p, this.q);
-+            }
-+        }
-+        // CraftBukkit end
- 
-     }
- 
-@@ -1030,10 +1346,20 @@
-     }
- 
-     public void a(EnumParticle enumparticle, boolean flag, double d0, double d1, double d2, int i, double d3, double d4, double d5, double d6, int... aint) {
-+        // CraftBukkit - visibility api support
-+        sendParticles(null, enumparticle, flag, d0, d1, d2, i, d3, d4, d5, d6, aint);
-+    }
-+
-+    public void sendParticles(EntityPlayer sender, EnumParticle enumparticle, boolean flag, double d0, double d1, double d2, int i, double d3, double d4, double d5, double d6, int... aint) {
-+        // CraftBukkit end
-         PacketPlayOutWorldParticles packetplayoutworldparticles = new PacketPlayOutWorldParticles(enumparticle, flag, (float) d0, (float) d1, (float) d2, (float) d3, (float) d4, (float) d5, (float) d6, i, aint);
- 
-         for (int j = 0; j < this.players.size(); ++j) {
-             EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
-+            if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
-+            BlockPosition blockposition = entityplayer.getChunkCoordinates();
-+            double d7 = blockposition.distanceSquared(d0, d1, d2);
-+
- 
-             this.a(entityplayer, flag, d0, d1, d2, packetplayoutworldparticles);
-         }
-- 
1.9.1

