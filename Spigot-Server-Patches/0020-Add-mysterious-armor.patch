From 98a23452e9407765d6b2821a886b4fbde9bfad7c Mon Sep 17 00:00:00 2001
From: Jacob Martin <jjm_223@hotmail.com>
Date: Mon, 21 Aug 2017 14:40:44 -0500
Subject: [PATCH 20/20] Add mysterious armor

---
 .../net/cweepahcraft/item/ServerSpecificItem.java  |   9 +
 src/main/java/net/minecraft/server/Item.java       | 829 +++++++++++++++++++++
 src/main/java/net/minecraft/server/ItemArmor.java  | 167 ++++-
 src/main/java/net/minecraft/server/Items.java      | 450 +++++++++++
 .../net/minecraft/server/PacketDataSerializer.java |  53 +-
 .../java/net/minecraft/server/RecipeArmorDye.java  |   4 +-
 .../craftbukkit/inventory/CraftItemFactory.java    |   4 +
 .../craftbukkit/inventory/CraftItemStack.java      |   4 +
 .../inventory/CraftMetaLeatherArmor.java           |   4 +
 9 files changed, 1503 insertions(+), 21 deletions(-)
 create mode 100644 src/main/java/net/cweepahcraft/item/ServerSpecificItem.java
 create mode 100644 src/main/java/net/minecraft/server/Item.java
 create mode 100644 src/main/java/net/minecraft/server/Items.java

diff --git a/src/main/java/net/cweepahcraft/item/ServerSpecificItem.java b/src/main/java/net/cweepahcraft/item/ServerSpecificItem.java
new file mode 100644
index 0000000..fb0a2dd
--- /dev/null
+++ b/src/main/java/net/cweepahcraft/item/ServerSpecificItem.java
@@ -0,0 +1,9 @@
+package net.cweepahcraft.item;
+
+import net.minecraft.server.ItemStack;
+
+public interface ServerSpecificItem {
+    boolean isApplicable(ItemStack itemStack);
+    ItemStack toClientStack(ItemStack itemStack);
+    ItemStack toServerStack(ItemStack itemStack);
+}
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
new file mode 100644
index 0000000..5e6a9a0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -0,0 +1,829 @@
+package net.minecraft.server;
+
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Multimap;
+
+import javax.annotation.Nullable;
+import java.util.Map;
+import java.util.Random;
+import java.util.UUID;
+
+public class Item {
+
+    public static final RegistryMaterials<MinecraftKey, Item> REGISTRY = new RegistryMaterials();
+    private static final Map<Block, Item> a = Maps.newHashMap();
+    private static final IDynamicTexture b = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture c = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture d = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture e = new IDynamicTexture() {
+    };
+    private final IRegistry<MinecraftKey, IDynamicTexture> f = new RegistrySimple();
+    protected static final UUID h = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
+    protected static final UUID i = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
+    private CreativeModeTab n;
+    protected static Random j = new Random();
+    protected int maxStackSize = 64;
+    private int durability;
+    protected boolean l;
+    protected boolean m;
+    private Item craftingResult;
+    private String name;
+
+    public static int getId(Item item) {
+        return item == null ? 0 : Item.REGISTRY.a(item);
+    }
+
+    public static Item getById(int i) {
+        return Item.REGISTRY.getId(i);
+    }
+
+    public static Item getItemOf(Block block) {
+        Item item = (Item) Item.a.get(block);
+
+        return item == null ? Items.a : item;
+    }
+
+    @Nullable
+    public static Item b(String s) {
+        Item item = (Item) Item.REGISTRY.get(new MinecraftKey(s));
+
+        if (item == null) {
+            try {
+                return getById(Integer.parseInt(s));
+            } catch (NumberFormatException numberformatexception) {
+                ;
+            }
+        }
+
+        return item;
+    }
+
+    public final void a(MinecraftKey minecraftkey, IDynamicTexture idynamictexture) {
+        this.f.a(minecraftkey, idynamictexture);
+    }
+
+    public boolean a(NBTTagCompound nbttagcompound) {
+        return false;
+    }
+
+    public Item() {
+        this.a(new MinecraftKey("lefthanded"), Item.d);
+        this.a(new MinecraftKey("cooldown"), Item.e);
+    }
+
+    public Item d(int i) {
+        this.maxStackSize = i;
+        return this;
+    }
+
+    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+        return EnumInteractionResult.PASS;
+    }
+
+    public float getDestroySpeed(ItemStack itemstack, IBlockData iblockdata) {
+        return 1.0F;
+    }
+
+    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+        return new InteractionResultWrapper(EnumInteractionResult.PASS, entityhuman.b(enumhand));
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityLiving entityliving) {
+        return itemstack;
+    }
+
+    public int getMaxStackSize() {
+        return this.maxStackSize;
+    }
+
+    public int filterData(int i) {
+        return 0;
+    }
+
+    public boolean k() {
+        return this.m;
+    }
+
+    protected Item a(boolean flag) {
+        this.m = flag;
+        return this;
+    }
+
+    public int getMaxDurability() {
+        return this.durability;
+    }
+
+    protected Item setMaxDurability(int i) {
+        this.durability = i;
+        if (i > 0) {
+            this.a(new MinecraftKey("damaged"), Item.b);
+            this.a(new MinecraftKey("damage"), Item.c);
+        }
+
+        return this;
+    }
+
+    public boolean usesDurability() {
+        return this.durability > 0 && (!this.m || this.maxStackSize == 1);
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, World world, IBlockData iblockdata, BlockPosition blockposition, EntityLiving entityliving) {
+        return false;
+    }
+
+    public boolean canDestroySpecialBlock(IBlockData iblockdata) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, EntityLiving entityliving, EnumHand enumhand) {
+        return false;
+    }
+
+    public Item n() {
+        this.l = true;
+        return this;
+    }
+
+    public Item c(String s) {
+        this.name = s;
+        return this;
+    }
+
+    public String j(ItemStack itemstack) {
+        return LocaleI18n.get(this.a(itemstack));
+    }
+
+    public String getName() {
+        return "item." + this.name;
+    }
+
+    public String a(ItemStack itemstack) {
+        return "item." + this.name;
+    }
+
+    public Item b(Item item) {
+        this.craftingResult = item;
+        return this;
+    }
+
+    public boolean p() {
+        return true;
+    }
+
+    @Nullable
+    public Item q() {
+        return this.craftingResult;
+    }
+
+    public boolean r() {
+        return this.craftingResult != null;
+    }
+
+    public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {}
+
+    public void b(ItemStack itemstack, World world, EntityHuman entityhuman) {}
+
+    public boolean f() {
+        return false;
+    }
+
+    public EnumAnimation f(ItemStack itemstack) {
+        return EnumAnimation.NONE;
+    }
+
+    public int e(ItemStack itemstack) {
+        return 0;
+    }
+
+    public void a(ItemStack itemstack, World world, EntityLiving entityliving, int i) {}
+
+    public String b(ItemStack itemstack) {
+        return LocaleI18n.get(this.j(itemstack) + ".name").trim();
+    }
+
+    public EnumItemRarity g(ItemStack itemstack) {
+        return itemstack.hasEnchantments() ? EnumItemRarity.RARE : EnumItemRarity.COMMON;
+    }
+
+    public boolean g_(ItemStack itemstack) {
+        return this.getMaxStackSize() == 1 && this.usesDurability();
+    }
+
+    protected MovingObjectPosition a(World world, EntityHuman entityhuman, boolean flag) {
+        float f = entityhuman.pitch;
+        float f1 = entityhuman.yaw;
+        double d0 = entityhuman.locX;
+        double d1 = entityhuman.locY + (double) entityhuman.getHeadHeight();
+        double d2 = entityhuman.locZ;
+        Vec3D vec3d = new Vec3D(d0, d1, d2);
+        float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
+        float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
+        float f4 = -MathHelper.cos(-f * 0.017453292F);
+        float f5 = MathHelper.sin(-f * 0.017453292F);
+        float f6 = f3 * f4;
+        float f7 = f2 * f4;
+        double d3 = 5.0D;
+        Vec3D vec3d1 = vec3d.add((double) f6 * 5.0D, (double) f5 * 5.0D, (double) f7 * 5.0D);
+
+        return world.rayTrace(vec3d, vec3d1, flag, !flag, false);
+    }
+
+    public int c() {
+        return 0;
+    }
+
+    public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
+        if (this.a(creativemodetab)) {
+            nonnulllist.add(new ItemStack(this));
+        }
+
+    }
+
+    protected boolean a(CreativeModeTab creativemodetab) {
+        CreativeModeTab creativemodetab1 = this.b();
+
+        return creativemodetab1 != null && (creativemodetab == CreativeModeTab.g || creativemodetab == creativemodetab1);
+    }
+
+    @Nullable
+    public CreativeModeTab b() {
+        return this.n;
+    }
+
+    public Item b(CreativeModeTab creativemodetab) {
+        this.n = creativemodetab;
+        return this;
+    }
+
+    public boolean s() {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, ItemStack itemstack1) {
+        return false;
+    }
+
+    public Multimap<String, AttributeModifier> a(EnumItemSlot enumitemslot) {
+        return HashMultimap.create();
+    }
+
+    public static void t() {
+        a(Blocks.AIR, (Item) (new ItemAir(Blocks.AIR)));
+        a(Blocks.STONE, (new ItemMultiTexture(Blocks.STONE, Blocks.STONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockStone.EnumStoneVariant.a(itemstack.getData()).d();
+            }
+        })).c("stone"));
+        a((Block) Blocks.GRASS, (Item) (new ItemWithAuxData(Blocks.GRASS, false)));
+        a(Blocks.DIRT, (new ItemMultiTexture(Blocks.DIRT, Blocks.DIRT, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockDirt.EnumDirtVariant.a(itemstack.getData()).c();
+            }
+        })).c("dirt"));
+        b(Blocks.COBBLESTONE);
+        a(Blocks.PLANKS, (new ItemMultiTexture(Blocks.PLANKS, Blocks.PLANKS, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("wood"));
+        a(Blocks.SAPLING, (new ItemMultiTexture(Blocks.SAPLING, Blocks.SAPLING, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("sapling"));
+        b(Blocks.BEDROCK);
+        a((Block) Blocks.SAND, (new ItemMultiTexture(Blocks.SAND, Blocks.SAND, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSand.EnumSandVariant.a(itemstack.getData()).e();
+            }
+        })).c("sand"));
+        b(Blocks.GRAVEL);
+        b(Blocks.GOLD_ORE);
+        b(Blocks.IRON_ORE);
+        b(Blocks.COAL_ORE);
+        a(Blocks.LOG, (new ItemMultiTexture(Blocks.LOG, Blocks.LOG, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("log"));
+        a(Blocks.LOG2, (new ItemMultiTexture(Blocks.LOG2, Blocks.LOG2, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData() + 4).d();
+            }
+        })).c("log"));
+        a((Block) Blocks.LEAVES, (new ItemLeaves(Blocks.LEAVES)).c("leaves"));
+        a((Block) Blocks.LEAVES2, (new ItemLeaves(Blocks.LEAVES2)).c("leaves"));
+        a(Blocks.SPONGE, (new ItemMultiTexture(Blocks.SPONGE, Blocks.SPONGE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return (itemstack.getData() & 1) == 1 ? "wet" : "dry";
+            }
+        })).c("sponge"));
+        b(Blocks.GLASS);
+        b(Blocks.LAPIS_ORE);
+        b(Blocks.LAPIS_BLOCK);
+        b(Blocks.DISPENSER);
+        a(Blocks.SANDSTONE, (new ItemMultiTexture(Blocks.SANDSTONE, Blocks.SANDSTONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSandStone.EnumSandstoneVariant.a(itemstack.getData()).c();
+            }
+        })).c("sandStone"));
+        b(Blocks.NOTEBLOCK);
+        b(Blocks.GOLDEN_RAIL);
+        b(Blocks.DETECTOR_RAIL);
+        a((Block) Blocks.STICKY_PISTON, (Item) (new ItemPiston(Blocks.STICKY_PISTON)));
+        b(Blocks.WEB);
+        a((Block) Blocks.TALLGRASS, (Item) (new ItemWithAuxData(Blocks.TALLGRASS, true)).a(new String[] { "shrub", "grass", "fern"}));
+        b((Block) Blocks.DEADBUSH);
+        a((Block) Blocks.PISTON, (Item) (new ItemPiston(Blocks.PISTON)));
+        a(Blocks.WOOL, (new ItemCloth(Blocks.WOOL)).c("cloth"));
+        a((Block) Blocks.YELLOW_FLOWER, (new ItemMultiTexture(Blocks.YELLOW_FLOWER, Blocks.YELLOW_FLOWER, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.YELLOW, itemstack.getData()).d();
+            }
+        })).c("flower"));
+        a((Block) Blocks.RED_FLOWER, (new ItemMultiTexture(Blocks.RED_FLOWER, Blocks.RED_FLOWER, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.RED, itemstack.getData()).d();
+            }
+        })).c("rose"));
+        b((Block) Blocks.BROWN_MUSHROOM);
+        b((Block) Blocks.RED_MUSHROOM);
+        b(Blocks.GOLD_BLOCK);
+        b(Blocks.IRON_BLOCK);
+        a((Block) Blocks.STONE_SLAB, (new ItemStep(Blocks.STONE_SLAB, Blocks.STONE_SLAB, Blocks.DOUBLE_STONE_SLAB)).c("stoneSlab"));
+        b(Blocks.BRICK_BLOCK);
+        b(Blocks.TNT);
+        b(Blocks.BOOKSHELF);
+        b(Blocks.MOSSY_COBBLESTONE);
+        b(Blocks.OBSIDIAN);
+        b(Blocks.TORCH);
+        b(Blocks.END_ROD);
+        b(Blocks.CHORUS_PLANT);
+        b(Blocks.CHORUS_FLOWER);
+        b(Blocks.PURPUR_BLOCK);
+        b(Blocks.PURPUR_PILLAR);
+        b(Blocks.PURPUR_STAIRS);
+        a((Block) Blocks.PURPUR_SLAB, (new ItemStep(Blocks.PURPUR_SLAB, Blocks.PURPUR_SLAB, Blocks.PURPUR_DOUBLE_SLAB)).c("purpurSlab"));
+        b(Blocks.MOB_SPAWNER);
+        b(Blocks.OAK_STAIRS);
+        b((Block) Blocks.CHEST);
+        b(Blocks.DIAMOND_ORE);
+        b(Blocks.DIAMOND_BLOCK);
+        b(Blocks.CRAFTING_TABLE);
+        b(Blocks.FARMLAND);
+        b(Blocks.FURNACE);
+        b(Blocks.LADDER);
+        b(Blocks.RAIL);
+        b(Blocks.STONE_STAIRS);
+        b(Blocks.LEVER);
+        b(Blocks.STONE_PRESSURE_PLATE);
+        b(Blocks.WOODEN_PRESSURE_PLATE);
+        b(Blocks.REDSTONE_ORE);
+        b(Blocks.REDSTONE_TORCH);
+        b(Blocks.STONE_BUTTON);
+        a(Blocks.SNOW_LAYER, (Item) (new ItemSnow(Blocks.SNOW_LAYER)));
+        b(Blocks.ICE);
+        b(Blocks.SNOW);
+        b((Block) Blocks.CACTUS);
+        b(Blocks.CLAY);
+        b(Blocks.JUKEBOX);
+        b(Blocks.FENCE);
+        b(Blocks.SPRUCE_FENCE);
+        b(Blocks.BIRCH_FENCE);
+        b(Blocks.JUNGLE_FENCE);
+        b(Blocks.DARK_OAK_FENCE);
+        b(Blocks.ACACIA_FENCE);
+        b(Blocks.PUMPKIN);
+        b(Blocks.NETHERRACK);
+        b(Blocks.SOUL_SAND);
+        b(Blocks.GLOWSTONE);
+        b(Blocks.LIT_PUMPKIN);
+        b(Blocks.TRAPDOOR);
+        a(Blocks.MONSTER_EGG, (new ItemMultiTexture(Blocks.MONSTER_EGG, Blocks.MONSTER_EGG, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockMonsterEggs.EnumMonsterEggVarient.a(itemstack.getData()).c();
+            }
+        })).c("monsterStoneEgg"));
+        a(Blocks.STONEBRICK, (new ItemMultiTexture(Blocks.STONEBRICK, Blocks.STONEBRICK, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSmoothBrick.EnumStonebrickType.a(itemstack.getData()).c();
+            }
+        })).c("stonebricksmooth"));
+        b(Blocks.BROWN_MUSHROOM_BLOCK);
+        b(Blocks.RED_MUSHROOM_BLOCK);
+        b(Blocks.IRON_BARS);
+        b(Blocks.GLASS_PANE);
+        b(Blocks.MELON_BLOCK);
+        a(Blocks.VINE, (Item) (new ItemWithAuxData(Blocks.VINE, false)));
+        b(Blocks.FENCE_GATE);
+        b(Blocks.SPRUCE_FENCE_GATE);
+        b(Blocks.BIRCH_FENCE_GATE);
+        b(Blocks.JUNGLE_FENCE_GATE);
+        b(Blocks.DARK_OAK_FENCE_GATE);
+        b(Blocks.ACACIA_FENCE_GATE);
+        b(Blocks.BRICK_STAIRS);
+        b(Blocks.STONE_BRICK_STAIRS);
+        b((Block) Blocks.MYCELIUM);
+        a(Blocks.WATERLILY, (Item) (new ItemWaterLily(Blocks.WATERLILY)));
+        b(Blocks.NETHER_BRICK);
+        b(Blocks.NETHER_BRICK_FENCE);
+        b(Blocks.NETHER_BRICK_STAIRS);
+        b(Blocks.ENCHANTING_TABLE);
+        b(Blocks.END_PORTAL_FRAME);
+        b(Blocks.END_STONE);
+        b(Blocks.END_BRICKS);
+        b(Blocks.DRAGON_EGG);
+        b(Blocks.REDSTONE_LAMP);
+        a((Block) Blocks.WOODEN_SLAB, (new ItemStep(Blocks.WOODEN_SLAB, Blocks.WOODEN_SLAB, Blocks.DOUBLE_WOODEN_SLAB)).c("woodSlab"));
+        b(Blocks.SANDSTONE_STAIRS);
+        b(Blocks.EMERALD_ORE);
+        b(Blocks.ENDER_CHEST);
+        b((Block) Blocks.TRIPWIRE_HOOK);
+        b(Blocks.EMERALD_BLOCK);
+        b(Blocks.SPRUCE_STAIRS);
+        b(Blocks.BIRCH_STAIRS);
+        b(Blocks.JUNGLE_STAIRS);
+        b(Blocks.COMMAND_BLOCK);
+        b((Block) Blocks.BEACON);
+        a(Blocks.COBBLESTONE_WALL, (new ItemMultiTexture(Blocks.COBBLESTONE_WALL, Blocks.COBBLESTONE_WALL, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockCobbleWall.EnumCobbleVariant.a(itemstack.getData()).c();
+            }
+        })).c("cobbleWall"));
+        b(Blocks.WOODEN_BUTTON);
+        a(Blocks.ANVIL, (new ItemAnvil(Blocks.ANVIL)).c("anvil"));
+        b(Blocks.TRAPPED_CHEST);
+        b(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE);
+        b(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE);
+        b((Block) Blocks.DAYLIGHT_DETECTOR);
+        b(Blocks.REDSTONE_BLOCK);
+        b(Blocks.QUARTZ_ORE);
+        b((Block) Blocks.HOPPER);
+        a(Blocks.QUARTZ_BLOCK, (new ItemMultiTexture(Blocks.QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK, new String[] { "default", "chiseled", "lines"})).c("quartzBlock"));
+        b(Blocks.QUARTZ_STAIRS);
+        b(Blocks.ACTIVATOR_RAIL);
+        b(Blocks.DROPPER);
+        a(Blocks.STAINED_HARDENED_CLAY, (new ItemCloth(Blocks.STAINED_HARDENED_CLAY)).c("clayHardenedStained"));
+        b(Blocks.BARRIER);
+        b(Blocks.IRON_TRAPDOOR);
+        b(Blocks.HAY_BLOCK);
+        a(Blocks.CARPET, (new ItemCloth(Blocks.CARPET)).c("woolCarpet"));
+        b(Blocks.HARDENED_CLAY);
+        b(Blocks.COAL_BLOCK);
+        b(Blocks.PACKED_ICE);
+        b(Blocks.ACACIA_STAIRS);
+        b(Blocks.DARK_OAK_STAIRS);
+        b(Blocks.SLIME);
+        b(Blocks.GRASS_PATH);
+        a((Block) Blocks.DOUBLE_PLANT, (new ItemMultiTexture(Blocks.DOUBLE_PLANT, Blocks.DOUBLE_PLANT, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockTallPlant.EnumTallFlowerVariants.a(itemstack.getData()).c();
+            }
+        })).c("doublePlant"));
+        a((Block) Blocks.STAINED_GLASS, (new ItemCloth(Blocks.STAINED_GLASS)).c("stainedGlass"));
+        a((Block) Blocks.STAINED_GLASS_PANE, (new ItemCloth(Blocks.STAINED_GLASS_PANE)).c("stainedGlassPane"));
+        a(Blocks.PRISMARINE, (new ItemMultiTexture(Blocks.PRISMARINE, Blocks.PRISMARINE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockPrismarine.EnumPrismarineVariant.a(itemstack.getData()).c();
+            }
+        })).c("prismarine"));
+        b(Blocks.SEA_LANTERN);
+        a(Blocks.RED_SANDSTONE, (new ItemMultiTexture(Blocks.RED_SANDSTONE, Blocks.RED_SANDSTONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockRedSandstone.EnumRedSandstoneVariant.a(itemstack.getData()).c();
+            }
+        })).c("redSandStone"));
+        b(Blocks.RED_SANDSTONE_STAIRS);
+        a((Block) Blocks.STONE_SLAB2, (new ItemStep(Blocks.STONE_SLAB2, Blocks.STONE_SLAB2, Blocks.DOUBLE_STONE_SLAB2)).c("stoneSlab2"));
+        b(Blocks.dc);
+        b(Blocks.dd);
+        b(Blocks.df);
+        b(Blocks.dg);
+        b(Blocks.dh);
+        b(Blocks.di);
+        b(Blocks.dj);
+        b(Blocks.dk);
+        a(Blocks.WHITE_SHULKER_BOX, (Item) (new ItemShulkerBox(Blocks.WHITE_SHULKER_BOX)));
+        a(Blocks.dm, (Item) (new ItemShulkerBox(Blocks.dm)));
+        a(Blocks.dn, (Item) (new ItemShulkerBox(Blocks.dn)));
+        a(Blocks.LIGHT_BLUE_SHULKER_BOX, (Item) (new ItemShulkerBox(Blocks.LIGHT_BLUE_SHULKER_BOX)));
+        a(Blocks.dp, (Item) (new ItemShulkerBox(Blocks.dp)));
+        a(Blocks.dq, (Item) (new ItemShulkerBox(Blocks.dq)));
+        a(Blocks.dr, (Item) (new ItemShulkerBox(Blocks.dr)));
+        a(Blocks.ds, (Item) (new ItemShulkerBox(Blocks.ds)));
+        a(Blocks.dt, (Item) (new ItemShulkerBox(Blocks.dt)));
+        a(Blocks.du, (Item) (new ItemShulkerBox(Blocks.du)));
+        a(Blocks.dv, (Item) (new ItemShulkerBox(Blocks.dv)));
+        a(Blocks.dw, (Item) (new ItemShulkerBox(Blocks.dw)));
+        a(Blocks.dx, (Item) (new ItemShulkerBox(Blocks.dx)));
+        a(Blocks.dy, (Item) (new ItemShulkerBox(Blocks.dy)));
+        a(Blocks.dz, (Item) (new ItemShulkerBox(Blocks.dz)));
+        a(Blocks.dA, (Item) (new ItemShulkerBox(Blocks.dA)));
+        b(Blocks.dB);
+        b(Blocks.dC);
+        b(Blocks.dD);
+        b(Blocks.dE);
+        b(Blocks.dF);
+        b(Blocks.dG);
+        b(Blocks.dH);
+        b(Blocks.dI);
+        b(Blocks.dJ);
+        b(Blocks.dK);
+        b(Blocks.dL);
+        b(Blocks.dM);
+        b(Blocks.dN);
+        b(Blocks.dO);
+        b(Blocks.dP);
+        b(Blocks.dQ);
+        a(Blocks.dR, (new ItemCloth(Blocks.dR)).c("concrete"));
+        a(Blocks.dS, (new ItemCloth(Blocks.dS)).c("concrete_powder"));
+        b(Blocks.STRUCTURE_BLOCK);
+        a(256, "iron_shovel", (new ItemSpade(Item.EnumToolMaterial.IRON)).c("shovelIron"));
+        a(257, "iron_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.IRON)).c("pickaxeIron"));
+        a(258, "iron_axe", (new ItemAxe(Item.EnumToolMaterial.IRON)).c("hatchetIron"));
+        a(259, "flint_and_steel", (new ItemFlintAndSteel()).c("flintAndSteel"));
+        a(260, "apple", (new ItemFood(4, 0.3F, false)).c("apple"));
+        a(261, "bow", (new ItemBow()).c("bow"));
+        a(262, "arrow", (new ItemArrow()).c("arrow"));
+        a(263, "coal", (new ItemCoal()).c("coal"));
+        a(264, "diamond", (new Item()).c("diamond").b(CreativeModeTab.l));
+        a(265, "iron_ingot", (new Item()).c("ingotIron").b(CreativeModeTab.l));
+        a(266, "gold_ingot", (new Item()).c("ingotGold").b(CreativeModeTab.l));
+        a(267, "iron_sword", (new ItemSword(Item.EnumToolMaterial.IRON)).c("swordIron"));
+        a(268, "wooden_sword", (new ItemSword(Item.EnumToolMaterial.WOOD)).c("swordWood"));
+        a(269, "wooden_shovel", (new ItemSpade(Item.EnumToolMaterial.WOOD)).c("shovelWood"));
+        a(270, "wooden_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.WOOD)).c("pickaxeWood"));
+        a(271, "wooden_axe", (new ItemAxe(Item.EnumToolMaterial.WOOD)).c("hatchetWood"));
+        a(272, "stone_sword", (new ItemSword(Item.EnumToolMaterial.STONE)).c("swordStone"));
+        a(273, "stone_shovel", (new ItemSpade(Item.EnumToolMaterial.STONE)).c("shovelStone"));
+        a(274, "stone_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.STONE)).c("pickaxeStone"));
+        a(275, "stone_axe", (new ItemAxe(Item.EnumToolMaterial.STONE)).c("hatchetStone"));
+        a(276, "diamond_sword", (new ItemSword(Item.EnumToolMaterial.DIAMOND)).c("swordDiamond"));
+        a(277, "diamond_shovel", (new ItemSpade(Item.EnumToolMaterial.DIAMOND)).c("shovelDiamond"));
+        a(278, "diamond_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.DIAMOND)).c("pickaxeDiamond"));
+        a(279, "diamond_axe", (new ItemAxe(Item.EnumToolMaterial.DIAMOND)).c("hatchetDiamond"));
+        a(280, "stick", (new Item()).n().c("stick").b(CreativeModeTab.l));
+        a(281, "bowl", (new Item()).c("bowl").b(CreativeModeTab.l));
+        a(282, "mushroom_stew", (new ItemSoup(6)).c("mushroomStew"));
+        a(283, "golden_sword", (new ItemSword(Item.EnumToolMaterial.GOLD)).c("swordGold"));
+        a(284, "golden_shovel", (new ItemSpade(Item.EnumToolMaterial.GOLD)).c("shovelGold"));
+        a(285, "golden_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.GOLD)).c("pickaxeGold"));
+        a(286, "golden_axe", (new ItemAxe(Item.EnumToolMaterial.GOLD)).c("hatchetGold"));
+        a(287, "string", (new ItemReed(Blocks.TRIPWIRE)).c("string").b(CreativeModeTab.l));
+        a(288, "feather", (new Item()).c("feather").b(CreativeModeTab.l));
+        a(289, "gunpowder", (new Item()).c("sulphur").b(CreativeModeTab.l));
+        a(290, "wooden_hoe", (new ItemHoe(Item.EnumToolMaterial.WOOD)).c("hoeWood"));
+        a(291, "stone_hoe", (new ItemHoe(Item.EnumToolMaterial.STONE)).c("hoeStone"));
+        a(292, "iron_hoe", (new ItemHoe(Item.EnumToolMaterial.IRON)).c("hoeIron"));
+        a(293, "diamond_hoe", (new ItemHoe(Item.EnumToolMaterial.DIAMOND)).c("hoeDiamond"));
+        a(294, "golden_hoe", (new ItemHoe(Item.EnumToolMaterial.GOLD)).c("hoeGold"));
+        a(295, "wheat_seeds", (new ItemSeeds(Blocks.WHEAT, Blocks.FARMLAND)).c("seeds"));
+        a(296, "wheat", (new Item()).c("wheat").b(CreativeModeTab.l));
+        a(297, "bread", (new ItemFood(5, 0.6F, false)).c("bread"));
+        a(298, "leather_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.HEAD)).c("helmetCloth"));
+        a(299, "leather_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.CHEST)).c("chestplateCloth"));
+        a(300, "leather_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.LEGS)).c("leggingsCloth"));
+        a(301, "leather_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.FEET)).c("bootsCloth"));
+        a(302, "chainmail_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.HEAD)).c("helmetChain"));
+        a(303, "chainmail_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.CHEST)).c("chestplateChain"));
+        a(304, "chainmail_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.LEGS)).c("leggingsChain"));
+        a(305, "chainmail_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.FEET)).c("bootsChain"));
+        a(306, "iron_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.HEAD)).c("helmetIron"));
+        a(307, "iron_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.CHEST)).c("chestplateIron"));
+        a(308, "iron_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.LEGS)).c("leggingsIron"));
+        a(309, "iron_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.FEET)).c("bootsIron"));
+        a(310, "diamond_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.HEAD)).c("helmetDiamond"));
+        a(311, "diamond_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.CHEST)).c("chestplateDiamond"));
+        a(312, "diamond_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.LEGS)).c("leggingsDiamond"));
+        a(313, "diamond_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.FEET)).c("bootsDiamond"));
+        a(314, "golden_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.HEAD)).c("helmetGold"));
+        a(315, "golden_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.CHEST)).c("chestplateGold"));
+        a(316, "golden_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.LEGS)).c("leggingsGold"));
+        a(317, "golden_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.FEET)).c("bootsGold"));
+        // CweepahCraft start
+        a(31996, "mysterious_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.MYSTERIOUS, 5, EnumItemSlot.HEAD)).c("helmetMysterious"));
+        a(31997, "mysterious_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.MYSTERIOUS, 5, EnumItemSlot.CHEST)).c("chestplateMysterious"));
+        a(31998, "mysterious_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.MYSTERIOUS, 5, EnumItemSlot.LEGS)).c("leggingsMysterious"));
+        a(31999, "mysterious_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.MYSTERIOUS, 5, EnumItemSlot.FEET)).c("bootsMysterious"));
+            // CweepahCraft end
+        a(318, "flint", (new Item()).c("flint").b(CreativeModeTab.l));
+        a(319, "porkchop", (new ItemFood(3, 0.3F, true)).c("porkchopRaw"));
+        a(320, "cooked_porkchop", (new ItemFood(8, 0.8F, true)).c("porkchopCooked"));
+        a(321, "painting", (new ItemHanging(EntityPainting.class)).c("painting"));
+        a(322, "golden_apple", (new ItemGoldenApple(4, 1.2F, false)).h().c("appleGold"));
+        a(323, "sign", (new ItemSign()).c("sign"));
+        a(324, "wooden_door", (new ItemDoor(Blocks.WOODEN_DOOR)).c("doorOak"));
+        Item item = (new ItemBucket(Blocks.AIR)).c("bucket").d(16);
+
+        a(325, "bucket", item);
+        a(326, "water_bucket", (new ItemBucket(Blocks.FLOWING_WATER)).c("bucketWater").b(item));
+        a(327, "lava_bucket", (new ItemBucket(Blocks.FLOWING_LAVA)).c("bucketLava").b(item));
+        a(328, "minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.RIDEABLE)).c("minecart"));
+        a(329, "saddle", (new ItemSaddle()).c("saddle"));
+        a(330, "iron_door", (new ItemDoor(Blocks.IRON_DOOR)).c("doorIron"));
+        a(331, "redstone", (new ItemRedstone()).c("redstone"));
+        a(332, "snowball", (new ItemSnowball()).c("snowball"));
+        a(333, "boat", new ItemBoat(EntityBoat.EnumBoatType.OAK));
+        a(334, "leather", (new Item()).c("leather").b(CreativeModeTab.l));
+        a(335, "milk_bucket", (new ItemMilkBucket()).c("milk").b(item));
+        a(336, "brick", (new Item()).c("brick").b(CreativeModeTab.l));
+        a(337, "clay_ball", (new Item()).c("clay").b(CreativeModeTab.l));
+        a(338, "reeds", (new ItemReed(Blocks.REEDS)).c("reeds").b(CreativeModeTab.l));
+        a(339, "paper", (new Item()).c("paper").b(CreativeModeTab.f));
+        a(340, "book", (new ItemBook()).c("book").b(CreativeModeTab.f));
+        a(341, "slime_ball", (new Item()).c("slimeball").b(CreativeModeTab.f));
+        a(342, "chest_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.CHEST)).c("minecartChest"));
+        a(343, "furnace_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.FURNACE)).c("minecartFurnace"));
+        a(344, "egg", (new ItemEgg()).c("egg"));
+        a(345, "compass", (new ItemCompass()).c("compass").b(CreativeModeTab.i));
+        a(346, "fishing_rod", (new ItemFishingRod()).c("fishingRod"));
+        a(347, "clock", (new ItemClock()).c("clock").b(CreativeModeTab.i));
+        a(348, "glowstone_dust", (new Item()).c("yellowDust").b(CreativeModeTab.l));
+        a(349, "fish", (new ItemFish(false)).c("fish").a(true));
+        a(350, "cooked_fish", (new ItemFish(true)).c("fish").a(true));
+        a(351, "dye", (new ItemDye()).c("dyePowder"));
+        a(352, "bone", (new Item()).c("bone").n().b(CreativeModeTab.f));
+        a(353, "sugar", (new Item()).c("sugar").b(CreativeModeTab.l));
+        a(354, "cake", (new ItemReed(Blocks.CAKE)).d(1).c("cake").b(CreativeModeTab.h));
+        a(355, "bed", (new ItemBed()).d(1).c("bed"));
+        a(356, "repeater", (new ItemReed(Blocks.UNPOWERED_REPEATER)).c("diode").b(CreativeModeTab.d));
+        a(357, "cookie", (new ItemFood(2, 0.1F, false)).c("cookie"));
+        a(358, "filled_map", (new ItemWorldMap()).c("map"));
+        a(359, "shears", (new ItemShears()).c("shears"));
+        a(360, "melon", (new ItemFood(2, 0.3F, false)).c("melon"));
+        a(361, "pumpkin_seeds", (new ItemSeeds(Blocks.PUMPKIN_STEM, Blocks.FARMLAND)).c("seeds_pumpkin"));
+        a(362, "melon_seeds", (new ItemSeeds(Blocks.MELON_STEM, Blocks.FARMLAND)).c("seeds_melon"));
+        a(363, "beef", (new ItemFood(3, 0.3F, true)).c("beefRaw"));
+        a(364, "cooked_beef", (new ItemFood(8, 0.8F, true)).c("beefCooked"));
+        a(365, "chicken", (new ItemFood(2, 0.3F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.3F).c("chickenRaw"));
+        a(366, "cooked_chicken", (new ItemFood(6, 0.6F, true)).c("chickenCooked"));
+        a(367, "rotten_flesh", (new ItemFood(4, 0.1F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.8F).c("rottenFlesh"));
+        a(368, "ender_pearl", (new ItemEnderPearl()).c("enderPearl"));
+        a(369, "blaze_rod", (new Item()).c("blazeRod").b(CreativeModeTab.l).n());
+        a(370, "ghast_tear", (new Item()).c("ghastTear").b(CreativeModeTab.k));
+        a(371, "gold_nugget", (new Item()).c("goldNugget").b(CreativeModeTab.l));
+        a(372, "nether_wart", (new ItemSeeds(Blocks.NETHER_WART, Blocks.SOUL_SAND)).c("netherStalkSeeds"));
+        a(373, "potion", (new ItemPotion()).c("potion"));
+        Item item1 = (new ItemGlassBottle()).c("glassBottle");
+
+        a(374, "glass_bottle", item1);
+        a(375, "spider_eye", (new ItemFood(2, 0.8F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 1.0F).c("spiderEye"));
+        a(376, "fermented_spider_eye", (new Item()).c("fermentedSpiderEye").b(CreativeModeTab.k));
+        a(377, "blaze_powder", (new Item()).c("blazePowder").b(CreativeModeTab.k));
+        a(378, "magma_cream", (new Item()).c("magmaCream").b(CreativeModeTab.k));
+        a(379, "brewing_stand", (new ItemReed(Blocks.BREWING_STAND)).c("brewingStand").b(CreativeModeTab.k));
+        a(380, "cauldron", (new ItemReed(Blocks.cauldron)).c("cauldron").b(CreativeModeTab.k));
+        a(381, "ender_eye", (new ItemEnderEye()).c("eyeOfEnder"));
+        a(382, "speckled_melon", (new Item()).c("speckledMelon").b(CreativeModeTab.k));
+        a(383, "spawn_egg", (new ItemMonsterEgg()).c("monsterPlacer"));
+        a(384, "experience_bottle", (new ItemExpBottle()).c("expBottle"));
+        a(385, "fire_charge", (new ItemFireball()).c("fireball"));
+        a(386, "writable_book", (new ItemBookAndQuill()).c("writingBook").b(CreativeModeTab.f));
+        a(387, "written_book", (new ItemWrittenBook()).c("writtenBook").d(16));
+        a(388, "emerald", (new Item()).c("emerald").b(CreativeModeTab.l));
+        a(389, "item_frame", (new ItemHanging(EntityItemFrame.class)).c("frame"));
+        a(390, "flower_pot", (new ItemReed(Blocks.FLOWER_POT)).c("flowerPot").b(CreativeModeTab.c));
+        a(391, "carrot", (new ItemSeedFood(3, 0.6F, Blocks.CARROTS, Blocks.FARMLAND)).c("carrots"));
+        a(392, "potato", (new ItemSeedFood(1, 0.3F, Blocks.POTATOES, Blocks.FARMLAND)).c("potato"));
+        a(393, "baked_potato", (new ItemFood(5, 0.6F, false)).c("potatoBaked"));
+        a(394, "poisonous_potato", (new ItemFood(2, 0.3F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 0.6F).c("potatoPoisonous"));
+        a(395, "map", (new ItemMapEmpty()).c("emptyMap"));
+        a(396, "golden_carrot", (new ItemFood(6, 1.2F, false)).c("carrotGolden").b(CreativeModeTab.k));
+        a(397, "skull", (new ItemSkull()).c("skull"));
+        a(398, "carrot_on_a_stick", (new ItemCarrotStick()).c("carrotOnAStick"));
+        a(399, "nether_star", (new ItemNetherStar()).c("netherStar").b(CreativeModeTab.l));
+        a(400, "pumpkin_pie", (new ItemFood(8, 0.3F, false)).c("pumpkinPie").b(CreativeModeTab.h));
+        a(401, "fireworks", (new ItemFireworks()).c("fireworks"));
+        a(402, "firework_charge", (new ItemFireworksCharge()).c("fireworksCharge").b(CreativeModeTab.f));
+        a(403, "enchanted_book", (new ItemEnchantedBook()).d(1).c("enchantedBook"));
+        a(404, "comparator", (new ItemReed(Blocks.UNPOWERED_COMPARATOR)).c("comparator").b(CreativeModeTab.d));
+        a(405, "netherbrick", (new Item()).c("netherbrick").b(CreativeModeTab.l));
+        a(406, "quartz", (new Item()).c("netherquartz").b(CreativeModeTab.l));
+        a(407, "tnt_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.TNT)).c("minecartTnt"));
+        a(408, "hopper_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.HOPPER)).c("minecartHopper"));
+        a(409, "prismarine_shard", (new Item()).c("prismarineShard").b(CreativeModeTab.l));
+        a(410, "prismarine_crystals", (new Item()).c("prismarineCrystals").b(CreativeModeTab.l));
+        a(411, "rabbit", (new ItemFood(3, 0.3F, true)).c("rabbitRaw"));
+        a(412, "cooked_rabbit", (new ItemFood(5, 0.6F, true)).c("rabbitCooked"));
+        a(413, "rabbit_stew", (new ItemSoup(10)).c("rabbitStew"));
+        a(414, "rabbit_foot", (new Item()).c("rabbitFoot").b(CreativeModeTab.k));
+        a(415, "rabbit_hide", (new Item()).c("rabbitHide").b(CreativeModeTab.l));
+        a(416, "armor_stand", (new ItemArmorStand()).c("armorStand").d(16));
+        a(417, "iron_horse_armor", (new Item()).c("horsearmormetal").d(1).b(CreativeModeTab.f));
+        a(418, "golden_horse_armor", (new Item()).c("horsearmorgold").d(1).b(CreativeModeTab.f));
+        a(419, "diamond_horse_armor", (new Item()).c("horsearmordiamond").d(1).b(CreativeModeTab.f));
+        a(420, "lead", (new ItemLeash()).c("leash"));
+        a(421, "name_tag", (new ItemNameTag()).c("nameTag"));
+        a(422, "command_block_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.COMMAND_BLOCK)).c("minecartCommandBlock").b((CreativeModeTab) null));
+        a(423, "mutton", (new ItemFood(2, 0.3F, true)).c("muttonRaw"));
+        a(424, "cooked_mutton", (new ItemFood(6, 0.8F, true)).c("muttonCooked"));
+        a(425, "banner", (new ItemBanner()).c("banner"));
+        a(426, "end_crystal", new ItemEndCrystal());
+        a(427, "spruce_door", (new ItemDoor(Blocks.SPRUCE_DOOR)).c("doorSpruce"));
+        a(428, "birch_door", (new ItemDoor(Blocks.BIRCH_DOOR)).c("doorBirch"));
+        a(429, "jungle_door", (new ItemDoor(Blocks.JUNGLE_DOOR)).c("doorJungle"));
+        a(430, "acacia_door", (new ItemDoor(Blocks.ACACIA_DOOR)).c("doorAcacia"));
+        a(431, "dark_oak_door", (new ItemDoor(Blocks.DARK_OAK_DOOR)).c("doorDarkOak"));
+        a(432, "chorus_fruit", (new ItemChorusFruit(4, 0.3F)).h().c("chorusFruit").b(CreativeModeTab.l));
+        a(433, "chorus_fruit_popped", (new Item()).c("chorusFruitPopped").b(CreativeModeTab.l));
+        a(434, "beetroot", (new ItemFood(1, 0.6F, false)).c("beetroot"));
+        a(435, "beetroot_seeds", (new ItemSeeds(Blocks.BEETROOT, Blocks.FARMLAND)).c("beetroot_seeds"));
+        a(436, "beetroot_soup", (new ItemSoup(6)).c("beetroot_soup"));
+        a(437, "dragon_breath", (new Item()).b(CreativeModeTab.k).c("dragon_breath").b(item1));
+        a(438, "splash_potion", (new ItemSplashPotion()).c("splash_potion"));
+        a(439, "spectral_arrow", (new ItemSpectralArrow()).c("spectral_arrow"));
+        a(440, "tipped_arrow", (new ItemTippedArrow()).c("tipped_arrow"));
+        a(441, "lingering_potion", (new ItemLingeringPotion()).c("lingering_potion"));
+        a(442, "shield", (new ItemShield()).c("shield"));
+        a(443, "elytra", (new ItemElytra()).c("elytra"));
+        a(444, "spruce_boat", new ItemBoat(EntityBoat.EnumBoatType.SPRUCE));
+        a(445, "birch_boat", new ItemBoat(EntityBoat.EnumBoatType.BIRCH));
+        a(446, "jungle_boat", new ItemBoat(EntityBoat.EnumBoatType.JUNGLE));
+        a(447, "acacia_boat", new ItemBoat(EntityBoat.EnumBoatType.ACACIA));
+        a(448, "dark_oak_boat", new ItemBoat(EntityBoat.EnumBoatType.DARK_OAK));
+        a(449, "totem_of_undying", (new Item()).c("totem").d(1).b(CreativeModeTab.j));
+        a(450, "shulker_shell", (new Item()).c("shulkerShell").b(CreativeModeTab.l));
+        a(452, "iron_nugget", (new Item()).c("ironNugget").b(CreativeModeTab.l));
+        a(453, "knowledge_book", (new ItemKnowledgeBook()).c("knowledgeBook"));
+        a(2256, "record_13", (new ItemRecord("13", SoundEffects.gb)).c("record"));
+        a(2257, "record_cat", (new ItemRecord("cat", SoundEffects.gd)).c("record"));
+        a(2258, "record_blocks", (new ItemRecord("blocks", SoundEffects.gc)).c("record"));
+        a(2259, "record_chirp", (new ItemRecord("chirp", SoundEffects.ge)).c("record"));
+        a(2260, "record_far", (new ItemRecord("far", SoundEffects.gf)).c("record"));
+        a(2261, "record_mall", (new ItemRecord("mall", SoundEffects.gg)).c("record"));
+        a(2262, "record_mellohi", (new ItemRecord("mellohi", SoundEffects.gh)).c("record"));
+        a(2263, "record_stal", (new ItemRecord("stal", SoundEffects.gi)).c("record"));
+        a(2264, "record_strad", (new ItemRecord("strad", SoundEffects.gj)).c("record"));
+        a(2265, "record_ward", (new ItemRecord("ward", SoundEffects.gl)).c("record"));
+        a(2266, "record_11", (new ItemRecord("11", SoundEffects.ga)).c("record"));
+        a(2267, "record_wait", (new ItemRecord("wait", SoundEffects.gk)).c("record"));
+    }
+
+    private static void b(Block block) {
+        a(block, (Item) (new ItemBlock(block)));
+    }
+
+    protected static void a(Block block, Item item) {
+        a(Block.getId(block), (MinecraftKey) Block.REGISTRY.b(block), item);
+        Item.a.put(block, item);
+    }
+
+    private static void a(int i, String s, Item item) {
+        a(i, new MinecraftKey(s), item);
+    }
+
+    private static void a(int i, MinecraftKey minecraftkey, Item item) {
+        Item.REGISTRY.a(i, minecraftkey, item);
+    }
+
+    public enum EnumToolMaterial {
+
+        WOOD(0, 59, 2.0F, 0.0F, 15), STONE(1, 131, 4.0F, 1.0F, 5), IRON(2, 250, 6.0F, 2.0F, 14), DIAMOND(3, 1561, 8.0F, 3.0F, 10), GOLD(0, 32, 12.0F, 0.0F, 22);
+
+        private final int f;
+        private final int g;
+        private final float h;
+        private final float i;
+        private final int j;
+
+        private EnumToolMaterial(int i, int j, float f, float f1, int k) {
+            this.f = i;
+            this.g = j;
+            this.h = f;
+            this.i = f1;
+            this.j = k;
+        }
+
+        public int a() {
+            return this.g;
+        }
+
+        public float b() {
+            return this.h;
+        }
+
+        public float c() {
+            return this.i;
+        }
+
+        public int d() {
+            return this.f;
+        }
+
+        public int e() {
+            return this.j;
+        }
+
+        public Item f() {
+            return this == Item.EnumToolMaterial.WOOD ? Item.getItemOf(Blocks.PLANKS) : (this == Item.EnumToolMaterial.STONE ? Item.getItemOf(Blocks.COBBLESTONE) : (this == Item.EnumToolMaterial.GOLD ? Items.GOLD_INGOT : (this == Item.EnumToolMaterial.IRON ? Items.IRON_INGOT : (this == Item.EnumToolMaterial.DIAMOND ? Items.DIAMOND : null))));
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemArmor.java b/src/main/java/net/minecraft/server/ItemArmor.java
index 921cddd..e2b5ae0 100644
--- a/src/main/java/net/minecraft/server/ItemArmor.java
+++ b/src/main/java/net/minecraft/server/ItemArmor.java
@@ -10,7 +10,9 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.block.BlockDispenseEvent;
 // CraftBukkit end
 
-public class ItemArmor extends Item {
+import net.cweepahcraft.item.ServerSpecificItem; // CweepahCraft
+
+public class ItemArmor extends Item implements ServerSpecificItem {
 
     private static final int[] n = new int[] { 13, 15, 16, 11};
     private static final UUID[] o = new UUID[] { UUID.fromString("845DB27C-C624-495F-8C9F-6020A9A58B6B"), UUID.fromString("D8499B04-0E66-4726-AB29-64469D734E0D"), UUID.fromString("9F3D476D-C118-4544-8365-64846904B48E"), UUID.fromString("2AD3F246-FEE1-4E67-B886-69FD380BB150")};
@@ -86,6 +88,33 @@ public class ItemArmor extends Item {
         BlockDispenser.REGISTRY.a(this, ItemArmor.b);
     }
 
+    @Override
+    public String b(ItemStack stack) {
+        if (this.p == EnumArmorMaterial.MYSTERIOUS) {
+            return this.j(stack);
+        }
+
+        return super.b(stack);
+    }
+
+    @Override
+    public String j(ItemStack stack) { // CweepahCraft - override for mysterious armor
+        if (this.p == EnumArmorMaterial.MYSTERIOUS) {
+            switch (this.c) {
+                case HEAD:
+                    return "Mysterious Helmet";
+                case CHEST:
+                    return "Mysterious Chestplate";
+                case LEGS:
+                    return "Mysterious Leggings";
+                case FEET:
+                    return "Mysterious Boots";
+            }
+        }
+
+        return super.j(stack);
+    }
+
     public int c() {
         return this.p.a();
     }
@@ -95,7 +124,7 @@ public class ItemArmor extends Item {
     }
 
     public boolean e_(ItemStack itemstack) {
-        if (this.p != ItemArmor.EnumArmorMaterial.LEATHER) {
+        if (!this.p.isDyeable()) { // CweepahCraft
             return false;
         } else {
             NBTTagCompound nbttagcompound = itemstack.getTag();
@@ -105,7 +134,7 @@ public class ItemArmor extends Item {
     }
 
     public int c(ItemStack itemstack) {
-        if (this.p != ItemArmor.EnumArmorMaterial.LEATHER) {
+        if (!this.p.isDyeable()) { // CweepahCraft
             return 16777215;
         } else {
             NBTTagCompound nbttagcompound = itemstack.getTag();
@@ -123,7 +152,7 @@ public class ItemArmor extends Item {
     }
 
     public void d(ItemStack itemstack) {
-        if (this.p == ItemArmor.EnumArmorMaterial.LEATHER) {
+        if (this.p.isDyeable()) { // CweepahCraft
             NBTTagCompound nbttagcompound = itemstack.getTag();
 
             if (nbttagcompound != null) {
@@ -138,7 +167,7 @@ public class ItemArmor extends Item {
     }
 
     public void a(ItemStack itemstack, int i) {
-        if (this.p != ItemArmor.EnumArmorMaterial.LEATHER) {
+        if (!this.p.isDyeable()) { // CweepahCraft
             throw new UnsupportedOperationException("Can\'t dye non-leather!");
         } else {
             NBTTagCompound nbttagcompound = itemstack.getTag();
@@ -187,9 +216,93 @@ public class ItemArmor extends Item {
         return multimap;
     }
 
+    // CweepahCraft start
+    @Override
+    public boolean isApplicable(ItemStack itemStack) {
+        return this.p == EnumArmorMaterial.MYSTERIOUS;
+    }
+
+    @Override
+    public ItemStack toClientStack(ItemStack itemStack) {
+        Item clientItem = Item.getById(Item.getId(this) - 31698);
+        ItemStack clientStack = new ItemStack(clientItem);
+
+        clientStack.setCount(itemStack.getCount());
+        clientStack.setData(itemStack.getData() * clientItem.getMaxDurability() / this.getMaxDurability());
+
+        NBTTagCompound tag = itemStack.getTag();
+        if (tag == null) {
+            tag = new NBTTagCompound();
+        } else {
+            tag = (NBTTagCompound) tag.clone();
+        }
+
+        if (!tag.hasKey("AttributeModifiers")) {
+            tag.set("AttributeModifiers", attributesToTag(itemStack));
+        }
+
+        tag.setShort("ServerData", (short) itemStack.getData());
+
+        clientStack.setTag(tag);
+        return clientStack;
+    }
+
+    @Override
+    public ItemStack toServerStack(ItemStack itemStack) {
+        Item clientItem = itemStack.getItem();
+        ItemStack serverStack = new ItemStack(this);
+
+        serverStack.setCount(itemStack.getCount());
+
+        NBTTagCompound tag = itemStack.getTag();
+        if (tag == null) {
+            return serverStack;
+        } else {
+            tag = (NBTTagCompound) tag.clone();
+        }
+
+        if (tag.hasKeyOfType("ServerData", 2)) {
+            serverStack.setData(tag.getShort("ServerData"));
+            tag.remove("ServerData");
+        } else {
+            serverStack.setData(itemStack.getData() * this.getMaxDurability() / clientItem.getMaxDurability());
+        }
+
+        if (tag.hasKey("AttributeModifiers") && tag.get("AttributeModifiers").equals(attributesToTag(new ItemStack(this)))) {
+            tag.remove("AttributeModifiers");
+        }
+
+        serverStack.setTag(tag);
+        return serverStack;
+    }
+
+    private NBTBase attributesToTag(ItemStack itemstack) {
+        ItemStack attributeStack = itemstack.cloneItemStack();
+        EnumItemSlot slot = ((ItemArmor) itemstack.getItem()).c;
+        Multimap<String, AttributeModifier> modifiers = itemstack.a(slot);
+        for (String name : modifiers.keySet()) {
+            for (AttributeModifier modifier : modifiers.get(name)) {
+                attributeStack.a(name, modifier, slot);
+            }
+        }
+
+        NBTTagCompound attributeStackCompound = attributeStack.getTag();
+        if (attributeStackCompound != null) {
+            return attributeStackCompound.get("AttributeModifiers");
+        } else {
+            return null;
+        }
+    }
+    // CweepahCraft end
+
     public static enum EnumArmorMaterial {
 
-        LEATHER("leather", 5, new int[] { 1, 2, 3, 1}, 15, SoundEffects.t, 0.0F), CHAIN("chainmail", 15, new int[] { 1, 4, 5, 2}, 12, SoundEffects.n, 0.0F), IRON("iron", 15, new int[] { 2, 5, 6, 2}, 9, SoundEffects.s, 0.0F), GOLD("gold", 7, new int[] { 1, 3, 5, 2}, 25, SoundEffects.r, 0.0F), DIAMOND("diamond", 33, new int[] { 3, 6, 8, 3}, 10, SoundEffects.o, 2.0F);
+        LEATHER("leather", 5, new int[] { 1, 2, 3, 1}, 15, SoundEffects.t, 0.0F, true),
+        CHAIN("chainmail", 15, new int[] { 1, 4, 5, 2}, 12, SoundEffects.n, 0.0F),
+        IRON("iron", 15, new int[] { 2, 5, 6, 2}, 9, SoundEffects.s, 0.0F),
+        GOLD("gold", 7, new int[] { 1, 3, 5, 2}, 25, SoundEffects.r, 0.0F),
+        DIAMOND("diamond", 33, new int[] { 3, 6, 8, 3}, 10, SoundEffects.o, 2.0F),
+        MYSTERIOUS("mysterious", 66, new int[] { 6, 12, 16, 6 }, 20, SoundEffects.t, 3.0F, true);
 
         private final String f;
         private final int g;
@@ -197,16 +310,24 @@ public class ItemArmor extends Item {
         private final int i;
         private final SoundEffect j;
         private final float k;
+        private final boolean dyeable;
 
-        private EnumArmorMaterial(String s, int i, int[] aint, int j, SoundEffect soundeffect, float f) {
-            this.f = s;
-            this.g = i;
-            this.h = aint;
-            this.i = j;
-            this.j = soundeffect;
-            this.k = f;
+        EnumArmorMaterial(String s, int i, int[] aint, int j, SoundEffect soundeffect, float f) {
+            this(s, i, aint, j, soundeffect, f, false); // CweepahCraft - initializing code moved below to new constructor
         }
 
+        // CweepahCraft start
+        EnumArmorMaterial(String typeName, int durabilityMultiplier, int[] protection, int enchantability, SoundEffect equipSound, float toughness, boolean dyeable) {
+            this.f = typeName;
+            this.g = durabilityMultiplier;
+            this.h = protection;
+            this.i = enchantability;
+            this.j = equipSound;
+            this.k = toughness;
+            this.dyeable = dyeable;
+        }
+        // CweepahCraft end
+
         public int a(EnumItemSlot enumitemslot) {
             return ItemArmor.n[enumitemslot.b()] * this.g;
         }
@@ -223,8 +344,26 @@ public class ItemArmor extends Item {
             return this.j;
         }
 
+        public boolean isDyeable() {
+            return this.dyeable;
+        }
+
         public Item c() {
-            return this == ItemArmor.EnumArmorMaterial.LEATHER ? Items.LEATHER : (this == ItemArmor.EnumArmorMaterial.CHAIN ? Items.IRON_INGOT : (this == ItemArmor.EnumArmorMaterial.GOLD ? Items.GOLD_INGOT : (this == ItemArmor.EnumArmorMaterial.IRON ? Items.IRON_INGOT : (this == ItemArmor.EnumArmorMaterial.DIAMOND ? Items.DIAMOND : null))));
+            // CweepahCraft start - changed from ternary operators to a switch statement
+            switch (this) {
+                case LEATHER:
+                    return Items.LEATHER;
+                case CHAIN:
+                    return Items.IRON_INGOT;
+                case IRON:
+                    return Items.IRON_INGOT;
+                case GOLD:
+                    return Items.GOLD_INGOT;
+                case DIAMOND:
+                    return Items.DIAMOND;
+                default: return null;
+            }
+            // CweepahCraft end
         }
 
         public float e() {
diff --git a/src/main/java/net/minecraft/server/Items.java b/src/main/java/net/minecraft/server/Items.java
new file mode 100644
index 0000000..2a796db
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Items.java
@@ -0,0 +1,450 @@
+package net.minecraft.server;
+
+public class Items {
+
+    public static final Item a;
+    public static final Item IRON_SHOVEL;
+    public static final Item IRON_PICKAXE;
+    public static final Item IRON_AXE;
+    public static final Item FLINT_AND_STEEL;
+    public static final Item APPLE;
+    public static final ItemBow BOW;
+    public static final Item ARROW;
+    public static final Item SPECTRAL_ARROW;
+    public static final Item TIPPED_ARROW;
+    public static final Item COAL;
+    public static final Item DIAMOND;
+    public static final Item IRON_INGOT;
+    public static final Item GOLD_INGOT;
+    public static final Item IRON_SWORD;
+    public static final Item WOODEN_SWORD;
+    public static final Item WOODEN_SHOVEL;
+    public static final Item WOODEN_PICKAXE;
+    public static final Item WOODEN_AXE;
+    public static final Item STONE_SWORD;
+    public static final Item STONE_SHOVEL;
+    public static final Item STONE_PICKAXE;
+    public static final Item STONE_AXE;
+    public static final Item DIAMOND_SWORD;
+    public static final Item DIAMOND_SHOVEL;
+    public static final Item DIAMOND_PICKAXE;
+    public static final Item DIAMOND_AXE;
+    public static final Item STICK;
+    public static final Item BOWL;
+    public static final Item MUSHROOM_STEW;
+    public static final Item GOLDEN_SWORD;
+    public static final Item GOLDEN_SHOVEL;
+    public static final Item GOLDEN_PICKAXE;
+    public static final Item GOLDEN_AXE;
+    public static final Item STRING;
+    public static final Item FEATHER;
+    public static final Item GUNPOWDER;
+    public static final Item WOODEN_HOE;
+    public static final Item STONE_HOE;
+    public static final Item IRON_HOE;
+    public static final Item DIAMOND_HOE;
+    public static final Item GOLDEN_HOE;
+    public static final Item WHEAT_SEEDS;
+    public static final Item WHEAT;
+    public static final Item BREAD;
+    public static final ItemArmor LEATHER_HELMET;
+    public static final ItemArmor LEATHER_CHESTPLATE;
+    public static final ItemArmor LEATHER_LEGGINGS;
+    public static final ItemArmor LEATHER_BOOTS;
+    public static final ItemArmor CHAINMAIL_HELMET;
+    public static final ItemArmor CHAINMAIL_CHESTPLATE;
+    public static final ItemArmor CHAINMAIL_LEGGINGS;
+    public static final ItemArmor CHAINMAIL_BOOTS;
+    public static final ItemArmor IRON_HELMET;
+    public static final ItemArmor IRON_CHESTPLATE;
+    public static final ItemArmor IRON_LEGGINGS;
+    public static final ItemArmor IRON_BOOTS;
+    public static final ItemArmor DIAMOND_HELMET;
+    public static final ItemArmor DIAMOND_CHESTPLATE;
+    public static final ItemArmor DIAMOND_LEGGINGS;
+    public static final ItemArmor DIAMOND_BOOTS;
+    public static final ItemArmor GOLDEN_HELMET;
+    public static final ItemArmor GOLDEN_CHESTPLATE;
+    public static final ItemArmor GOLDEN_LEGGINGS;
+    public static final ItemArmor GOLDEN_BOOTS;
+    public static final ItemArmor MYSTERIOUS_HELMET;
+    public static final ItemArmor MYSTERIOUS_CHESTPLATE;
+    public static final ItemArmor MYSTERIOUS_LEGGINGS;
+    public static final ItemArmor MYSTERIOUS_BOOTS;
+    public static final Item FLINT;
+    public static final Item PORKCHOP;
+    public static final Item COOKED_PORKCHOP;
+    public static final Item PAINTING;
+    public static final Item GOLDEN_APPLE;
+    public static final Item SIGN;
+    public static final Item WOODEN_DOOR;
+    public static final Item SPRUCE_DOOR;
+    public static final Item BIRCH_DOOR;
+    public static final Item JUNGLE_DOOR;
+    public static final Item ACACIA_DOOR;
+    public static final Item DARK_OAK_DOOR;
+    public static final Item BUCKET;
+    public static final Item WATER_BUCKET;
+    public static final Item LAVA_BUCKET;
+    public static final Item MINECART;
+    public static final Item SADDLE;
+    public static final Item IRON_DOOR;
+    public static final Item REDSTONE;
+    public static final Item SNOWBALL;
+    public static final Item aH;
+    public static final Item aI;
+    public static final Item aJ;
+    public static final Item aK;
+    public static final Item aL;
+    public static final Item aM;
+    public static final Item LEATHER;
+    public static final Item MILK_BUCKET;
+    public static final Item BRICK;
+    public static final Item CLAY_BALL;
+    public static final Item REEDS;
+    public static final Item PAPER;
+    public static final Item BOOK;
+    public static final Item SLIME;
+    public static final Item CHEST_MINECART;
+    public static final Item FURNACE_MINECART;
+    public static final Item EGG;
+    public static final Item COMPASS;
+    public static final ItemFishingRod FISHING_ROD;
+    public static final Item CLOCK;
+    public static final Item GLOWSTONE_DUST;
+    public static final Item FISH;
+    public static final Item COOKED_FISH;
+    public static final Item DYE;
+    public static final Item BONE;
+    public static final Item SUGAR;
+    public static final Item CAKE;
+    public static final Item BED;
+    public static final Item REPEATER;
+    public static final Item COOKIE;
+    public static final ItemWorldMap FILLED_MAP;
+    public static final ItemShears SHEARS;
+    public static final Item MELON;
+    public static final Item PUMPKIN_SEEDS;
+    public static final Item MELON_SEEDS;
+    public static final Item BEEF;
+    public static final Item COOKED_BEEF;
+    public static final Item CHICKEN;
+    public static final Item COOKED_CHICKEN;
+    public static final Item MUTTON;
+    public static final Item COOKED_MUTTON;
+    public static final Item RABBIT;
+    public static final Item COOKED_RABBIT;
+    public static final Item RABBIT_STEW;
+    public static final Item RABBIT_FOOT;
+    public static final Item RABBIT_HIDE;
+    public static final Item ROTTEN_FLESH;
+    public static final Item ENDER_PEARL;
+    public static final Item BLAZE_ROD;
+    public static final Item GHAST_TEAR;
+    public static final Item GOLD_NUGGET;
+    public static final Item NETHER_WART;
+    public static final ItemPotion POTION;
+    public static final ItemPotion SPLASH_POTION;
+    public static final ItemPotion LINGERING_POTION;
+    public static final Item GLASS_BOTTLE;
+    public static final Item DRAGON_BREATH;
+    public static final Item SPIDER_EYE;
+    public static final Item FERMENTED_SPIDER_EYE;
+    public static final Item BLAZE_POWDER;
+    public static final Item MAGMA_CREAM;
+    public static final Item BREWING_STAND;
+    public static final Item CAULDRON;
+    public static final Item ENDER_EYE;
+    public static final Item SPECKLED_MELON;
+    public static final Item SPAWN_EGG;
+    public static final Item EXPERIENCE_BOTTLE;
+    public static final Item FIRE_CHARGE;
+    public static final Item WRITABLE_BOOK;
+    public static final Item WRITTEN_BOOK;
+    public static final Item EMERALD;
+    public static final Item ITEM_FRAME;
+    public static final Item FLOWER_POT;
+    public static final Item CARROT;
+    public static final Item POTATO;
+    public static final Item BAKED_POTATO;
+    public static final Item POISONOUS_POTATO;
+    public static final ItemMapEmpty MAP;
+    public static final Item GOLDEN_CARROT;
+    public static final Item SKULL;
+    public static final Item CARROT_ON_A_STICK;
+    public static final Item NETHER_STAR;
+    public static final Item PUMPKIN_PIE;
+    public static final Item FIREWORKS;
+    public static final Item FIREWORK_CHARGE;
+    public static final Item ENCHANTED_BOOK;
+    public static final Item COMPARATOR;
+    public static final Item NETHERBRICK;
+    public static final Item QUARTZ;
+    public static final Item TNT_MINECART;
+    public static final Item HOPPER_MINECART;
+    public static final ItemArmorStand ARMOR_STAND;
+    public static final Item IRON_HORSE_ARMOR;
+    public static final Item GOLDEN_HORSE_ARMOR;
+    public static final Item DIAMOND_HORSE_ARMOR;
+    public static final Item LEAD;
+    public static final Item NAME_TAG;
+    public static final Item COMMAND_BLOCK_MINECART;
+    public static final Item RECORD_13;
+    public static final Item RECORD_CAT;
+    public static final Item RECORD_BLOCKS;
+    public static final Item RECORD_CHIRP;
+    public static final Item RECORD_FAR;
+    public static final Item RECORD_MALL;
+    public static final Item RECORD_MELLOHI;
+    public static final Item RECORD_STAL;
+    public static final Item RECORD_STRAD;
+    public static final Item RECORD_WARD;
+    public static final Item RECORD_11;
+    public static final Item RECORD_WAIT;
+    public static final Item PRISMARINE_SHARD;
+    public static final Item PRISMARINE_CRYSTALS;
+    public static final Item BANNER;
+    public static final Item cQ;
+    public static final Item SHIELD;
+    public static final Item cS;
+    public static final Item CHORUS_FRUIT;
+    public static final Item CHORUS_FRUIT_POPPED;
+    public static final Item BEETROOT_SEEDS;
+    public static final Item BEETROOT;
+    public static final Item BEETROOT_SOUP;
+    public static final Item cY;
+    public static final Item cZ;
+    public static final Item da;
+    public static final Item db;
+
+    private static Item get(String s) {
+        Item item = Item.REGISTRY.get(new MinecraftKey(s));
+
+        if (item == null) {
+            throw new IllegalStateException("Invalid Item requested: " + s);
+        } else {
+            return item;
+        }
+    }
+
+    static {
+        if (!DispenserRegistry.a()) {
+            throw new RuntimeException("Accessed Items before Bootstrap!");
+        } else {
+            a = get("air");
+            IRON_SHOVEL = get("iron_shovel");
+            IRON_PICKAXE = get("iron_pickaxe");
+            IRON_AXE = get("iron_axe");
+            FLINT_AND_STEEL = get("flint_and_steel");
+            APPLE = get("apple");
+            BOW = (ItemBow) get("bow");
+            ARROW = get("arrow");
+            SPECTRAL_ARROW = get("spectral_arrow");
+            TIPPED_ARROW = get("tipped_arrow");
+            COAL = get("coal");
+            DIAMOND = get("diamond");
+            IRON_INGOT = get("iron_ingot");
+            GOLD_INGOT = get("gold_ingot");
+            IRON_SWORD = get("iron_sword");
+            WOODEN_SWORD = get("wooden_sword");
+            WOODEN_SHOVEL = get("wooden_shovel");
+            WOODEN_PICKAXE = get("wooden_pickaxe");
+            WOODEN_AXE = get("wooden_axe");
+            STONE_SWORD = get("stone_sword");
+            STONE_SHOVEL = get("stone_shovel");
+            STONE_PICKAXE = get("stone_pickaxe");
+            STONE_AXE = get("stone_axe");
+            DIAMOND_SWORD = get("diamond_sword");
+            DIAMOND_SHOVEL = get("diamond_shovel");
+            DIAMOND_PICKAXE = get("diamond_pickaxe");
+            DIAMOND_AXE = get("diamond_axe");
+            STICK = get("stick");
+            BOWL = get("bowl");
+            MUSHROOM_STEW = get("mushroom_stew");
+            GOLDEN_SWORD = get("golden_sword");
+            GOLDEN_SHOVEL = get("golden_shovel");
+            GOLDEN_PICKAXE = get("golden_pickaxe");
+            GOLDEN_AXE = get("golden_axe");
+            STRING = get("string");
+            FEATHER = get("feather");
+            GUNPOWDER = get("gunpowder");
+            WOODEN_HOE = get("wooden_hoe");
+            STONE_HOE = get("stone_hoe");
+            IRON_HOE = get("iron_hoe");
+            DIAMOND_HOE = get("diamond_hoe");
+            GOLDEN_HOE = get("golden_hoe");
+            WHEAT_SEEDS = get("wheat_seeds");
+            WHEAT = get("wheat");
+            BREAD = get("bread");
+            LEATHER_HELMET = (ItemArmor) get("leather_helmet");
+            LEATHER_CHESTPLATE = (ItemArmor) get("leather_chestplate");
+            LEATHER_LEGGINGS = (ItemArmor) get("leather_leggings");
+            LEATHER_BOOTS = (ItemArmor) get("leather_boots");
+            CHAINMAIL_HELMET = (ItemArmor) get("chainmail_helmet");
+            CHAINMAIL_CHESTPLATE = (ItemArmor) get("chainmail_chestplate");
+            CHAINMAIL_LEGGINGS = (ItemArmor) get("chainmail_leggings");
+            CHAINMAIL_BOOTS = (ItemArmor) get("chainmail_boots");
+            IRON_HELMET = (ItemArmor) get("iron_helmet");
+            IRON_CHESTPLATE = (ItemArmor) get("iron_chestplate");
+            IRON_LEGGINGS = (ItemArmor) get("iron_leggings");
+            IRON_BOOTS = (ItemArmor) get("iron_boots");
+            DIAMOND_HELMET = (ItemArmor) get("diamond_helmet");
+            DIAMOND_CHESTPLATE = (ItemArmor) get("diamond_chestplate");
+            DIAMOND_LEGGINGS = (ItemArmor) get("diamond_leggings");
+            DIAMOND_BOOTS = (ItemArmor) get("diamond_boots");
+            GOLDEN_HELMET = (ItemArmor) get("golden_helmet");
+            GOLDEN_CHESTPLATE = (ItemArmor) get("golden_chestplate");
+            GOLDEN_LEGGINGS = (ItemArmor) get("golden_leggings");
+            GOLDEN_BOOTS = (ItemArmor) get("golden_boots");
+            MYSTERIOUS_HELMET = (ItemArmor) get("mysterious_helmet");
+            MYSTERIOUS_CHESTPLATE = (ItemArmor) get("mysterious_chestplate");
+            MYSTERIOUS_LEGGINGS = (ItemArmor) get("mysterious_leggings");
+            MYSTERIOUS_BOOTS = (ItemArmor) get("mysterious_boots");
+            FLINT = get("flint");
+            PORKCHOP = get("porkchop");
+            COOKED_PORKCHOP = get("cooked_porkchop");
+            PAINTING = get("painting");
+            GOLDEN_APPLE = get("golden_apple");
+            SIGN = get("sign");
+            WOODEN_DOOR = get("wooden_door");
+            SPRUCE_DOOR = get("spruce_door");
+            BIRCH_DOOR = get("birch_door");
+            JUNGLE_DOOR = get("jungle_door");
+            ACACIA_DOOR = get("acacia_door");
+            DARK_OAK_DOOR = get("dark_oak_door");
+            BUCKET = get("bucket");
+            WATER_BUCKET = get("water_bucket");
+            LAVA_BUCKET = get("lava_bucket");
+            MINECART = get("minecart");
+            SADDLE = get("saddle");
+            IRON_DOOR = get("iron_door");
+            REDSTONE = get("redstone");
+            SNOWBALL = get("snowball");
+            aH = get("boat");
+            aI = get("spruce_boat");
+            aJ = get("birch_boat");
+            aK = get("jungle_boat");
+            aL = get("acacia_boat");
+            aM = get("dark_oak_boat");
+            LEATHER = get("leather");
+            MILK_BUCKET = get("milk_bucket");
+            BRICK = get("brick");
+            CLAY_BALL = get("clay_ball");
+            REEDS = get("reeds");
+            PAPER = get("paper");
+            BOOK = get("book");
+            SLIME = get("slime_ball");
+            CHEST_MINECART = get("chest_minecart");
+            FURNACE_MINECART = get("furnace_minecart");
+            EGG = get("egg");
+            COMPASS = get("compass");
+            FISHING_ROD = (ItemFishingRod) get("fishing_rod");
+            CLOCK = get("clock");
+            GLOWSTONE_DUST = get("glowstone_dust");
+            FISH = get("fish");
+            COOKED_FISH = get("cooked_fish");
+            DYE = get("dye");
+            BONE = get("bone");
+            SUGAR = get("sugar");
+            CAKE = get("cake");
+            BED = get("bed");
+            REPEATER = get("repeater");
+            COOKIE = get("cookie");
+            FILLED_MAP = (ItemWorldMap) get("filled_map");
+            SHEARS = (ItemShears) get("shears");
+            MELON = get("melon");
+            PUMPKIN_SEEDS = get("pumpkin_seeds");
+            MELON_SEEDS = get("melon_seeds");
+            BEEF = get("beef");
+            COOKED_BEEF = get("cooked_beef");
+            CHICKEN = get("chicken");
+            COOKED_CHICKEN = get("cooked_chicken");
+            MUTTON = get("mutton");
+            COOKED_MUTTON = get("cooked_mutton");
+            RABBIT = get("rabbit");
+            COOKED_RABBIT = get("cooked_rabbit");
+            RABBIT_STEW = get("rabbit_stew");
+            RABBIT_FOOT = get("rabbit_foot");
+            RABBIT_HIDE = get("rabbit_hide");
+            ROTTEN_FLESH = get("rotten_flesh");
+            ENDER_PEARL = get("ender_pearl");
+            BLAZE_ROD = get("blaze_rod");
+            GHAST_TEAR = get("ghast_tear");
+            GOLD_NUGGET = get("gold_nugget");
+            NETHER_WART = get("nether_wart");
+            POTION = (ItemPotion) get("potion");
+            SPLASH_POTION = (ItemPotion) get("splash_potion");
+            LINGERING_POTION = (ItemPotion) get("lingering_potion");
+            GLASS_BOTTLE = get("glass_bottle");
+            DRAGON_BREATH = get("dragon_breath");
+            SPIDER_EYE = get("spider_eye");
+            FERMENTED_SPIDER_EYE = get("fermented_spider_eye");
+            BLAZE_POWDER = get("blaze_powder");
+            MAGMA_CREAM = get("magma_cream");
+            BREWING_STAND = get("brewing_stand");
+            CAULDRON = get("cauldron");
+            ENDER_EYE = get("ender_eye");
+            SPECKLED_MELON = get("speckled_melon");
+            SPAWN_EGG = get("spawn_egg");
+            EXPERIENCE_BOTTLE = get("experience_bottle");
+            FIRE_CHARGE = get("fire_charge");
+            WRITABLE_BOOK = get("writable_book");
+            WRITTEN_BOOK = get("written_book");
+            EMERALD = get("emerald");
+            ITEM_FRAME = get("item_frame");
+            FLOWER_POT = get("flower_pot");
+            CARROT = get("carrot");
+            POTATO = get("potato");
+            BAKED_POTATO = get("baked_potato");
+            POISONOUS_POTATO = get("poisonous_potato");
+            MAP = (ItemMapEmpty) get("map");
+            GOLDEN_CARROT = get("golden_carrot");
+            SKULL = get("skull");
+            CARROT_ON_A_STICK = get("carrot_on_a_stick");
+            NETHER_STAR = get("nether_star");
+            PUMPKIN_PIE = get("pumpkin_pie");
+            FIREWORKS = get("fireworks");
+            FIREWORK_CHARGE = get("firework_charge");
+            ENCHANTED_BOOK = get("enchanted_book");
+            COMPARATOR = get("comparator");
+            NETHERBRICK = get("netherbrick");
+            QUARTZ = get("quartz");
+            TNT_MINECART = get("tnt_minecart");
+            HOPPER_MINECART = get("hopper_minecart");
+            ARMOR_STAND = (ItemArmorStand) get("armor_stand");
+            IRON_HORSE_ARMOR = get("iron_horse_armor");
+            GOLDEN_HORSE_ARMOR = get("golden_horse_armor");
+            DIAMOND_HORSE_ARMOR = get("diamond_horse_armor");
+            LEAD = get("lead");
+            NAME_TAG = get("name_tag");
+            COMMAND_BLOCK_MINECART = get("command_block_minecart");
+            RECORD_13 = get("record_13");
+            RECORD_CAT = get("record_cat");
+            RECORD_BLOCKS = get("record_blocks");
+            RECORD_CHIRP = get("record_chirp");
+            RECORD_FAR = get("record_far");
+            RECORD_MALL = get("record_mall");
+            RECORD_MELLOHI = get("record_mellohi");
+            RECORD_STAL = get("record_stal");
+            RECORD_STRAD = get("record_strad");
+            RECORD_WARD = get("record_ward");
+            RECORD_11 = get("record_11");
+            RECORD_WAIT = get("record_wait");
+            PRISMARINE_SHARD = get("prismarine_shard");
+            PRISMARINE_CRYSTALS = get("prismarine_crystals");
+            BANNER = get("banner");
+            cQ = get("end_crystal");
+            SHIELD = get("shield");
+            cS = get("elytra");
+            CHORUS_FRUIT = get("chorus_fruit");
+            CHORUS_FRUIT_POPPED = get("chorus_fruit_popped");
+            BEETROOT_SEEDS = get("beetroot_seeds");
+            BEETROOT = get("beetroot");
+            BEETROOT_SOUP = get("beetroot_soup");
+            cY = get("totem_of_undying");
+            cZ = get("shulker_shell");
+            da = get("iron_nugget");
+            db = get("knowledge_book");
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index a8fc7e4..726f4ed 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -25,6 +25,8 @@ import javax.annotation.Nullable;
 
 import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
 
+import net.cweepahcraft.item.ServerSpecificItem; // CweepahCraft
+
 public class PacketDataSerializer extends ByteBuf {
 
     private final ByteBuf a;
@@ -239,9 +241,6 @@ public class PacketDataSerializer extends ByteBuf {
         if (itemstack.isEmpty() || itemstack.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
             this.writeShort(-1);
         } else {
-            this.writeShort(Item.getId(itemstack.getItem()));
-            this.writeByte(itemstack.getCount());
-            this.writeShort(itemstack.getData());
             NBTTagCompound nbttagcompound = null;
 
             if (itemstack.getItem().usesDurability() || itemstack.getItem().p()) {
@@ -252,7 +251,34 @@ public class PacketDataSerializer extends ByteBuf {
                 nbttagcompound = itemstack.getTag();
             }
 
-            this.a(nbttagcompound);
+            // CweepahCraft start
+            Item serverItem = itemstack.getItem();
+
+            if (serverItem instanceof ServerSpecificItem && ((ServerSpecificItem) serverItem).isApplicable(itemstack)) {
+                if (nbttagcompound == null) {
+                    nbttagcompound = new NBTTagCompound();
+                    itemstack = itemstack.cloneItemStack();
+                    itemstack.setTag(nbttagcompound);
+                }
+
+                nbttagcompound.setShort("ServerId", (short) Item.getId(serverItem));
+
+                NBTTagCompound display = nbttagcompound.getCompound("display");
+                if (!display.hasKey("Name")) {
+                    display.setString("Name", serverItem.j(null));
+                    nbttagcompound.set("display", display);
+                }
+
+                itemstack = ((ServerSpecificItem) serverItem).toClientStack(itemstack);
+            }
+            // CweepahCraft end
+
+            // CweepahCraft start - moved down from above
+            this.writeShort(Item.getId(itemstack.getItem()));
+            this.writeByte(itemstack.getCount());
+            this.writeShort(itemstack.getData());
+            // CweepahCraft end
+            this.a(itemstack.getTag());
         }
 
         return this;
@@ -267,8 +293,25 @@ public class PacketDataSerializer extends ByteBuf {
             byte b0 = this.readByte();
             short short1 = this.readShort();
             ItemStack itemstack = new ItemStack(Item.getById(short0), b0, short1);
+            // CweepahCraft start
+            NBTTagCompound compound = this.j();
+
+            if (compound != null && compound.hasKeyOfType("ServerId", 2)) {
+                Item serverItem = Item.getById(compound.getShort("ServerId"));
+                compound.remove("ServerId");
+
+                NBTTagCompound display = compound.getCompound("display");
+                if (display.hasKeyOfType("Name", 8)) {
+                    if (display.getString("Name").equals(serverItem.j(null))) {
+                        display.remove("Name");
+                    }
+                }
+
+                itemstack.setTag(compound);
+                itemstack = ((ServerSpecificItem) serverItem).toServerStack(itemstack);
+            }
+            // CweepahCraft end
 
-            itemstack.setTag(this.j());
             // CraftBukkit start
             if (itemstack.getTag() != null) {
                 CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack));
diff --git a/src/main/java/net/minecraft/server/RecipeArmorDye.java b/src/main/java/net/minecraft/server/RecipeArmorDye.java
index 123002e..4a4cf7e 100644
--- a/src/main/java/net/minecraft/server/RecipeArmorDye.java
+++ b/src/main/java/net/minecraft/server/RecipeArmorDye.java
@@ -22,7 +22,7 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
                 if (itemstack1.getItem() instanceof ItemArmor) {
                     ItemArmor itemarmor = (ItemArmor) itemstack1.getItem();
 
-                    if (itemarmor.d() != ItemArmor.EnumArmorMaterial.LEATHER || !itemstack.isEmpty()) {
+                    if (!itemarmor.d().isDyeable() || !itemstack.isEmpty()) {
                         return false;
                     }
 
@@ -59,7 +59,7 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
             if (!itemstack1.isEmpty()) {
                 if (itemstack1.getItem() instanceof ItemArmor) {
                     itemarmor = (ItemArmor) itemstack1.getItem();
-                    if (itemarmor.d() != ItemArmor.EnumArmorMaterial.LEATHER || !itemstack.isEmpty()) {
+                    if (!itemarmor.d().isDyeable() || !itemstack.isEmpty()) {
                         return ItemStack.a;
                     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 49ebad2..9612bf8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -76,6 +76,10 @@ public final class CraftItemFactory implements ItemFactory {
         case LEATHER_CHESTPLATE:
         case LEATHER_LEGGINGS:
         case LEATHER_BOOTS:
+        case MYSTERIOUS_HELMET:
+        case MYSTERIOUS_CHESTPLATE:
+        case MYSTERIOUS_LEGGINGS:
+        case MYSTERIOUS_BOOTS:
             return meta instanceof CraftMetaLeatherArmor ? meta : new CraftMetaLeatherArmor(meta);
         case POTION:
         case SPLASH_POTION:
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index fb1dc54..cb30efd 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -335,6 +335,10 @@ public final class CraftItemStack extends ItemStack {
             case LEATHER_CHESTPLATE:
             case LEATHER_LEGGINGS:
             case LEATHER_BOOTS:
+            case MYSTERIOUS_HELMET:
+            case MYSTERIOUS_CHESTPLATE:
+            case MYSTERIOUS_LEGGINGS:
+            case MYSTERIOUS_BOOTS:
                 return new CraftMetaLeatherArmor(item.getTag());
             case POTION:
             case SPLASH_POTION:
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
index 5478e9b..2e306b7 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
@@ -71,6 +71,10 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
             case LEATHER_CHESTPLATE:
             case LEATHER_LEGGINGS:
             case LEATHER_BOOTS:
+            case MYSTERIOUS_HELMET:
+            case MYSTERIOUS_CHESTPLATE:
+            case MYSTERIOUS_LEGGINGS:
+            case MYSTERIOUS_BOOTS:
                 return true;
             default:
                 return false;
-- 
1.9.1

