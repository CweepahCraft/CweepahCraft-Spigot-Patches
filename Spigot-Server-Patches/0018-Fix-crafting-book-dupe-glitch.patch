From c9b30b8d357582ae00c7e9bdf9d62fb26a81f1d5 Mon Sep 17 00:00:00 2001
From: Jacob Martin <jjm_223@hotmail.com>
Date: Fri, 28 Jul 2017 13:45:03 -0500
Subject: [PATCH 18/18] Fix crafting book dupe glitch

---
 src/main/java/net/minecraft/server/ItemStack.java  |  4 ++
 .../net/minecraft/server/PlayerConnection.java     | 44 +++++++++++++---------
 2 files changed, 31 insertions(+), 17 deletions(-)

diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index 0dcea61..d63f349 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -487,6 +487,10 @@ public final class ItemStack {
     }
     // Spigot End
 
+    public static boolean areSimilar(ItemStack item1, ItemStack item2) {
+        return item1.getItem() == item2.getItem() && item1.damage == item2.damage && ((item1.tag == null && item2.tag == null) || (item1.tag != null && item1.tag.equals(item2.tag)));
+    }
+
     public static boolean matches(ItemStack itemstack, ItemStack itemstack1) {
         return itemstack.isEmpty() && itemstack1.isEmpty() ? true : (!itemstack.isEmpty() && !itemstack1.isEmpty() ? itemstack.d(itemstack1) : false);
     }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index c4d09bf..8c48afe 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1981,7 +1981,9 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinautorecipe.a(), packetplayinautorecipe.b(), true));
             Iterator iterator;
             PacketPlayInAutoRecipe.a packetplayinautorecipe_a;
-            ItemStack itemstack;
+            ItemStack source;
+            ItemStack dest;
+            ItemStack clientStack;
             int i;
 
             if (!packetplayinautorecipe.d().isEmpty()) {
@@ -1989,25 +1991,28 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
                 while (iterator.hasNext()) {
                     packetplayinautorecipe_a = (PacketPlayInAutoRecipe.a) iterator.next();
-                    itemstack = this.player.activeContainer.getSlot(packetplayinautorecipe_a.b).getItem();
-                    if (this.a(packetplayinautorecipe_a.a, itemstack)) {
-                        i = packetplayinautorecipe_a.a.getCount();
+                    source = this.player.activeContainer.getSlot(packetplayinautorecipe_a.b).getItem();
+                    dest = this.player.inventory.getItem(packetplayinautorecipe_a.c);
+                    clientStack = packetplayinautorecipe_a.a;
+                    if (this.a(clientStack, source)) {
+                        i = clientStack.getCount();
                         if (packetplayinautorecipe_a.c == -1) {
-                            this.player.drop(packetplayinautorecipe_a.a, true);
+                            this.player.drop(clientStack, true);
                         } else {
-                            ItemStack itemstack1 = this.player.inventory.getItem(packetplayinautorecipe_a.c);
-
-                            if (itemstack1.isEmpty()) {
-                                this.player.inventory.setItem(packetplayinautorecipe_a.c, packetplayinautorecipe_a.a);
+                            if (dest.isEmpty()) {
+                                this.player.inventory.setItem(packetplayinautorecipe_a.c, clientStack);
+                            } else if (ItemStack.areSimilar(dest, source) && dest.getCount() + i <= dest.getMaxStackSize()) {
+                                dest.add(i);
                             } else {
-                                itemstack1.add(i);
+                                player.getBukkitEntity().updateInventory();
+                                return;
                             }
                         }
 
-                        if (itemstack.getCount() == i) {
+                        if (source.getCount() <= i) {
                             this.player.activeContainer.setItem(packetplayinautorecipe_a.b, ItemStack.a);
                         } else {
-                            itemstack.subtract(i);
+                            source.subtract(i);
                         }
                     }
                 }
@@ -2018,13 +2023,18 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
                 while (iterator.hasNext()) {
                     packetplayinautorecipe_a = (PacketPlayInAutoRecipe.a) iterator.next();
-                    itemstack = this.player.inventory.getItem(packetplayinautorecipe_a.c);
-                    if (this.a(packetplayinautorecipe_a.a, itemstack)) {
-                        i = packetplayinautorecipe_a.a.getCount();
-                        if (itemstack.getCount() == i) {
+                    source = this.player.inventory.getItem(packetplayinautorecipe_a.c);
+                    dest = this.player.activeContainer.getSlot(packetplayinautorecipe_a.b).getItem();
+                    clientStack = packetplayinautorecipe_a.a;
+                    if (this.a(clientStack, source)) {
+                        i = clientStack.getCount();
+                        if (source.getCount() == i) {
                             this.player.inventory.splitWithoutUpdate(packetplayinautorecipe_a.c);
+                        } else if (source.getCount() >= i) {
+                            source.subtract(i);
                         } else {
-                            itemstack.subtract(i);
+                            player.getBukkitEntity().updateInventory();
+                            return;
                         }
 
                         this.player.activeContainer.b(packetplayinautorecipe_a.b, packetplayinautorecipe_a.a);
-- 
1.9.1

