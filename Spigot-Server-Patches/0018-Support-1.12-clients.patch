From 8f9f042dd4135d6592961e81f769644d319520f3 Mon Sep 17 00:00:00 2001
From: Jacob Martin <jjm_223@hotmail.com>
Date: Fri, 4 Aug 2017 16:34:59 -0500
Subject: [PATCH 18/18] Support 1.12 clients

---
 .../packet/PacketPlayInAutoRecipeLegacy.java       |  30 +++
 .../java/net/minecraft/server/EnumProtocol.java    | 261 +++++++++++++++++++++
 .../net/minecraft/server/HandshakeListener.java    |   6 +-
 .../java/net/minecraft/server/NetworkManager.java  |   9 +
 .../java/net/minecraft/server/PacketDecoder.java   |  64 +++++
 .../java/net/minecraft/server/PacketEncoder.java   |  66 ++++++
 .../net/minecraft/server/PacketStatusListener.java |   8 +-
 .../net/minecraft/server/PlayerConnection.java     |  10 +
 8 files changed, 450 insertions(+), 4 deletions(-)
 create mode 100644 src/main/java/net/cweepahcraft/packet/PacketPlayInAutoRecipeLegacy.java
 create mode 100644 src/main/java/net/minecraft/server/EnumProtocol.java
 create mode 100644 src/main/java/net/minecraft/server/PacketDecoder.java
 create mode 100644 src/main/java/net/minecraft/server/PacketEncoder.java

diff --git a/src/main/java/net/cweepahcraft/packet/PacketPlayInAutoRecipeLegacy.java b/src/main/java/net/cweepahcraft/packet/PacketPlayInAutoRecipeLegacy.java
new file mode 100644
index 0000000..4cf72a9
--- /dev/null
+++ b/src/main/java/net/cweepahcraft/packet/PacketPlayInAutoRecipeLegacy.java
@@ -0,0 +1,30 @@
+package net.cweepahcraft.packet;
+
+import net.minecraft.server.Packet;
+import net.minecraft.server.PacketDataSerializer;
+import net.minecraft.server.PacketListenerPlayIn;
+import net.minecraft.server.PacketPlayInAutoRecipe;
+
+import java.io.IOException;
+
+public class PacketPlayInAutoRecipeLegacy extends PacketPlayInAutoRecipe implements Packet<PacketListenerPlayIn> {
+    @Override
+    public void a(PacketDataSerializer serializer) throws IOException { // Read
+        serializer.readByte();
+        serializer.readShort();
+        readAutoRecipePacketListNOP(serializer);
+        readAutoRecipePacketListNOP(serializer);
+    }
+
+    private void readAutoRecipePacketListNOP(PacketDataSerializer serializer) throws IOException {
+        short size = serializer.readShort();
+        for (int i = 0; i < size; ++i) {
+            serializer.k();
+            serializer.readByte();
+            serializer.readByte();
+        }
+    }
+
+    @Override
+    public void b(PacketDataSerializer serializer) throws IOException {} // Write
+}
diff --git a/src/main/java/net/minecraft/server/EnumProtocol.java b/src/main/java/net/minecraft/server/EnumProtocol.java
new file mode 100644
index 0000000..6107855
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumProtocol.java
@@ -0,0 +1,261 @@
+package net.minecraft.server;
+
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import com.google.common.collect.Maps;
+import org.apache.logging.log4j.LogManager;
+
+import javax.annotation.Nullable;
+import java.util.Iterator;
+import java.util.Map;
+
+public enum EnumProtocol {
+
+    HANDSHAKING(-1) {
+        {
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketHandshakingInSetProtocol.class);
+        }
+    }, PLAY(0) {
+        {
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntity.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntityExperienceOrb.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntityWeather.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntityLiving.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntityPainting.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutNamedEntitySpawn.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutAnimation.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutStatistic.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBlockBreakAnimation.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTileEntityData.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBlockAction.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBlockChange.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBoss.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutServerDifficulty.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTabComplete.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutChat.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutMultiBlockChange.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTransaction.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCloseWindow.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutOpenWindow.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWindowItems.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWindowData.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSetSlot.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSetCooldown.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCustomPayload.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCustomSoundEffect.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutKickDisconnect.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityStatus.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutExplosion.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUnloadChunk.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutGameStateChange.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutKeepAlive.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutMapChunk.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWorldEvent.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWorldParticles.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutLogin.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutMap.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntity.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntity.PacketPlayOutRelEntityMove.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntity.PacketPlayOutRelEntityMoveLook.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntity.PacketPlayOutEntityLook.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutVehicleMove.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutOpenSignEditor.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutAutoRecipe.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutAbilities.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCombatEvent.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutPlayerInfo.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutPosition.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBed.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutRecipes.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityDestroy.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutRemoveEntityEffect.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutResourcePackSend.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutRespawn.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityHeadRotation.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSelectAdvancementTab.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWorldBorder.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCamera.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutHeldItemSlot.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutScoreboardDisplayObjective.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityMetadata.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutAttachEntity.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityVelocity.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityEquipment.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutExperience.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUpdateHealth.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutScoreboardObjective.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutMount.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutScoreboardTeam.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutScoreboardScore.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnPosition.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUpdateTime.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTitle.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutNamedSoundEffect.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutPlayerListHeaderFooter.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCollect.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityTeleport.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutAdvancements.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUpdateAttributes.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityEffect.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInTeleportAccept.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInTabComplete.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInChat.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInClientCommand.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInSettings.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInTransaction.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInEnchantItem.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInWindowClick.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInCloseWindow.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInCustomPayload.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInUseEntity.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInKeepAlive.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInFlying.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInFlying.PacketPlayInPosition.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInFlying.PacketPlayInPositionLook.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInFlying.PacketPlayInLook.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInVehicleMove.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInBoatMove.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInAutoRecipe.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInAbilities.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInBlockDig.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInEntityAction.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInSteerVehicle.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInRecipeDisplayed.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInResourcePackStatus.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInAdvancements.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInHeldItemSlot.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInSetCreativeSlot.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInUpdateSign.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInArmAnimation.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInSpectate.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInUseItem.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInBlockPlace.class);
+        }
+    }, STATUS(1) {
+        {
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketStatusInStart.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketStatusOutServerInfo.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketStatusInPing.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketStatusOutPong.class);
+        }
+    }, LOGIN(2) {
+        {
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketLoginOutDisconnect.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketLoginOutEncryptionBegin.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketLoginOutSuccess.class);
+            this.a(EnumProtocolDirection.CLIENTBOUND, PacketLoginOutSetCompression.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketLoginInStart.class);
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketLoginInEncryptionBegin.class);
+        }
+    };
+
+    private static final EnumProtocol[] e = new EnumProtocol[4];
+    private static final Map<Class<? extends Packet<?>>, EnumProtocol> f = Maps.newHashMap();
+    private final int g;
+    private final Map<EnumProtocolDirection, BiMap<Integer, Class<? extends Packet<?>>>> h;
+
+    EnumProtocol(int i) {
+        this.h = Maps.newEnumMap(EnumProtocolDirection.class);
+        this.g = i;
+    }
+
+    protected EnumProtocol a(EnumProtocolDirection enumprotocoldirection, Class<? extends Packet<?>> oclass) {
+        Object object = this.h.get(enumprotocoldirection);
+
+        if (object == null) {
+            object = HashBiMap.create();
+            this.h.put(enumprotocoldirection, (BiMap<Integer, Class<? extends Packet<?>>>) object); // CweepahCraft - Decompile error
+        }
+
+        if (((BiMap) object).containsValue(oclass)) {
+            String s = enumprotocoldirection + " packet " + oclass + " is already known to ID " + ((BiMap) object).inverse().get(oclass);
+
+            LogManager.getLogger().fatal(s);
+            throw new IllegalArgumentException(s);
+        } else {
+            ((BiMap) object).put(((BiMap) object).size(), oclass);
+            return this;
+        }
+    }
+
+    public Integer a(EnumProtocolDirection enumprotocoldirection, Packet<?> packet) throws Exception {
+        return (Integer) ((BiMap) this.h.get(enumprotocoldirection)).inverse().get(packet.getClass());
+    }
+
+    // CweepahCraft - Protocol hack
+    public Integer getLegacyId(EnumProtocolDirection direction, Packet<?> packet) throws Exception {
+        Integer original = a(direction, packet);
+        if (this == PLAY && original != null && direction == EnumProtocolDirection.CLIENTBOUND && original > 43) {
+            return original - 1;
+        } else {
+            return original;
+        }
+    }
+    // CweepahCraft end
+
+    @Nullable
+    public Packet<?> a(EnumProtocolDirection enumprotocoldirection, int i) throws IllegalAccessException, InstantiationException {
+        Class oclass = (Class) ((BiMap) this.h.get(enumprotocoldirection)).get(i);
+
+        return oclass == null ? null : (Packet) oclass.newInstance();
+    }
+
+    // CweepahCraft - Protocol hack
+    public Packet<?> getLegacyPacket(EnumProtocolDirection direction, int i) throws IllegalAccessException, InstantiationException {
+        if (this == PLAY && direction == EnumProtocolDirection.SERVERBOUND && i > 0 && i < 19) {
+            return a(direction, i - 1);
+        } else {
+            return a(direction, i);
+        }
+    }
+    // CweepahCraft end
+
+    public int a() {
+        return this.g;
+    }
+
+    public static EnumProtocol a(int i) {
+        return i >= -1 && i <= 2 ? EnumProtocol.e[i - -1] : null;
+    }
+
+    public static EnumProtocol a(Packet<?> packet) {
+        return EnumProtocol.f.get(packet.getClass());
+    }
+
+    static {
+        EnumProtocol[] aenumprotocol = values();
+        int i = aenumprotocol.length;
+
+        for (int j = 0; j < i; ++j) {
+            EnumProtocol enumprotocol = aenumprotocol[j];
+            int k = enumprotocol.a();
+
+            if (k < -1 || k > 2) {
+                throw new Error("Invalid protocol ID " + Integer.toString(k));
+            }
+
+            EnumProtocol.e[k - -1] = enumprotocol;
+            Iterator iterator = enumprotocol.h.keySet().iterator();
+
+            while (iterator.hasNext()) {
+                EnumProtocolDirection enumprotocoldirection = (EnumProtocolDirection) iterator.next();
+
+                Class oclass;
+
+                for (Iterator iterator1 = ((BiMap) enumprotocol.h.get(enumprotocoldirection)).values().iterator(); iterator1.hasNext(); EnumProtocol.f.put(oclass, enumprotocol)) {
+                    oclass = (Class) iterator1.next();
+                    if (EnumProtocol.f.containsKey(oclass) && EnumProtocol.f.get(oclass) != enumprotocol) {
+                        throw new Error("Packet " + oclass + " is already assigned to protocol " + EnumProtocol.f.get(oclass) + " - can\'t reassign to " + enumprotocol);
+                    }
+
+                    try {
+                        oclass.newInstance();
+                    } catch (Throwable throwable) {
+                        throw new Error("Packet " + oclass + " fails instantiation checks! " + oclass);
+                    }
+                }
+            }
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 0aa57b9..925b6b6 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -22,6 +22,8 @@ public class HandshakeListener implements PacketHandshakingInListener {
     }
 
     public void a(PacketHandshakingInSetProtocol packethandshakinginsetprotocol) {
+        this.b.setProtocolVersion(packethandshakinginsetprotocol.b()); // CweepahCraft - Protocol hack
+
         switch (packethandshakinginsetprotocol.a()) {
         case LOGIN:
             this.b.setProtocol(EnumProtocol.LOGIN);
@@ -66,7 +68,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 chatmessage = new ChatMessage( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), "1.12.1" ) ); // Spigot
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
                 this.b.close(chatmessage);
-            } else if (packethandshakinginsetprotocol.b() < 338) {
+            } else if (packethandshakinginsetprotocol.b() < 338 && packethandshakinginsetprotocol.b() != 335 /* CweepahCraft - protocol hack */) {
                 chatmessage = new ChatMessage( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), "1.12.1" ) ); // Spigot
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
                 this.b.close(chatmessage);
@@ -98,7 +100,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
 
         case STATUS:
             this.b.setProtocol(EnumProtocol.STATUS);
-            this.b.setPacketListener(new PacketStatusListener(this.a, this.b));
+            this.b.setPacketListener(new PacketStatusListener(this.a, this.b, packethandshakinginsetprotocol.b()));
             break;
 
         default:
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index d583cce..0ace7bf 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -76,6 +76,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     private boolean o;
     private boolean p;
 
+    // CweepahCraft - Protocol hack
+    public static final AttributeKey<Integer> PROTOCOL_VERSION = AttributeKey.valueOf("protocol_version");
+
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
         this.h = enumprotocoldirection;
     }
@@ -96,6 +99,12 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     }
 
+    // CweepahCraft - Protocol hack
+    public void setProtocolVersion(int version) {
+        this.channel.attr(NetworkManager.PROTOCOL_VERSION).set(version);
+    }
+    // CweepahCraft end
+
     public void setProtocol(EnumProtocol enumprotocol) {
         this.channel.attr(NetworkManager.c).set(enumprotocol);
         this.channel.config().setAutoRead(true);
diff --git a/src/main/java/net/minecraft/server/PacketDecoder.java b/src/main/java/net/minecraft/server/PacketDecoder.java
new file mode 100644
index 0000000..19eab8d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketDecoder.java
@@ -0,0 +1,64 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.ByteToMessageDecoder;
+import java.io.IOException;
+import java.util.List;
+
+import net.cweepahcraft.packet.PacketPlayInAutoRecipeLegacy;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
+
+public class PacketDecoder extends ByteToMessageDecoder {
+
+    private static final Logger a = LogManager.getLogger();
+    private static final Marker b = MarkerManager.getMarker("PACKET_RECEIVED", NetworkManager.b);
+    private final EnumProtocolDirection c;
+
+    public PacketDecoder(EnumProtocolDirection enumprotocoldirection) {
+        this.c = enumprotocoldirection;
+    }
+
+    protected void decode(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, List<Object> list) throws Exception {
+        if (bytebuf.readableBytes() != 0) {
+            // CweepahCraft - Protocol hack
+            EnumProtocol protocol = channelhandlercontext.channel().attr(NetworkManager.c).get();
+            PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
+            int i = packetdataserializer.g();
+            Packet packet;
+            int version = 338;
+
+            if (channelhandlercontext.channel().hasAttr(NetworkManager.PROTOCOL_VERSION)) {
+                version = channelhandlercontext.channel().attr(NetworkManager.PROTOCOL_VERSION).get();
+            }
+
+            if (version == 338) {
+                packet = ((EnumProtocol) protocol).a(this.c, i);
+            } else {
+                if (protocol == EnumProtocol.PLAY && i == 1 /* 1.12 prepare crafting grid packet ID */) {
+                    packet = new PacketPlayInAutoRecipeLegacy();
+                } else {
+                    packet = protocol.getLegacyPacket(this.c, i);
+                }
+            }
+            // CweepahCraft end
+
+            if (packet == null) {
+                throw new IOException("Bad packet id " + i);
+            } else {
+                packet.a(packetdataserializer);
+                if (packetdataserializer.readableBytes() > 0) {
+                    throw new IOException("Packet " + protocol.a() + "/" + i + " (" + packet.getClass().getSimpleName() + ") was larger than I expected, found " + packetdataserializer.readableBytes() + " bytes extra whilst reading packet " + i);
+                } else {
+                    list.add(packet);
+                    if (PacketDecoder.a.isDebugEnabled()) {
+                        PacketDecoder.a.debug(PacketDecoder.b, " IN: [{}:{}] {}", protocol, i, packet.getClass().getName());
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
new file mode 100644
index 0000000..66616f5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -0,0 +1,66 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.MessageToByteEncoder;
+import java.io.IOException;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
+
+public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
+
+    private static final Logger a = LogManager.getLogger();
+    private static final Marker b = MarkerManager.getMarker("PACKET_SENT", NetworkManager.b);
+    private final EnumProtocolDirection c;
+
+    public PacketEncoder(EnumProtocolDirection enumprotocoldirection) {
+        this.c = enumprotocoldirection;
+    }
+
+    protected void a(ChannelHandlerContext channelhandlercontext, Packet<?> packet, ByteBuf bytebuf) throws Exception {
+        // CweepahCraft - Protocol hack
+        int version = 338;
+        EnumProtocol enumprotocol = channelhandlercontext.channel().attr(NetworkManager.c).get();
+        Integer packetId;
+
+        if (channelhandlercontext.channel().hasAttr(NetworkManager.PROTOCOL_VERSION)) {
+            version = channelhandlercontext.channel().attr(NetworkManager.PROTOCOL_VERSION).get();
+        }
+
+        if (enumprotocol == null) {
+            throw new RuntimeException("ConnectionProtocol unknown: " + packet.toString());
+        } else {
+            if (version == 338) {
+                packetId = enumprotocol.a(this.c, packet);
+            } else {
+                packetId = enumprotocol.getLegacyId(this.c, packet);
+            }
+            // CweepahCraft end
+
+            if (PacketEncoder.a.isDebugEnabled()) {
+                PacketEncoder.a.debug(PacketEncoder.b, "OUT: [{}:{}] {}", channelhandlercontext.channel().attr(NetworkManager.c).get(), packetId, packet.getClass().getName());
+            }
+
+            if (packetId == null) {
+                throw new IOException("Can\'t serialize unregistered packet");
+            } else {
+                PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
+
+                packetdataserializer.d(packetId);
+
+                try {
+                    packet.b(packetdataserializer);
+                } catch (Throwable throwable) {
+                    PacketEncoder.a.error(throwable);
+                }
+
+            }
+        }
+    }
+
+    protected void encode(ChannelHandlerContext channelhandlercontext, Packet<?> object, ByteBuf bytebuf) throws Exception { // CweepahCraft - decompile error
+        this.a(channelhandlercontext, object, bytebuf);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index 313bb00..0f07f2f 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -18,9 +18,13 @@ public class PacketStatusListener implements PacketStatusInListener {
     private final NetworkManager networkManager;
     private boolean d;
 
-    public PacketStatusListener(MinecraftServer minecraftserver, NetworkManager networkmanager) {
+    // CweepahCraft - Protocol hack
+    private int protocolVersion;
+
+    public PacketStatusListener(MinecraftServer minecraftserver, NetworkManager networkmanager, int protocolVersion /* CweepahCraft */) {
         this.minecraftServer = minecraftserver;
         this.networkManager = networkmanager;
+        this.protocolVersion = protocolVersion;
     }
 
     public void a(IChatBaseComponent ichatbasecomponent) {}
@@ -121,7 +125,7 @@ public class PacketStatusListener implements PacketStatusInListener {
             ping.setFavicon(event.icon.value);
             ping.setMOTD(new ChatComponentText(event.getMotd()));
             ping.setPlayerSample(playerSample);
-            int version = minecraftServer.getServerPing().getServerData().getProtocolVersion();
+            int version = protocolVersion == 335 ? 335 : minecraftServer.getServerPing().getServerData().getProtocolVersion(); // CweepahCraft - Protocol hack
             ping.setServerInfo(new ServerPing.ServerData(minecraftServer.getServerModName() + " " + minecraftServer.getVersion(), version));
 
             this.networkManager.sendPacket(new PacketStatusOutServerInfo(ping));
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 61bfd51..e841463 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -11,6 +11,8 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Set;
+
+import net.cweepahcraft.packet.PacketPlayInAutoRecipeLegacy;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -1972,6 +1974,14 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     public void a(PacketPlayInAutoRecipe packetplayinautorecipe) {
         PlayerConnectionUtils.ensureMainThread(packetplayinautorecipe, this, this.player.x());
         this.player.resetIdleTimer();
+
+        // CweepahCraft - Protocol hack
+        if (packetplayinautorecipe instanceof PacketPlayInAutoRecipeLegacy) {
+            player.getBukkitEntity().updateInventory();
+            return;
+        }
+        // CweepahCraft end
+
         if (!this.player.isSpectator() && this.player.activeContainer.windowId == packetplayinautorecipe.a() && this.player.activeContainer.c(this.player)) {
             this.H.a(this.player, packetplayinautorecipe.b(), packetplayinautorecipe.c());
         }
-- 
1.9.1

